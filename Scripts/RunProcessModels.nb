(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    233591,       4235]
NotebookOptionsPosition[    183040,       3321]
NotebookOutlinePosition[    229403,       4176]
CellTagsIndexPosition[    229360,       4173]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Names", "[", 
    RowBox[{"#", "<>", "\"\<*\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"Contexts", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", "]"}], 
    ",", "$ContextPath"}], "]"}]}]}], "Input",
 CellChangeTimes->{3.895539071756374*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"8d404726-eb0b-48d1-a05f-ef54ddb466fe"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.895542616264086*^9, 3.89554291632331*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"3b9d07f6-9b1e-4325-a95f-cff5875d9be4"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.895542616264086*^9, 3.895542916340404*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"67cc598a-3715-419c-ad39-33b6f65e1ff7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", "$Context", "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891250905264741*^9, 3.891250915510642*^9}, {
   3.89480483794177*^9, 3.894804863605687*^9}, {3.8948052018547297`*^9, 
   3.894805218749214*^9}, {3.8950641140162783`*^9, 3.8950641187375927`*^9}, {
   3.895536793826798*^9, 3.895536795204548*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HighlightingCompatibility`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.895542616805604*^9, 3.8955429165381002`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"563f6066-7dfa-45a9-ac54-e2133bb00c95"],

Cell[BoxData["\<\"Global`\"\>"], "Output",
 CellChangeTimes->{3.895542616805604*^9, 3.895542916540175*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"8b9aca4a-56ef-4065-8c79-997d9f74afcb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Names", "[", 
    RowBox[{"#", "<>", "\"\<*\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"Contexts", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", "]"}], 
    ",", "$ContextPath"}], "]"}]}]}], "Input",
 CellChangeTimes->{3.8955390747084913`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"902d690f-3fc8-4bc0-b421-56d6e0849f03"],

Cell[BoxData[
 RowBox[{"{", "\<\"pacletDir\"\>", "}"}]], "Output",
 CellChangeTimes->{3.895542617747192*^9, 3.895542916594946*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"218a94ba-3451-421d-8fa9-675f36d01cc2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"models\"\>", ",", "\<\"modelsExtraInfo\"\>"}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.895542617747192*^9, 3.895542916618677*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"cb47ccde-0312-4878-9358-d51f90a39bc4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsToProcess", "=", "  ", 
     RowBox[{"\"\<BY\>\"", "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}]}], 
    ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], "*)"}], ";"}],
   " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<BY\>\"", "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<DES\>\""}], ";"}], " ", "*)"}], 
  RowBox[{"(*", 
   RowBox[{"must", " ", "be", " ", "a", " ", "subset", " ", "of", " ", 
    RowBox[{
    "Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, {
   3.895064098804215*^9, 3.895064116644793*^9}, 3.895243642614601*^9, {
   3.895536399446925*^9, 3.89553640030827*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Names", "[", 
    RowBox[{"#", "<>", "\"\<*\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"Contexts", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", "]"}], 
    ",", "$ContextPath"}], "]"}]}]}], "Input",
 CellChangeTimes->{3.895539067459118*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"4a5c3fb4-d8b0-4ac0-a41f-7febf0a962d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"data\"\>", ",", "\<\"filename\"\>", ",", "\<\"lrrNames\"\>", 
   ",", "\<\"pacletDir\"\>", ",", "\<\"processedModels\"\>", 
   ",", "\<\"resourcesDir\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8955426256839857`*^9, 3.895542916640346*^9, 
  3.895543196501998*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"9d21ef2a-7bd7-42d9-aaf3-9fd8fc6c2dac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"models\"\>", ",", "\<\"modelsExtraInfo\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"processModels\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8955426256839857`*^9, 3.895542916640346*^9, 
  3.895543196562409*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"61e7d3e8-4cea-40b2-99e1-1831756c3780"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"processedModels", "=", 
   RowBox[{"processModels", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"KeySelect", "[", 
      RowBox[{"models", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"KeySelect", "[", 
      RowBox[{"modelsExtraInfo", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<FindRootOptions\>\"", "->", 
      RowBox[{"{", "FindRootOptions", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
      RowBox[{"{", "RecurrenceTableOptions", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<initialGuess\>\"", " ", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "Ewc0", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "Epd0", "}"}], "}"}]}]}], "|>"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, {
   3.895064098804215*^9, 3.895064116644793*^9}, 3.895243642614601*^9, {
   3.895536399446925*^9, 3.89553640030827*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"617502f8-4646-4d12-9497-9a22e1b1ed49"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"globalNames", "=", 
  RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"lrrNames", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Names", "[", 
      RowBox[{"#", "<>", "\"\<*\>\""}], "]"}], "&"}], "/@", 
    RowBox[{"Intersection", "[", 
     RowBox[{
      RowBox[{"Contexts", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", "]"}], 
      ",", "$ContextPath"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{
  3.895539079486843*^9, {3.8955428575036077`*^9, 3.895542868277969*^9}, {
   3.8955432077039948`*^9, 
   3.8955432123980083`*^9}},ExpressionUUID->"083b1219-88b0-4e20-88ff-\
fbf066a3d8ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"globalNames\"\>", ",", "\<\"processedModels\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.895542737317234*^9, 3.895542834205164*^9, {3.895542987796163*^9, 
   3.8955430137801*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"eb683cec-d43e-4ed9-ad6f-6746a3bf8587"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"models\"\>", ",", "\<\"modelsExtraInfo\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"processModels\"\>", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.895542737317234*^9, 3.895542834205164*^9, {3.895542987796163*^9, 
   3.895543013830372*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"4d142696-e51a-40f8-8476-82cdf7cb9f79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Remove", "[", "#", "]"}], "&"}], "/@", 
    RowBox[{"Cases", "[", 
     RowBox[{"globalNames", ",", 
      RowBox[{"Except", "[", "\"\<processedModels\>\"", "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"Remove", "[", "lrrNames", "]"}], "\[IndentingNewLine]", 
   RowBox[{"Remove", "[", "\"\<globalNames\>\"", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8955427812814198`*^9, 3.8955427985456743`*^9}, {
   3.89554283762446*^9, 3.895542879902398*^9}, 3.895542991754998*^9, {
   3.895543024587686*^9, 3.895543031437336*^9}, {3.895547557083234*^9, 
   3.895547559667591*^9}},ExpressionUUID->"43fe6290-76e5-4b2a-a51b-\
823823beaca9"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8955428107524033`*^9, 3.895543007934842*^9, 
  3.895543294039628*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"f7759cbe-4c6c-4458-8bf6-614f3492f166"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "FernandoDuarte`LongRunRisk`Models", "=", "Global`processedModels"}], 
   ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Remove", "[", "\"\<Global`processedModels\>\"", "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
    "FernandoDuarte`LongRunRisk`Models"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.895543121137817*^9, 3.895543136900535*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8955431508348722`*^9, 3.8955431667087584`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"20823507-774e-43c4-8c28-77fd20502f10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Name\"\>", ",", "\<\"ObjectType\"\>", 
   ",", "\<\"Definitions\"\>", ",", "\<\"Names\"\>", ",", "\<\"Symbols\"\>", 
   ",", "\<\"Size\"\>", ",", "\<\"Contexts\"\>", 
   ",", "\<\"DefinitionList\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8955431518596687`*^9, 3.895543167130259*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"261fe893-819b-4596-9b27-336617920161"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", "\"\<Definitions\>\"", "]"}]], "Input",
 CellChangeTimes->{
  3.895543174440559*^9, {3.895543238418992*^9, 3.895543262720875*^9}, 
   3.89554330599524*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"5e22a350-1f8a-4331-a834-8def5304b4fb"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"FernandoDuarte`LongRunRisk`Models\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{"OwnValues", "\[Rule]", 
               RowBox[{
                 
                 RowBox[{
                  "HoldPattern", "[", "FernandoDuarte`LongRunRisk`Models", 
                   "]"}], "\[RuleDelayed]", 
                 RowBox[{"\[LeftAssociation]", 
                   RowBox[{
                    RowBox[{"\"BY\"", "\[Rule]", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    
                    RowBox[{"\"name\"", "\[Rule]", 
                    "\"Original long-run risk model\""}], ",", 
                    TemplateBox[{"22"}, "OutputSizeLimit`Skeleton"], ",", 
                    RowBox[{"\"Properties\"", "\[Rule]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"name\"", ",", "\"shortname\"", ",", 
                    "\"bibRef\"", ",", "\"desc\"", ",", "\"parameters\"", ",",
                     "\"stateVars\"", ",", "\"numStocks\"", ",", 
                    TemplateBox[{"10"}, "OutputSizeLimit`Skeleton"], ",", 
                    "\"toStateVars\"", ",", "\"uncondMomOfStateVars\"", ",", 
                    "\"ratioUncondE\"", ",", "\"coeffsSystem\"", ",", 
                    "\"extraInfo\"", ",", "\"coeffsSolution\""}], "}"}]}]}], 
                    "\[RightAssociation]"}]}], ",", 
                    RowBox[{"\"NRC\"", "\[Rule]", 
                    TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}], ",", 
                    RowBox[{"\"DES\"", "\[Rule]", 
                    RowBox[{"\[LeftAssociation]", 
                    TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], 
                    "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
             "\[RightAssociation]"}]}], ",", 
         TemplateBox[{"132"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{
           RowBox[{"\"Fernan\"", "\[Ellipsis]", "\"ibareq\""}], "\[Rule]", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}]}], 
       "\[RightAssociation]"}], Short[#, 8]& ], "line" -> 43, "sessionID" -> 
   28991108881286455939, "byteCount" -> 8180736, "size" -> 8, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{
  3.8955431751594677`*^9, {3.8955432390563793`*^9, 3.895543263624837*^9}, 
   3.895543307177307*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"2e229348-49f8-4e77-8081-a2925ffc177c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"myModel", "=", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Models", " ", "[", "\"\<BY\>\"", "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"myModel", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
    "\"\<nombond\>\"", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"myModel", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
        "\"\<nombond\>\"", "]"}], "[", "12", "]"}], "//.", 
      RowBox[{"myModel", "[", "\"\<parameters\>\"", "]"}]}], "/.", 
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "_", 
       "]"}], "->", "4.5"}]}], "//", "Activate"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.894885485621902*^9, 3.894885534588274*^9}, {
  3.8948859659038887`*^9, 3.8948859660757933`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"41857172-5d13-45da-aa26-355e76cb43e7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"filenameDumpSave", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"resourcesDir", ",", "\"\<Models.mx\>\""}], "}"}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"DumpSave", "[", 
     RowBox[{"filenameDumpSave", ",", "FernandoDuarte`LongRunRisk`Models"}], 
     "]"}], ";"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.894887398621408*^9, 
   3.894887407714746*^9}, {3.894887644533154*^9, 3.894887645320415*^9}, {
   3.8955431161579857`*^9, 3.8955431164299107`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"399bf9e1-863b-4529-a74a-012d41e91008"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"filename", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Put", "[", 
     RowBox[{"data", ",", "filename"}], "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}, 
   3.8955431197061167`*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.894980150869541*^9},ExpressionUUID->"45117e05-75bb-47a0-8081-\
f1683368955f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{3.894805748488215*^9, 3.894880863900428*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"b6328497-0bd9-43fd-bd5e-219d8a08c985"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"17bd1208-2f22-4ced-9e63-7ba8547d59e6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"filenameDumpSave", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"resourcesDir", ",", "\"\<Models.mx\>\""}], "}"}], "]"}]}], ";",
    "\[IndentingNewLine]", 
   RowBox[{"Get", "[", "filenameDumpSave", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.894885588734708*^9, 3.894885599330122*^9}, {
  3.8948873926284027`*^9, 3.894887412437359*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"d3c91b0a-469e-4730-a4f9-76fdc32b8381"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{17., {2., 15.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{17., {2., 15.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"2.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/1c47a93c-9779-4b24-924f-82df82023364/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "DefinitionData"},
    TagBoxNote->"FunctionResourceBox"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["134", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["134", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "8.191752`", "\"MB\"", "megabytes", "\"Megabytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Contexts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Parameters`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["70", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: \
\"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["9", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`:\
 \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["17", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Shocks`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`\
: \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["7", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["15", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{8, 
                    Column[{
                    BoxForm`SummaryItem[{"FernandoDuarte`LongRunRisk`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Parameters`: ", 70}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: ",
                     9}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`: \
", 17}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Shocks`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`: \
", 14}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`: ", 7}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`: ", 
                    15}]}]}, False]], DynamicModuleValues -> Automatic], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceFunction[
  "DefinitionData"][<|
   "Name" -> "FernandoDuarte`LongRunRisk`Models", "Definitions" -> 
    ByteArray[CompressedData["
1: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
qfeuhLsfQuh6rokOIUxGQ25BbT0Ppc5aj86FNmVBlOccRhesfdKkm5E9st77
N1NI9g9Pic3/QFNI4ChAFbSbR6iznLb78+ZswH3A48X65iHA5lz/7hoA3LUr
U9IB9g4/OvI33f1obb672d12JgStE5ZauT5eOPO3zIM2dJYXeEC1KjOt96eX
ya3Nrp73o8d8l36OiwDH015+0MPWVLyw55wY6GbrFsm6dLm1weN89Hh5mfoy
Phtn9rFzGPC+6UcEW4Th7UnDdAC7c6g4KEyb8tvtjDP/st2x8WPANb/nQu9R
4z0INDZ1J4AInECyfsv/+HCeTEi//HA6lX7lY2NLn5scD7itil/RWdzehfZp
xpVnFzM68nOQQIIJR/CmUl4C3YKcF94lhGjenOyOK6o3XvOmLwZq7oL1Ni5q
Rj9UODNuZd5vbI+rmuGb4akjv3J8G1N/p5Aq2u3H3EzN4P8+IicJsZbfqre3
Sm7XF8uNV1kd4MGxe8dAxELW40xDH0G5f0Fp5RWlr1yysp6+7OHBenVXlH9J
5S4Xlv+tLzVAvxbikGqQsNWF6Htupe/Lu+sytPrgPpMU7t4IeelxM9N5nM9I
yPEE50A1Hk8p+aHaMiNBMKr4xtff+rzzc/Q6L1+xGfJJdslevhHukoXISkgz
GaNYIm9GkS/xIM1ShiNOeGdEjnboz1QlfikXVWft3TVRxOGXlW1v4AV8laNx
LjHz6ntKbXmBulCUg0U1k3z1PTv6AbeZMeu5lUFuSiatTLDEyqWP2Zq/YDmP
pBOrMthCsTicEZ6kaAUaFPhkU6V6IVaMi1uBPiUX4ly2+G55PFZ//dcMB0Un
83JxLpbUN6tQ5A1l9g35H+P7D5gKFwfP1Ico977CGdJtdeWIbFXIUGbd9DlL
4jeTFZQ6AzjVSsWCVS3fTKRWGteGEKdp56MEhydBbppTcOtyAklXc4ZD+Ka2
rAleqxQLm7yxIsFr98uRFTH3Yt2sJudnk9aYqSoMayw2SG6G/ahd7JpWrgeI
0wuMzKxY3r6K00uZHRE1dqNIoOGd0QnXTfNxWOQWugulDnlYHA4rYf1oMz1z
hdbYVKPNPvCt3YqyJk8tsOdg4pHk2pCqAYKlXWQ2gX8NvQmfDREM2vtzm+AK
URZn4DGTkPQJ7NzApzo0Tdi3oklzdbFNvFBNcEuQxz7O7Y0rWuKqlAapu+iw
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
jdRB/l5vYdsoe9X072R7p9x+so+To49KkD2cLLFj7LR8ZI/gOsaNWr6Y7SyW
vM9Am7JeY6k5neks5naHXuIwu57fh8OzenZS+xy7zT6vqfq+fxLkxzbTPBdP
Mzd/DdrydvRk++i7qfxevKGIx7zi582cVm9+KWmban8+HXK4isqS68n43v/z
Pv+q78+oU6v7/DZy8c4eLX950dgwYM/vd/cy696dVtP0Oab5vVei+Syedhw+
MCZ/13T8jbfc1+ED9llP706vzW3iflyjMb0gDdEyXhy7jeFgbNyOpoe/bLk/
3N7/aeT023rfzDTTwypg2+ED+j1Mup1V5fM71HkEUmaMnHrEzq9RbTQIzYYL
n0O7NRC0ejDbia60DTKy1MYZcVJ0JiKzDfKIKD3agRt9l+vKf2UdOw25B9h5
mB+s+qyTX0+WQp/m+nZkhA88xR/GbSaUSx6aU7G+iekBNL1nfoXiPcgZsBXu
+i5xsATHt8OLXYnM1wMAKAkheR3I7FcjDnBokdUI3j5pJ7CctOS3/OZpMZhg
V1oQmCTQh0r+hLzVcwaWeILAFyUBQeAf3voFZ7AEdzAuw5wRofVMQdbfNRrL
SrhulOsjXqIjGnNFvBde6102ARDBR8pHSGJPYeY9OaTaAy0VSGVAwZecZahI
DzEk8pCWwRiG+9TqZ+gGigmjlUQOA7+z9WGaoPLoz7R4apFLg3K6swp3ZHJn
BXpqYl4xbQU7RciXExaHxzSqxwDdr0ZXH4g4TNNAss4SYyeXxjOXGCVFSKVP
kCOcqB0lX8oYQNV/wQq1NjVJuBLBDP2FQtSOi5pTTiSJKyG9DgpR8HSljhmW
i4nYu1kN8vJ7OsZyowvdOh8hIqQe1MfgOiJjhbV49tINOFkjyRwUVsUJIVcL
IW9jMBknRoNL+qdYy3oKzt6EBCQCJPcRabaQm44MX12GRri1Kyp3UAEt40+o
QzMSTJsg39lcdjRqBYosUHzhOByH2SMyuYtzOdWwZgMWrdiuQFFYpEQs0VbB
fPtRhAqIFwG0jRLDhTVZ2tlLbLHWzXaZK0Gb48zM0nYohzSsyxR1x7GhVKn6
0lFR+nQWU2omtV8H4q+SKzAA/lij4Tl9H6gM2bF6XX91VOk6E8bPyoDoKymZ
qwyn5T6e/OFcfjcSHTbA+PYu3WOlys9PogPhxT2BtHKbMchyYnb6uKgPuks9
23NHHavoKSoV0UGWHMjYkXGY9+5NaeW0sQYgjv5RPqfCp39I2XBECiwjHZcF
3buR50Gk6WBUyGmYuclQID5rqAPmjGmZz8mhpcRgk+qO7v2m1ir48eAdwJu3
UZldsbRGIXGA5DakiVKD9wUwBr65lUUlcF1qQLnAvcAQHNIqMmR3uBCQXKM3
FDWyElxH3Y8I3BkiHF5+CVj4COa1OxcQfygGVjyEUkgThsCPJTE59rQqm8Jg
lko8JmrbRBveFHOJlGcIkglJkClH0MpkJfIGHt3CTkVSVnCk0iCinTyFz5s4
HBehA2cjtW1oyHjrTwlovsCfMAYrI8HcJIu/FYVk8X9SiQUUkJdU+uxGQlwL
lNuiywsd3Uf5DSmAw4nqAaQOBWo5a1RPEaJthLohqIkheWsTEouMi3q2rS+y
x+JAUH6AHe02m1MGAdID0FAFXOjFNQlE4rX17xTX7GkQ1SQLKn/iQ33gXTLC
YTOOeHA6Gp5xIrFZLhqM4AHNFimuQfTJEZAUQo9RFBBzUqouGowR3EQZEpYF
UiVlzCnkHFvjW7Q163UOGxblN6lc6PmNRN3MPeBicrpySPZbjF4bugapOrSh
oGWylkaFn3IBt8elIDdO6SYPAY3jDrBKU5ItjhWmM3IY4V1BT7Jlgqj3M74r
cQwvdAqwJSyb5s2eHgFytwNLzDBEvJ5AVi6tKS/M1EjZ8M49Hl0DI+xYjqwn
Dd0rOP3+fK5cvTSK7DTQ5z5P1ocZgl2Tykoe2IjKT/vW3DIo1U9FQpFPd9uF
GZTky2PKhYRF8Qo3QwsuvzPS+7Ukom503LXphSETb5ObHgIEzB1Nb4J8wtXC
5G4TR5jtNUyk4nUS0qmzyX5UmiLuX03amfzjWeIe8su9d8ytFIgQCzW6spSJ
QnbKqrTl54CLeogvDbxoMpS5ZFEylNOWLlXmY2mEVxtLEVfR0mMJPMiRyg4/
dJ0ebFjiE2R00CZiHcVNEMlUhDHwpK5VkJGqgtz2k1hSlVgM0owfFgeI9t0m
zBUcRJSuFd7SbHUJvCDxc1qobOIT/hTK2xxvuA9km/Yimzz+ud6vJISVl5im
PBeaAVERiDZzGLRllODy9vR6qPhTMBadGCpvyNR/Or3aTUHrvkXro2woeonT
6FM9aBm+GDnnHp+bbQRnCvx1uAWcPtLYF8qrCAgC0vkr6ogt3HPu5RX95KO6
pVB6vvZxnGP+Xwq1wL85b4cuV5iLbIbBTvhNJ/N6qRpNzK7AsdY5bnVuPB+H
/xpl8GQa4azAI7vCacJstThR1bic0URQ+nNtcOBkATY51iJ5KIcymmAcxERG
xSrqSIwmxfdgdCc6c26TliIME0s1ooYdXouNrmquUhP8JcdzgetX5TbLSK1a
6u1G6DEM1cSsTre1pGnlhBaQSbNEAS2IhXHRUgVRqfT5kEm4ATRIyYN9ZyaJ
FS7utDzjenuSnQjnKJYgeE8dD3YHIU6EcrcJphrO3WJH1NSOF0OrY7rA8Wsy
5DgBPZ6IUpVuVxcN12YUWPjMrj2qjtnbyIO8bxpBNn3t78T+NxCKzyWUA4lf
NqB8Pen2j5eZNWUoNSvAbpjWuMbVA3ngRwToc2U/yddstFmVJdLfgxRXL04y
cGmx9VjOvn5+ceShEG9U3ZIx4GwZbEApjXe0tJWxoDqL5IgK4zvnT/uPGXpR
4edJY+i503Sy5fab2yGY+k2MMQsqR28+3k9K0YrsTAzNqHF+vzXQ098zOG6R
d53yUe16/o22/6Y3LVHKZPkbbR8W9dfqFllf1Rdgg2D5F9qeyu9mTfaQ7FT8
DvLTyydeKX+cC5u1vipEw3vA0a8FZxc8dD6a7IjhPSV3TI8KVWfO7FSKenGN
K61LPQr3rFFs00DiIx32P8H2vhppFwS83W16CyFFdF3+vrAbJ6r14v2DWhNq
uLy4AfjS6lmuoz63FoCair9feoFhjpkiFYt+B90FYh7WODAuVMQS28NGUFMX
kVsd0W8vFeVThaSsNQmp0rvaDfEAAXN3lRU4rpT+dv0POJoIJvHDCxejP2Pa
TX8yLC9ZmrOHt3gY0YoO65EXW7gUbdn60mRrlWfzL4FHyk6q8v3PXIpykqZS
oM+jDpunLV+U0DLAnM1phGdfb9jeZ+qW+I7xMwqdVHYJYMWEfmuxGjRVXJQE
jvXJ/zPPtJAvrdKD2uaoBrP281u/nRfH/tR/SRrSFiskK6uIqSxtiHM5aa44
cWObebQqWHRLYmH3Mcdh5P6C/fyHXydy8K5Amd6FmNhAx3XL3PRCUhOGDlLL
vHRqYGrbxSaakwyFUWepoM4ncykNFUtNEDfqtVH2npfmWoChZU2Va0LCLson
uhmRhAY/FCnGhZLfd9h3iGBv4s0X0P7CoS8csgiiniuyTIMIuNxSUcIewPvl
6OC0hTwleJVnqAQHfVD2y0pmganb4TFhNnz4WX1do6dWLWUR0keB32YvX0D+
YCbJoOTK9z26ivZQ0Oa6c4lb0IaU9aEWNrYZNvbuSYwjVwCIHOe+HsvXYZ/C
Fl+LM4eJ8OzCuoWtRP4QV3g1yUgmb3ltdVqqlMmMapNZxM7JFwVIsqysegSa
zfmPlPoLw5QUZupJivK4xeom9jVQidOMZpdDaZxVXZh07fijHYA2BYsvJcOH
JQZNo17EnPgfUn3knv/S32sWX0ZeH67hyPzz9gOdv7MTY9J2C2doGydbD+Wb
59v+2oZlSvGyWq/2Dfui7Z1bpWYN4K2adKVK267edKq3mO+t6p6TrrNf3CUf
z/5SsTmh+UY+4l7d0/r1Zx3i0ybdtApfNyf7MNrreuhw9QZioOFLfQCgY7vt
78WWXWN7Kx+/vtolTx92T/Ln9KHilf+rkz/7+xF9AEzarcZ/stu/IV1WLPij
Ihq/3kjYPHzb7+PgFjCyPbG89nVQ6X87X/kOmLgf2D0gf127949fIlmuydd/
O7wqGgFa33y1RjvtCqmtsFl7iUPkZjuynj054YLb1FDv15ehc4bbrLRBlUe9
wY7TN9x2kGwJo5XPRUxPVFeT2/2IQiGE0aq1uqJml6JPivLF1nweuvF5sOLg
LzW/Ehay2tiAwCRjYO1mfu7bgHDG99gMP/fpG9A7d3BxVPFA9jYtoOIG8nvp
5H+v5O/KOog6XMcei/LOfRzJ1cOBM2/7oTgVWeXscxydlmToX1faNpLw/bwV
vftSyY/BN/X5y7dzp2uUD/zqEiQtasSnte/RUAUa895wwYRnMlxxSG4yfF0H
/8rBt7Uj0emFmwqs+Qlenjwl+W2rgKdBqqZlKXmSXR8WIi1p7MaI4aPAP936
dy6likHRYlWx0SebQDR2I57rP2mDfH+leVYwze0GG1scwP3WmXhgEi40dGca
dvyU5Vby+WnE/QQwnHEnoTFsMZyN3k/5fngZ70C0pVufCCqolnPLfCUCy4AV
3103p/RkMopKhVmE+iIV3rkLP/dwGSyBPHslzdGc+/rNt6Zi+vD5bvi4xQZz
eh8qv3fa1muMVJ4YPrOV2PEb0R/M+GnaRP/NMIxRoxqtPl5o9kBIkZYAZyH8
LwRDB5vO4cS2jnhAgkJIImwDEX4tF3clxSuFSOLcgJyOkBhqzEz+d1abEuGV
PlHAmARLWX9cM/qAL3BiB6NAR8J2fCAxkvoFnFZT7SDZ+pNxVHRkYeKEZj+i
UkYUbNzgkgM2ISwtEFI5H+XkC4wS75C8tBgF6LMUYwFS836I80Q/Eh1XHXKa
gyKYcTadUrJxgRGRpZgkZUwQXAadSKaGcesGMPRTu6IvT79gG6bkUZCTfnqS
gYSauK2A3JvYX7N6Js6NvJkbdhJrPGT1+0t9HPp7wfwKpOi1hqxeNWaPOx1U
VY6r1g41BZk9rr70fxAGvuCeCoKt/X40Ts2MCIbESTp6wwA4ZJKDlbTSMdQJ
KHJad51fxsmgZq2j/68gBo+T/98ghqpRTAFyEZe+ym5UWJzlykYUlxA54ryg
cNrs+rCqyhXcSNo0Y/x/Iwh8yqLQAUk4RNHCJoMG94n9ghOHkDdG1I3VxP2x
O0UxhR00TkF5o4H/BFadMclooiiK0QRA6GWrBCURWh0RoHwSOO/mDMvDn10V
p2r0/4g0zfi6qCQmtS/OSAkEuqvPFH2vQQiVWMNI7lbtElOGjmQwW3nHU6pg
elBJgKU6FB6gL3HQ/fUjRVenjLrR9iD/el5hCtcBd4PTqThREMQqLwBE6nOe
GrpC8Kdaxy7Lsks7US1JENPaYmSk/hNRnfhIakxuo3JEEuipmS/W35nkTrQa
ygv9bCwrLlsRIi0tW+dqFuFPmcwoWtA4ElTyH4HDKWhPYzH70w7BbW+FhpDf
JLKz31Ilyn5dZ0rWARytoxMzAW23bG0CSDxvU0q27rzShAI7cpWTeO4SC6Ti
1DEF5y+MXTKBFpkZ+HAVfEwnySJTc/k8uk+575qWWs3gila1eEgsLuYl/RY+
v2+YuMirE6OFjZwhqtWZ0UbZq43xvn89Gbwc+xj5GAsJoNX/Eb7yg03Umbu9
c9OXkQe/CwtPle3tdur6dwz4AI32xy/U83aKawZ0J+z6mssx6+ynJuUF04eV
Od7T1BBdFXpkbEdyUpG+hcKEKCdVFCSqkGxLdtJ4eMvnkTVE0dqEZgZhekhE
z25gfg5uMoYbeFpYX31GoxE4K+tiQy7P8YdVxlUu3gKCxzSPKDJaxzpkds4o
Jp1KcyErEl90SXedwkwcXEwp2L3fBKZtchn4bpPue0YgqOhWRL2W4AW5QJ5s
SkKqDbDLmmCfrXvFCoPsnGx8DKQEVHTMs+xnyH+96cMnsTsOkGaFD6O1fo1j
sqXVnIRSRmnhmPErZPxTsv4TQjRPcoVCjWW494UI2CcXdsbKpS5ACF/iETV2
2VZZvk/EnLF4TAPm1wukx+bB1Gp+GGJJ7F3cfpxW/uF4TliBNOgGPndk8hyp
g1QvKBlqv8flxExRNxFpkR+mdEb5+nP57e41vT56eMoTpEq6d7iRUOVVN59u
+QQTcV3eBaeqRYD+DzvdYcF73fz2QbCDpdjkuMJGcGHesZb/fpR8iwL7hRY6
46Y1PiU/RlvDSufzxAJYVWU+GCOc7mLUuyd7uKTqGDGh0GOoEIbwW2Wx5AcS
eZK6+RKOByz1ZiIUVdHIHEQOsTpTxdK6JNXkDaxQAIoOuGvlp0stuCVr/TBx
AU4Gu5JRVKIigLqAg5z2EkBbGZmMKALVehsCmbNjDupap1yYRSDFjaHsgEqW
h3BGWYFMfDzBad4DN0mB5d1qOvjoVEyoJERwP5VYptEqcoEegMUtYQThiFfv
CE5vPvOT/3Ay0IMHnrpKDAF98i48bziUvWq0gYwNKfF11CGV/iEBWI73S0O7
bYC40ahjPlZsnQWJB3x19FBWu4y6p7C0Okai/SFllnomhEmcKJuAUIymXTQ7
F5q1dZPgaaC9OnINNID0eDOZ8YmLnbdWSSAVcxBZtGMuLpsPKxKpVXZKhNS0
vJRlOWFOqAO9KJsm0QzdGetJ4rR0A4hUVgkeuIv5tRVksrmagE9Xh7dVw7Dv
IApcWFGINHxEDoU1GdJGWJZijzQ0XEI4Xikq2QPrkMKSy277fARl5tVaNJYA
+wqxiIH9TfTHcnNnSPUcFWq6hwE0MePtjqr7j+KCynzWNFHgukq/iZXZJaw5
SonnCtg6kt1yXjB0355EqZ/x2RRWFPld49gJChbkoaal+8Q5YpxSGXG2jIL1
nWbRuCs3Yi13BonMH8T1dmG4vVI7PSuMRyBq3n3KdBNW4mrTH8CucsoUWpA7
d4VjSmoawiX6pH/KaVSYNkkcg9mTh5gLz6nYvOZ+9BPSwmJu9loDYqHJB0ZF
HtpReUOaIZpMhlrw3Ns3uSkmSZ8ldCyu007c0C3LLE8ZJM/6kGLTY6+0qtsB
FSXjDHG2o9DamIQoqgvOfhegSpIpvZ5ayKkso3uubAlkQ6iUhE0T6nMsKSll
qgcB7j8Ug/jpM5kUeXTSKiOQdPS8KJiKybXrlFngmMDduGRwYuPyr5qWhHlk
DYUpxsnJ+ySZA2UXFVN3bpYpEcyFKGQUdZPG6888cTC8r04ZWpdrYmXm+NV+
Hcn90U8RSS505rhtFNBgI0eMKhYUu0TVRR7hOLEYUyX1bFJIlpcLSjILIjJ6
XRPmAmV+VlMc3KsRP7bGT7R8IOSmEDJnZuxtNoJQE9hjwIuBGfHld4zF10+a
6/4dfRJxTtj2pwTCuCTKSxgVLnByfGj23byZlivR7XT+ywaaWUnLosV4bcxp
ud7pTKkhP53AdD6Nhd+DIu0cloWItNANkMkiO8E4FAWdWy+u7HYq7AGIjWrt
GxXJKVYBpWSCoPyN9/7gmI2ohmJYlUalhdVibZMzvLK671kzGE1LSPCEw4y1
1jE87Sw6jycPMZIsAe3Gxp/BEitO+ijWIpTg1b1cLlh/ut+GOSpxKFpiLZUU
/szgus5RhiF+pgQZzO1//w/dD2OBRk8TJpl/heMFU6ZWFaFz5d40Bv6797Dj
DG00tKr0f8L9X5mK5JHNpTFL+USQ0H0pOxOoiRw1vekO1Qfj7BNe+mVpMFLX
/xPsh7h/v0mF7pAY0jFEcQNTc28mmH26iq62WfEFlj4/3t7R+TfaT17aKXG7
Ay3WsminEL1C1lMhzXZ/holKcGmK30pzkcKv6yoK0KZqKfU/gHz9x4hElvJY
tcpEFWx9cVtgX3oBrR8eEGASPt7wTZLwrA5lnVDXAybBzr89o3MOPeFJhjmq
2Htny6MDtu851XdOR4SxGVRhwGvbWDxFKp1NJFFwfQfB5pLEZi6ZyKLriQ4Z
dKqYXFV1raCZRvyC/mFZPSuVYlkrv/XQGjaVpOyXmWbMMLXeEdXPsJxKXDoe
a91H7XpFV+r3ZFS9q7MzxYFMD5VcbmHvCKfpA6WeaF1FqLXAJTSF8V8kPwyI
ZIJjFYr5K4rnbZmNlTJNzamjp6vqNsbGZLuv6JmFVv+PkhDBw/MOlsNzqeP4
1925DSTgMZLd4akziPFK8ba6nS9Nwp3EmzwNFWPraBh7rQUydd2AzCk/bUFk
23iXure3D4x6CP/QyXA6Hk5Pzgxnp8Pb2suKImZ47ZaPn0uoNU3sYD2RgVmX
PIH/gvfdG18y3rVVMasaIfl7nI9P7L83+T/2n1Hr9GCu2ZpeKWbjIpAMvQGM
Nac3iJ3Kj8IsLtqt+PxJ0/WHBNDH8z0fBslj1Qo/Yj4mEQs4WTpH5BHsfyT0
/ywFATql11cP6GUzkt/4re2PC+FveK6ggdEUkc4cPbOjQRqh4cpduAnF994y
ZZL+wlYuJTzAjhPMJ3bZjcFw2+QS9AN+ca6gsSZCXASoWDw+AJ5wHqRYCebW
aLlyeCbCJqXk5+6OJrt/E+lYn+kU5K+byONYKeBlpc5bIH+pApehgWM10C08
JK6Bws811IkWsXT7ReTBiESwFMVYCtAOGcjikpYOGaJqal9zV5oKY03c6JK4
ITx/N6pYy6sYIedgsBjRUJGprSC4drNZVf9fRZ1BFz8g7KmRPLoug/mQHpoV
/PCHkfRTXxI9hNpN6wJLmUROwfXKnH50lUlLeIA8ARC/avgrNJrLl2MLQwcN
6qBkW34SZ5nde71VXWmITp0grA1AbcqKdRkVqY/WTYFE4dASNaNk8N2ugXf2
ZButIKBA/kBuqm38eWa/ckBcDaTQDoGdVu706DJj7aisjVhGC8yzRnvfzZEs
8kvKY+V8Xy58OkzfdG26MVvGdmQ63zSrmQ2ADZb60RqvEuzpsU1EV9VJG492
Xfrqi4fNwz9VzGKwIl3gL+k8Rg/J60XODcTnvZXru5SrJydXou/LvT3lRIhq
2/A9MBHdx4Mvch/aRrf+/VCQ23O3yOD9TeB/3ejP6Mv1+6GHq9uZlj0UhPT1
aEDv2cjFj6Ndg+LPObzH5lLXn7d9efq4sAacPrHXsv3htZ4zn1snpgt6tMe9
O5v0/1bBvNzUrpAbzb5xhhTV8OytfJ0jj7tky+HaOvh2zr5/L6BfSY1LDpO2
+HtwabaiV22tWnjVtpxQan61OW5oKTNt+zDi6MiRDUT33UR/GVab+hUrBKZY
mrC2fbdsOX/faJqqr1MPHFLejXzntVHnn2tdVMT5heqY6KvTD8mDHqxOPGVp
9KPwPBfrnPcep/3AGvYQHsaQwW6964M3fAYxD6pzIyNYC4Ak670E+02fEf8z
1YZGyJ4spsmAGNGFh3rLKH/ut6tugdYnIhbB1pupgmy6ADy18RQ9HKG2DZtK
/9UzCYaBGMFOZ/QTlsp9dchm9I6uGMFZVtRMXKxOjRA5Us4mtGrewhDrlV/C
fT1hFwQeS30Or/fswF4LfLZTUge34dhAOiVshyLiWCGDd7V0XigcZmht4fil
t6GKrASDKWzI34F9NETDW1v8Ip1s9GinVML3i1GlkSgg5JLeQ2OIrjHgPcVb
RnDAf4roUgaS/xDRiPhZrjT/LaLtOqShAaIC9z8GnxaC3Ih7KtDESapXsBut
DCNlmy9HUNCRJUnTGkKIC1lQMXEiUz0ex8GhVOGtXzL7Bt3qmIQIW+NTEFNq
ccmztNFSHWYjs1tDoqkwzl0SCnCQUZElmaWkDFFsZlwItdhhYGp/oFy4Btd4
hAQ7MSdOgh12Mxy/vlbbdxBT+BKDQ0n+xrFTsHjhvpHgdtSZavF37JyECK2W
onH6KKNZFiT/l4huHipJ0JUPUfwnsX9deEIV8dxaOxT3XEQYQ9IwIY1hMAAK
xflEauU05NQvORGniTwXRdYW85s28VdrIZF1Ol7ASFzImJmKIY7ZD29g5Ssf
yDpOJesbL7fCoIEJU6Hn8q0yc3cJ9D9OSiQyEZMS8GzYzcPXxQBTTgzvAuOG
C2Jxrzj496TfHUljqo0iMQH+XjM83dRsI/lBDjpFPFTlPYzl0fRehJa+Nd1e
Jo2ppzHQCtBmAwPeYyAPwZ5A41nufDkJ+rDgdXEBNibMGnjAwVfIkO3hQjuL
CvbHJvrNKnVoe7VOPbBnEfeoGqLh1KeVoSQ4IAOSyG2rCl1owyeU8sMLSCp+
74gVHvUpiS4zYeoLGpGAfH6ZTFPmOaoEnq7GTUdIso1fPearke+xvDqkj6ml
r93jeeuI8cMx6OrIvXK1yLvKjq3isG47Sm57lbg4l7iYcRGESwsrdUl8lhLB
dEqRWS2eQig/8vM4IV0RxlK4i/KIXe7QUXlsiiZYbUwXx36tOJHOChNhaWRw
EsK5FksngOyQhI+K0TAZ1ZqSDPxbgodLhWATBp9TDtiwtu02X69roBLuGqrU
F6RvwLhxtUngxHjVwmStRkbfBgW3EDfOBqcX0xzItareldMdhD7+vHEFmbmp
ibnLlcKWFwWhFwYJSiTwQIQE81G8uHcy0oe/Pi/IMI+eEG6aOU4sIyF3rchP
CQC5Bimmvm2GD9lSoyiU6QiLL2Sitdat7erw1waiorL2vjTIpqCylrDGQS/L
2RNdXsv7L8lePvCPZD9fyw9iUVn+1+4Aj6kvdTrWnXbtmonKdWJYlpYDM42D
OxGerdpHuYVFk6qRSUBvvtlsnyDmWwkq1ODLVyWyrLJDaFSCsptLdaRvZSZL
NEXDTPCJb9x2LEdTdHYupdaTOa7uz+kwETNaRDe360sFmc8rTEmbAaJ0dMOm
YC3nrPWKY486lOOses+VISD3XOSF73oAgRScaqZg/DkxayYwohPDr/Y8Lxkk
OWTqdr/71/FXPfMiG9nsISoWL0nl+ZzE7/zH11VTtxkNAFqYiAWiBt0JLbSj
xnDXq4/L3pPJl/GXiVBvak2g8AVwZkEbru7WVTdGTrweXDwV9ufL0bPMv5MA
rrooXRHY3bja3iX/JdvnqfmIhTqL3Lq+ixoeV9DZ9uSkIoLKJIlRD8spSFQg
ueftpPDw567im4ijDIhtDcP0EIjufH74OfBMtkKQ85gZiBw9c983JbGVVv0O
W8dTLo4P53zjigxa0N+jzGgcHJLbOKDAan1dDlmQ8EKWvM54L6su40dBLqRZ
lrwfiHuV05EB6rBayjZu7QeYEbxB/TInJlVhnXDIVp2Jp7aDFvVJMt7/oQxS
sMeE7AvgI3y8/v0Dz7kXLUpfRhvjfGOQa50ZidXMMkJx1XePeFMEg3eQ6No3
BuW83TAXK6Ev54osbLHdPXlGfM7HlHiRmzUZXtHrIsKRbQAfH7gms5OTe4Fh
r1HxyeERj7xRZ3VewSUy4N2YPEGpHVQOKr23UAijxhezfUG9sHCB3lhS2fVd
j5Xv4/PwfK92Di8Q2vlaQSZicXO5RNpV04wELZm3BBruxrq3aoLDoptaJa01
YKM9YS4hecmglPwVLeqFbGQYohhUhBRF9iH2bcm0Um1dfJy+mDbG1U5XKTnf
atxcMGZguVFo66vKcC5lVqL0hicQ4YjBbzwiMecgksTtDSVcb39cLaSgnGKW
GWSEopkGmtWtPipRG+CQHDSRF9eU+3OJoEpsyUMkWfheTEpGkcnKRRTluLDI
tzGUNYEpiAKYPQehD/kjJo/OLSoZWcQSwhi6uh8URYjX1NXowIfz+KIlEFPU
GL4lplVvmkVECtKkW5MJFSYt4hNEwRhC8oJgWphteucQdm23JIsTIf7YsGgR
ci9I8wthofWmGNVzaVBMiAkfc/oulI+pt2wE35ra3SNEzca9fdYiUyxohAC7
rdOS2vUwDWUxBVEyrZvJazHGvsMp9GGQ8zdrqorfyYx5hrLojLQTmyrDc6G9
jpJSm7Q+gP0F+MabshSbdKY9fWiZS9BLKkK0xWWVI3iF/bzdKuTfEt/rU9Kg
KKDRfC+yQNdyRA4/VgRqw9auIJFJVSXjXMIyfzN6Tg5NUh3B4f9W4uv/mUCZ
8bzonc+Fe45QSo/2BARaa+sJqVumQMvwMIQmpHvclHeMaikuzRAzMbKmSYZr
LNVFSszaocJWdVh2KmiGmGPsAQ3Kt6JDsHkvkct6GfTOPCQXsRgsHuGgLgBU
j4BId8u7xAbVqpSXAGYikko8jS2EoiQoa5KGpAsvESWKcYnF+3EbkMJ6inrs
edudiiwMY5hMmJod2dsiUYY0vzyb3A9GTTUvR8d/O5dMW0KLwgDr5LBoUjVV
9p6qj7kTvVDYYXbml+uGucgOicl7CXAUhhIa47hbNu46MMXIiNRozwaD4sfL
2jLtacdzb9rZoR8lepPQNXJquvAXNy40uqSTsEJFi02aSdOpb84uKptijLCB
xVTFIERRnXHyu4GUFUrt8FRBSWOZ3HLxyCftRSX/WjuktswYH1+gcurtCKTo
y02T/U3xXhCVlYECAP9fHYAml87MxvtSChtI0dcDEg5Lsto6+3EknC8usD0Z
yFDKcmslTTXe+B/Gf3hxwZ9B7KSroeWdS45rpIik5jizPLQIaDKTIEXnCQBP
UdWRxjgujQfliZ1a/+UmCCLW+VwS4gZhTlZTGN0uA+6b4MdY3n7houQ3/MYw
0K77QU3giAE/HLrfnds6HF8jabk9Keoy+Phr43g+uE5ZtCs/KkzA7HDv5JN5
HQ1XsuPB0p8tFJOStnGd8dKkzVqT07VsVUHmV/2pdAY+T/KEKzhWApJSx6xs
RvFhupFoqPwqgLLjgbBzVkx0w8CESF6ZKgjld3CyTLzvW+s0JHVU7ZI0Km3s
OiubvPHFxW2n+t5QKgKCdxwm3KWu8XFbgWV8SbCxFAkYdya+bMYwINELoJ0v
wbttvUiw+nC7AWtSeFcwz1o0NuCd3m6bpRJD7EoZ0pfd87qalvbZAMYSjY42
UKjg/rMrVKVCTYTuuWPNJFhm507XFeagX20BC9Ui2N8rtIr5e6o0SURbRexc
ARE0dEfq5hBaMkvdQIZD3ekw07SrZmECrOhZ/6GkBBD9sRwb/OrrIR2qW2hU
zQDdAVLBrf3Lwvvf2f7He3uH6rhr+x6UJp0sZBW9Qg8HMMC6FXupqE3S9iJp
pudjDPSvp3p4HbSn8dzq9oJZ2hTtBX6nEJ9/1i2gSDttmqaiCHR8uM+wrX1A
NPcNCX7nO191SxbyLPdnHFLXACXGzni4prUJueCNg92r3vpiK6QFtGw/1HBO
RoCxGVFhxOtcnblALVhIIpW2+wbCZRfG/p43lUvbFhUyalM9uihvV0U7hvQP
DWRZtigaZ1kht/fSGTgao+yZmmBMP7rUFTVMt55AVDkcbtpJ4XJHV+H3Zlx2
oLsxy4pMA5VSbWxpDaPpDqEea1pCoLXCzTeL2RWUFro9LgcLLBxtVYtq8Inq
fFFha6JMXX5o7Wwvt4e1M9vsJnJlod0NVO7Pu3vUzbhzLbof+XCwtIsMMEl0
2Dd7/GG6BNjQcPiuRHCQ9FCgKa9rGgplp7VKYtUN4PMGcFeo7jsYWLvQ8V5d
CKfBy+vFHRkR9Sy3qSKUFv/AaDSV2TYPKVSaQdzYUpmUhYVanfZu9TV14+p1
0I6WJ28qt8qb6//8mM4G9Hy6f9/Eb6v3jndo0OuXEKOOYFCs+6jYiIsMCfhe
X+8b5/3E7+Pemed1zl0H9FTkV4x8pgNcbikhcjhymY4hADLlYVjJh+Z6qFO7
D7x+QR7YnahuCFhAEv6euyCgzYpxe9Nu7+c2r9GDzbhECe1d0M+0EPpU/TYh
pBboxjl1aD/rztwkSohegG7Zkpb7WhTBW0BdFZmM/rgmTQZd/N7ls4ROD2oA
r4ZIgGfM7qbxGWD0qC7dRCe6+9szGNGZ+Q/PYCRo5t+egRk2Iiu4vLlb0LIU
z+WP5MjtM+Pdco8WJFroBReqkJpe6F1gp9lfyo6UA76iirU91tNCED5r1+EN
QbqTYNyyXPnGXIJYDnvKPwpUysZ1Av+xEKLQHf0lINAcdVHJzgF1fFjngDZT
ViIRfLhyzyP0ZjJ3bf9Q9JreN2qfGZIXMUPOatG7lshrZWRHFxPbaQhHOV0V
PubuxNDSRGDkzq0nwdz6u2YFP3tNU7ZppgelAEAO52KQuPZH/QI0Hunr2Ix2
1KJSZapRrJa9dlQK89AadA0Z6fuALasRPtFQuSQR717fFuESpVmpDjBGEao0
ZxETcYFQ4qM1+ed0TGt3QgHTQUIseTswBt71zCuUlYOYdHnGrReRl3/HkIuw
AgGszAJgqxwLF3EQFUiqxYtyW0/Fdre4mUhJG8SjUXs6fSCfJEil/76Ar1rx
0uZFtfhSZn1swe0CZ422u9ONFg+6UrVwgaQg2wHuaNc3urXxrplHqxNw9Oxp
c/PBkjkXYEgf+UU6RdpD8HCSfQH0cuHp/6Tp78XJme33eOnDPhGq0jj1BU9P
D37vgzCFftRu8z0f7fc1rj5w8Rn80TX/NfRwajL3ffYy3bSBAp18kAnv/Xzn
z4InV1zSZvb9esjuVRWtM/L0fzgIORRp+nuWxf/Y/vnYv7OV51pWPDjXrOv5
TdPNy6lOYanLXtVf48vX/Das8pn5+L6Id6p+4v4WZGTrfWC1iVCr875rb8Rc
/6mbkaZyYY/+Gp5areK56iyJf3w57dHP7TLw8HorM85rKNGfrmT7ZO+kYfY1
Pn5ieyt3Msmnp+mlwrzrPXj25oXj3DdFNvy4q2Ng1WXu+2HPY+F9+FE/Zpru
2Np/xbl+6jV+/mt+eMDmuyFL5DNpaPYwaJCe7k/Y65/rz6bZ1dnjT8uvQZ37
HvdPeXRux2+tGl9O//bnGwhOVPISmEH8mDh8lAOfmzS6sLZavvQ4PJyf+A/x
cWHiPR99AznnkDaT1To9YJtJyF5/M/sOjVo+tKPdaF+Gtb603eCbaRU1nAM2
E6/GM7qcm/pM3zM+G/xm5nnw4PmrHzkpBiyZ/jQRIVP8LJBkhtE1YLN3x2n7
Blp832oUr1jhqTWODK8Z/jSFcqDzk68GwhJVwFsp54sIfYXW4NtJFXZYEIsh
xrVkLl9I4w5t/nDtNSPTkAVs4C86DFH5BxOf1n0UbMK2sDdtBNwTvECFuuA+
P9uZR+H00qsEu9EnczO2WzAWcjP8GUavqu2TRMawT4IJ3cOZVvLgwzZ0OaZ1
fBHauUe7qjj24d6NRj9j4YWv7X0wnPwbdt4zQzfxpVz7uzEo2IOUMqu3ofeY
j4tRS+Q3etBs9HeNAoeWhQ5FFWROPuoUErQFrGi70aicsE0EiVs+nAOZNHdd
dmkI0M0E2xhgmmvyflc6vOYIzkzuA02GTxvFSJeB8KHbmRs+EvKIH3tZMabz
TfaglteHrCXfjwh5Kuy6sX5rEHwJW3os2ws+PwROuOvlNx+8lCm80Wfm68D2
HoPc6nP4M3yrYXwJ247dKve92N9QUXzD6YHt9TikPJrfYEzEUipoO32oIFB1
9XP6/3XvRMo1M12iAX/A5tH2lwWbhl5c82SuFHv/qtKYY8WZv3rtX/VP7y4D
5K1GAww0GwMe/vrKyWw80JkTvNCpE3AlcPf2YPv9eW0bxA5Zh5NorcPOvcdB
l7Bp02A+dCvT/UfO8f2Hf9Xf/VEHb0rBCvGmzcEJzc082IEbO3xzlSOGNfOJ
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
      "]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8955433289511147`*^9, 3.8955434403195477`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"4f16f986-c692-4e60-905b-2af4a90fc05a"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"BY\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"name\"", "\[Rule]", "\"Original long-run risk model\""}], 
               ",", 
               TemplateBox[{"22"}, "OutputSizeLimit`Skeleton"], ",", 
               RowBox[{"\"Properties\"", "\[Rule]", 
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"name\"", ",", "\"shortname\"", ",", "\"bibRef\"", ",", 
                    "\"desc\"", ",", "\"parameters\"", ",", "\"stateVars\"", 
                    ",", "\"numStocks\"", ",", "\"assignParam\"", ",", 
                    "\"assignParamStocks\"", ",", "\"params\"", ",", 
                    "\"modelAssumptions\"", ",", "\"exogenousVars\"", ",", 
                    "\"exogenousEq\"", ",", "\"endogenousVars\"", ",", 
                    "\"endogenousEq\"", ",", "\"exogenousVarNames\"", ",", 
                    "\"endogenousVarNames\"", ",", "\"toStateVars\"", ",", 
                    "\"uncondMomOfStateVars\"", ",", "\"ratioUncondE\"", ",", 
                    "\"coeffsSystem\"", ",", "\"extraInfo\"", ",", 
                    "\"coeffsSolution\""}], "}"}]}]}], 
             "\[RightAssociation]"}]}], ",", 
         TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{"\"DES\"", "\[Rule]", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}]}], 
       "\[RightAssociation]"}], Short[#, 8]& ], "line" -> 5, "sessionID" -> 
   28991112341592515042, "byteCount" -> 8034112, "size" -> 8, "stored" -> 
   False, "expr" -> Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.8955433289511147`*^9, 3.8955434404639587`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"b4edb4da-c4c8-491e-ac3a-29e159485238"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Names", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.895543393384572*^9, 3.895543394493181*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"data\"\>", ",", "\<\"filename\"\>", ",", "\<\"pacletDir\"\>", 
   ",", "\<\"resourcesDir\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.895543346791772*^9, 3.8955433952157*^9, 
  3.895543442026967*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"cb95aa94-92a1-427a-876c-b9304939c4e7"],

Cell[BoxData[
 RowBox[{"{", "\<\"FernandoDuarte`LongRunRisk`Models\"\>", "}"}]], "Output",
 CellChangeTimes->{3.895543346791772*^9, 3.8955433952157*^9, 
  3.895543442047553*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"5dbf5928-5ddd-4df6-8d78-e821b8642287"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8955434025971823`*^9, 3.8955434038120728`*^9}, 
   3.895543444158156*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"a4dec3f0-5812-42c7-907a-2afd00f85a30"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.895540052650237*^9, 
  3.895540052953021*^9}},ExpressionUUID->"0a089709-115a-4115-b9df-\
019516b85bf4"]
},
WindowSize->{1452, 837},
WindowMargins->{{187, Automatic}, {Automatic, 50}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.5 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 46, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 215, 4, 46, "Input",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],
Cell[CellGroupData[{
Cell[1281, 42, 482, 11, 78, "Input",ExpressionUUID->"8d404726-eb0b-48d1-a05f-ef54ddb466fe"],
Cell[1766, 55, 186, 3, 52, "Output",ExpressionUUID->"3b9d07f6-9b1e-4325-a95f-cff5875d9be4"],
Cell[1955, 60, 187, 3, 52, "Output",ExpressionUUID->"67cc598a-3715-419c-ad39-33b6f65e1ff7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2179, 68, 1743, 33, 171, "Input",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],
Cell[3925, 103, 292, 5, 52, "Output",ExpressionUUID->"563f6066-7dfa-45a9-ac54-e2133bb00c95"],
Cell[4220, 110, 184, 2, 52, "Output",ExpressionUUID->"8b9aca4a-56ef-4065-8c79-997d9f74afcb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4441, 117, 484, 11, 78, "Input",ExpressionUUID->"902d690f-3fc8-4bc0-b421-56d6e0849f03"],
Cell[4928, 130, 208, 3, 52, "Output",ExpressionUUID->"218a94ba-3451-421d-8fa9-675f36d01cc2"],
Cell[5139, 135, 277, 6, 52, "Output",ExpressionUUID->"cb47ccde-0312-4878-9358-d51f90a39bc4"]
}, Open  ]],
Cell[5431, 144, 1672, 34, 111, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[7106, 180, 1057, 17, 46, "Input",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],
Cell[CellGroupData[{
Cell[8188, 201, 483, 11, 78, "Input",ExpressionUUID->"4a5c3fb4-d8b0-4ac0-a41f-7febf0a962d9"],
Cell[8674, 214, 389, 7, 52, "Output",ExpressionUUID->"9d21ef2a-7bd7-42d9-aaf3-9fd8fc6c2dac"],
Cell[9066, 223, 371, 8, 52, "Output",ExpressionUUID->"61e7d3e8-4cea-40b2-99e1-1831756c3780"]
}, Open  ]],
Cell[9452, 234, 2112, 43, 233, "Input",ExpressionUUID->"617502f8-4646-4d12-9497-9a22e1b1ed49"],
Cell[CellGroupData[{
Cell[11589, 281, 682, 17, 78, "Input",ExpressionUUID->"083b1219-88b0-4e20-88ff-fbf066a3d8ab"],
Cell[12274, 300, 310, 7, 52, "Output",ExpressionUUID->"eb683cec-d43e-4ed9-ad6f-6746a3bf8587"],
Cell[12587, 309, 397, 9, 52, "Output",ExpressionUUID->"4d142696-e51a-40f8-8476-82cdf7cb9f79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13021, 323, 725, 16, 109, "Input",ExpressionUUID->"43fe6290-76e5-4b2a-a51b-823823beaca9"],
Cell[13749, 341, 215, 4, 52, "Output",ExpressionUUID->"f7759cbe-4c6c-4458-8bf6-614f3492f166"]
}, Open  ]],
Cell[13979, 348, 1055, 21, 109, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[CellGroupData[{
Cell[15059, 373, 223, 3, 46, "Input",ExpressionUUID->"20823507-774e-43c4-8c28-77fd20502f10"],
Cell[15285, 378, 411, 7, 52, "Output",ExpressionUUID->"261fe893-819b-4596-9b27-336617920161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15733, 390, 270, 5, 46, "Input",ExpressionUUID->"5e22a350-1f8a-4331-a834-8def5304b4fb"],
Cell[16006, 397, 2691, 51, 203, "Output",ExpressionUUID->"2e229348-49f8-4e77-8081-a2925ffc177c"]
}, Open  ]],
Cell[18712, 451, 981, 25, 140, "Input",ExpressionUUID->"41857172-5d13-45da-aa26-355e76cb43e7"],
Cell[19696, 478, 1581, 34, 140, "Input",ExpressionUUID->"399bf9e1-863b-4529-a74a-012d41e91008"],
Cell[21280, 514, 1137, 22, 109, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[22420, 538, 129, 3, 46, "Input",ExpressionUUID->"45117e05-75bb-47a0-8081-f1683368955f"],
Cell[22552, 543, 213, 4, 46, "Input",ExpressionUUID->"b6328497-0bd9-43fd-bd5e-219d8a08c985"],
Cell[22768, 549, 677, 16, 78, "Input",ExpressionUUID->"17bd1208-2f22-4ced-9e63-7ba8547d59e6"],
Cell[23448, 567, 502, 11, 78, "Input",ExpressionUUID->"d3c91b0a-469e-4730-a4f9-76fdc32b8381"],
Cell[CellGroupData[{
Cell[23975, 582, 783, 15, 109, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[24761, 599, 154882, 2644, 91, "Output",ExpressionUUID->"4f16f986-c692-4e60-905b-2af4a90fc05a"],
Cell[179646, 3245, 2003, 37, 199, "Output",ExpressionUUID->"b4edb4da-c4c8-491e-ac3a-29e159485238"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181686, 3287, 316, 5, 78, "Input",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],
Cell[182005, 3294, 323, 6, 52, "Output",ExpressionUUID->"cb95aa94-92a1-427a-876c-b9304939c4e7"],
Cell[182331, 3302, 255, 4, 52, "Output",ExpressionUUID->"5dbf5928-5ddd-4df6-8d78-e821b8642287"]
}, Open  ]],
Cell[182601, 3309, 200, 3, 46, "Input",ExpressionUUID->"a4dec3f0-5812-42c7-907a-2afd00f85a30"],
Cell[182804, 3314, 232, 5, 140, "Input",ExpressionUUID->"0a089709-115a-4115-b9df-019516b85bf4"]
}
]
*)

