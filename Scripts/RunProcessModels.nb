(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     79093,       1681]
NotebookOptionsPosition[     29051,        787]
NotebookOutlinePosition[     75413,       1642]
CellTagsIndexPosition[     75370,       1639]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895667804661036*^9, 3.895667805565455*^9}, 
   3.895668160653308*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.895602929877912*^9, 3.895602945574039*^9}, {
   3.895603150629443*^9, 3.895603155898622*^9}, 3.895603639155025*^9, {
   3.89560422507939*^9, 3.895604271915659*^9}, {3.895667789174368*^9, 
   3.895667803230785*^9}, {3.8956679941198807`*^9, 3.89566803225379*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"choose", " ", "subset", " ", "of", " ", 
    RowBox[{"Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}], 
    " ", "to", " ", "process"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"modelsToProcess", "=", 
    RowBox[{"Alternatives", "@@", 
     RowBox[{"(", 
      RowBox[{"Keys", "@", "models"}], ")"}]}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Alternatives", "@@", 
     RowBox[{"(", 
      RowBox[{"Keys", "@", "models"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "\"\<NRCStochVol\>\"", " ", "|", "\"\<DES\>\"", " ", "|", "\"\<BY\>\"", 
     "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\""}], "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{"(*", " ", 
    RowBox[{
    "\"\<NRCStochVol\>\"", " ", "|", " ", "\"\<BY\>\"", "|", "\"\<BKY\>\"", 
     "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\""}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{"|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], 
    "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}, 
   3.895668171011196*^9, 3.895672752010098*^9, {3.895985149806714*^9, 
   3.895985168119672*^9}, {3.895990971331506*^9, 3.895990978839967*^9}, {
   3.896008277581081*^9, 3.896008278872533*^9}, {3.8960114624686937`*^9, 
   3.8960114699736547`*^9}, {3.896011530041645*^9, 3.896011539393187*^9}, {
   3.901511343447164*^9, 3.901511345430992*^9}, 3.901581255864622*^9, {
   3.903273938731393*^9, 3.90327394109652*^9}, 3.903316536518897*^9, 
   3.903342433189364*^9, 3.903356403031111*^9, {3.9056088585472097`*^9, 
   3.905608867448728*^9}, {3.905610193590789*^9, 3.905610195527364*^9}, {
   3.905827726896525*^9, 3.905827782312977*^9}, {3.9059403315011787`*^9, 
   3.905940334921546*^9}, 3.90594433514441*^9, {3.90594901384689*^9, 
   3.90594901849579*^9}, {3.90595175848743*^9, 3.905951759022707*^9}, 
   3.905951884536593*^9},ExpressionUUID->"54d6d35d-7425-40ba-af43-\
6787e254909b"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"FernandoDuarte`LongRunRisk`Epd0", ",", "NHoldAll"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.903273196949903*^9, 3.903273205066195*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"48c26c25-df43-4fb3-bc32-a76501c36af7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FernandoDuarte`LongRunRisk`Models", "=", 
   RowBox[{"processModels", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"KeySelect", "[", 
      RowBox[{"models", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"KeySelect", "[", 
      RowBox[{"modelsExtraInfo", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<FindRootOptions\>\"", "->", 
      RowBox[{"{", "FernandoDuarte`LongRunRisk`FindRootOptions", "}"}]}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
      RowBox[{
      "{", "FernandoDuarte`LongRunRisk`RecurrenceTableOptions", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<initialGuess\>\"", " ", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "FernandoDuarte`LongRunRisk`Ewc0", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "FernandoDuarte`LongRunRisk`Epd0", "}"}], "}"}]}]}], 
       "|>"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8956680395845013`*^9, 3.8956680418619413`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
   "FernandoDuarte`LongRunRisk`Models"}]}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.895543121137817*^9, 3.895543136900535*^9}, {
   3.895667942531457*^9, 3.8956679429341707`*^9}, 3.9056099851889267`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Put", "[", 
   RowBox[{"data", ",", "filename"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}, 
   3.8955431197061167`*^9, {3.895668067742714*^9, 3.895668079032886*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"load", " ", "and", " ", "test"}], "*)"}]], "Input",
 CellChangeTimes->{{3.895668123084955*^9, 3.895668129710462*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"612c660d-6c54-4bf0-b214-400bf80133a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895668130981999*^9, 3.895668133141368*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resourcesDir", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DirectoryName", "[", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
       "\"\<Resources\>\""}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}, {
   3.8956681020776243`*^9, 3.8956681346619*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Names", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.895543393384572*^9, 3.895543394493181*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.895668292671256*^9, 3.895668308662959*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BKY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8956683171469507`*^9, 3.8956683919835253`*^9}, {
   3.8956684367796392`*^9, 3.895668436972262*^9}, {3.895669259079546*^9, 
   3.8956692679019814`*^9}, 3.9056101772019453`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<NRC\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672775030727*^9, 3.895672775360661*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<DES\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672777740477*^9, 3.895672778050181*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", "t", "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895603677180604*^9, 3.895603691941772*^9}, {
  3.8959261111295233`*^9, 3.895926111824382*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],

Cell[CellGroupData[{

Cell["Debug", "Subsection",
 CellChangeTimes->{{3.905930829155747*^9, 
  3.905930830789382*^9}},ExpressionUUID->"c3abff8f-b926-4664-9c99-\
f3aaffd6286d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`TimeAggregation`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`\>\"",
   "]"}]}], "Input",
 CellChangeTimes->{{3.9058298178032722`*^9, 3.905829821621594*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"8407af47-4501-4bfc-8191-730417668367"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"NumberQ", "/@", 
       RowBox[{"(", 
        RowBox[{"Values", "@", 
         RowBox[{
          RowBox[{"Models", "[", "#", "]"}], "[", "\"\<coeffsSolutionN\>\"", 
          "]"}]}], ")"}]}], ")"}]}], ")"}], "&"}], "/@", 
  RowBox[{"Keys", "[", "Models", "]"}]}]], "Input",
 CellChangeTimes->{{3.905829390392289*^9, 3.905829495353607*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b01ccb4a-7a0b-45ac-a1d0-28a52634428c"],

Cell[BoxData[
 RowBox[{"Keys", "@", "Models"}]], "Input",
 CellChangeTimes->{{3.9059441710668573`*^9, 3.905944173082654*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"a650f5ba-79ee-4e92-8f8c-2e954a6ac482"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
  "\"\<coeffsSolutionN\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.905951855716634*^9, 3.905951856483142*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"6bad0b5b-19e2-4ed7-b723-5c5845583a8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
  "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.905829543523841*^9, 3.9058295617728148`*^9}, {
   3.9058295919582863`*^9, 3.9058296006418056`*^9}, 3.9059502727556877`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"e803a34e-b796-45bc-b3d9-feb06a5e2fa8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ss", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
     "\"\<coeffsSystem\>\"", "]"}], "[", "\"\<wc\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol", "=", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"Rest", "@", 
      RowBox[{"First", "@", "ss"}]}], ",", 
     RowBox[{"Rest", "@", 
      RowBox[{"First", "@", 
       RowBox[{"Rest", "@", "ss"}]}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.9059505369924088`*^9, {3.90595056754125*^9, 3.905950663208407*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"5cc11387-f272-4641-884e-87200e7c9613"],

Cell[BoxData[
 RowBox[{"A1", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Rest", "@", 
       RowBox[{"First", "@", "ss"}]}], ")"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"A", "[", "1", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.905950722632792*^9, 3.905950750384955*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"88148eba-b1a9-4000-97d1-e68dd523b166"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Rest", "@", 
         RowBox[{"First", "@", "ss"}]}], ")"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], "/.", "A1"}], "//", "Simplify"}], ",", 
    
    RowBox[{"A", "[", "2", "]"}]}], "]"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.905950741803022*^9, 3.9059507820091047`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"03279094-0c47-45f2-99ad-bb82636879f6"],

Cell[BoxData[
 RowBox[{"A4", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Rest", "@", 
       RowBox[{"First", "@", "ss"}]}], ")"}], "[", 
     RowBox[{"[", "4", "]"}], "]"}], ",", 
    RowBox[{"A", "[", "4", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.905950951924706*^9, 3.9059509524715977`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"74925a43-9763-4fb3-baaa-2cedf44656ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"swc", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Models", "[", "\"\<NRCLLR\>\"", "]"}], "[", 
       "\"\<coeffsSolution\>\"", "]"}], "[", "\"\<pd\>\"", "]"}], "//.", 
     RowBox[{
      RowBox[{"Models", "[", "\"\<NRCLLR\>\"", "]"}], "[", 
      "\"\<parameters\>\"", "]"}]}], "//.", 
    RowBox[{
     RowBox[{
      RowBox[{"Models", "[", "\"\<NRCLLR\>\"", "]"}], "[", 
      "\"\<coeffsSolutionN\>\"", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "8"}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.905945131020515*^9, 3.905945208564871*^9}, 
   3.905945246825162*^9, {3.905946531195917*^9, 3.905946562807521*^9}, {
   3.9059465934131804`*^9, 3.905946593959779*^9}, {3.9059466626380653`*^9, 
   3.9059466893194733`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"05c4e57b-22c0-4e14-bae5-676f0f109320"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Activate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"swc", "/.", 
       RowBox[{
        RowBox[{"Epd0", "[", "1", "]"}], "->", "6"}]}], "/.", 
      RowBox[{
       RowBox[{"Epd0", "[", "2", "]"}], "->", "7"}]}], "/.", 
     RowBox[{
      RowBox[{"Epd0", "[", "3", "]"}], "->", "4.6"}]}], "/.", 
    RowBox[{"FindRootOptions", "->", 
     RowBox[{"{", 
      RowBox[{"MaxIterations", "->", "1500"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.905947398112771*^9, 3.905947457699121*^9}, {
  3.905948579562237*^9, 3.905948587376925*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"9617a7cd-74be-4a72-8d4b-3eb1641f4922"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Activate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"swc", "/.", 
       RowBox[{
        RowBox[{"Epd0", "[", "1", "]"}], "->", "6.36"}]}], "/.", 
      RowBox[{
       RowBox[{"Epd0", "[", "2", "]"}], "->", "7.687"}]}], "/.", 
     RowBox[{
      RowBox[{"Epd0", "[", "3", "]"}], "->", "5.254"}]}], "/.", 
    RowBox[{"FindRootOptions", "->", 
     RowBox[{"{", 
      RowBox[{"MaxIterations", "->", "1500"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9059466906373377`*^9, 3.905946697127709*^9}, {
  3.905946749200171*^9, 3.905946753324044*^9}, {3.90594679824326*^9, 
  3.905946806860023*^9}, {3.9059468372919483`*^9, 3.9059468485110826`*^9}, {
  3.9059468816841908`*^9, 3.9059468824524193`*^9}, {3.905946923606065*^9, 
  3.905947239915379*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"748bdbbd-3b0a-4ff6-9d60-d597e87469a1"],

Cell[BoxData[{
 RowBox[{"sol", "[", 
  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"sol", "[", 
  RowBox[{"[", "2", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.905946884273272*^9, 3.905946891684754*^9}, {
  3.905951436691511*^9, 
  3.905951447153996*^9}},ExpressionUUID->"7bdc087d-8969-405f-92a0-\
3e40a3fe1fc4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{"swc", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2", ",", "1", ",", "1"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "1", "]"}], "[", "0", "]"}], ",", "6"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "1", "]"}], "[", "6", "]"}], ",", "0"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "1", "]"}], "[", "7", "]"}], ",", "0"}], "}"}]}], 
     "}"}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.905947599378675*^9, 3.905947742043951*^9}, {
   3.9059480106005898`*^9, 3.905948010655305*^9}, 3.9059480555497026`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"ba89a4b4-7d12-4d4c-9f57-1df71ccd6f2f"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"swc", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "0", "]"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "6", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "7", "]"}], ",", "0"}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.905947764610209*^9, 3.905947784353559*^9}, 
   3.905948058186158*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"63b9f987-8cba-4d6a-abad-10dfe21c6991"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"swc", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "2", ",", "1", ",", "1"}], "]"}], "]"}], ",", 
     RowBox[{"swc", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "2", ",", "1", ",", "2"}], "]"}], "]"}]}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "1", "]"}], "[", "0", "]"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "1", "]"}], "[", "6", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "1", "]"}], "[", "7", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "0", "]"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "6", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"B", "[", "2", "]"}], "[", "7", "]"}], ",", "0"}], "}"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.905948072427573*^9, 3.905948085564472*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"5ce13929-1a9b-41e6-ba56-25596bf037bc"],

Cell[BoxData[{
 RowBox[{"sol", "=", 
  RowBox[{"FindRoot", "[", 
   RowBox[{
    RowBox[{"swc", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2", ",", "1", ",", "3"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "[", "0", "]"}], ",", "4.6"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "[", "6", "]"}], ",", "0"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "[", "7", "]"}], ",", "0"}], "}"}]}], 
     "}"}], ",", 
    RowBox[{"MaxIterations", "->", "100"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Subtract", "@@@", 
    RowBox[{"swc", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2", ",", "1", ",", "3"}], "]"}], "]"}]}], ")"}], "/.",
   "sol"}]}], "Input",
 CellChangeTimes->{{3.905947765680829*^9, 3.905947773879064*^9}, {
  3.905948019096902*^9, 3.905948025119782*^9}, {3.905948094436644*^9, 
  3.9059482491238832`*^9}, {3.905948281056531*^9, 3.905948318795755*^9}, {
  3.905948352388397*^9, 3.905948376773551*^9}, {3.905948510443019*^9, 
  3.905948559867861*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"95777f78-b93f-4df7-9a23-b9834891f4f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "=", 
   RowBox[{
    RowBox[{"swc", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2", ",", "1", ",", "3", ",", "1"}], "]"}], "]"}], "/.", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"swc", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "2", ",", "1", ",", "3", ",", 
         RowBox[{"2", ";;", "3"}]}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "[", "6", "]"}], ",", 
        RowBox[{
         RowBox[{"B", "[", "3", "]"}], "[", "7", "]"}]}], "}"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9059483969285192`*^9, 3.905948442648499*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"ff57dd6a-8a9e-44df-a5e4-2685f9bc75c4"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{"ss", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"B", "[", "3", "]"}], "[", "0", "]"}], ",", "2", ",", "8"}], 
    "}"}], ",", 
   RowBox[{"Method", "->", "\"\<Brent\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.905948443828302*^9, 3.9059484794666853`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"0268c5c5-b3d1-4a67-8b15-c8ebec50a6c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"swc", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2", ",", "1", ",", "3", ",", 
       RowBox[{"2", ";;", "3"}]}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"B", "[", "3", "]"}], "[", "6", "]"}], ",", 
      RowBox[{
       RowBox[{"B", "[", "3", "]"}], "[", "7", "]"}]}], "}"}]}], "]"}], "/.", 
  
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"B", "[", "3", "]"}], "[", "0", "]"}], "\[Rule]", 
    "4.573318058968631`"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9059485013096933`*^9, 3.905948501547865*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"bc18eab1-3168-4b06-b733-94f20dc8e7d7"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ss", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "//.", 
    RowBox[{
     RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
     "\"\<parameters\>\"", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "0", "]"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "1", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "2", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "3", "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "4", "]"}], ",", "0"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9059514161434927`*^9, 3.905951546182124*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"782ed777-0e09-4306-b68e-1bfc6238a27a"],

Cell[BoxData[{
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"ss", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}], "//.", "aa"}], "//.", 
     RowBox[{
      RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
      "\"\<parameters\>\"", "]"}]}], "/.", 
    RowBox[{"sign", "->", "1"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], ",", "4"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"ss", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}], "//.", "aa"}], "//.", 
     RowBox[{
      RowBox[{"Models", "[", "\"\<infStochVol\>\"", "]"}], "[", 
      "\"\<parameters\>\"", "]"}]}], "/.", 
    RowBox[{"sign", "->", 
     RowBox[{"-", "1"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], ",", "4"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.905951622952188*^9, 3.9059517161647787`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"f4a294f9-59a7-4600-a2aa-1a6876728631"]
}, Open  ]]
},
WindowSize->{1251, 941},
WindowMargins->{{Automatic, -1608}, {Automatic, 0}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 37, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 241, 5, 37, "Input",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],
Cell[1285, 41, 954, 23, 142, "Input",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],
Cell[2242, 66, 2963, 55, 170, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[5208, 123, 273, 5, 37, "Input",ExpressionUUID->"48c26c25-df43-4fb3-bc32-a76501c36af7"],
Cell[5484, 130, 1480, 34, 194, "Input",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],
Cell[6967, 166, 844, 13, 37, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[7814, 181, 1315, 26, 90, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[9132, 209, 237, 4, 37, "Input",ExpressionUUID->"612c660d-6c54-4bf0-b214-400bf80133a3"],
Cell[9372, 215, 215, 4, 37, "Input",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],
Cell[9590, 221, 1190, 27, 142, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[10783, 250, 316, 5, 64, "Input",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],
Cell[11102, 257, 546, 14, 90, "Input",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],
Cell[11651, 273, 461, 9, 37, "Input",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],
Cell[12115, 284, 329, 7, 37, "Input",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],
Cell[12447, 293, 329, 7, 37, "Input",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],
Cell[12779, 302, 354, 7, 37, "Input",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],
Cell[CellGroupData[{
Cell[13158, 313, 153, 3, 67, "Subsection",ExpressionUUID->"c3abff8f-b926-4664-9c99-f3aaffd6286d"],
Cell[13314, 318, 1156, 31, 194, "Input",ExpressionUUID->"8407af47-4501-4bfc-8191-730417668367"],
Cell[14473, 351, 532, 14, 37, "Input",ExpressionUUID->"b01ccb4a-7a0b-45ac-a1d0-28a52634428c"],
Cell[15008, 367, 204, 3, 37, "Input",ExpressionUUID->"a650f5ba-79ee-4e92-8f8c-2e954a6ac482"],
Cell[15215, 372, 275, 5, 37, "Input",ExpressionUUID->"6bad0b5b-19e2-4ed7-b723-5c5845583a8f"],
Cell[15493, 379, 350, 6, 37, "Input",ExpressionUUID->"e803a34e-b796-45bc-b3d9-feb06a5e2fa8"],
Cell[15846, 387, 672, 19, 64, "Input",ExpressionUUID->"5cc11387-f272-4641-884e-87200e7c9613"],
Cell[16521, 408, 426, 11, 37, "Input",ExpressionUUID->"88148eba-b1a9-4000-97d1-e68dd523b166"],
Cell[16950, 421, 511, 14, 37, "Input",ExpressionUUID->"03279094-0c47-45f2-99ad-bb82636879f6"],
Cell[17464, 437, 428, 11, 37, "Input",ExpressionUUID->"74925a43-9763-4fb3-baaa-2cedf44656ef"],
Cell[17895, 450, 896, 22, 64, "Input",ExpressionUUID->"05c4e57b-22c0-4e14-bae5-676f0f109320"],
Cell[18794, 474, 691, 18, 37, "Input",ExpressionUUID->"9617a7cd-74be-4a72-8d4b-3eb1641f4922"],
Cell[19488, 494, 902, 21, 37, "Input",ExpressionUUID->"748bdbbd-3b0a-4ff6-9d60-d597e87469a1"],
Cell[20393, 517, 336, 8, 64, "Input",ExpressionUUID->"7bdc087d-8969-405f-92a0-3e40a3fe1fc4"],
Cell[20732, 527, 900, 26, 64, "Input",ExpressionUUID->"ba89a4b4-7d12-4d4c-9f57-1df71ccd6f2f"],
Cell[21635, 555, 781, 23, 37, "Input",ExpressionUUID->"63b9f987-8cba-4d6a-abad-10dfe21c6991"],
Cell[22419, 580, 1320, 40, 64, "Input",ExpressionUUID->"5ce13929-1a9b-41e6-ba56-25596bf037bc"],
Cell[23742, 622, 1332, 38, 64, "Input",ExpressionUUID->"95777f78-b93f-4df7-9a23-b9834891f4f0"],
Cell[25077, 662, 763, 21, 37, "Input",ExpressionUUID->"ff57dd6a-8a9e-44df-a5e4-2685f9bc75c4"],
Cell[25843, 685, 411, 10, 37, "Input",ExpressionUUID->"0268c5c5-b3d1-4a67-8b15-c8ebec50a6c1"],
Cell[26257, 697, 717, 21, 37, "Input",ExpressionUUID->"bc18eab1-3168-4b06-b733-94f20dc8e7d7"],
Cell[26977, 720, 933, 28, 37, "Input",ExpressionUUID->"782ed777-0e09-4306-b68e-1bfc6238a27a"],
Cell[27913, 750, 1122, 34, 64, "Input",ExpressionUUID->"f4a294f9-59a7-4600-a2aa-1a6876728631"]
}, Open  ]]
}
]
*)

