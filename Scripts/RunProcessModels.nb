(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    290232,       5420]
NotebookOptionsPosition[    240895,       4519]
NotebookOutlinePosition[    287258,       5374]
CellTagsIndexPosition[    287215,       5371]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895667804661036*^9, 3.895667805565455*^9}, 
   3.895668160653308*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.895602929877912*^9, 3.895602945574039*^9}, {
   3.895603150629443*^9, 3.895603155898622*^9}, 3.895603639155025*^9, {
   3.89560422507939*^9, 3.895604271915659*^9}, {3.895667789174368*^9, 
   3.895667803230785*^9}, {3.8956679941198807`*^9, 3.89566803225379*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsToProcess", "=", "  ", 
     RowBox[{"\"\<BY\>\"", "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}]}], 
    RowBox[{"(*", 
     RowBox[{"|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}], "*)"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], "*)"}], ";"}],
   " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<BY\>\"", "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<DES\>\""}], ";"}], " ", "*)"}], 
  RowBox[{"(*", 
   RowBox[{"must", " ", "be", " ", "a", " ", "subset", " ", "of", " ", 
    RowBox[{
    "Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}, 
   3.895668171011196*^9, 3.895672752010098*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FernandoDuarte`LongRunRisk`Models", "=", 
   RowBox[{"processModels", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"KeySelect", "[", 
      RowBox[{"models", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"KeySelect", "[", 
      RowBox[{"modelsExtraInfo", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<FindRootOptions\>\"", "->", 
      RowBox[{"{", "FernandoDuarte`LongRunRisk`FindRootOptions", "}"}]}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
      RowBox[{
      "{", "FernandoDuarte`LongRunRisk`RecurrenceTableOptions", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<initialGuess\>\"", " ", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "FernandoDuarte`LongRunRisk`Ewc0", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "FernandoDuarte`LongRunRisk`Epd0", "}"}], "}"}]}]}], 
       "|>"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8956680395845013`*^9, 3.8956680418619413`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Epd0j\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"\<\"Epd0[1]\"\>", "\[Rule]", 
    RowBox[{"{", "5.5`", "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{
  3.8959258760026913`*^9},ExpressionUUID->"66135433-d68b-4f1a-b670-\
8c8aabba26fc"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Epd0j\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\<\"Epd0[1]\"\>", "\[Rule]", 
     RowBox[{"{", "5.5`", "}"}]}], ",", 
    RowBox[{"\<\"Epd0[2]\"\>", "\[Rule]", 
     RowBox[{"{", "6", "}"}]}], ",", 
    RowBox[{"\<\"Epd0[3]\"\>", "\[Rule]", 
     RowBox[{"{", "7", "}"}]}]}], "}"}]}]], "Echo",
 CellChangeTimes->{
  3.895925876023547*^9},ExpressionUUID->"b57dddc6-07dd-4fa1-80b4-\
c26441b3b3d1"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Epd0j\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"\<\"Epd0[1]\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{
  3.8959258761817617`*^9},ExpressionUUID->"51687859-56f3-4d68-9f7c-\
5b162346c7aa"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
    "FernandoDuarte`LongRunRisk`Models"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.895543121137817*^9, 3.895543136900535*^9}, {
   3.895667942531457*^9, 3.8956679429341707`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Put", "[", 
   RowBox[{"data", ",", "filename"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}, 
   3.8955431197061167`*^9, {3.895668067742714*^9, 3.895668079032886*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[
 TemplateBox[{
  "Symbol", "symname", 
   "\"The string \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"ResourceSystemClient`DefinitionUtilities`\
WithContext\\\\\\\"\\\"}]\\)\\\" cannot be used for a symbol name. A symbol \
name must start with a letter followed by letters and numbers.\"", 2, 11, 1, 
   28993618143608756613, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.895926017180079*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"39e0f25f-9dbc-4fde-9d9e-96e6681921e3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"load", " ", "and", " ", "test"}], "*)"}]], "Input",
 CellChangeTimes->{{3.895668123084955*^9, 
  3.895668129710462*^9}},ExpressionUUID->"612c660d-6c54-4bf0-b214-\
400bf80133a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895668130981999*^9, 3.895668133141368*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resourcesDir", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DirectoryName", "[", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
       "\"\<Resources\>\""}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}, {
   3.8956681020776243`*^9, 3.8956681346619*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{14., {2., 12.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{14., {2., 12.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"2.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/1c47a93c-9779-4b24-924f-82df82023364/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "DefinitionData"},
    TagBoxNote->"FunctionResourceBox"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["135", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["135", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "9.059776`", "\"MB\"", "megabytes", "\"Megabytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Contexts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Parameters`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["70", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: \
\"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["10", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`:\
 \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["17", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Shocks`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`\
: \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["7", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["15", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{8, 
                    Column[{
                    BoxForm`SummaryItem[{"FernandoDuarte`LongRunRisk`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Parameters`: ", 70}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: ",
                     10}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`: \
", 17}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Shocks`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`: \
", 14}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`: ", 7}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`: ", 
                    15}]}]}, False]], DynamicModuleValues -> Automatic], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceFunction[
  "DefinitionData"][<|
   "Name" -> "FernandoDuarte`LongRunRisk`Models", "Definitions" -> 
    ByteArray[CompressedData["
1:eJzsvPVXm1/wLgqlQCmlFKeluBVvS4tbcSc4RQsUb3EIFtzd3TW4u1tpcQlQ
3C24BAmEnPRzzz3r3v/g/PD9AdY8a+bd7+yZZ8+eCSvQmtipmaCjoaFxfH+C
xich4JZ5BMLx+q5Ze1OYwl7//kU7+8eKOkxzUyMLcR1svsIFgqxsZWYipoOT
g5PRpyTLAGIyyQHMp70qqg576Ky56y/xNbLDT4VJQPkikJJ8uirTi6wlOeDa
SZfwH2HNvWyBm+TTG+ePCZ6nd9qzpWXqmiXWMBfKzlKQ8gip08Hyt0fIuXNt
pkEzTw4FFfkEXmQiT5Ugs2gqJUflyT4HLLOZEajq4Syk9yY8ifRFZIy5ylh0
cfXwy5cuiaSZcdSUxAeOX7vAn0LmBz3Vaz+nVHmr2rHGKcSYqXtma799TfWn
SCYletjohCN6L5l0p5qL0sm7k3dWfTGWK5mtm4X6UMmlivqraCylvEtVq/Ng
nVn5th5WfZGi9dbiXEiK7WsWOx1d1j1uiumiC9limUeLrgfk2N2Us/t350Kv
2em45emL4KNpLxeccbYU0umgHw4H8PLMNZfHeqYstj8+CTXJhumcu06dpXdB
zqpVsuKceFla8hWULEmMxoQvjeVHLOh7BVQ93bIeajM5DRsMToWbhW+W/zQC
327sUQZNyzoY7oj6CH79SdJ/UFvrvObVGMKIGLa6s7zwj6sN92IY2HcrrS64
1gapPy93yCa941jI38O1QUIz1EDqSSUlDpyXl/YOEt75biucSMRxd7F+pu7O
DUkQ7MBkTaiRkZgnUpGYms/J+Gjy8ETte+NleOThfdc+L4+hvTCUzAP9yYo7
lViTP+t2WLAMIr4t1k9IaMPDLeiUS0VMxMDXy0P8zorlW9THuunqyE8iJ3qS
O1tEZROCkzuXw3rfd+9enLnfwGM07kSuMINgPWSKvka5HStDv7gHffSddiR2
MjhVNWrUwhkwBSHUwWD+0LY/YtdexU8na3I1U2jw2biH3fkw8rTRrxs+Nt4r
9KMRVTxU6F/VwOOZw0UXnBFLPucl2vM32xveqzXu+W4DM/fArmvzlK3dlN2i
MDWHw58y3Q/g+m6PeNaXvBMIdF9ZBZb6r1lXmDuMbBH75i6npk71MQcZWkEc
sJKdjbmSc/KjQ8sP1Bcc3j97ciEKIIffuM8vMC81jGgO3qf6deW6Y3rzf9Cx
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
/K4oYrhT3JD/qlKjtlhIl8wtqAi0Dr4fq5FoKknvKwhYfpXw/OBYEE5cL8iY
EmSoD2h+k4Wz+Cy+66BoJbIx1Pt+r7nQ17M1rbh07TFRECv6E+uQSCb0ZwGP
5XJybgCp8utvs6MdH7wcsh/bCBtNdnPu1Cob7EcfW+Vlqp/FqdyVePVetLqM
edWYRNVbFH1epd3G3uZ1I3bCKW2kb/UbR6J+K7nX2d8eWJoJuXc4Ckznx1/0
7zt/aizXYpiooVeaBPl3MgWEF58+pofVu7zJ/aO8MFBTabqE9TCTOnWllzOD
kMnVsG3Z88un4DFg/LG35FFxBrxVIGEhPl96CQNr6HsPiCHnoCQJZ7Qd6hp5
k3TLLjUEdYwqEMkvxiRVWCG2ecIoFUUiFWVbVa04pa9pF5/j3V5ZcT/+Vjim
jlRXHBhjhyHqn4SrxIXsl2KSI6wQ3zxjlIMikYOynaqm2YqdhKTqBzAZGo9I
RiDDk+BFUg1BUrVjW7Vo+BslvG4R9szM0RdwCnvAh7Hi+6o+Z/YfyYayRm0f
9L0RPFy8ZznHi/9oNuhZqpYBWN0X57isolKXlDXrL71p3JbSIeWHEMY3mlzf
gGSO0rkMa8QVY1VT1ru6C9Muyp7FtG6HBK2z/oGAZ4yMKtWHKAsAirKsZdff
mfRWzQvPOKuiktabfcqu+T7K/sznjJHjI0DiBuEMA1TZv8YdkRRoUXC6EkLy
nWe9Q93TO5I2Fd9pN6o+LQVxadzfOUqqq1mhuxLpMcPSfaNw9QsXNT3Y4ws2
smHmoWO5REMt1eqgjjTlhpmS4COIyWtsaY8p4zP+rZhH5rb1USJdS3aelG2K
Zkquro7EXlrYYro4wsDeD3o4piy3+AnoQ8ane0BjK9TP7T3r91njLnvYU0US
WAjYyjGOiUYPycJIhWYmcawbkY+X8g41xhGc8sAgmLLsas02fDb04jLOqoG2
9ZMztW/WjM4XcnRqO5VEgKHEpG92HgdLq30wq6Djxl1izXlV++1GFnAWXRZR
6burCZX2zU3mf8s1nDc7LmrBAdzAcpFhsTVjU6Sru6Fs69GTsKdIhkGUgsYR
YyXJbXMqq8xGZqod2NIr3kHGQESh2E3Js02rc0qYoTWRsF2bjETjEZINs46F
VXG7Gr3+L62Gcw+LInZS9aIfHf5HCGsu62GOOuqFNlPuMtJ/+GkC0xQ7J6mq
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
fpGcIhG+hR7EgHTXl23vGp/1VdNhH+FI7ogUroZN682Ll8XiDhsWxcpgcZwW
K7A2npbNy8p7V3EJSOGLL4jXnRXPo5SSSUkir9AV/nVOwjDvXleemOTikBOm
8Hjj7lqwura93PnTBfOq5RVyijgr9sV/nbfyZJr20Lc0YcMq5qHJuINNbfND
ILtL15m1f/J+lSJ/Mb4bLZOnUqD/68p9zcfpwpqB98qXs/fXxNf5CNfK55Sx
bcZaGSzfaX6X2zUELdDuOj9VFPo5IPbOwDgym+XEnqk3zMHd+2ZQ/bAQneAl
R1kfbM3OgJxXSk+6G8u0XTutYCETEMlnt28Lhwfmi62wsh1YMCyGyER5REaj
gAD9lA6R3buGh6BEmz3qSSSZlrjoO3c+Q46Zx10cIypAJcYfmNKbcQ0vkpF9
L2EC174xE9CV2QXQ0v50KnOANXE35SPYgdyvym1LVhaGOvdgOOJ3gAtjOpk2
cA3bsT7Lp9YSOnYwzCxI8G1znmcTcSWd6zevAWM8QE61zLPUf67t+97zA+zz
bmyMSND/ZahiKIKrbOfP7QhX359brGuB3vc/V0vvXw/mX0gB7j68jJeHLh8f
XVO/BPMMv3a+/rS14VQszRDtfD3OdH6u9PW8h2IlXn2tHBh+vgjm+fu4BgS8
HlQ8G9aDnGmeG356vf3iAmep7z2chAm420j88VOg7/0gZ6qiz9f99j1w8/rk
UTja1f0mMf/P8dbYSpv5bFf14dZX52dnZqDf4+dUgKPnVPufZ6Tx46upz08L
jc2PQQWor68HYPID4Uz+FuFdBc0LvzdIgPmAXDr+2kDbTpHQls3ciJmV4N3p
/YcQxfi1PVNgirlJ4Otuc9Y4X/G61oB+Ct6IwUX6e5yly0AWvFMtucEq4EY1
BeU0ZLQ0Cfa+KFROfpnT0ICwVH2Y+3M/2+cu7dLgj/1bWrRLgWrF9G8HH15P
xnRE5WCJPtz1r2pViogjmbu80IvD6HmWSUW6R3vrLcXRRLM6jXI1BiKrht+j
pz2NOAWUl4qtpNoBUgrXQ0EGsp/gL7qSTqxiR/xfdH1vc+ku84i5Cx8Ff0yq
TZzfx+iMyCZ7YU/WLda9hZO49xC05nhgQ1rlSK4UFa6+MbIODSBLzbCl+nJV
mlntJihW0X1WnEPohmzm5hUog1Ac96jdGeiXPrGbl5Dc6UMbiAXUr2OLxtqq
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
z8aYkBS1F54uV8obvuZKobmjN30X3cSWS6PLJ+y+PB6oW3ElFyjpk/WGj5Qt
HZ6+/dw1PH0UNSSt+iVCn/wnqzELG3APJqQa6PHYInikiEg235Z5ar0MlFKP
Dlz+8PTeFaSnLb5xv0+MbL485Oh49ygiYypotOhNzBRaqMmhFFrh6YAp2avS
vy++SkOzAb+T34BLwjRk8zPXYyPHFfTkScL01EEReEyxnspBHlMsPcxsvIDH
FEsKLkeqfG7J4t4GNgkTaIlIH2q2/aRVIG/qogg0iuMlYX4OyjibMEIR+NXN
QgoOkOpQ+aDI0Ag/HkLVYwfLQj8kfVAZRPhkZ9GFNIg+1zX2087CXwpO47VY
OVBkQX8O12zz46RPuYy5XuBElywyfWQzt5WigZUKOWpU8+GL+J86her/rKPY
Da/LVJCD4IHji0p8bfUYPdGvhocH+kbEYSMZh/Z1k01mVNaNnITzLZuKPYht
KPURkxI1sbakzMWN4H4cGiX7eqiBUq+hmIJC0d+UKynI2Xyv5vTigYRXQjBD
DjxjoFD+OAs0QAC1j18Zum+fSUidfK5Y42mdQnabEpX9Jor15XykMIv0b351
uOo+xkjb8z/86npi/+xXxzJzM7x2uEdFDfKLBSIzZP7b5uR/KCyrjgQgLjny
B5SyzUe+36hG+tMHbDBhG9f+KP3v7qItoAdCeQfsDZECvalZldKEbuEjlYg+
qZPl2ztQF7gQIYA5uxhuEaWuvtQsvoZtZ1KYeTvFiw9BzZifmoT0R8frox9f
sDlsIrUsafPmFvlEqRm42r1V4Kg8bzdVKv94ygN2iuazeTtUalP+P9Y6DEfH
F9PFd46rV2nCuUW2n4Vyi1Si3BywA1VbhAvc7s8QF7jVv1TMXeBSjwRdQz8e
TZ9sdsYT/VQr8yML2yYTHZWT+/eU3y6hYngTO2xhXXbghFddfTRf6Su4B8B8
qUs1kL+xHUJ+ne3OKksSr/UsrTrkERfdQPu07JctaNa6ROHWG0FeGbiNY4Ck
vGhnnthmAF+q71NXTpk+NCCd9eOdupkfePM6H7mRmrnSvLZ3aqGOzNvLmvls
70RIJQkjSYeILrWhn/R1Z/R0NyWBxXgqQePXnbbRQtnSZcYidajmue9Ve1nL
7qXuMcZjF1VdDeQYRfLtK5U793W3uO04aP4f0nInkZDQvBdcqL5uPzQe0woO
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
FsosmqdiX/Xm/gc5HNf7ff9WH9n/LOlvDoyXb3pt0Z6U0FjfefdBEPAvGVCG
/jvJE+cvuX3/WQ7X9X14NFn0JvNlZUPZJGzyVfs/Cf/U9l7GRPd/lk2B10zs
nU5pP+g//OmgSZkwTYmmRPXUD8L+U3xB7GMgP1fyv2VOhpsn+b+Pn5Gpi8XO
4ld2sT16zoW8tvyXDLx48t9JnkxTLJ1NcxN5UhYOn5A9+Q9pElCj4lT5mSkZ
Wr4v8Ln4w8TbJxr+KY2XVQn/D8mrsfUvOv3dPTX1zvui5YWJiv8km4KcnAtz
Z/+zfA5IfKGp8v6D1pjclXvnzS5N7sgfTnWexbUXBTzKu/tOICxEdxlc6vBu
JRKHdyc9Tn3c9WOfiobqPyS/3ZtYeV/y9MyZ/6cURYeUDyXtf035b1GxdLrq
8U9hBn97+LjLtP3859L/LI59pZ40/eDr7+L/mn35/xSdjNnyIfqbhbf/LorP
OZ/4u/5HoqXwa2EjNuKVk0McD9mPXs9s680Ugs99Vk4SI0QtRi82QD83Tgn+
Q+I0F03n5oxbEv1fuYTmpeegQrGfPq5l+g/JS08X9pd+YP/F8pStKSoeJXvu
vPqnmLEFnnU3aD73Nbmn/+LE2vG/5btL2cn/SvJkPVvLJMTcasthlasxV/6j
QBdjHnY17WHnd0rx5Ol+wVzVf8rnVqnTdTpKh/YfnvZbe2ikxzp0GLd69/Dm
ti/THZrO21ckrEYZel0Lo7UkwmOTuRBq5T15I+XDmi/rk3cKvbfM9h9Y0113
+nRBaReb7oEpUPkr+rzR7vcsb8SljEkjPmDWl+y15L6NqafM8bdJN3HYaW0u
Cy7T3x5ttyltv3/z9M9kp+kpMWs+i5bnlKojla29ey/+dXZLcZiIh+bdomLs
26XerUcMCy8qjNyKXN35TqHqeerPQweSFWRaN4epnywWDZmVvSIkVhdGfKEu
di5a9GTYpbcpnY5n6B3P+Ytz7iu9wr+qG0xGbCZBi6aPHT256dFnYhSJQ2M3
+Lv4tE4Lfgtq7DRBFPfMfL1/7Wn82vb8dvEnRyxUOCmW6Q7SH3Xs34TeyhA8
Wwu8a+P/ZvD2n39edLRe/XPz45rVpj6XMyVRiHLhZME52SOPHqyUXHqvUJFb
b+d9ePy+jtOYwEfRJ7IHtX4n1Kyz0QmJ8Eq1CIt0Xi1cfNT63qU/5nKVz53p
adfNTqzX0wGmG2It6r7eMMFftFp+ufj67lHuy+tmgazrOXeI9+QwtpWrQmf7
lW79hl/bdFBVz3IrPVR/Vij0L2VBr74lT1UoFBD8WiwLZZx1uTIeC0/qgy7e
fyX248TV0xP78lQ+ndHvbOtLN3nG+Vy98b7qnJXhj+8RJpRfUcq6HfqeWIkf
Yz9O9h8M8u4Yenx1U6HPNcwsIWQ54qHocIbjo8P1UMxTg/UzGmyk7MBEj3nI
dTZkqu/65PUvsyPpYWa208OpEQcnyaUdb/POb8y674/nwt6PT/qwxV2dX1eR
zbyq1T0K037v0Z3a9zZTIhCfvzTo9iujYnFmwEWahDuTFPfqyKsdPxfJf65k
Z34MEOp6xW25wnw4DWv8Mbg5viCzvitRZPVgJ3F5rLxPvznp6ohZg7BY0Kel
/I1Z9fLbMr/dTVUpvBiv3bhWJ8HOpXfJnVGU69CcPwVZLJ6Ic9+S0riKOMyd
gp7uf2CwZXnNju/mHhmFcAPOd2EdV0ViFfZs6ELT9pPwuONJ3R1fg17YwYdm
gwz+k9gHGfxsT3xGLGzaUW0RGghRI+/ptnw+8v8Vx94jmHstj66adtkzNh16
uSasWquFfE5frjIK86aNNZhkN8jqdh19IhfWvvsQye9mW26fmXwpLmi/Gpps
N/T50fBRTkXPOoi7nDlzfN3VX2YKOu/SkINnb03IOA+ca26aquLzpJG7+3+Q
IskvxNeFH86XrZT47L99t5es3uNHVQyf3le3Z34yNry8U8q+fbXhEvnIN7Of
hdrxx4ReXrA8FzS8Wyt6/PLvjWngQt0mI1xl61BW6c8nP41Obn5pV3JZkV6a
Xv75iGdXKfZzWpyBU7/hne1KR4aiNw7sWQz/9PY68b3g5gOUgZeRMpfvFDeU
zL2IemkvuVBXMVgUe55JuMN2oWG6Zg8bt+EezOqfvjm419Q5XUK8pi7ifi3t
rccT9pqHYkPQdMrstjEmc8HgznuPJ7T9Uin4uW0qKfhVrNQ+9O+4AWro6b/J
4M5PtbOhm7q2n2xWYZD2vg0ZIJwNdZxc/WHtdFLLDn59bmJaoW/VvmzwraDq
53tY/tSNY+s+8kGHbQ8KXhR7oRHx2Qp0PVBdiwHXqzMG7CU3lp5xCjwY4Hna
NnAejlEkP2++vFWz+En38QBcbOt+Z/vhMhGL/QcKyX8xHib4Vjod/Xs7dMt8
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
rA3D9io8cXaLr4pY7Y9EKCxdjwDizjHCoJ9SGNOKO+mwe/jmzjGOzdqKglXY
R7rs/Te1EoHcHx34G0S+LEQU7emS1RPnEHcSdmE5f2CxORDgPaxx2GfYEZzY
FBMGpcsQu3JHKWzqZYd7APNu1eqppbR455BPVdONzlolrCqjmjdrQd7FfVfK
e+U6P6SfaLL1tgmjvMH1XznQbu5V6Tg1oNRq4W3hJaee2DRqdsHt2yBU/r3O
R9fRZsVi6k9JBwSuvamiU74MFNUpO9YUyZz0Ls7Ir66rvOkyF7dalx7mFy9T
ypw4unBC2sfvSL+3U0bn93ozr8o2eoirzsrsj6qmYvkGMdbqrPHuzvom5KGV
kYav2+ub3C/83LrqInq53vW5pP4MVknbaHXl0Wncdu5UlL2G70dtwlrQjVlj
YjGlbIvGgFK5vHzifJJltV21d+Bl79lJZuQXx8HpCuLss9ns7OCbFP+W901S
4tiaRC9666fhJ7mmPW/yqw2NpLVvqkUwCSVs23T6xKevYzmK1vTIGkPfphzt
pMVgb23M6/IbBVbsXgVMVa19IqGO8meK7dd9tFLzhFaBgmUZzF0Z3hnS2/JN
41uZ/5FJG7J0nQ6mxmLieOnlkjeXS/4sxxH+2kH7P1S3Y3QlTLCwG9vJxPbE
tm2bO7bNiW3bdrJjTWxnJ5NMbJsT3vd8F2fdH726qlf96Krqqq6naVXIr2ql
qp4kxm+lqsOPxJig9dFZDZre6zmcfcHK3VzZoYBY6KP3ddyz/inn/Jfu9+Hv
X5ZVd6cXwN5SvPo2o/eDre/3S/UZvWa9jbUqzZdcwU2hDes/+9LyLw2j+Bf9
B49vngLKBF+aTymidt3KhdvdC9bl/c6vjdnJNUbngls3J4y6xI75W+etBT5P
e9zfh1YYCkTTbzHHavWaW1arYcfrbUoXwoXe2+PfH7WBQ0nn1/Tn0TdWQ05m
Petvbb99rv/59fuPEgZbogbnscIrgvnOrv5x+rK/9pK32raBEaEJHK5Uynv9
+x74znr8yp36ahXYmertTfaQyZ+kzE1WeI0rTFTr6D9DOFuT9Xq3uuH43p/Y
/zIORtHxnkHpn11wQ44mvAMlZAwrtGNDVPPrrX/j95khxScJt40UBmwqDkdm
EPMpQxvxC1Xj18U/4E3Ek7lCOp6DSd9TOI7Qt9eG8H0hkqJoXTXuRN6/YTR5
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
+VqsN0LuvubrTQq7qiXl5Go6b26sHvfI/+7m2mTz5QAhJhXovYFlZNi9Ojrn
au+2qrpvyW9l1yEy+27A9bk+2graBMzX2qoXu5U21Ur8rbs901VPvXQlaFOU
0NiGn4Qz20Z6o0T/03fGhienVFPn0NxtsZjmg9m9d1Jj3zfs/6B4Mq0XY28F
7l0IYu9rpD+N39J28jGJH5PzHdifxb8v6hn48nvVXTX9sc+W+C1rny2pJJXm
9w39od6+p8cu7a9q4N8vBQz2inUfK571yZSdcX+szvWl+fsdrtVy2fFBl+mE
MfVn5zufuD5d2RCm8zPVSuTKC1L8wXDJufC448NbfV84hMnnb9ThOQ4EYX6m
fNnZLQS4LIy51ILUrNaCxpf6aCRujvITI5LiR29ci52eBGb6Og/zKpJrOXeS
hvG6utzPGS7lmCuM3s8xUHTyocmOc+/llr3AkhIe59qy5efNladecFn2FU02
j+P33vz3Ev23NJ/VhaxvWvNMWMmfFY11itlSEo1dykTBDS97WtpJGCZcf57r
13TK0m6rZeq1t+xe7oVRfkn3pu3NWvJcA1fD0O571YW9HGnXvr6alqSE2D30
0mz1yZxEG1u1/0q5/cTKa+/djd65l3s7sa+0xk+EVGlwxi19PhMmq8F7eW/3
LeOAye+HUhdF7mvmHJ8McR1OStDj35pJvHPquYirqvJ5m4uSfS+9xxgeCnSI
PdFwk/up1bu740dqL2OuT6Eg8/02VqbbuuV8N3A/juamsKT+xKW33DrS7CZ3
MrLrQYrtTxwvL4q16tWZa9sKm0JFiYHMkUKRnZFC+cn8BWFWIZ9HD4VARY0+
XwRGJt6+s19lYXwRprQu/uJ65BPSCaaLuom3NIXuxV2ZWmhmLrCN2jEfkqVk
/rjqIpnx9rfTPGXp/cn9W7bFAcrWNFma8oXa8YdDpo9HTn9pzjNgFq6+IHHv
QqtwVAuh0NMCq63QZyr5Vp6Hf/6sF+F4ZM6rj1cyUxhs7xXwX6F7YVbFr62W
+iKv57j4IStz55JCGgdwQ2zXl2WLl2nFJt7tIe3bM0wnvp+wihVCrfGgKSFX
N7ufGoivtS4NDGybr9TcPCIVfjkv/5Dc3ETOmIh0je1HlIdH1jP/IbFrX9af
m6TIxW/2RHyT3cXfMGZnXeQvke2GrWzw0cf6hG7KfPXncAuzm97RlZW2jqs/
Hy4tJyKFsQH7KsLp9qu3y7YnZpTN5z91tx0b3ueoyx4w8B60+4ha/7Df0h1W
Pev1uFQf4NLjd3BXIz9cKmzU1bGF/2scWUC713Qv2b8YCXiY/0rP2svpp9mf
KriatVKsqKn5pq1Bc74rl3j2FELSkN1qYfZnfmvnM92eH4M9HXuuoMzYwj4H
xq+6+H3yrj9Ky72AG5/W0Lc3MahXV/jdAMdZMo+M+F4qO7XwjEE8e3lgaurj
Dma7Nhgkvt9u8AhjimNCPaUdVB0Iea27Er/tHPSQ/wX7CG1xiKug8o88yxLz
cVfFMCanZqlHWfsJhcvCSPWMh0fqfz51FhwxcH6MUC4vrVyYiurKHs874V6+
odPA/pCkjK2AAGnG7NQcZWPhAb/TJl9TitI818zHO+TDlCtPsvg2n2RxyXF2
KH5lZyhHzhHwr+1K+BS4l5Jra2eyfs5q6z0D4l3VuW9BV6MSb5z7Hr/C8bqr
olYnJ4QcQdAqrdUJMRnP3nkaL8E/YVlouJfaURmpeGuBNvj8q8f+t05fnZaU
Sd/tXJMaON85Ofktll9yokaWbPjG/yM+LaMM4t7WzVIVIjDzG+hGP3mDeL2V
aJaTSwKljCOTy1zqblY62t4rfP9Fziwz/t6v7WtKaq1hWJu6fZRz8QvMoecm
S82iRxJNH3Be3hwV/bTr7/ddsGsvW3ki1OLN2rpEDprGQSOrSOfYyZVzbDGj
ZhwK5Tcl7n1O+N7wgPT1+4Cnuh7jmJjB7UTC6tr+WvEbQ/WsdyjFwVulDoxm
l2/4ruBSyTUTponMj9RYQ55YNI5YnbTKrPB88qDwSZqSUfm+0LZEFZRf4b8j
9iRksFS75U4gW9WZyHuRAdZF54O1nMm16wXrZZDjJ7rarUOWT+KXi5LpT9b3
e29zdIZz+shKGhdyfHQRbSPWe3J63FoVMpRcWens327krzCsLfSR/7Hg+Xy2
f3n+g0bE7odb9wZGnnNM83s7/Qx0ddhhV6wz0fZkDeWjm04ijQfnVE1k/ohb
r7HMys1fGed69DFVTTxLvcvq3ckT3HFhGrMTTNdv9KirpNkk6Wh/3ouI8mtd
VxVHP03kH8FupR8K4vQMzVKNrn0mJdUWeUbFUdHfsOWR4SPFb2aEhqvJ+Tna
BuWzOTmE5kbsyQe5byNj6fkNEk/GrXLotSHmTsvR7Y7s25quSVz50LlnzmYv
i6aU7N/cGPJ/vf3U//jOuMqx0a3HDu7rL3ZeYGYlcNgJNz6nvey1eTPOAWzv
Ynql4YDNjF7vuJ3eBf8lT//eAuwuk/TTRjN/N0aX4fHoOj9+Xj6CBL9/uiC+
TvvJkeyYyyfZxDsGfPx9NzpcPDUcHvVJ6EXsVVVxMU8OCLfUD4ZJYE3p5pyu
3OZR5/EqUulzONfpvqLj+tgf63Z+mp+0NXNZiDQuk10Sm5vRNM+1n62nfV03
+sjw1QxtF9ObB5UiFp7uzZxc/8msf/m1lXU914czuyjmb0Wcp7Qu6FwN6G13
jdGPW9SOt1TJjPpWpz+mysdxGvsoggh8fHTFX6b/fnpJzmxfzu3C1/7BFU4B
t44dt7Ks1Q/FtnzUH5rryZSij8kzfs8qkCInyMISbydDP62/N6/4/6n/JfuS
6Dhh9l6zihK6R8Mwv58suQvZaO4riJ6dc2gQvpUNBzOXrD9WxvkDw8XEp+/u
tLzSYCPMFnWdWSjy9+1siaN9RKALyb1zKTpu93Bo96WljnM8u7Nr4aQRKz/p
iyF3+LbNb5PTNrzqshADG9Gj4mP752gdy3qlSZHzaf6NjzCOdRjO3P8XowVc
+tYBaerkQYv7nmGA9yPqJA9YLcR1qdLnWECpzokPguTXP/527c/blxjUT5S9
9lUqJdR5ZFMPohCWKMveLxfkvT5XWKg0FUsLpWJ2tGsqEYqy37zG+agToH+b
r0zuLxu4nLmAHdF8wkGIuodhafrem/0pT/H+XTu+hXxKi/3pt47lMsmv7+Xo
nsje9GwyGYnkj+6IZTdC03d3wjf3Pwfbqq/j/vYWm61u3Gxb01/jvlmDoaQq
YC+ody1X9rd0JXE5bIHrpcTpLIpP9HTALZYUfiun/8/1RqrgevlJYYOAz5V7
znv+ce6w1K3psqcctbYqVG/YoUYBuO7Zqem65n5vUOPEGYHk7dIN6Z8Mc9h1
zTmmUltTwes/sF2yWJIplUnEbI/8R6OgX4c97HajqVK2o1bj8BKuEzrqHPjy
757UUe+AiP+jeR31T8r4Fy6KU/+cIsEg3vu/5bo0jmJIZZ95ddyH5SjvAjlU
GdRaI6fWeUBch9vqnaT0BXfgGlgp93k68M/Q1yBOqhIU/PbXf7NkDnRFlv/j
gHdnIn2RC+c4n03139q5f/DauZh/1No5NQ8hEyje/eZvVtDh+ojyH3GlmW+o
yw4IQ16VVd+Mlcu1m0NegSKT8zYqiv+nbVQ474GjeK8G1DniDVd87gLKu4WM
gsPn6wqp2o9z5SthMcdsAhqF814xiv/2iuFGhHuN/7cdknoVXt7NLxQiYI3/
44x/jg2oFApchSs+Y4UrOHUqatx3uBsvBlb5P65XUaPKNbVTzXtH2goc2R8+
ZqcaqSwzt2w7BO47fik+345fCk3s+KX4RDt+KVA7fine5ufz7/ileG/HLy6H
63J9XuV09jDyiZX34a5f5bqhUduohG/2Qyrf/6Qf6X/yfj99zCUD3HpUhVL6
WZYCvj97/vpeUv4il2Wc44Jtdkmg5u8JahxZLfAr++m3twVLdmmW1fs7lr2b
lsoUilRyRo0ZKLEaC5w5nA6NvJ6rc5uBEnG8/hgaaXwhGxCXO9//5kkjkWZn
BLg1EptPDc9ucX7KECkV3J8qsgCMPk81lXMSUPQ56+jlP24GUqT8Fz+5fo7Z
GeR02D+uwj/LlK/ov0l2Td+pkO81/nlTkJ+nyv+b9f2ipyDF730y11L8uw/m
/ngKsuzboPc/lsti5EWq7PJ/Glck+kKXQ3Eox1+vhNL6JCuh/g8WL3FdgeT/
OVYgcWDx9uLyKPrdxcWuOiqiS0mVbfP+xcSwc97qzOGosWq3/Cl9qrV9an8i
p/fudlPOyQXIh23lnZMRcx3zS7+IOSguJVaoUc//J7NX5a02GlFxHsVJP8/E
F5cicpfxWeaCKM3yjovFSjXK+K+bbCtvH14s5d6H/5un6bhcq1zTlf6L55sA
E3xc+pxiNW4d/9q2QkybcGks0RfQWP/KaUUujaX4Ahrrnzc79rkaS52h17+2
sT7TOLlYnZHc/8k9S7v8V5bmt5pR6173BTTy577X/d83shpbLv3fdLv/hEbW
2Jun977MjRCLf7+L0V+8e3q7RdGbF0+/2emo3C+hFF/qN/kcyvHXL6E+8ef4
ak/Z/1+80Pq43umPkg7gWoP/gFdhiveu9gDFH1zt7z7Bt3l3cb9+EfbmcGZ2
7zLu78SUWRo7nTzr03ynUN7bTRbHJbJM9m8OeP6MU81cX7BwLzsNU7K4HIme
9aWv8mBRvr36wtkfPmaVB/s3b3bCsHmz4qPsaFyZSGJqGR0XaPVxO6j/5nu3
DCHzSXdQ/31i0Gvx7S4Xam3x8Pffg3ywxcP/4z4X5d7tg/73F/K5Rbmyzn6G
S1n/XIv5ueT1v3Wpn6HS/83LrxHr3V24QP9vCwjNV7oi4/9nOqfcla5Tdhv+
PBVfDKz4f1wX81kr/r9dODT8cMTpQeHt85Hvm58/5hFJUqyQiFQS8XubcvwP
XN7nsnM8SwA=
      "]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.895669212740267*^9, 3.895669237742738*^9}, 
   3.8959260527826757`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"8ddc8406-1e22-4750-a285-1842a55d5912"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"BY\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"name\"", "\[Rule]", "\"Original long-run risk model\""}], 
               ",", 
               TemplateBox[{"23"}, "OutputSizeLimit`Skeleton"], ",", 
               RowBox[{"\"Properties\"", "\[Rule]", 
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"name\"", ",", "\"shortname\"", ",", "\"bibRef\"", ",", 
                    "\"desc\"", ",", "\"parameters\"", ",", "\"stateVars\"", 
                    ",", "\"numStocks\"", ",", "\"assignParam\"", ",", 
                    "\"assignParamStocks\"", ",", 
                    TemplateBox[{"7"}, "OutputSizeLimit`Skeleton"], ",", 
                    "\"endogenousVarNames\"", ",", "\"toStateVars\"", ",", 
                    "\"uncondMomOfStateVars\"", ",", "\"ratioUncondE\"", ",", 
                    "\"coeffsSystem\"", ",", "\"extraInfo\"", ",", 
                    "\"coeffsSolution\"", ",", "\"coeffsSolutionN\""}], 
                   "}"}]}]}], "\[RightAssociation]"}]}], ",", 
         RowBox[{"\"NRC\"", "\[Rule]", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"]}], ",", 
         RowBox[{"\"DES\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], 
             "\[RightAssociation]"}]}]}], "\[RightAssociation]"}], 
     Short[#, 8]& ], "line" -> 4, "sessionID" -> 28993619847547453035, 
   "byteCount" -> 8901504, "size" -> 8, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{{3.895669212740267*^9, 3.895669237742738*^9}, 
   3.895926052953691*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"8cd5f514-0649-4183-bc18-8cd9e631126c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Names", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.895543393384572*^9, 3.895543394493181*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"data\"\>", ",", "\<\"filename\"\>", ",", "\<\"Models\"\>", 
   ",", "\<\"pacletDir\"\>", ",", "\<\"processed\"\>", 
   ",", "\<\"resourcesDir\"\>", ",", "\<\"UncondVar\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8956692139180317`*^9, 3.895669238591384*^9}, {
  3.895926053257743*^9, 3.895926075818914*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"4904b641-91ba-4b32-951d-60008fbc755c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"FernandoDuarte`LongRunRisk`Corr\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Cov\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`covLongBY\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`covLongDES\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`covLongNRC\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Epd0\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Ev\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Ewc0\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`FindRootOptions\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Growth\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Info\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Models\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Moments\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`RecurrenceTableOptions\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Solution\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`ToEquation\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`ToExogenousVars\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`ToNum\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`ToStateVars\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`UncondCorr\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`UncondCov\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`UncondE\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`UncondVar\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Var\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`YieldCurve\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8956692139180317`*^9, 3.895669238591384*^9}, {
  3.895926053257743*^9, 3.8959260758507423`*^9}},
 CellLabel->"Out[12]=",ExpressionUUID->"9d8838bd-4f1a-46e3-9787-88f695d77c6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.895668292671256*^9, 3.895668308662959*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[13]:=",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],

Cell[BoxData[
 TemplateBox[{
  "Switch", "argct", 
   "\"Switch called with \\!\\(\\*RowBox[{\\\"6\\\"}]\\) arguments. Switch \
must be called with an odd number of arguments.\"", 2, 15, 2, 
   28993619847547453035, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.895926059141968*^9, 3.895926086964261*^9}},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"1f7aa984-9941-4430-bf3f-f878776bb06f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8956683171469507`*^9, 3.8956683919835253`*^9}, {
  3.8956684367796392`*^9, 3.895668436972262*^9}, {3.895669259079546*^9, 
  3.8956692679019814`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["Esx", "2"], " ", 
     SuperscriptBox["phix", "2"], " ", 
     SuperscriptBox[
      RowBox[{"A", "[", "1", "]"}], "2"]}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["rhox", "2"]}]]}], "-", 
  FractionBox[
   RowBox[{
    SuperscriptBox["phisxs", "2"], " ", 
    SuperscriptBox[
     RowBox[{"A", "[", "2", "]"}], "2"]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["vx", "2"]}]]}]], "Output",
 CellChangeTimes->{{3.89566925496463*^9, 3.895669268425021*^9}, 
   3.895926060003467*^9, 3.895926096083426*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"d44d08c1-5a80-4eae-aa01-2d2a2be8a484"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<NRC\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672775030727*^9, 3.895672775360661*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["mup", "2"]}], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["mup", "2"], "+", 
       SuperscriptBox["phip", "2"], "-", 
       RowBox[{
        SuperscriptBox["mup", "2"], " ", 
        SuperscriptBox["rhop", "2"]}], "+", 
       RowBox[{"2", " ", "phip", " ", "rhop", " ", "xip"}], "+", 
       SuperscriptBox["xip", "2"]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhop"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhop"}], ")"}]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "1", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", "Esg", " ", "phip", " ", 
   RowBox[{"A", "[", "1", "]"}], " ", 
   RowBox[{"A", "[", "2", "]"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["Esg", "2"], "+", 
     SuperscriptBox["phig", "2"], "-", 
     RowBox[{
      SuperscriptBox["Esg", "2"], " ", 
      SuperscriptBox["rhog", "2"]}], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["rhog", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "2", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", "phip", " ", 
   RowBox[{"A", "[", "1", "]"}], " ", 
   RowBox[{"A", "[", "3", "]"}]}], "+", 
  RowBox[{"2", " ", "Esg", " ", 
   RowBox[{"A", "[", "2", "]"}], " ", 
   RowBox[{"A", "[", "3", "]"}]}], "+", 
  SuperscriptBox[
   RowBox[{"A", "[", "3", "]"}], "2"], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["Esg", "2"]}], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "2"], "+", 
       SuperscriptBox["phig", "2"], "-", 
       RowBox[{
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["rhog", "2"]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "4", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"mup", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]], "-", 
     FractionBox[
      RowBox[{
       RowBox[{
        SuperscriptBox["Esg", "2"], " ", "mup"}], "+", 
       RowBox[{"mup", " ", 
        SuperscriptBox["phig", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["Esg", "2"], " ", "mup", " ", 
        SuperscriptBox["rhog", "2"]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   RowBox[{"A", "[", "1", "]"}], " ", 
   RowBox[{"A", "[", "5", "]"}]}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"Esg", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "3"], "+", 
       RowBox[{"3", " ", "Esg", " ", 
        SuperscriptBox["phig", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["Esg", "3"], " ", 
        SuperscriptBox["rhog", "2"]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   RowBox[{"A", "[", "4", "]"}], " ", 
   RowBox[{"A", "[", "5", "]"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["Esg", "2"], "+", 
          SuperscriptBox["phig", "2"], "-", 
          RowBox[{
           SuperscriptBox["Esg", "2"], " ", 
           SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "rhog"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["rhog", "2"]}], ")"}]}]]}], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["phig", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["rhog", "2"]}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["rhog", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["rhog", "2"]}], ")"}]}]], "+", 
     FractionBox[
      SuperscriptBox["Esg", "4"], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["phig", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      SuperscriptBox["phig", "4"], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "4"], " ", 
       SuperscriptBox["rhog", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["phig", "2"], " ", 
       SuperscriptBox["rhog", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "4"], " ", 
       SuperscriptBox["rhog", "4"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["Esg", "4"]}], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["phig", "2"]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["phig", "4"]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["Esg", "4"], " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["phig", "2"], " ", 
        SuperscriptBox["rhog", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["Esg", "4"], " ", 
        SuperscriptBox["rhog", "4"]}]}], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "rhog"}], ")"}], "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "rhog"}], ")"}], "2"]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "5", "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{3.89592609735596*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"c92fe774-a251-4106-8ff6-6be9a1425123"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<DES\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672777740477*^9, 3.895672778050181*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["Esx", "2"], " ", 
     SuperscriptBox["phix", "2"], " ", 
     SuperscriptBox[
      RowBox[{"A", "[", "1", "]"}], "2"]}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["rhox", "2"]}]]}], "-", 
  FractionBox[
   RowBox[{
    SuperscriptBox["phisxs", "2"], " ", 
    SuperscriptBox[
     RowBox[{"A", "[", "2", "]"}], "2"]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["vx", "2"]}]], "-", 
  FractionBox[
   RowBox[{"2", " ", 
    SuperscriptBox["Esx", "2"], " ", "phipbarx", " ", "phix", " ", 
    RowBox[{"A", "[", "1", "]"}], " ", 
    RowBox[{"A", "[", "3", "]"}]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"rhopbar", " ", "rhox"}]}]], "-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["Esx", "2"], " ", 
       SuperscriptBox["phipbarx", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["Esx", "2"], " ", 
       SuperscriptBox["phipbarxb", "2"]}]}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"A", "[", "3", "]"}], "2"]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["rhopbar", "2"]}]], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["Esg", "2"], "+", 
     SuperscriptBox["phig", "2"], "-", 
     RowBox[{
      SuperscriptBox["Esg", "2"], " ", 
      SuperscriptBox["rhog", "2"]}], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["rhog", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "4", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", "Esg", " ", 
   RowBox[{"A", "[", "4", "]"}], " ", 
   RowBox[{"A", "[", "5", "]"}]}], "+", 
  SuperscriptBox[
   RowBox[{"A", "[", "5", "]"}], "2"], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["Esg", "2"]}], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "2"], "+", 
       SuperscriptBox["phig", "2"], "-", 
       RowBox[{
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["rhog", "2"]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "6", "]"}], "2"]}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"Esg", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]], "-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "3"], "+", 
       RowBox[{"3", " ", "Esg", " ", 
        SuperscriptBox["phig", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["Esg", "3"], " ", 
        SuperscriptBox["rhog", "2"]}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}]}]]}], ")"}], " ", 
   RowBox[{"A", "[", "6", "]"}], " ", 
   RowBox[{"A", "[", "7", "]"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      FractionBox[
       RowBox[{"2", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["Esg", "2"], "+", 
          SuperscriptBox["phig", "2"], "-", 
          RowBox[{
           SuperscriptBox["Esg", "2"], " ", 
           SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "rhog"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox["rhog", "2"]}], ")"}]}]]}], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["phig", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["rhog", "2"]}], ")"}]}]], "+", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["rhog", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["Esg", "2"], "+", 
         SuperscriptBox["phig", "2"], "-", 
         RowBox[{
          SuperscriptBox["Esg", "2"], " ", 
          SuperscriptBox["rhog", "2"]}]}], ")"}]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "rhog"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         SuperscriptBox["rhog", "2"]}], ")"}]}]], "+", 
     FractionBox[
      SuperscriptBox["Esg", "4"], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["phig", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      SuperscriptBox["phig", "4"], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "4"], " ", 
       SuperscriptBox["rhog", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox["Esg", "2"], " ", 
       SuperscriptBox["phig", "2"], " ", 
       SuperscriptBox["rhog", "2"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "+", 
     FractionBox[
      RowBox[{
       SuperscriptBox["Esg", "4"], " ", 
       SuperscriptBox["rhog", "4"]}], 
      RowBox[{"1", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       SuperscriptBox["rhog", "4"]}]], "-", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["Esg", "4"]}], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["phig", "2"]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["phig", "4"]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["Esg", "4"], " ", 
        SuperscriptBox["rhog", "2"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["Esg", "2"], " ", 
        SuperscriptBox["phig", "2"], " ", 
        SuperscriptBox["rhog", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["Esg", "4"], " ", 
        SuperscriptBox["rhog", "4"]}]}], 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "rhog"}], ")"}], "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "rhog"}], ")"}], "2"]}]]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"A", "[", "7", "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{3.89592609866663*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"b634eb55-7f28-4415-8b58-b7c33f1bbb03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", "t", "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895603677180604*^9, 3.895603691941772*^9}, {
  3.8959261111295233`*^9, 3.895926111824382*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["Esx", "2"], " ", 
     SuperscriptBox["phix", "2"], " ", 
     SuperscriptBox[
      RowBox[{"A", "[", "1", "]"}], "2"]}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["rhox", "2"]}]]}], "-", 
  FractionBox[
   RowBox[{
    SuperscriptBox["phisxs", "2"], " ", 
    SuperscriptBox[
     RowBox[{"A", "[", "2", "]"}], "2"]}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox["vx", "2"]}]]}]], "Output",
 CellChangeTimes->{{3.895926103476852*^9, 3.8959261122857513`*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"75aeb88a-96de-414f-af94-6a96ad6e41b7"]
}, Open  ]]
},
WindowSize->{897, 881},
WindowMargins->{{Automatic, 242}, {29, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 90, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 241, 5, 37, "Input",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],
Cell[1285, 41, 954, 23, 142, "Input",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],
Cell[2242, 66, 1802, 36, 119, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[CellGroupData[{
Cell[4069, 106, 1480, 34, 246, "Input",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],
Cell[CellGroupData[{
Cell[5574, 144, 287, 9, 32, "Echo",ExpressionUUID->"66135433-d68b-4f1a-b670-8c8aabba26fc"],
Cell[5864, 155, 463, 14, 32, "Echo",ExpressionUUID->"b57dddc6-07dd-4fa1-80b4-c26441b3b3d1"],
Cell[6330, 171, 284, 9, 32, "Echo",ExpressionUUID->"51687859-56f3-4d68-9f7c-5b162346c7aa"]
}, Open  ]]
}, Open  ]],
Cell[6641, 184, 841, 14, 37, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[CellGroupData[{
Cell[7507, 202, 1315, 26, 90, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[8825, 230, 525, 12, 57, "Message",ExpressionUUID->"39e0f25f-9dbc-4fde-9d9e-96e6681921e3"]
}, Open  ]],
Cell[9365, 245, 218, 5, 37, "Input",ExpressionUUID->"612c660d-6c54-4bf0-b214-400bf80133a3"],
Cell[9586, 252, 215, 4, 37, "Input",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],
Cell[CellGroupData[{
Cell[9826, 260, 1190, 27, 168, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[11019, 289, 203727, 3446, 76, "Output",ExpressionUUID->"8ddc8406-1e22-4750-a285-1842a55d5912"],
Cell[214749, 3737, 2013, 38, 183, "Output",ExpressionUUID->"8cd5f514-0649-4183-bc18-8cd9e631126c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216799, 3780, 317, 5, 64, "Input",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],
Cell[217119, 3787, 433, 7, 42, "Output",ExpressionUUID->"4904b641-91ba-4b32-951d-60008fbc755c"],
Cell[217555, 3796, 1650, 29, 381, "Output",ExpressionUUID->"9d8838bd-4f1a-46e3-9787-88f695d77c6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219242, 3830, 577, 15, 90, "Input",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],
Cell[219822, 3847, 437, 10, 35, "Message",ExpressionUUID->"1f7aa984-9941-4430-bf3f-f878776bb06f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220296, 3862, 434, 9, 37, "Input",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],
Cell[220733, 3873, 715, 22, 66, "Output",ExpressionUUID->"d44d08c1-5a80-4eae-aa01-2d2a2be8a484"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221485, 3900, 329, 7, 37, "Input",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],
Cell[221817, 3909, 9221, 290, 611, "Output",ExpressionUUID->"c92fe774-a251-4106-8ff6-6be9a1425123"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231075, 4204, 329, 7, 37, "Input",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],
Cell[231407, 4213, 8408, 268, 555, "Output",ExpressionUUID->"b634eb55-7f28-4415-8b58-b7c33f1bbb03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239852, 4486, 354, 7, 37, "Input",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],
Cell[240209, 4495, 670, 21, 66, "Output",ExpressionUUID->"75aeb88a-96de-414f-af94-6a96ad6e41b7"]
}, Open  ]]
}
]
*)

