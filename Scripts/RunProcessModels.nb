(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     93328,       2035]
NotebookOptionsPosition[     41703,       1114]
NotebookOutlinePosition[     88062,       1969]
CellTagsIndexPosition[     88019,       1966]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895667804661036*^9, 3.895667805565455*^9}, 
   3.895668160653308*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.895602929877912*^9, 3.895602945574039*^9}, {
   3.895603150629443*^9, 3.895603155898622*^9}, 3.895603639155025*^9, {
   3.89560422507939*^9, 3.895604271915659*^9}, {3.895667789174368*^9, 
   3.895667803230785*^9}, {3.8956679941198807`*^9, 3.89566803225379*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"modelsToProcess", "=", 
    RowBox[{"\"\<NRCStochVol\>\"", " ", "|", "\"\<DES\>\""}]}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "\"\<NRCStochVol\>\"", " ", "|", " ", "\"\<BY\>\"", "|", "\"\<BKY\>\"", 
     "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\""}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{"|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}], "*)"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], "*)"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"must", " ", "be", " ", "a", " ", "subset", " ", "of", " ", 
    RowBox[{
    "Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}, 
   3.895668171011196*^9, 3.895672752010098*^9, {3.895985149806714*^9, 
   3.895985168119672*^9}, {3.895990971331506*^9, 3.895990978839967*^9}, {
   3.896008277581081*^9, 3.896008278872533*^9}, {3.8960114624686937`*^9, 
   3.8960114699736547`*^9}, {3.896011530041645*^9, 3.896011539393187*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"FernandoDuarte`LongRunRisk`Models", "=", 
    RowBox[{"processModels", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"KeySelect", "[", 
       RowBox[{"models", ",", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"KeySelect", "[", 
       RowBox[{"modelsExtraInfo", ",", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<FindRootOptions\>\"", "->", 
       RowBox[{"{", "FernandoDuarte`LongRunRisk`FindRootOptions", "}"}]}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
       RowBox[{
       "{", "FernandoDuarte`LongRunRisk`RecurrenceTableOptions", "}"}]}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"\"\<initialGuess\>\"", " ", "->", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Ewc\>\"", "->", 
          RowBox[{"{", "FernandoDuarte`LongRunRisk`Ewc0", "}"}]}], ",", 
         RowBox[{"\"\<Epd\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"{", "FernandoDuarte`LongRunRisk`Epd0", "}"}], "}"}]}]}], 
        "|>"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.8956680395845013`*^9, 3.8956680418619413`*^9}, {
  3.897581222528736*^9, 3.897581225557213*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 6, 1, 20509668945611408769, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.897581986451001*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"496242f1-c485-4365-9f4b-6d9e25c93994"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 6, 2, 20509668945611408769, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8975819867455053`*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"c1245439-229f-486f-8396-5e9a143d8ac6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 6, 3, 20509668945611408769, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.89758198699924*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"ac403338-f694-4276-8b8d-960ff764596c"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"FindRoot\\\", \
\\\"::\\\", \\\"lstol\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 6, 4, 20509668945611408769, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.897581987246101*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"1d99b4c7-6041-4c32-83ee-723dcee2ab77"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"760.036677`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.89758198730341*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"387f50e7-33c5-4425-b3d2-814d962e9f94"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
    "FernandoDuarte`LongRunRisk`Models"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.895543121137817*^9, 3.895543136900535*^9}, {
   3.895667942531457*^9, 3.8956679429341707`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Put", "[", 
   RowBox[{"data", ",", "filename"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}, 
   3.8955431197061167`*^9, {3.895668067742714*^9, 3.895668079032886*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[
 TemplateBox[{
  "Symbol", "symname", 
   "\"The string \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"ResourceSystemClient`DefinitionUtilities`\
WithContext\\\\\\\"\\\"}]\\)\\\" cannot be used for a symbol name. A symbol \
name must start with a letter followed by letters and numbers.\"", 2, 10, 5, 
   20509668945611408769, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.89758233086052*^9},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"eee0f90e-e837-4151-9814-24430f0f5b81"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"load", " ", "and", " ", "test"}], "*)"}]], "Input",
 CellChangeTimes->{{3.895668123084955*^9, 
  3.895668129710462*^9}},ExpressionUUID->"612c660d-6c54-4bf0-b214-\
400bf80133a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895668130981999*^9, 3.895668133141368*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resourcesDir", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DirectoryName", "[", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
       "\"\<Resources\>\""}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}, {
   3.8956681020776243`*^9, 3.8956681346619*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Names", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.895543393384572*^9, 3.895543394493181*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.895668292671256*^9, 3.895668308662959*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8956683171469507`*^9, 3.8956683919835253`*^9}, {
  3.8956684367796392`*^9, 3.895668436972262*^9}, {3.895669259079546*^9, 
  3.8956692679019814`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<NRC\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672775030727*^9, 3.895672775360661*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<DES\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672777740477*^9, 3.895672778050181*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", "t", "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895603677180604*^9, 3.895603691941772*^9}, {
  3.8959261111295233`*^9, 3.895926111824382*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],

Cell[CellGroupData[{

Cell["debug", "Section",
 CellChangeTimes->{{3.896012749195135*^9, 
  3.896012750579607*^9}},ExpressionUUID->"6865c1e2-8209-4ede-8d92-\
85d2de7115a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "unconditional", " ", "moments", " ", "of", " ", "state", " ", "variables",
     " ", "are", " ", "found", "  ", "by", " ", "solving", " ", "a", " ", 
    "system", " ", "of", " ", "equations"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"n", "=", "2"}], "\n", 
   RowBox[{
    RowBox[{"model", "=", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Models", "[", "\"\<NRCStochVol\>\"", "]"}]}],
     ";"}], "\n", 
   RowBox[{
    RowBox[{"stateVars", "=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Variables", "[", 
           RowBox[{
            RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}],
            " ", "]"}], ",", 
          RowBox[{
           RowBox[{"x_", "[", "_", "]"}], ":>", "x"}]}], "]"}], ",", "0"}], 
       "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"mapAll", " ", "=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"model", "[", "\"\<exogenousEq\>\"", "]"}], ",", 
        RowBox[{"model", "[", "\"\<endogenousEq\>\"", "]"}]}], "]"}], "]"}]}],
     ";"}], "\n", 
   RowBox[{
    RowBox[{"stateVarsNoEps", " ", "=", " ", 
     RowBox[{"Complement", "[", 
      RowBox[{"stateVars", ",", 
       RowBox[{"Cases", "[", 
        RowBox[{"stateVars", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"x_Symbol", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<eps\>\""}], 
               "]"}], "&"}], ")"}]}], "[", "y___", "]"}], ":>", 
          RowBox[{"x", "[", "y", "]"}]}], ",", "Infinity", ",", 
         RowBox[{"Heads", "->", "True"}]}], "]"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{"stateVarsTuples", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Tuples", "[", 
         RowBox[{"stateVarsNoEps", ",", "i"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "n"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}]}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.89601284960814*^9}, 
   3.896013084776215*^9, 3.896013679223404*^9},
 CellLabel->
  "In[106]:=",ExpressionUUID->"3b766446-9c17-424b-91d4-85b30dcb7575"],

Cell[BoxData[
 RowBox[{"stateVarsSets", "=", 
  RowBox[{
   RowBox[{"DeleteDuplicatesBy", "[", "Sort", "]"}], "@", 
   "stateVarsTuples"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012852489215*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"99afab60-725e-464e-be07-66118a9607f1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"addt", "[", "x_", "]"}], " ", ":=", " ", 
   RowBox[{"x", "[", "t", "]"}]}], ";"}], "\n", 
 RowBox[{"stateVarsProducts", "=", 
  RowBox[{"Replace", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"addt", ",", "stateVarsSets", ",", 
      RowBox[{"{", "2", "}"}]}], "]"}], ",", 
    RowBox[{"List", "->", "Times"}], ",", 
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012854991173*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"fffcb921-70c6-429a-ae7c-ffbbf6a7407f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "evaluate", " ", "products", " ", "of", " ", "powers", " ", "using", " ", 
    "equations", " ", "for", " ", "exogenous", " ", "processes"}], "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"stateVarsMapAll", "=", 
     RowBox[{"stateVarsProducts", "/.", "mapAll"}]}], ";"}], "\n", 
   RowBox[{"SetSymbolsContext", "@", "stateVarsMapAll"}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012856779956*^9}, {
  3.896012947046574*^9, 3.896012950870517*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"023414e3-1e9a-4e75-af85-9933bb5cdc21"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.89601300544252*^9, 3.896013005929308*^9}, {
  3.8960132590041437`*^9, 3.896013270448732*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"842d98da-27fa-4edb-a739-4ae4af53c1f3"],

Cell[BoxData[
 RowBox[{"stateVarsEqs", " ", "=", " ", 
  RowBox[{
  "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`uncondEStep", "[", 
   RowBox[{"stateVarsMapAll", ",", "model"}], "]"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.8960128599428864`*^9}, {
  3.8960129735385113`*^9, 3.8960129795475693`*^9}, {3.896013010967388*^9, 
  3.896013013523079*^9}, {3.896013587015312*^9, 3.896013587564784*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"5a79add5-3aa9-4882-899f-e408f6a794da"],

Cell["Begin uncondEStep", "Text",
 CellChangeTimes->{{3.896013140749823*^9, 
  3.896013154065579*^9}},ExpressionUUID->"c76a79b6-0ec7-4bb9-ba2f-\
87f2e92a50be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"stateVarst", " ", "=", " ", 
   RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"assignParam", " ", "=", " ", 
   RowBox[{"model", "[", "\"\<assignParam\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"assignParamStocks", " ", "=", " ", 
   RowBox[{"model", "[", "\"\<assignParamStocks\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"rulesEfun", " ", "=", " ", 
   RowBox[{"t", " ", "|->", " ", 
    RowBox[{
    "FernandoDuarte`LongRunRisk`Model`Shocks`rulesE", "[", "t", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stateVars", "=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"Variables", "[", 
         RowBox[{"stateVarst", "[", "t", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"x_", "[", "_", "]"}], ":>", "x"}]}], "]"}], ",", "0"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stateVarsNoEps", " ", "=", " ", 
   RowBox[{"Complement", "[", 
    RowBox[{"stateVars", ",", 
     RowBox[{"Cases", "[", 
      RowBox[{"stateVars", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"x_Symbol", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{
              RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<eps\>\""}], 
             "]"}], "&"}], ")"}]}], "[", "y___", "]"}], ":>", 
        RowBox[{"x", "[", "y", "]"}]}], ",", "Infinity", ",", 
       RowBox[{"Heads", "->", "True"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rulesE", "[", "t_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"rulesEfun", "[", "t", "]"}], "//.", "assignParam"}], "//.", 
   "assignParamStocks"}]}]}], "Input",
 CellChangeTimes->{{3.896013157809403*^9, 3.896013193598542*^9}, 
   3.896013233376586*^9},
 CellLabel->
  "In[119]:=",ExpressionUUID->"f69111da-a274-485e-bc25-ecbc3bf46f9d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"4", ",", "5", ",", "7", ",", "8"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8960137577811728`*^9, 
  3.8960137862097187`*^9}},ExpressionUUID->"4d5b32d9-a556-4469-9643-\
5b16ba852024"],

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{"stateVarsMapAll", "[", 
   RowBox[{"[", "4", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.896013157809403*^9, 3.896013193598542*^9}, {
  3.896013233376586*^9, 3.896013302698998*^9}, {3.896013335967751*^9, 
  3.8960133999818687`*^9}, {3.896013478900581*^9, 3.896013479026178*^9}, {
  3.896013511956067*^9, 3.896013521949685*^9}, {3.896013706895028*^9, 
  3.896013806484803*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"27e1d538-7294-4f22-8f72-69d8bd8b8166"],

Cell[BoxData[
 RowBox[{"exprLagStateVarsProduct", "=", 
  RowBox[{
   RowBox[{"ExpandAll", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"expr", "/.", "cond`Private`modelContextRules"}], "//.", 
       RowBox[{"Normal", "@", 
        RowBox[{"model", "[", "\"\<endogenousEq\>\"", "]"}]}]}], "/.", 
      RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}], "/.", 
     "cond`Private`modelContextRules"}], "]"}], "//.", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`lagStateVarsProduct", "[", 
    RowBox[{"model", ",", "stateVarsNoEps"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.896013896087077*^9, 3.896013935294962*^9}, {
  3.896013972239101*^9, 3.896014010909161*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"9eedf8ed-2b20-41e7-9b1b-1cfe69cd16bd"],

Cell[BoxData[
 RowBox[{"FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`evNoEps", "[", 
  RowBox[{"model", ",", "stateVarsNoEps"}], "]"}]], "Input",ExpressionUUID->\
"165ac44d-5533-4e1d-aed0-98477a0ae4c7"],

Cell[BoxData[
 RowBox[{"ee", "=", 
  RowBox[{
   RowBox[{"rest_.", " ", "*", " ", 
    RowBox[{"(", "\n", "\t\t", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"e_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{"SymbolName", "[", "#", "]"}], ",", " ", 
               "\"\<eps\>\""}], "]"}], "&"}], ")"}]}], "[", "i__", "]"}], "[", 
         RowBox[{"r__", ",", " ", "M___"}], "]"}], "^", 
        RowBox[{"(", "q_.", ")"}]}], ")"}], " ", "*", " ", "\n", "\t\t", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"x_Symbol", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"Alternatives", "@@", 
               RowBox[{"(", 
                RowBox[{"SymbolName", "/@", "stateVarsNoEps"}], ")"}]}], ",", 
              " ", 
              RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], ")"}]}], 
         "[", 
         RowBox[{"t__", ",", " ", "j___"}], "]"}], "^", 
        RowBox[{"(", "p_.", ")"}]}], ")"}]}], "\n", "\t", ")"}]}], " ", ":>", 
   " ", 
   RowBox[{"cond`Private`lagStateVarst", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{"rest", " ", "*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"e", "[", "i", "]"}], "[", 
        RowBox[{"r", ",", " ", "M"}], "]"}], "^", "q"}], " ", "*", " ", 
      RowBox[{
       RowBox[{"x", "[", 
        RowBox[{"t", ",", " ", "j"}], "]"}], "^", "p"}]}], ",", "\n", 
     "\t\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FullSimplify", "[", 
        RowBox[{
         RowBox[{"r", "<=", "t"}], ",", " ", 
         RowBox[{
          RowBox[{"r", ">=", "0"}], " ", "&&", " ", 
          RowBox[{"t", ">=", "0"}]}]}], "]"}], ",", " ", 
       RowBox[{"r", "-", "1"}], ",", " ", "t"}], "]"}], ",", "\n", "\t\t\t", 
     "model"}], "\n", "\t\t", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.896014188737235*^9, 3.8960142064450693`*^9}, 
   3.896014274869935*^9},
 CellLabel->
  "In[181]:=",ExpressionUUID->"1730e394-4546-4c4c-9b48-c5db72d390db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ExpandAll", "[", "exprLagStateVarsProduct", "]"}], "[", 
  RowBox[{"[", "5", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"oo", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"ExpandAll", "[", "exprLagStateVarsProduct", "]"}], "[", 
    RowBox[{"[", "5", "]"}], "]"}], "/.", 
   RowBox[{
    RowBox[{"rest_.", " ", "*", " ", 
     RowBox[{"(", "\n", "\t\t", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"e_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{"SymbolName", "[", "#", "]"}], ",", " ", 
               "\"\<eps\>\""}], "]"}], "&"}], ")"}]}], "[", "i__", "]"}], "[", 
         RowBox[{"r__", ",", " ", "M___"}], "]"}], "^", 
        RowBox[{"(", "q_.", ")"}]}], ")"}], " ", "\[IndentingNewLine]", 
      ")"}]}], " ", ":>", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"rest", " ", "*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"e", "[", "i", "]"}], "[", 
         RowBox[{"r", ",", " ", "M"}], "]"}], "^", "q"}]}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FullSimplify", "[", 
         RowBox[{
          RowBox[{"r", "<=", "t"}], ",", " ", 
          RowBox[{
           RowBox[{"r", ">=", "0"}], " ", "&&", " ", 
           RowBox[{"t", ">=", "0"}]}]}], "]"}], ",", " ", 
        RowBox[{"r", "-", "1"}], ",", " ", "t"}], "]"}]}], 
     "}"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.896014242498866*^9, 3.896014249179356*^9}, {
  3.896014299282455*^9, 3.89601445054817*^9}, {3.896014488339583*^9, 
  3.8960145069240637`*^9}, {3.896014595436129*^9, 3.896014618810924*^9}, {
  3.896014669268561*^9, 3.896014669882531*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"7ff03cf2-0dc4-47e4-aa29-e34946535476"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mapAllt", "[", "t_", "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "s", "}"}], ",", 
     RowBox[{"Replace", "[", 
      RowBox[{
       RowBox[{"Normal", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"model", "[", "\"\<exogenousEq\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<endogenousEq\>\"", "]"}]}], "]"}], "]"}],
        ",", 
       RowBox[{"p_Rule", " ", ":>", " ", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"p", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"s_", ",", "q___"}], "]"}], "/;", 
            RowBox[{"Refine", "[", 
             RowBox[{
              RowBox[{"s", ">", "t"}], ",", 
              RowBox[{
               RowBox[{"s", ">=", "0"}], "&&", 
               RowBox[{"t", ">=", "0"}]}]}], "]"}]}], ")"}], " ", ":>", " ", 
          RowBox[{
           RowBox[{"p", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "[", 
           RowBox[{"s", ",", "q"}], "]"}]}], " ", ")"}]}], ",", "2"}], 
      "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"\t", 
  RowBox[{
   RowBox[{
    RowBox[{"lagt", "[", 
     RowBox[{"x_", ",", "t_"}], "]"}], ":=", " ", 
    RowBox[{"x", "//.", 
     RowBox[{"mapAllt", "[", "t", "]"}]}]}], " ", ";"}]}]}], "Input",
 CellChangeTimes->{3.896014664822055*^9},
 CellLabel->
  "In[206]:=",ExpressionUUID->"2b95a44f-a9e7-424b-9390-0efb0d1e55f7"],

Cell[BoxData[
 RowBox[{"lagt", "[", 
  RowBox[{
   RowBox[{
   "oo", "/.", 
    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`modelContextRules"}], ",", 
   RowBox[{"t", "-", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{3.896014900718594*^9},
 CellLabel->
  "In[211]:=",ExpressionUUID->"2c079b67-2630-48ee-b80d-30eaa055adb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lagt", "[", 
   RowBox[{
    RowBox[{
    "oo", "/.", 
     "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`modelContextRules"}], ",", 
    RowBox[{"t", "-", "2"}]}], "]"}], "/.", " ", 
  RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[212]:=",ExpressionUUID->"fe7bee41-008e-418f-9638-f801a55e1aa1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"lagt", "[", 
    RowBox[{
     RowBox[{
     "oo", "/.", 
      "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`modelContextRules"}], ",", 
     RowBox[{"t", "-", "2"}]}], "]"}], "/.", " ", 
   RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}], "/.", " ", 
  RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.89601469151685*^9, 3.896014692377431*^9}, {
  3.89601472940178*^9, 3.8960147514787292`*^9}, {3.896014806418997*^9, 
  3.896014815441044*^9}, {3.89601488103668*^9, 3.8960149041562433`*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"a5a09bc2-d393-4847-9f83-0be317818d9c"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[214]:=",ExpressionUUID->"58263a5e-a437-47e5-8112-87277cbfa55a"],

Cell[BoxData[
 RowBox[{"exprEvNoEps", "=", 
  RowBox[{
   RowBox[{"ExpandAll", "[", "exprLagStateVarsProduct", "]"}], "/.", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`evNoEps", "[", 
    RowBox[{"model", ",", "stateVarsNoEps"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.896013994205956*^9, 
  3.896014059581006*^9}},ExpressionUUID->"716699b8-e53b-4a06-bbc2-\
f2a5e5edc0e8"],

Cell[BoxData[{
 RowBox[{"Needs", "[", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\>\"", "->", "\"\<cond`\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"s1", "=", 
  RowBox[{
  "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`evNoEpsStateVarsProduct", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"expr", "/.", "cond`Private`modelContextRules"}], "//.", 
      RowBox[{"Normal", "@", 
       RowBox[{"model", "[", "\"\<endogenousEq\>\"", "]"}]}]}], "/.", 
     RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}], ",", "model", ",", 
    "stateVarsNoEps"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.896013157809403*^9, 3.896013193598542*^9}, {
  3.896013233376586*^9, 3.896013302698998*^9}, {3.896013335967751*^9, 
  3.8960133999818687`*^9}, {3.896013478900581*^9, 3.896013479026178*^9}, {
  3.896013511956067*^9, 3.896013521949685*^9}, {3.896013706895028*^9, 
  3.896013806484803*^9}},ExpressionUUID->"d0608e31-f0b8-4543-a8f0-\
1c2c9ec86f1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixedPoint", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`evNoEpsStateVarsProduct", "[", 
      RowBox[{"#", ",", "model", ",", "stateVarsNoEps"}], "]"}], "&"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"expr", "/.", "cond`Private`modelContextRules"}], ")"}], "//.", 
      RowBox[{"Normal", "@", 
       RowBox[{"model", "[", "\"\<endogenousEq\>\"", "]"}]}]}], "/.", 
     RowBox[{"model", "[", "\"\<toStateVars\>\"", "]"}]}]}], "]"}], "/.", 
  RowBox[{"rulesE", "[", "_", "]"}]}]], "Input",
 CellChangeTimes->{{3.896013406129775*^9, 3.896013470741461*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"add1c85d-b83e-420c-a64f-7fee93989b10"],

Cell["End uncondEStep", "Text",
 CellChangeTimes->{{3.896013148619659*^9, 
  3.896013152177329*^9}},ExpressionUUID->"c33918dc-e21c-44cd-a4ce-\
075f93ffe196"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "find", " ", "time", " ", "indices", " ", "of", " ", "state", " ", 
    "variables", " ", "for", " ", "each", " ", "summand", " ", "of", " ", 
    "each", " ", "equation"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"times0", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{"#", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"k_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"Alternatives", "@@", 
                RowBox[{"(", 
                 RowBox[{"SymbolName", "/@", "stateVarsNoEps"}], ")"}]}], ",", 
               RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], ")"}]}],
           "[", "g_", "]"}], ":>", "g"}], ",", "Infinity"}], "]"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{"Flatten", "@", 
       RowBox[{"(", 
        RowBox[{"List", "@@@", "stateVarsEqs"}], ")"}]}], ")"}]}]}], "\n", 
   RowBox[{"times", "=", 
    RowBox[{"times0", "/.", 
     RowBox[{
      RowBox[{"{", "}"}], "->", 
      RowBox[{"Sequence", "[", "]"}]}]}]}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012862359795*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"3a750a6c-18d7-4a49-8154-de4dc1a8c547"],

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"SameQ", "@@@", "times"}], ")"}]}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"46e0e647-e94c-45cf-81f3-a869d0e0263c"],

Cell[BoxData[
 RowBox[{"\t\t\t", 
  RowBox[{"(*", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{"SameQ", "@@@", "times"}], ")"}]}], ","}]}], "*)"}]}]], "Code",\

 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012862359795*^9}, {
  3.896013618502966*^9, 
  3.896013625273431*^9}},ExpressionUUID->"41635be7-eceb-43b6-95c8-\
02e2374a19c8"],

Cell[BoxData[
 RowBox[{"\t\t\t\t", 
  RowBox[{"(*", 
   RowBox[{
   "if", " ", "all", " ", "state", " ", "variables", " ", "have", " ", "the", 
    " ", "same", " ", "time", " ", "index", " ", "within", " ", "each", " ", 
    "summand"}], "*)"}], "\n", "\t\t\t\t\t", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"create", " ", "names", " ", "for", " ", "each", " ", "moment"}], 
    ",", " ", 
    RowBox[{
    "which", " ", "are", " ", "the", " ", "unknowns", " ", "we", " ", "solve",
      " ", "for"}]}], "*)"}], "\n", "\t\t\t\t\t", 
  RowBox[{
   RowBox[{
    RowBox[{"powers", " ", "=", 
     RowBox[{
      RowBox[{"CoefficientRules", "[", 
       RowBox[{"stateVarsProducts", ",", 
        RowBox[{"addt", "/@", "stateVarsNoEps"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{";;", ",", "1", ",", "1"}], "]"}], "]"}]}], ";"}], "\n", 
   "\t\t\t\t\t", 
   RowBox[{
    RowBox[{"powersString", "=", 
     RowBox[{"IntegerString", "@", "powers"}]}], ";"}], "\n", "\t\t\t\t\t", 
   RowBox[{
    RowBox[{"stateVarsNoEpsString", "=", 
     RowBox[{"ToString", "/@", "stateVarsNoEps"}]}], ";"}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012862359795*^9}, {
  3.896013618502966*^9, 3.8960136311919327`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"b75a5018-1584-402e-8111-d14ab3b9b7b4"],

Cell[BoxData[
 RowBox[{"\t\t\t\t\t", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"unknowns", " ", "=", " ", 
     RowBox[{"Symbol", " ", "/@", " ", 
      RowBox[{"Map", "[", 
       RowBox[{"StringJoin", ",", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"IntegerQ", "[", "#", "]"}], ",", 
             RowBox[{"IntegerString", "[", "#", "]"}], ",", 
             RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], ",", " ", 
          
          RowBox[{"(", 
           RowBox[{"Tally", " ", "/@", " ", "stateVarsSets"}], ")"}], ",", 
          " ", 
          RowBox[{"{", "3", "}"}]}], "]"}], ",", " ", 
        RowBox[{"{", "1", "}"}]}], "]"}]}]}], ";"}], "*)"}], "\n", 
  "\t\t\t\t\t", 
  RowBox[{"unknowns", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Symbol", "[", 
      RowBox[{
      "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`\>\"", "<>", "#"}], "]"}], "&"}], 
    " ", "/@", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"StringJoin", ",", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"IntegerQ", "[", "#", "]"}], ",", 
           RowBox[{"IntegerString", "[", "#", "]"}], ",", 
           RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], ",", " ", 
        RowBox[{"(", 
         RowBox[{"Tally", " ", "/@", " ", "stateVarsSets"}], ")"}], ",", " ", 
        
        RowBox[{"{", "3", "}"}]}], "]"}], ",", " ", 
      RowBox[{"{", "1", "}"}]}], "]"}]}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012862359795*^9}, {
  3.896013618502966*^9, 3.896013635108715*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"75c2e2f8-768f-42d3-8dcf-2825c36127eb"],

Cell[BoxData[
 RowBox[{"\t\t\t\t\t", 
  RowBox[{
   RowBox[{
    RowBox[{"nameRulesUnsorted", "=", 
     RowBox[{"Thread", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"stateVarsProducts", "/.", " ", 
         RowBox[{
          RowBox[{"x_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<t\>\""}], 
              "]"}], "&"}], ")"}]}], " ", "->", "_"}]}], " ", ")"}], "->", 
       "unknowns"}], "]"}]}], ";"}], "\n", "\t\t\t\t\t", 
   RowBox[{"(*", 
    RowBox[{
    "sort", " ", "nameRulesUnsorted", " ", "to", " ", "apply", " ", 
     "products", " ", "of", " ", "a", " ", "larger", " ", "number", " ", "of",
      " ", "variables", " ", "first"}], "*)"}], "\n", "\t\t\t\t\t", 
   RowBox[{
    RowBox[{"sortOrder", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"Count", "[", 
        RowBox[{"#", ",", "0"}], "]"}], "&"}], "/@", "powers"}]}], ";"}], 
   "\n", "\t\t\t\t\t", 
   RowBox[{
    RowBox[{
     RowBox[{"sortFun", "[", "namerule_", "]"}], ":=", 
     RowBox[{"First", "@", 
      RowBox[{"Extract", "[", 
       RowBox[{"sortOrder", ",", 
        RowBox[{"Position", "[", 
         RowBox[{"nameRulesUnsorted", ",", "namerule"}], "]"}]}], "]"}]}]}], 
    ";"}], "\n", "\t\t\t\t\t", 
   RowBox[{
    RowBox[{"nameRules", "=", 
     RowBox[{"Sort", "[", 
      RowBox[{"nameRulesUnsorted", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"sortFun", "[", "#1", "]"}], "<", 
          RowBox[{"sortFun", "[", "#2", "]"}]}], ")"}], "&"}]}], "]"}]}], 
    ";"}], "\n", "\t\t\t\t\t", 
   RowBox[{"(*", 
    RowBox[{"create", " ", "system", " ", "of", " ", "equations"}], "*)"}], 
   "\n", "\t\t\t\t\t", 
   RowBox[{
    RowBox[{"system", "=", 
     RowBox[{
      RowBox[{"Thread", "[", 
       RowBox[{"stateVarsProducts", "==", "stateVarsEqs"}], "]"}], "/.", 
      "nameRules"}]}], ";"}], "\n", "\t\t\t\t\t", 
   RowBox[{"{", 
    RowBox[{"nameRules", ",", "system", ",", "unknowns"}], "}"}], "\n", 
   "\t\t", "\n", "\t\t\t\t"}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.896012754595724*^9, 3.896012862359795*^9}, {
  3.896013618502966*^9, 3.896013633710038*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"a9c906b2-ffa4-46da-bd3a-ab1edf70b19a"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{"system", ",", "unknowns"}], "]"}]], "Input",
 CellChangeTimes->{{3.896013666167348*^9, 3.8960136674277477`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"1526d43d-6c01-4ca6-b97d-53ba6e71139e"]
}, Open  ]]
},
WindowSize->{1048, 841},
WindowMargins->{{37, Automatic}, {Automatic, 29}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 64, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 240, 5, 37, "Input",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],
Cell[1284, 41, 954, 23, 142, "Input",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],
Cell[2241, 66, 2020, 36, 119, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[CellGroupData[{
Cell[4286, 106, 1600, 37, 220, "Input",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],
Cell[5889, 145, 594, 12, 79, "Message",ExpressionUUID->"496242f1-c485-4365-9f4b-6d9e25c93994"],
Cell[6486, 159, 596, 12, 79, "Message",ExpressionUUID->"c1245439-229f-486f-8396-5e9a143d8ac6"],
Cell[7085, 173, 593, 12, 79, "Message",ExpressionUUID->"ac403338-f694-4276-8b8d-960ff764596c"],
Cell[7681, 187, 451, 10, 35, "Message",ExpressionUUID->"1d99b4c7-6041-4c32-83ee-723dcee2ab77"],
Cell[8135, 199, 205, 4, 42, "Output",ExpressionUUID->"387f50e7-33c5-4425-b3d2-814d962e9f94"]
}, Open  ]],
Cell[8355, 206, 841, 14, 37, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[CellGroupData[{
Cell[9221, 224, 1315, 26, 90, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[10539, 252, 524, 12, 57, "Message",ExpressionUUID->"eee0f90e-e837-4151-9814-24430f0f5b81"]
}, Open  ]],
Cell[11078, 267, 218, 5, 37, "Input",ExpressionUUID->"612c660d-6c54-4bf0-b214-400bf80133a3"],
Cell[11299, 274, 215, 4, 37, "Input",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],
Cell[11517, 280, 1190, 27, 142, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[12710, 309, 317, 5, 64, "Input",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],
Cell[13030, 316, 547, 14, 90, "Input",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],
Cell[13580, 332, 434, 9, 37, "Input",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],
Cell[14017, 343, 329, 7, 37, "Input",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],
Cell[14349, 352, 329, 7, 37, "Input",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],
Cell[14681, 361, 354, 7, 37, "Input",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"],
Cell[CellGroupData[{
Cell[15060, 372, 150, 3, 84, "Section",ExpressionUUID->"6865c1e2-8209-4ede-8d92-85d2de7115a0"],
Cell[15213, 377, 2440, 67, 190, "Code",ExpressionUUID->"3b766446-9c17-424b-91d4-85b30dcb7575",
 InitializationCell->False],
Cell[17656, 446, 327, 8, 45, "Code",ExpressionUUID->"99afab60-725e-464e-be07-66118a9607f1",
 InitializationCell->False],
Cell[17986, 456, 646, 17, 70, "Code",ExpressionUUID->"fffcb921-70c6-429a-ae7c-ffbbf6a7407f",
 InitializationCell->False],
Cell[18635, 475, 640, 16, 94, "Code",ExpressionUUID->"023414e3-1e9a-4e75-af85-9933bb5cdc21",
 InitializationCell->False],
Cell[19278, 493, 371, 9, 37, "Input",ExpressionUUID->"842d98da-27fa-4edb-a739-4ae4af53c1f3"],
Cell[19652, 504, 569, 11, 45, "Code",ExpressionUUID->"5a79add5-3aa9-4882-899f-e408f6a794da",
 InitializationCell->False],
Cell[20224, 517, 159, 3, 44, "Text",ExpressionUUID->"c76a79b6-0ec7-4bb9-ba2f-87f2e92a50be"],
Cell[20386, 522, 2011, 55, 194, "Input",ExpressionUUID->"f69111da-a274-485e-bc25-ecbc3bf46f9d"],
Cell[22400, 579, 224, 5, 37, "Input",ExpressionUUID->"4d5b32d9-a556-4469-9643-5b16ba852024"],
Cell[22627, 586, 511, 10, 37, "Input",ExpressionUUID->"27e1d538-7294-4f22-8f72-69d8bd8b8166"],
Cell[23141, 598, 836, 19, 116, "Input",ExpressionUUID->"9eedf8ed-2b20-41e7-9b1b-1cfe69cd16bd"],
Cell[23980, 619, 247, 4, 37, "Input",ExpressionUUID->"165ac44d-5533-4e1d-aed0-98477a0ae4c7"],
Cell[24230, 625, 2184, 60, 220, "Input",ExpressionUUID->"1730e394-4546-4c4c-9b48-c5db72d390db"],
Cell[26417, 687, 1828, 48, 116, "Input",ExpressionUUID->"7ff03cf2-0dc4-47e4-aa29-e34946535476"],
Cell[28248, 737, 1537, 44, 116, "Input",ExpressionUUID->"2b95a44f-a9e7-424b-9390-0efb0d1e55f7"],
Cell[29788, 783, 368, 10, 37, "Input",ExpressionUUID->"2c079b67-2630-48ee-b80d-30eaa055adb1"],
Cell[30159, 795, 410, 11, 64, "Input",ExpressionUUID->"fe7bee41-008e-418f-9638-f801a55e1aa1"],
Cell[30572, 808, 707, 16, 64, "Input",ExpressionUUID->"a5a09bc2-d393-4847-9f83-0be317818d9c"],
Cell[31282, 826, 177, 4, 37, "Input",ExpressionUUID->"58263a5e-a437-47e5-8112-87277cbfa55a"],
Cell[31462, 832, 439, 10, 64, "Input",ExpressionUUID->"716699b8-e53b-4a06-bbc2-f2a5e5edc0e8"],
Cell[31904, 844, 1061, 23, 90, "Input",ExpressionUUID->"d0608e31-f0b8-4543-a8f0-1c2c9ec86f1b"],
Cell[32968, 869, 799, 19, 90, "Input",ExpressionUUID->"add1c85d-b83e-420c-a64f-7fee93989b10"],
Cell[33770, 890, 157, 3, 44, "Text",ExpressionUUID->"c33918dc-e21c-44cd-a4ce-075f93ffe196"],
Cell[33930, 895, 1338, 36, 94, "Code",ExpressionUUID->"3a750a6c-18d7-4a49-8154-de4dc1a8c547",
 InitializationCell->False],
Cell[35271, 933, 188, 4, 37, "Input",ExpressionUUID->"46e0e647-e94c-45cf-81f3-a869d0e0263c"],
Cell[35462, 939, 417, 13, 45, "Code",ExpressionUUID->"41635be7-eceb-43b6-95c8-02e2374a19c8",
 InitializationCell->False],
Cell[35882, 954, 1335, 33, 142, "Code",ExpressionUUID->"b75a5018-1584-402e-8111-d14ab3b9b7b4",
 InitializationCell->False],
Cell[37220, 989, 1859, 49, 70, "Code",ExpressionUUID->"75c2e2f8-768f-42d3-8dcf-2825c36127eb",
 InitializationCell->False],
Cell[39082, 1040, 2358, 64, 262, "Code",ExpressionUUID->"a9c906b2-ffa4-46da-bd3a-ab1edf70b19a",
 InitializationCell->False],
Cell[41443, 1106, 244, 5, 37, "Input",ExpressionUUID->"1526d43d-6c01-4ca6-b97d-53ba6e71139e"]
}, Open  ]]
}
]
*)

