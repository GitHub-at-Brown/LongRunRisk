(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    223347,       3968]
NotebookOptionsPosition[    175434,       3095]
NotebookOutlinePosition[    221799,       3950]
CellTagsIndexPosition[    221756,       3947]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$ContextPath", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"$ContextPath", ",", 
     RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891250905264741*^9, 3.891250915510642*^9}, {
   3.89480483794177*^9, 3.894804863605687*^9}, {3.8948052018547297`*^9, 
   3.894805218749214*^9}, {3.8950641140162783`*^9, 3.8950641187375927`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsToProcess", "=", "  ", 
     RowBox[{"\"\<BY\>\"", "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}]}], 
    ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], "*)"}], ";"}],
   " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<BY\>\"", "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<DES\>\""}], ";"}], " ", "*)"}], 
  RowBox[{"(*", 
   RowBox[{"must", " ", "be", " ", "a", " ", "subset", " ", "of", " ", 
    RowBox[{
    "Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"processedModels", "=", 
   RowBox[{"processModels", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"KeySelect", "[", 
      RowBox[{"models", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"KeySelect", "[", 
      RowBox[{"modelsExtraInfo", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<FindRootOptions\>\"", "->", 
      RowBox[{"{", "FindRootOptions", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
      RowBox[{"{", "RecurrenceTableOptions", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<initialGuess\>\"", " ", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "Ewc0", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "Epd0", "}"}], "}"}]}]}], "|>"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, {
   3.895064098804215*^9, 3.895064116644793*^9}, 3.895243642614601*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "FernandoDuarte`LongRunRisk`Models", "=", "Global`processedModels"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"myModel", "=", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Models", " ", "[", "\"\<BY\>\"", "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"myModel", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
    "\"\<nombond\>\"", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"myModel", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
        "\"\<nombond\>\"", "]"}], "[", "12", "]"}], "//.", 
      RowBox[{"myModel", "[", "\"\<parameters\>\"", "]"}]}], "/.", 
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "_", 
       "]"}], "->", "4.5"}]}], "//", "Activate"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.894885485621902*^9, 3.894885534588274*^9}, {
  3.8948859659038887`*^9, 3.8948859660757933`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"41857172-5d13-45da-aa26-355e76cb43e7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"filenameDumpSave", "=", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"resourcesDir", ",", "\"\<Models.mx\>\""}], "}"}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"DumpSave", "[", 
     RowBox[{"filenameDumpSave", ",", "FernandoDuarte`LongRunRisk`Models"}], 
     "]"}], ";"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.894887398621408*^9, 
   3.894887407714746*^9}, {3.894887644533154*^9, 3.894887645320415*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"399bf9e1-863b-4529-a74a-012d41e91008"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
    "FernandoDuarte`LongRunRisk`Models"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Put", "[", 
   RowBox[{"data", ",", "filename"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[
 TemplateBox[{
  "Symbol", "symname", 
   "\"The string \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"ResourceSystemClient`DefinitionUtilities`\
WithContext\\\\\\\"\\\"}]\\)\\\" cannot be used for a symbol name. A symbol \
name must start with a letter followed by letters and numbers.\"", 2, 12, 1, 
   28990278983879376539, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8950643374060087`*^9, 3.895069705827817*^9, 
  3.895071599062851*^9, 3.895400632976747*^9, 3.895401155278098*^9, 
  3.895412793818643*^9, 3.895416362389572*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"bfcb6514-86a5-48fc-b2f3-96f838ca2da0"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.894980150869541*^9},ExpressionUUID->"45117e05-75bb-47a0-8081-\
f1683368955f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{3.894805748488215*^9, 3.894880863900428*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"b6328497-0bd9-43fd-bd5e-219d8a08c985"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"17bd1208-2f22-4ced-9e63-7ba8547d59e6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"filenameDumpSave", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"resourcesDir", ",", "\"\<Models.mx\>\""}], "}"}], "]"}]}], ";",
    "\[IndentingNewLine]", 
   RowBox[{"Get", "[", "filenameDumpSave", "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.894885588734708*^9, 3.894885599330122*^9}, {
  3.8948873926284027`*^9, 3.894887412437359*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"d3c91b0a-469e-4730-a4f9-76fdc32b8381"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{17., {2., 15.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{17., {2., 15.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"2.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/1c47a93c-9779-4b24-924f-82df82023364/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "DefinitionData"},
    TagBoxNote->"FunctionResourceBox"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["134", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["134", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "8.06108`", "\"MB\"", "megabytes", "\"Megabytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Contexts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Parameters`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["70", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: \
\"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["9", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Shocks`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`:\
 \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["17", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`\
: \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["14", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["7", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["15", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{8, 
                    Column[{
                    BoxForm`SummaryItem[{"FernandoDuarte`LongRunRisk`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Parameters`: ", 70}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: ",
                     9}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Shocks`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`: \
", 17}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`: \
", 14}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`: ", 7}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`: ", 
                    15}]}]}, False]], DynamicModuleValues -> Automatic], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceFunction[
  "DefinitionData"][<|
   "Name" -> "FernandoDuarte`LongRunRisk`Models", "Definitions" -> 
    ByteArray[CompressedData["
1:eJyMulN0Zl3QLhrbtp10nI5tu5OObdu2bRsd23hjo2PbNt/d/7f3PhdnnIsz
xrqZc1bNqlVVq1ZVjYfUyF7FCBQEBGShFxSES5THI+eyxzbGZM0VZ/lpiZit
SZa1EIe7KBBWaFjusNXdTAPNUpbK3Cv7cb1pcw+D9jdoTH1ZZ1V5x5Z6i/oS
bw/UPoUQCriEQA7MN2o/WJHgG2m/GwoJcwIElsFXROzYTPxQ4MNRv/B+fyAI
nELCn1RTdz3fnpeqbV9d31nulzznG14MMYXZR++bvJtZ75lk/ya31e+T3iV8
ZJ7g5L2u9Ny75pdgc8DAWfTkQHTTeLigh7/HAm8+XyWhApKAB/9r6cybqf1C
neJ1XzvfTc8G743PAu/ZCtUL8PX289DTnEdej70DcIEXfvW+qO95jx5+dVzg
PG/t/xZ8t3a2VuD8fcv3dgS4O9rd43p7Csdu0he0IZbTQxxdfLOniidsddfP
6/GZv2hzz/+eOGjb9qL2nJS2X7D1f/3zegtYMV/UQKZeNHxRN2flvyCiAHak
fwJHAQ8zj5efNu/jgKYBwFn1NmDvHKZJQ4DAVaLnDpCeP+Xn/pxfnjtA8dYG
8Se8bwEXGTr8yrt4hotbGey+BFgj/bC2ZpJFUsYtOnU4/xPjc9fz/RY5ibg8
946px/M1/3M93u8x9pHQf/WYsHh8zcP8O1+xD5R32PJkv8jZBfnZIajPktqz
+amnKZrbnz0/X18hzupMn3ALRIHN+/3t1tXexsfwvW45g6czU7An4OFHdvho
XZjGgeBLKfD75rPviqB0u8F3+NTU3KcZnHfwdGlt6VXQ+0b4y/x70x+C4ukS
c2vzpebW3ZF7gt8K/h0G/P3SE2JdQimhbpmoRfypItrzle7l1viCSd9QgH/Q
5x3u02XQ4ILvvvVH/B9Bu+mi8QONuRPzAurZYHGTNx/sN5/vT0H4N4FnyOL0
MWydQn0QrJfoyevXl+9LZGD0Wd03bUGQfDvNgAHiN7PEtOFfeWzyhy1YEUCR
Av8AHwLV38s9Rih98s1FAxtiRQVUKpxPG6dT1dfEuhF/YLEg8ObTHviqP21y
j7zWvXdQfUf8nd/X+FEHHM45MIt+GF8y+Vyr+/rs+3T2v2/7xsGI45u+Aul3
mCz5YCF4Ir9NHGB4Z9n8ePVYHG0eWTp1fXZB29TCi08u1hrwobBvaAGljtTj
sTLQY5bRqwf3FQ4KT2Z8hsymri8dGjd5QEz7dQQBP/DvWaJCq9mZE+8zDPEH
z0rSYGvQNKH5rrQvmmuQVvU2UNJhudLJm9FnlpWV513cZnIdaYoZ/W5jhN46
W3NI6HbIQ8j63FxeIdJHVPQO3js6fC0m5iPO983pvoJ+oFjgy1QD792D+zxa
PzwRVlToz5dL4GrvtlAM30JGV+a12bmRozIvD+bu/dDfGasyfGDIopiniKSS
ZpcukkYzThJTJcjan8OANo4SVQUvLIVip1rJ4NvM0FGi+QrV2WyLgPqw/yPp
T2IpS7St3VLqY/uxeGDYxpk55Z9RwnL+2998wctrG9cnIkVHOtwxEjdAwtED
T/uKIlIGXVqt02m8HwSR4Yyd/Hc5KuWWbjoZZL2mCoSP3VcFsvPqNuG0gDJz
/rc2WiyltposWW90cMmu7Fxt+M0VhYX2H5lw6lb5gD8Qcr/Yg5eSkDfsH39x
ZHjOV3UooV6NqN8Uuz2U8H7cjO/PUvfEI228eP8eP5Z+YObu/yqtfdez18vX
ssgdt/tIjk4HPBwyNZJpinS6OQXdUPl72t/N7kj75SyNrJ8AzpRrdLvWX7+8
mbyKHxTaXg4/fdRFZL9fBi5XNnriGb2D7exnCPFrTuh/pFcpW9xZl4pp/Mlg
Ler5MyDrXkmwGbBnERDHv6gKaQkBZ1D0Fn8eYUQGinae/IWdi2vsOoO+rIiU
THBi3tpb/WWF5fldwJlFcQnLaLkwIc0PSxAKJ2MsTGXdNUVHxI1eNtVr8hwy
WuLwQUHQZHCm4fAwdv8XBBunXykiDsXqyVNkQMmVGiHUZ+W3MCa4jvptm6o4
3J3kgH7q7u8BHU+EInIONVdvUUhx8mbCm8v6LzMmTxrsn1+HrDZWvXmScsUU
v6xuegmQzIDezDh6DMBXg+8+jS3HoO/49Y+m/Pe6ZMGejtdFE/Zr1+P4KT+9
z4WvNWJB7ovcWaDf3eUl/seatcBljERu24Igv8z3Y8cSp0afi/8b9sOsL+kX
6dd+8JH+D7+P6SPF6ptrSsH4jyYmCv+MnKnv5i4+Ses7Mefv2Zq3PsJWYpNT
6cGh/JLlnTrdjj5m7gw/yrp+92T9nNDD2MenWDd7r3SNE4e0Xu9lns6PP5xc
ub1Z2Zs6spb6+HID+TqNaDm7slW98MVW6xSfk/9ybvwxAdd1LFqhMt5k4Z2O
8VTlJzwznXt4j58/KoGL3kyyixDlLcT7LrKGFsxnUDGhuhBapvNI1g1S4h/p
4t6Kmo8xdRcJw61EJl5VjcKopKpakU32MnfM3ZlB1XorFSbRt046PQnnPCBM
/+zqNqiJ2HYoD546xi9X9v2yBgrJA0gdzsrywhhdTEVje3UbZXPR3NiKQ/Xc
2HZLhn/5uHYmjLWVB38jJ9b79yJ0aN88zTt+yg87oY7OsT4bYPB8kXfE7nBd
o7ZqS3NTFcub+OpG2hX77jEFjdvuXJ1u0xsUwbnnhlIh9/MplA/rDpePOENa
V7QdPaY0XqLOwaIg2InqTdG4s46KdEiQAoMy8v1XNJ2GWhnSKeqPSGVlWexO
13VtLzo6CbXjyiqZvCnW8Es+lezO4KnSNH9rWKYCRICu/6l2sDNKJcfHfS8M
5EF7t+DvYDRLKIL3b+NBSg4LL8dNbKdKx3TGC/IvI2Mz/F6kY7wdjREy49bh
VDZJK8issz6GRqlFAzmr0QimjPDFXf2cV85b0SWqWHOA6jk5916mZJKnmTFc
iJoCKdUUvrW7OAdMyUSpD/rqbYLeECJH/j0GZDsW8s+DvsfW1omy4HfQ+s42
CjhJ2MCTITI0uaGip45YYRg6A7URJubKJOM3kbZfL6xA8dLICR11zQNVvIuE
Hpl7sPesrh+C1jT19SgZseRmBcs+VCk6M44VaUtTbe7Ywf0l2GnLjdf1bnvz
uEWquJoFUsz0FIs7KToCNmVHojiWe+R2yYpg2qVYqeg0xgR910lqScd1pPjZ
MaIj5AisKDgoZIaxUWq22ZUyUHDVLyz5mqThF8ADVD+om01xSLjRU4g6Ipow
mOK/cNjvA1wvAiNpvxKX6PEQ1Xp820m5kCw2F6CN+oRgGokiBzjlT96D43it
KUFtoCbbFP8wQJ9+IOQGhF/N6k99P42bOHmyrKAnfwuyWfJlmiO89PJfu5pR
N4+OG6FuNoWgJYRbv8Vrs10gvZ5GY1o/nPQJSpW0OCORHL6/1LRR/vjlOs1i
DrzE22fgdDoUsPk4vGxCTsvnzyue9sICKuxhBiwRwP8lzn9h9AKvT/Rgtew5
pdyZLby3q5p6bSzOdfULgPax7h9QfGTnQKXiot3uAmWdwNXdYYgM/w6F9XrU
zt+JUjWhaWHzNP4+/+srpU4/UO08QzAfSNzBW7+31AJ4xkY/oXek2SHW85mz
r6NCeOzrbmDixdYK1PA7/KDERoy7/aKnPcePXOcl7r3Modb3cHlyu+vviC9U
FNhgFfF49rq+jK8j4hXwDt4d6wDv832SEnD/u9IO4Ai7aMbxu4QDlJT7NPvJ
sC5wUENP2uv0GL+D5OlMj/dgwB1Qw6SowgE27AwsDg2Y/YKEQlRwiLoCC/OC
ST8gQJPLoP1TvOnfuzsWy26mgbqtQ7zuAZv6x4EcrlhCBC85ujLBp5exrXdS
/G03HvJz8gX8I+VSWJNDC+Y1GtN2oDsCSFPkJNT63Lcrzc13N+bHZertOEHk
jBAcy9mU0xWbAeABqkpCV2GVbDU2KZPurB02u1IrFFB76/0W9unMu8bk4EYQ
i4IPPInWL1H3tslFPuV95rt03iWbM6ooJTrYO5rOwcc0zWPgj8dTVIFyhked
kWTB4LOQLghoO+DhcNbgGwZPcAHhx5IuyYdT28q2/jbJFoZKtjUHEChdcdx+
yv1B3D7BX7cwI5YErcQx5vSZfYKKtMSClkSMGteDk4Lh0S1+EYMThOtWefHh
W9smrEDDJIE3wNpK+oUfCiX67QuT2c5sGgjJOX07OZ9mzA87f9bMZ8Zf7Loc
GyYrf7QeOo3332rfn7TEfxjdM1mPtr/vTr/Laqw4X9KvUJZTWADbrdE9YSO+
vuSobS75ZklZ+M8JXxrTfacoa2pRtaZREMhgFYhyku5kGclEd71HSL3vGuLg
79EpdUNZhPi5D65/QlXUKoQJ+m75k/fUKyQZJsf/MQNVokgWi29gj+tq9f7e
b7T+GmAw6aIiTwhXbUMoj0vGv3RsklVUFr+nSlLFrdF25t2v6ECQzVXUkQaJ
yC1VkqJL21EL2DLcCIQVy4V+2uOAFL7KJx8I0ntMQEouVq25N8ouNgVHHVvK
JbDeiHp1UHb+xS3zg6ngoMNZXPdCBJSOJRU7ekm+i2D8JqmCZPyDS36zX5z6
BhPMCT3rodplQsO13HzLUnt31MRlMQj//JJmK5b7uyjHW/bOoe6U4k1WW7RJ
Cb7lo6mZdq8gRi9aIF+Z8hE3+eIvVieYB8UkdTgEB1nLZ6ZMtYaPfnWAt0TP
OPNwJq94valqFF4E7rgdwH64rbJEDoy4u54KjNQupsdoOfi3BsVJGI+KB7eI
zJNNPYYqupEcKhGNUD4movEc7S8qkJzTOpIPZRG4MKVXOkfZNUwhSCX7S7ik
khB6seBXfEXL5pAMMUPx2x8syjic5ytooXeQeuw20lk0ahQ7w+SLNkHkPpwI
r2YX96az/aptDLIsehAO8+YpwxMQcIpB6NOJ5Dou39wKm9HI+8pXNRlxpoOR
kKwsFyT8ZK3Ymcmoz7rVnNwD9czvB490mF9f7OJk0IMse+bGjeG8n+1Kbk7h
NQ5JzkwM9goEmG+pv7ak8ZQZJnaxAyFP0I1HWk+HjEIi7HHYOysmz5B4NEtE
6WjTHBBdjmwS4SmqatCkEVtMG2FEf8l3XQXIqRZApp2JGUsbfTGhhHCjyDeL
af36VNzloi37pNgD36nMk2VdNVNUqEXx4Ge9tkalQmoiPbtM8iAHw5QpIpN5
5lQHDLYySNjthhVKlbK6CcSrERkx2OOPgI6/vDouenmc6mwIePgtcqfQhekE
ibABIDS0jvfz7gVQ1F9B6X0spuutrLLl8Zfb4vfUWnzNW2IZEp3v+vcRsi+6
l40o3hbCPTo95LdTB5FU6jjk6oYUwBmzvPbF/MJsd5rirN0g5AQ8nELHCrcy
Pbm/AjdGG+8zMSCiHYZ/Q6nrMjXtVeuvDpKj6r31ujnHUktB6lk2eRPSLWkZ
EnXlRRI6Xbc0dEYwaEHHLjxurfhJJuDH/lTPdOeUy8pIaz1gtTdJp6ZzUoeM
ZvESP9Kl64iazKqKZVKvfuLYe+KQ/7tAaSVak2hZG06yYmxb2iHDdnZOzJjT
cMbDmELcms0UHpz8+1K3tZ6mX1y8T1MO/f5R9NziSChgYX5CCYQMrybGOqf1
u1E3hdl3KdutkUDwQxwRKoNSt+sW2g+9tugzKVw59Q1SLWziYcpHh0oLRhYK
treka5chY4yhSyNeJMIUGdqMOk2X77V5r/ILlAK6gsTiMLyCi6wwpp5DlVzx
xxRMUyDTDMzHCMRZp8NUjQkFaWml1E0GSt/QhqCMy0gvvQEFpTfNnkisTLBH
Jjt662osF9tn0h8uJjoIUrLGwNuijBjstn6HrBACvRGFcDGEkngxcWzCdD0k
IT+dTmuOfUJRnQkSwWse1hQ4lLNBZkf3LbHtDmQBFW6ImMemZRFmOwIQcawY
gOIdWTiehca2kJEUEwwlGDr45yotLGnVSZWTrmsBqYm88QCMZSdTSxCKkBIx
7VU1w6y6SbDRNRlJ0NEgv5scUeo1al0OASx59DK0yWI5BT+OFVi09SsFojDZ
zDKUYiZ/+jNlxKFnCQaCfmuV1JTRB4l5ZBwhcS0vWnXc5mv1FFq9XAs3Bii8
PIeIhH4OiJjUhAbbQUke4qzmNAyb/GwT8ZGY0/iYOPcblWOHEqWhmBuTaM2L
Yp3DhXsWq7pCYz+uBSJVECwfsuBsR/nu2vpEO8nIsK014NSDxXzsUm48oWzk
2Ak+BpCK7wZl8DuMvjHaUelUj/MF6rHTX8mH9rx9VUzHjhUtwo7eIgKaxRmR
tWQSYDxy4pS/c2dx6buogp7DnNKX4OzRAk76xBOFW06QxT5BevLQABJvTFkC
DCPilz8e5IqWoDmulwwptJAbtfnmi5+8NBsfEUg8aU0jN1rzNlxHu9Zta3Cm
62nqR1JWeCeB8m6ROOaJx8VCwjTwfqusdAOxhabICTRY565VGEhrN5J8o3MO
4xmfn7kEjm2rk/tofFlAx5U/92D3zLwBygED44f1PZw4emJcZN+VcRHl4eLf
n/yEqLMgATGe44cqdC567XER6SVeLmLdcRHmqp48ZNvU/0Vm6z+qm63GcPCm
uIhR2ZS4CGQSsSXUu4HXc7XdaLZBHjIiCSlLOhXJoYdiMcmhLjAJlUbJfwt8
R0JUJgjMIBRSMwiEWkPNUTCV0EWKwznUu2YBNEzd/b7ueIs83iiP04S4CPdR
l3/iYoshCVEVOXgBawRujgCWTVG68R8PUOzJU+0B0gqLMSaHEbLtY4PowO/I
E98oLN/ANxFhGlRqCLT64g/qDHfMORSVF8UhKdUtQdTtfdDR5rpGPo1ERBcg
BCpVvAswRKnR4k75p68LUOznSEAuCWp6UFB5zHV+RErQ3uQvzEjcyW9YMp92
O/daHqcDe8PEANPvL/RZVyAELRnFUXWmo8rKFzpRk3fqhqBwajKDQ9h1vpAP
tyTGluBeuKOjcSALj94UrgtwaFn04htW6bDug5rgaM8zbFTF1DhGATy17d/G
rkjVB7UP+H8BQGXWFdRlQZH2hW7FQ2PuZ6xjtiXo2GUG7/tPT90h5H/u/qfn
6+c/H1v/52MgxP/xsWeuwSzAefCfarAvinySN/keB7yA6Cbh1qD9AncOQvdt
/MdwxfPwq63r+pUbxTx25I2nla3DHPqUn/o6eS8OnS3qLoEwN9Bm5/ACesgp
bFtj+NtcND0kVciSnLCUktRfuZCUyBvTb72JXoH19va+D8rm69zEeWXU3nen
SLlI2ciIUTVDpZsGwGfxjqS0PJScOmfw/vRM7DiSVY7lEth5+Afm9G1aIVZU
jlEJUkEu+Cdhg/RlVWEudnPGgcuwAFjSz3jhy478AeuOKZgyBAfvGKkU4TsO
ELSVgTOlYAXR05Jud3lHjDlZPHyeGcwHg/LHza5SvujOWrC9fEijc5xisLHh
xZBHiICTmAB7ggwery+jAaZ+BwhStmSan3uGSNY6pE3pzoTbrB3lrdDhBbC5
QXnEfZmLZs+nxqAElVAnBpzLhFr1GSFBTezltvbO12hgbwMElU8PIa5zo6wY
BxG2dZ3aw6bFf4YklGK6aSeqnTZS2LTKw8OJHxh5HyGU0sHsWc+PBgOdW3YH
QTnJKLGjh6KhG/SMUmCQWDS7pBUzRx+zokNKmHZozLhh9pBZ/dpFIcd5WcFi
JKLaDOiTYquwa0h1WYF4utpjT+wAeMyuy3GMO9yU18wAkhwrjFnRP9aJ3/kh
bKhvr3MY4YudFDquGdeiADWUVAIH7unY7sDy8uSzFhwxQEt65VNW+OGgj1he
RPJEJErkYEU1L+NmHwltq5AYwDkkYIlHmaRnhooZA47e51MU3aW3GYOHLvDX
o51sqZMXUOmEuV8FmWW7wTYzwnpQPsuA+hgkZgi6zmZHAyD8KkPIXvuYbo8e
MN6+Es1NZ95AVBXAtCc2hqA+6Yml1D1NPjUiIo+hF8ujQr6XRXM9RZL4Qooc
C7NcdGZPcYG21+yIqJoZVemKeU4uxQi+i0kSij28+TuaPHqAy/Pm5+PrlhIi
4s/GmRnELNm49r63Y5W5Z9OPAp8rpoj52FuLX3Ln0PZYSDlt6BBLHgfJuSlf
ThvkiCtG40z1YVqOmNMpkI2BmaQDz72kNrCK0InqdtW2m3NUts4QRhlyITUh
UctE88y5Da95F+aIqR94hlkNUwwDsfN5B3QSr0tCsxjDPNmDUYmvBwYjJgvc
l6Tw4IbZ6RqGQhI2npMUbC02eMMX8ZPZSWqCL91oGMHmqhbCXOSMmz+Z+3Hs
wN/QNt+9FJtQ8hDu18udmkDsyiwDtewO2Gyz0tPEhhxzVxppdH/WnemYr7WV
1ajbELpAeOrhS1ZFfWKZutM2p4N0UKBikrOhlcQrPSuAJCE+RAsChmhXc1AC
N1PtTpXhmFAfjLNAwdAifsgoim7kS+PG0P1QSHBzrGdHnbAakgHFxC2opqGw
2aHjeRpqi+IimIMiIlZTl4d9Ffo10XBp6bu5VdQAt3Sd1FlX5vYA98HuQusK
twJuZbolSekClTG0WZg3YozLzOaXCFyfRGgN2XQIkGaqmmg85OAt/HmTPERc
9Gm1fw8aKFI2wDIv7w4mCOGKksKJ6dVKOlMPb5dzgNRlgFtoAGCsetpxAqsj
yfG5l60X7nyLu/9WLiEbGzQNopnqzXRYCt/1qq52Iy3oRIFAdKSyFEXDmB+r
wGAnd5qnoYPMFw+JV6KH3Fs/TOjUhjhMzGQTwUCkbR7Gd5WzJFSt/aT3vI3V
06ESr7FcWlwdT1WVqVBglIZVHz9L3V26jHKsvfMoNCVYN0FW3CBKEwxCA2WB
rLDAQxfXdZm4cMFgAgRbUxgut2Wc7Iw4Edq5EmoGoDpgOtTq6N8eOpX1x612
6ChnWd1QWqulyivsZoWc7S/44LCxyKe/i3R8yZItnu3V4dZNJm0XJShjz3qd
voasCzsFyPY2ceMpSY8qlFZm+O12K/mvbuMjMOkhQVOP42fNzlAtruHq/cuq
Sfk7rX4HD5L9CYu2X7yjiMvOGYgP4vYgtR+xkRw9SJWurbeQgIflxwJWzFO4
5smrAfxCwoImCJhFw4+BtV0br2Vu4LOpSA51pJ8FQd91rQtg/vryRLmM/pf/
Dp9N3xrh8/uXtLeHHzc/PlIehb+6Yt6fumaZ+66PG0SerbO10Z7xgY/c+Re9
WO/cternPlfu05m8M85lP0ugtnlwMjZg75Pt6mHPxU4Lyz+r7/r1YObN1Ol+
iYVK//357db05BO6GloQZ1qPVxo5UdVxEmhL6O+yxj2rInKGMHe486zvYhZP
DdTZsOjReijw86Mvik/257tCDEtPPoif4rClp+XK+1NqgXDwxmB60OzsOD/A
CbvlRBTzzYFo3hE4vRieN+ASxHon2QC+2auT/TySeu75SsoZC52zR+A0hRiH
5E3A0w9ZMzGCN28ReYVlpisrV0vV+wgBZv1U7OVHVZcJWkWviUP5LmG5gGMC
PCSvzmAbzo5oZ0mjrLvK62u/XA9HKxtBowjky1l3madTsKsfjTUsyI8i4Ehy
BhTbdhA6/o3186FypAQlcUsTIa1MgFcDdYuwhaZCcSX6G37jYBiO+Gekaa+S
8IBC8DhbP3Tw8FTtoVlHz9BuxDBuCC1BszNQby2DGNTQ78tnpiL+LIm42UUM
Kx90OMJhISiuCTtCJk41Zw1bBbWyODeWR/Lga8aiZjAx50IRYRbqDUzm15pm
tTzJbIOeTGXfyg7X7+rc/s+t75l764u+bZ5zOa9k6Qfe9JOT8cDr2fOBm+cZ
3vxHBbTcz93xNxe3xrc6qk/Xmx5h+7La2bL8Kb83T3Oej5Obp+P+yx/+OT7O
vIQjALv7pTfkZIych3R9z8+Zgzb/64vx39qKs7zByNTeOx3dHmv4/pzc3vcf
7SAGd3DvxvppxLwuKYRTeg3Mc0sD2kgWR5xQ3Q0suuh18fLr7a21Dn2cvXLN
juTQVHl4u5yPgiO9e0nXCJ4nBnaLuKjJd+MTytI2V7EJ4D94WNwsdCNzx79M
FYfvLq61z6nUxG2rswvsRCI8VDmFtyBc0f9shZgCODNcrS+2zJFYB08xCOVP
2uoft6cNuwR4pAn5hZKvvIXSZLZ7zhtzH5ZXiBPdz35G6XZWB3q2YUD5uCwK
Z+X7pbW+/XsfYt/QhYxgs9pzqFABY/zfh/ynCmsoG9yYaH8jqKqmWQImTO3u
fGvArnGfqAAY5ukoQT84y4ut6NPAKWS7DbBIe1d0QNBed3+UkKHsj6zSm/Fn
uIrfZ5ISBt86hbCXNg00+p7Y9QuB2mHMM0PlGpmC9Ud+w90fi0sNoMDpU9rR
doFVgJwTvmjTIzJYoAAxZfF+kFIpa6L6yMphjMS+t4gZ+gRiI2onUcFhjrvf
jbFn78LslHF/2rz8XmO7/ZvuXIrDBNZ+yjbx7+JQ6oHI4zFURh4gAfX1MPRd
BWp8xl50BePiIb/3wn+zATciamrySw1qHCwJ/xy90qK+/DKpzRhZxk+bqXqX
cGLsCYVrTWUFp+vQo+nIYrK+hSpeafIocVyfw9RdH6OpVaxczRiUuzJ+26KR
eu5Tg0SkyhLNQY651CZxxoSKVhkKjr9p42QIvzmuWsEH418fK6gaN48htSKf
uGYDeA082cu1fy0oOuH/Eh8MvTmcgdxrXQtNrk6O/XGh7Rhi0rSGRMaq0FOY
GgAitLNjchRqpxWjJERLdbIKuAZxkscfuS80jIjyiYfjwIKWrlt/VlfLltDu
dCrI7AmgjzSsVNEL/wUpXlFQwBFSVYnb/LduiydSYZpEVllzk3FbXdNiT11C
2PpHVNChZV+ocKuSRLvdwtJQZgFBFelGFurcjztTHtgNiZSsrXJ0ihydaeGO
Yg8lnMwN6ve9J/wgwnoF4yr7c1Mr37oxdsjORZ0z8NvZJy/hsMzsug6MQmxj
4SadbETJLr78GvPPyPuNgmoMc3OSd+ZcZZvbKGm9SlGaTo/H9YtBkqa7womB
m1IIlkP+RFT2Wk/0ARJ6GWGCSXkdcCWQBcwSrmihk9fUhqnMeqjVLtZ+LC6k
CZ7f7CziGRlkZ6PI/2wxHWhv+4RMgzuc29Za4ReOYaJ9YWmjwqQcPlL4gYVP
fJFtnVX/d6vQSz0GnqLv+9dbFjkFcef2sjGPF4LFQ8MfSYLr++y4lJtXh9ER
H3k8wunGH+cX9oacHKTbDtLuYSINIagsuHV/fMijbJXFoDtNKynSfK3XrMbn
x7WbzuM7UZaUj85FxpiD1Q94XUn/hiphB62Eah4jIG1MpwOE7bwN0zgyCUAF
feY7vPrYegioo47o8WGjvW/cJW4QFbw0ep58Iy4I+ro2MzT1GYf/KF73nMbO
8G5tJw8hW+5C3gwfWgutQrUT8B0DKigYjwFPmKS7N2OYglo7PPgnKg5PnuUL
dIQrOgfBsz2nrkyjB9sFGx96J6aDMF3DtimgdoWfw429xFvZoOHiL2YpCK5L
PbiHn/0Q8OfL+b5rW1Vl3P/NShyhLtvccQ3SXMJXiF/nRuLE6P6/pyXCgv8/
piXM3eX4blaGEhmIPo4Sq5xUUSrj7CrQ0v+a1QVeqk8EcmQ4yk6hcUzmpCT+
FIfC412Rbrmsu8pLiRxcP+lfOdj/WlfUtVZiZbmRaG0DLnkRJCZecREyqAXJ
oqLo60FaaJI++NEWvLs4UkbThB1TNFwZyAgXQ9WYLjuym03onXRUMIl319Xm
Ir7/GZdgxxAz1Nl0e9BD03VzKOoFXMMJRQrzsvwxgbdtdFY20JPwUUBKK4mI
wBhMyqjzaoC0O5WQiJGkWKgpbHeBu8q2lT8a2+cGnsQnqae13EZqyS1AhHz7
6MhGp/t4le1HTdImtUgNDC4w5mgCuVk2nYIQeuKl2S2bz3QMPbadK9ODx1Kh
heNv3wR8FjB43zSrTZvnOuyeouHVMWlGkg7+9GppOp4gkqBhHbLfqaZafzVS
xmNcWHbfFP1u4Dap9UYX6BbEt7/xbHbcorhgl8XY1QxgErydYQrbQgxRV/zk
iYgpJI0gVSBZYjM52onNokYv27dNVWABvWKYsJ0TIZ6ZtsLMSsZtwUw1N9Lc
MOuzH3AQE0MPkxZ0tuMfn6a/bZey932D1yRP+vONUrmx6O65/SXaGC+hmQio
jKq0Z2YHRRf6BQ2h4BykyzzSkg4Si0b2gJqdYlHZcAY7X209WyQbeCiiaYgM
6ri/QKDGV5Yowspn6J6nnDNeb54+Uu5C4x70epEV1beJcFxgEl3QI+2UTVDp
62yyBSHNkCo+Vp55zz8oyUsJvK941CeaBVLmDsotOsglyxWr2MvuMp+WZeb1
5Czzv33RVyxDk/kzZyGfX/PmrX+NKN9vW5oz+7ISuQtIr8SW0hIl2RO1vkAB
ouGQyP1nOGIIHgz/MjtNhbvicF8x35fzxOQQYb0lb7vgcIODsFI9JMlWzo3/
5YnRSTqfNzz8dyp/dMbslM+AS/EaZP/3nNnpJY2fIOMfs16RC44nCGkVEjny
iEY5mH4O6rLhIbOIjGriPyZiSp6Yzf8C+N9iJ+KC2Ym0AiUEhttZ4J+cH3au
OB0kRiS+FHSdarvfXUjk6SUILjgdson/brhQzJsKT0ye5nHjuNPefjU+SZBx
muwGnaZgYzRIWmQnx+XeR2NsvBXrPdv1vMxGqgDFGC14rE+y5/EgOikDx6un
WHdFg3FdBL0i+DrpPCvAw1iQh74UvdtSaZxoxBJQLt5wEQpOJ99y2YUc1wI1
NbTcckmQrLPjgYGd7TwjgfEKmX3ZS5Y4/XfTqc4L6mhoFZyLV8LBH6LDftst
l4J/8qi5LsrAsY36u84CaALVZhNS/dvseObkod1bd6/50LdcHLpqef+J7Dwz
gFfB4SRE2aCRHIi344lwWhSWmpK0USkqHSmjLslGsjjRQqdknBYOteOhcS8f
85UJd6KO6KutfJXlJPRYcxEySyZvsb//SSjVAnNcAzn7b5ePacvltttmEbRq
L4MqU6J0+18pkm+4ONBzmC7Rc/fIoMyqr+NTvEVAYbQskNGNF1f+IHjdy+f9
VrRiz6nolWz3sU2TCjhMLxvn9a9k+zjYvS/iJ3QTzGm+cadKbloc0NHb0B8D
1r++bL3hU11xemnI9nD6A74eRw/i1+2fVUq5gKPQPTlJNv7fRlB/k8cP742E
456x0bUQoKlvkJkETtsWRflxZs12/P2/FUevoLcM63bymwUz5byxr4K3l1w2
Pe3niFt3dL4Bt59Oz60AtwNepri8z6E9NMz4Yxqf13eb93PDkz0DD8efpzmC
BC9JwHMkweuYWR5YZ4L/DbzSSJYEhgL43s2YeOUS24GPW9hXo/b8fhcOkbOC
2T2+Hty+Hnlzdw4+3B5cCjRv4URUJ7z5szf63V8Gz9sQ4ciSB9vjv92zCAzq
RQYBi3e3rk5Da9lYfd4OzPLs64ZOQ4ozUOXI5i4eHlkOK7t7k4pECvpPRDOK
aeQWQSEps8fViJdMgDjgRBtwIP9tX/9tnnPBvZ818zlfv6RFENq7nXmzIWGp
JxDjZUo9VGRvsRerXspqZq+ZcZ6BoO+t6WZVgNdrDfckr+2lxc3gMZN/Y5rf
hpvKhd3v5Z0a6Xvb/wNgHyBMbCiUzy/4re/3XQcU7Pu6ARbbBzRw4vlfzd58
Wbwg531SISBrjOO7+T/5vby6934hMuNK6EIgSnpC1V8d4biyXLLhGQr4Qvrx
GPa6jnhupDkuE7cdbxw61o/NCinmEZPm35Dlz+YDzUl3RnsNHtHegugf4SUc
rlYIgX+Jv0Z3vuCBp/pgMr6D4g7z2fx8eMBrfWAd8FH/Y7LvLttg6x/Zu/73
zXc18KDND2RFRzcG6lShH6JdBgnIW9f76d97/VmzE0LsFzTnSzO8dmU093OQ
H1Hi/e7Q5bMPGNj3MeoH7PuATThDG+EnBFbutPs/EX8GEw/YPp+9Evt5vC4C
F29ywQj310wTESDTfqNBnJvHJhv8dR+QHPkPsvU59n8hW5RvHov4Lf8bstVn
Zq2sEGd1wAS8B77y9j3bfz7sjPUMLzPn6BAuLccZfgUpOyUA73n9b+f1v6yB
KD4JEITUW4f8fe/Q3/save+HK8o3uLYgJrLpyePH+Azy0zGswAnevi9OYF/f
+84nFVQCLFYChY5ob2G0HwAGCMUuXKcw5yHUZ9j8BtW1KXVy7/IAufxeJPCN
rQ/c6FnehatkOtf0VSYGXvUBb770++7KG/6d+ll/KgKX1145lYx+roPAFDGd
c/2jIQY2Add7moCPgpKkJkGQFPPYY5wu8/Y4ezsBVBZFTPX/R0xAr5DDkZw+
+4jg3YX/C9Nnpv/FScJ7UeASduydou/et/8n/VNfcNKD3X2eed9Xdd+tt/+n
oNg7NmJzr8Xuo7ixz1Pb9ynTZyxwz57sCRItQUyf5P/BqxVE9vbvg36FzR/j
g7yTeQ4Y1hZkMNWXcazlb2zLOqrblGbMMCocTpa/FcXZku7ZERKGqcbM9I8q
TqrM2Ss2nkVx7qpOrZf5m100XXn63kP3zJfoSgZcPhlrtnIp3MJTI76uZv/Q
3I0ycvr2+dC55lheq10onGvXmHVyjJRM7JI6It6RfALopAOUDxxq5guB1Jwy
J6kMk0bRVVoxf41KsMgBdBLv9JQLy7fNYCedYOWp9DU63HU6bzXcHZV3Fq4S
1WwpS7h9rpicrgg1QhaQQY1ge21uu1Qadb/dphvRTdai3Z3ekZebNEg8pYm2
vbczqfxZQPQPeC5u5LT+60UTG09umUG400KyIin+6rhS5pbRn/9vSJuKBnWS
wiKma1bi5OLqBsE5gKCWMeHZP+qjtahhnMDVEtW/CdyfLW7XCko4vftm0jEi
uxxDQwfGDj+DCffXER7DtwzSOyPlb2J+efcforOEpvT86tE/xC8Il9TBq7AO
tbXQLa/h51xQyb3gkTlHRKeOTZhG/lnWi7glm3przV9R4cRf4MzXpf2n4P7/
QN9Gvko37nq2fawmBgMzLlsFOzy4c6Y1xvGm0DD/KszcbR0y3fz4fuMdj2/q
bXp+c/BSy27BtuVzuBG3d9k+e87Lya97X0wC+jJ/fLndFE+u9Sd0ZHUJAoa7
eh5mqHuSH7GdGVGbP8yPUGqgIjbcGwPD+eJ/eXXPLkqlZ6F6sGnDddUsQLuW
KROtrjPdr8tK/nCj3hobqs1WXtgejZG6/hOMAIKf74Lak8r8NVd6Ot/zvP4z
upyuZW52w1Iczhec7HHUeQHM9opW69hxazyH1R9u19zDn6njjKdwd78TnFGi
7+KPARToHtXrRvZZpEMNKcU5oBgRTTS4b8KoJTO23nXzArWL4tnPmc8YSK0x
8HbhqSkgA3b/fD25Z/DcBx28N3wfj3wM9F4ipE7w/7ud//XXP/fzbHo4n6rY
sY7N3+T5YT/9evb7dfz3jc/3S7S5+c7qrN6DoTn7eXfq95nyfflsTW/He+m/
LJfhfw1/hnyGTcwAtLrbsGf01/J1Z3rz3Mz3JX0DHJo8l28dcWtFU2c9+NtN
A68cfLWOkvNLWhnqdCHFmQsz/SjttdyS9XNM/fHOLvCvtjF4oDzdXuxffts7
8PhymD9v5vb3bqP8xQ/KExi5CL5AHOgKlfnkhGD7gbhSKhv6xihnWIZd4f/2
7z84r9MR7108RFT5rvZUea66ZH547hwX0wH2BZkBpjsVlG/s8vMGaOfB3HMK
+zhAXDaJUsDEta7c9vtJADiqdlO9/XL6s49XzMoXrzy7+2lInTSQbCvYZy3z
OO4vTBWqGnmFhJKzZJUAYM6iSkDdd6RC4MxZ8vZyXrVetMaSmgN3v7k9C4ED
lyUrxmNRYdozXA0ksvzKfSJ2rGtuKnlduCXYCnoJyepYeskcB09+qbxqFmep
vGRqEb5dsqaSugV3/2/7OkILLst6jIeqonf1h2eW78JlcpYIR6gV3BKG1bP0
PxZF9fwqgeIZAf6Vy+T/IbZi+2sW0Yp7Z5Z/bRpcTIOmFGsEFuUUQDxnonuo
3wocsIAyPMn5H1idPGGLGjEHVR+M94YTBTaGscFlf6H+IspOgCg/Mb+Zyulc
8tvIHr1Rw6aunI1qYgnqOIfAF7mDwBNjFt8oZaoYzekQ2hOJILjyUdTEX1D+
IkoWOqszkTYFb1lF8eGICT519fHk38cJuZJWqu4JHX/vzRsPIP+mgAb2cnBB
J2o1MZkrqDLHRadi0NPWCUeygyPlzsu3l0BNb8Z/iPz6eblg6ltSZztmA1gZ
0AFPs7mECubKsGVp3U7UCsSaZ4xmWGDHSV5n2Yc/7ub5Ho70BxdUs13wSPux
UciThJ7nSZFpvrDE0MgdmsFs/+cqe44kgS79Xn51o9GUqPBYNa8IZGV/wOwz
3c5Hec1FSRDk10ua2B4N6W2OplhQpGazQFuDnDRkzMQrJJW6E4P+6fK53nFf
BbtyZjWctY+MMWGjhrSekL5z25E5IiQWFliT4xDC36yb1JRJbqSlxqy352uj
zIrHwQWt5a2P1EC8ZqFEg19SZX20HT4ZVzdhiVgNNR1QtqlaagoFMY6fnbIq
0ll9UN7YlO7kUMExkjgmJMwkYoN4mJXrP1VTETB+tU+H5BHSHjp8+fMF1anr
R6cHDLLwDFRDs4NotgyG+jHP+Bpnea1oiBcHVrUhc0KMgsZqvwv9sTOPozKP
pPMxeRh7VLdf37uV14DDcNv8TR+5lTweP57c8RyZegTim1+Iflv/9Ra91ieQ
KcfIdOxltACMlD4Y5zNuf7n698HzFvIrxLkdrzMUQhzuaX0fLE91ggu8W57s
Gzk+9twgo1le5YDDdHz7bliPFHfkMDKbA20QH85Uh8oVsfMFBG50H6EMvj5N
FrzmZRPygvfttIb+Q9Op9BvXDHun/YenW5r5v3g65KmeFIh3bKrTeXtfP3qF
ROWpmcPYt2rVyVwrjiCNk0+aInBBJ3cDQLV1+BUTlZ/i/mSPYPdrwY6e7vWN
P3e2G6uz070yIjtyx3JVBGF/wl4vi+fBxgkgPffhED2eqtweOz7mW+f68m0N
A6O87kQB6OH0vnp3ho8RPkP4djV+VgziUdI7Q17boEM9cm9srlnGf1Ic67yA
Ws/d0fY5cfhI2Kl4GJnma+Qi8Rrpqp4qfNeKT4PHTQMj2MAoh4sRvyWkPCuc
6BsU9LupWFCkj9N9f9Nz8eUYOOMntnosmwS+gZxCl3fYQJueEO1pWDhzrA46
Z631ex49YU/KIa1pelm0XIISUN2daxgX4iWR28kP80zcDH5zbgMhNrW0BsYC
b8eAE2PaO5rWQxsSpUWkYHlo+JwFJUOE9bCqJLo6dx/ADTDSyhYO7iFsgrI2
kbIXWs3W/uBwWK9r4QHUPpWbVsmiWSVVrHsioAYd9tuALhsZ98EltsfgbQ9Q
osx39vRg0Rb1/r7G0qdBMDc5SGvokQRRCQXBK5TbP8sK8IJOnzHOKsUTMaAn
8dojQpfxT34bhYkfvyTuE7U7qrP88+kKdFYDlJm7/cncA768OkHR0giOdFND
yxKGomVtAhjpBfZAEkKYaSh+sgFPgSMkymXVf9n7zRQPw+KLy0w8dtMRcI4b
mvWt7ygT4SA8GsvICyiIHaB+TbeoCVCcSMKmwYD4WDAOKeNLRNt+ZZWRBnhr
szGU/h6g2pR8yYE6kp4geSjr6u+mhegZ1EWvQ5BIzfTNUVbSCmGUja4hkzpf
wOj/bVCDJVsxt6XCOfjHR4QwKBZfSZpgfdHbleAs/mbDXjIvTyjK8pzFJwsl
s78E5BsPvFsufgQCP6DLBKwtWt4dDDZ8X70OEZxg3+dopIB8pt8AlfMJTd2R
M4aOAOsiQCCd2Qnc5MnA3le39MngHG6PVj7U4TlLd8K1GQJTJIhRJurflnio
QyAaBlPhwyX761A4nVSvSE6h56of87XcbNhOvn4Xr1/Sp7ivACyMn/hPT8Ap
hOvbI5Kq4P8LmJj9cJYScdMH4g80ev7qWQqQG0LNO4i7NWhQ7/gaN1nv0px3
4YA34eyRW+PJ05USXD/b0abjEX1Nq5yLmbUabef9y3nBpGvafsW0nJ6TZMAz
rGu+mRqwujOZk/6FnTvcnFKspWdIIfXHXAbjiSW9mRVXlWC+olH0kX12IKp/
LWbiQ+abN2GHFlIVGc20mE3XlI9sBFKU5wfGXOKtN7/nrB5omdIrvp4GohgJ
c8ow36bUolUVxFoKSZifp3ooS3glmDploCGOmNfvHK01xDT0lPq2Kh9E75wQ
/nLQ1WgzpxFw0V/MGEGyc3dO3BAAnIxwbVzFrZBR1VQjVPdE9yxqSY5fKCNT
+DPwMWiQbgdwu9oXRJlrDl0J8cz3/bfldR/2Ng7M3P3L3SuuVZB2C0UEuOlD
8Y1yPWtYB13LxFNRZSsmGPcO5y3PTe1rA0TcXY8U6gzY9TmufJoPvPsVb7g2
PmCyYEKPfKGDKrJXZYouvMzBFQ8FAt1lZBU9LhSac4g4C4ZOLlXqkjN0j7Yd
Knl2EE5LzZa2uqjErQARNE53SXFb7aPbn+mYjiZBIG3sDZSSqRQBFL+3GU9r
2+wmJemrLCx3aY0JVW14eGDw1vRVRGijzpkdyGf7q9/w91pNNuOOo7D3UXNP
1vOUY4+7wcNB69EPICtnJzVOI7ztnhV34e5efjH7Y+XpzR3HbdC/CGQmVJnk
hlVXbKek0utXaP9aBsfOQuWSZ1oKWdX9Rem7v8F8tJ8lwcK8IvB3t5bor/wT
89KowhOLUjbDxpzSfbUXP0JPnDEqXZu9qy/hMLpPB6ba3MxyaE/GmcMkRKB6
sfGkiYc9wUuiyEYQNn9WaHLhRxpQpWb1mVZStt12sn3mysQp93cUuv8Iklbb
CLOCGJ4Z1i8QGzHgqTldvR+qXw3rNf7LY+7hrZ0W9EARxpnGlBeKs/j9Wmcb
rjuALQg8e9+EV4Kha0KfdlC2dn9VP0OUgMPdMmBGjRV0d4jsLbQ0A370tiUh
+7dPP4Z5Dm+E1KqUWmkGTGg9mnbZXQX0Jn4diJVKQDiMy11IBUi0BPcYPDWZ
WOOpBRmRj4ZFMwSi/sQkukScw/wZgMuxzxVV5DAOvWRgdBoHT7yX8N5XQVqN
J2XRcBL3YBB3P40HYtxbYR+lNM3Y6s3mRn1wD7atbHI/Gq9YSUsG62xdmlas
NGxfcc7hrrfMZShZKlkIVIn+AuZ2Gx5U0CV6mwUW1Yv6WZBELGM58sNupaCw
JDqx1tBo0JaVmaEEh7UEUwr3dq9ryHleR5E5ZFFFpJ69JD5T3JQEAia8O+E3
LYbS0J8hJzWjBCsECqmQ7olgFfq5oBC0WqH2sECHALY5myDHOdwB6JiNEdAb
B+5LrjQqJRq+0DlHAupB8a4Zx/1tF46VNsjieSukMhjIKNi2A99BkSiAlGIW
0a6oE0xinkq1UA0zGT/lZlmNW/V2TRsqqrqGMsAxXrMV+k4t/h6mHBsJTxBF
doq58UzFUqp4twJCRYsXJnXQCF9SQPS6l/iwqhc+EnvQ4TSEBaSYU8ruByR7
MpEiQ7pzzY/mxxygCKM6V0KoO7SW9qrdQv/a0DiUKEz23GOS1D5iKwZPEudz
LhTPgjqnBiOkdLN3Y0SZl6AZkbXMHgsHnjJzWj5D4w9/WCmylR5S6CaDeHRe
PZVLnGXHhNokq5mggtKQx8K2q5SYIRc9xoEIM46JgX3psZwhV/owVovT6v3h
Q52Go/aLbzi9c1+IIbgkvMdq0yvNsxs3NV/xKg1EfaMSaelMNXeVmAX2QhKV
LkTaZjUXbDyC18gp9XGJMVYFOsGqQuM99FE75na4qzWpIiK3K0jZiqPopVmw
CCINyTRNxElJy1GBeg3KcdPyBAqHC7DqsNgM4/1zX7TqPHBTdMEuQOZ5ZGyx
AyebrHqwptdpAR6qyS2HOd/Qu+YBzaH0hApmOIJTmGOPatWyYWnhM2Y6YV9l
T0WjC2FaxvrYWN3FP0uvn8bt8uJmf/Pgqu+EDsEbvroN4pA4jDpMa0VJu7JW
miEQsSC3QZhlqwdCD7Lky+zhqD+ArYnppQtH2HESf13DlubjhbWv2erDdVWq
R8aOuuW+dwrF2G0qIbJEb/E49SzgB+eXwXxeTp7wt/zx0xzwlFZF486eT3be
seSLSbFxNfqMbDrlLVUxbSdjR1hlM6lGaY7TUeTddaf/nXjhxt70XrLQxH9I
lMDTnHoSqlbONX5QycnAWipZK/U3tZYK/I8p6sH1VK083mxYuRsKpaACr6ml
jXIRKmkrwEIlGuVuZZ4cttR7D4dx3ItGEJ5KHecFLsXKuYoDQQ38Ys41Z0HK
ejESCgWxsoT0rjawNof3Cizy3C66JKzzoBFmkR0lbFSFd6mkRIZEj10aT4EJ
zxjvyElVqHj3VapS2UlMzXbOA6uNGMVvqDy5zlZwymP1Sp7qgZjqLFlwqkte
hAB+TzPpRANGEufClCwywxJW1nM4xsizo9XKYCMQUyL8KRp8y4DW4OkqehKd
y0p+uwR9SKst0aWGtp7H/Vh2K2R/eka/eUbwwp/y9dOAZ+9oCA4VVjHXBTXJ
KEMarwZOBvQx+uBwMrbLOHMci5L64MXDXqxARFrtupIiYtV/PjMPETr3oXj9
B0vugl2u24rQEoe2UEtZpwdIBWGNPK86Uf8dSKL4pI5w8Q64jZM+Kq5R3crG
0/glB/LwuWQpuR+2lOTwoNEw+MGJ9LP9IIIY2o6j7iAoPAIqxTRIA/EQoM0w
NHIS783zzIo88WdSdIQn/Zippwp68bPkFbI3WfyquW0GaxZMPqapedRk+yuB
HprQLvjD3DVPXXHQPU4rI09i1Y81BI5+4sP7ifZpzx/qnlYzxiwnBfz3wjwg
eAHr2ck1+MylMtZcxxCDYTrzOV7Yy5coCK74WgTGDHHSFejsD4Dkn/gnf1vg
Z1oATsYJenld7IrL2wNpWUKItZKcJrLjqC0I44wI4Ss4pIYLSDVdDJVpVbWi
nDeH8uinpMR/r5CcQpI3yq1gKwY5WuDKe3UJegmzVLM7unL00B1ruqYQE+nE
9kwWEzA1Ge0ZuJ/uJP/V8J7Yb0HjK3bsISTZu+VXQtII3u5qMSA6Z8ACzNK3
OYqxQJQahxyO5oUceu+2lr6I2o2NokOTkPY7F3NYlGXaIX9WgmiH1O1qW7I/
RB08F3bzHKQk1t8yXLtN1r/aOxuOylmwcx/Cj63V5SFtmpoUe2J4vXCbf/L5
Nv2gR3O12hWrEH4mMl7TDR4WoU/mT2fGczbzXRm76OLPf7/mUfNtWxMKQ78o
g+7JNBpoRDZN4xsdSIsNEcaQvUK+wp5Kywx5iyEKy0L+CTe7ZLl0eP6v3JNQ
5pgi1RavbCmyj01FfHXeHIxc4ZFPcTqycmWeNgGnOPN9gIQ7bhG/aF4XXb/u
KzhNijV41DYEI6G9MBAC8UnRZt4K8TaZ6Do0sSwcEwlQWLaN9qbhjsmmNVWK
6PKsTINqWe82yf2VllWxKPTMuJex3dpo8ifATvtMrNbj72/KVFXTcBITcBEZ
RslqiGoINvXdYDx11e6h0uvpq2vE/IUfv60p08QSz2mV8ibm6KV+2dVuE2Ik
dVHrWe9DMSg19p9vlXEYTWC700vWb/GuKT7UWYXe5Jjc5pa/rCEml8Y+9f4Z
/dbP/OPX1GmZoDoy9B1c0fsrJjKWEXNOqADQHNLF0xtw40bSo4kAU+rbRgLb
/ntz/ZT6Kn3a09nwaP/svZfKars6mZQTEn9iGePKl5IqoQyzs7mBn9ms6HSi
4gT7rjDyl58oNgsvfz5SRQm8kPEc+T1VNZ6QerzvWvd0p90POH9r5a2/L2oc
pcrjf+CX7yLmTHheppvV0BUqJZr48pr4LEKH9KTWctnzc+XLfGIG3MwDpiFN
L+YMq1Md714Mu96cuLgyTTlO5HqNnltCykmJ2u8STkO0qLGzW4AjZiyLrUG+
jmviASkdD/j8UBV7wXwgNtdDJOO276GQZzJUaQ3ZbTE4NknHfZkBa+sAPAq1
OWUYiClY93atsAIqGg5RcF9PFyVEMXZE5SL7t8LCQ1eI90Qo9CN6mapwjNPL
dDGamlmr9PbM3nN53o5xPB+rVaYC1m4RJmZVDNeuVj3INAGXbyEhIV5H8EPA
7GEH3N6sgwHSjqy4IzUZS6yLQEjGI/Oeu9EZQCy0x69FgHRCMQykjV6IHDqE
EpdHR2CQ5lhP5JNaYAbFiBpsMINvkozYcw71IOdMmtRIHTVkfGwKIpQ3Kts7
5+1/sfNO0ZUFXbhobNsd20bHtm3bZsfmjjpJJ9mxbRs7tm0b3UnjpPv/z7kY
577cp/twXwpzrjlrrLVmfVXfGqumKlmQMXQKDcshFhZJDOLjCw2aYTZsCKaI
K4k0dWswhIeDrS0l9/cit5cYylTFnkMZOiVVP+mRFbIR7FF4XVSEUvBcDV14
IDUFM+VrAWvhiDsHGM3UgtgI64dLDSSEJOpALDUfhRGpAwV1oE+aw8qgmO0Q
cB8MDXjn1LklT03i0M/Lje/gYuoUR6ZLDB28aKH09avLtxV4BDrOn8igorHh
5YC7uENLIY1wTSmxgSvOzhqkh6MOetF9VSsxX4liWJV3LyhYR43vppuenZEG
ptj8lG4h13CUtNuY2Y+HR9pKfmlX1XERBMBqZL66KqdSufKIgshqnsFgHNKm
4koVgd8X60Fk4DXtv+9n0r8UkOv9UCv3iTnh2xEFXPQTNWiHaZCNtGiQ68q+
RzySQcmU6Qn3OVF8Av2yqHOgYyH1tSS6Yib/DAglNq4QpD4xnbyq2ddSM0VM
0K+VACjH+2VYKaW9TaTDFIPxgvZpNCckkVo9vgkvufFBdLc/p0egyMTBFcQf
gviWx+l42GG8MTVhsSgRgSE5WA1WAfJsfbfch4Qor1GS3GPQMtNjeiClYybp
cqw0zgDWe9uOz7RLQzOCtHU6R27AchnSolGS5D/hEt3mf+jwdlDj7Abf2gaf
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
9zpNuBPdJkRfvXs27h58JeyOnxJdAnqyzaRO8giYRMoJUJ3Ng/ZeiXB1OgZu
ScYASypxV2RgoxFWL1aJCpbRgOqKWlP06jK2Pf7YdLnDoXsMsZDxmjJTeASu
oIhwNW9SbHO1JQohOUyFSkNjPDG0xEQyAyZRxmFQk5oZ1xk2ID+/FLXaYyGk
cBXaz7KiTWaeQVI5MtYoc7LYM4wT8n83v/TrtI8L1YlPfOwhP4C52QXB86s5
nRvljvqcaSIu/5SqTkDZEJHnVwp4gg8FqblsO2YE/xS6AJJC1JZj31HREFGb
bCGKO1LmrPtZKQKSx9fD7ZjEpV2TF8pUTeKTs1q1/1ivnF2yStuqpqaF4rub
yA8W7K87EJ+0d+7UurfHrzuic6wPtjsVDBHVYL5/DIkdJT/y0bG8D0Vx97js
fsgN4w4MS/I94pI9Y5V2UUpDdf24KNKdKTA4H8V9yTRxaV3q/mjFNFEtks+M
HOZ6Z2dGY6PnukSlfHuTKCTmX8h5OU+61f4LoPPHcMA7Gv16AHB7M/3Mbvnm
uku+0Ms5avJ0o+cjmrCOhet80RqUEv5r9q9wpkL/N/X+hdgxj6ndfzX0KD7w
H6EseRfq5dzlafRjpuBvaH14WRmo/YhiZNMFAa9/NhVNCQegD7lYZ9tjwY9p
LSgVD3YWSjft6h6XCegbVaSEXW6t2Tqur85SmfUonziOIrhd7LPas4QTTr5Z
9b45eUYfguhmNLcmVQzb9fbjsetymwotX4eRErD4MdIH2m++tJCCN1/njMah
eoCgtEXHVsxTA8XOSDqY7hAFynwlC4Cx1zWnaQudEDFRCVTuSCJYMbT82OJR
GLfNrttCsSIJw5pOR9+RsaqZcjpLzjTc+gc1B50AssOebOirx58ZizITXn1E
00pyjx7K8Mg8PGh23PdrPTw/1wmSgo2LlmPQ01tID6jVk8tDSlNy79NjZlbN
Q+a1iyxWaPPHic1fQvQ0LukXn6UX0ohL1k167nYe5oQ4NaZ1AtAY/dSQogDJ
0v5q/PdygzW4ew810vxO7vqpGw+IH3WOevkht3wKxT11TOJm95xrzuCBAHFb
xSG37NyHAhKfaCiXdsk1p31TgD/yjnm13mPrhFv2Q7D/0JG4+VHjncy75tzQ
e/I7qY85miX0Jm6m4XDJ0n1lg22lJCLIm15xzZkEIpzfjwjTKY45Oqmb8Dst
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
WS2CR9bhCo4crP6GPXVo0wIJtpT4qL5WDvZ0+TEcR981RU7DJGYFZpGRtj8h
LwOcT3++XqrgXq411sNm9HgXojnnHkp1N6ZFttaGlqFBC1CKX3Vdf8Ej/+Gf
3OTNHt6tc87sVEp6gKahvxNmdT1Rb7lkTzXvnvpXpEMxstKVqoBt9ERpOEsS
yHqOtwnCFPJBlFSbdw/BqMKUJtb0EvR3QYRUn0IFmx64RL3NQ79Gy9Prw1uI
gaxTyyGkb3Saci4w5a0DduGXNywn3jAlGj+rFwvwXetDN3JSWaBrNCdO1+uh
SbN+JefmlOdkf0fvZLJI0/Zb/zRQVMKmQRmxVGJ16hhA+QtM3joqz1D8PIIE
Ak8L1ORq93A8RogrxcAaarkTyKBOzJeWUb2Lv2piMbGyOpsPUlW64Y/BjJ2x
vzemL0cmtbQ3sFUCjwi0QWZcs4BJMVXu9BhGxhNYtdv+NIDsSFDZl31Fkcar
nQQXUnvyjFHVC+DPuMb9luz53C6N6hnL7riyN3n8xFkITK6dSJvV6tzvj2OK
lhfXzppA7ZhF6HbcHF+wTCH3Ly4HHNTFBJ/9yOcH3Eol/flNCLgW2OSxJVIr
UEpbpau02//Z7h0BpcuLzgJJFxGaz/c8Qzrw87jjI3cs+Rrvxg+LcjY0ON8y
LT056zEWq4k8uNj7Gt/PkkjGntwDrvrorZYiazYOoN1qKCw4n/3inQWQX7wP
ImaVVLs0k90DNMgYBtEbrLKAJ++rFWuxCGrWcwtGopvKEks3Ap2TWiNHJiPG
4kULOpWebIO2mZRpRfPjwHSD6uGEsqEKEsNy5+TC+cIpCCp74lvyZaZubu6H
V2w7vvcn4vslQ5K8r+C/INzAd0LfWUizvc3hdMYhwSes+upVJfLjTLr56oM9
1Ge+Ss/3yhM1X70SFGu5fn2tkNIy7oa+46u6+ZWpyqet1Kp2bJm9rnQa+7lv
GPpOGi5eXzNspTaNg5K63Y3SBxyt/jQjQ4yLMs1DuRf6TiGYCZYhLRqVsddG
kS3kwSMAs10/KBs0EArAavYOIvaQbLCpYUBj6Zngfe2zadgboAFe3xwMyzBi
vgPLYBCU3eeCqYc5W/x8QzlfJmGAWZFYvu4M5lyzqkl70ihiT+V4czLvR9Xl
hCShhI0mCAFYY4wrLL2gjSAHXFiGH9UQAZj9ZJVH7T0NHj2IPfkxJJh6wFnB
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
ez6MXC8P7PfTIIMmNWLobrvFpG4AVwEpu75tnujVfKMBUwI+BWL8NGPVjOpE
YYZWAzMHfgBi41bfrLpE9TNM74mCN2ZoFzkt6nji3ABEX/B2EE3g0gl4RTcF
rjf4qPAwjzPpleAzIJ/dqriUU98Oo+rDVPwRQg9PVLeBUrsqlEC26C3RHWFc
vXSE4ABNcRtqfgrjIDgysCBkQfOAx10NuRhSMSVhc/4I91NnmveuoBSsxqHk
zrdiCwW95b3NZj6DMwK/CckRDSXuRtSGLjOCKpP1yXnlB0mRx/s0kMIh/EL8
DFjnibrzCsFe0cg4MjqEQr8Jvl0GAaOnsB0URYfkx3xYTfgzIGLiThrQ0lb4
OvyaxZZIzJBqzkGZUEgpxFfc/P2RngayiYIqQs/IH9jNZsmkE/McRUSIhxLz
JOHJ9huOjCZ7+/glhEWeBlJKv74ErvPtyBhhrpRURvoH/hzS70g70Offc3Ke
40p9F/4gf0wUP8pH7O4gTZZgjo/jBKy14KxT9H7kc0rnkErJWWTbkSlKVyHG
zSGTl3oc8Nf6t0c9o3ImnMVAeFw0w/nLdWcW33o575ysTlkhcLXgPYEZdE1m
Mi5wjKtIM/ES4mMEpgJC9dFLBKPuFp/0pzYMwuyWyCX+M/xu8oYo6CtZzfdg
GNgJECO3ymYljbclqAowBeDPIX0JqiqFBloJzBT4Hog1cL2rajPVzzC9I+qV
EYOnyKnJzyvEE7wV5JNbyQS8ArcC/ht4VCiYx5n00j8utsfLD/VP196Nxu7s
q48jg/4fFBRzPZrpljCOXtpCsIEmAw+56j2HBQRsGWgQ0qC5bt+5DPEZQjEF
YTP/CAdCZ8aMg+gJKsbh39VqIz3eliGGVb9uyaebFPJMBuU+c0sG2BOIB4jA
FZ5L/+0xHD4YPAjU80xaznyLYifoi7SUgkzWnzedEm872L/un9xXluk+YP4g
/G7po3piqWSSyGQvkMGfYy4p+tTvqTK8ZzJ2ZqCu0M1EKfjAsUCiQCRAY4Ch
hdkOwWhtA55tAIKiour8KSjdDE4kD3szbQI/v7YuINDahqSPtb7aO69o5ywe
eL9k5uLo6CjQIMSMuglXMZnN1dP2Exdly0nTCvBxya0rl2YWiiAl7IqXDz8U
PI9v9og+giaewoCyQRVJ+O7B8uShVRPT6/5BGtbN2CSMXMrXbHdq5YesAOt+
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
mrLhQu3sz+buF9vPme9XLGBGp5ckHm/hLT2ieC8fqI8vwNeP4Yvd3e93Mvzv
gm9v8m8p6+DYof6j3znkHWBk4nrt94LvXS9+zxe+PjOleHE+Lc7Uz5HeZ3cv
2y/2b0MxpbqJa2QWIYscLGAKgmEgGIIQg3gVoV4WvMnv5lGt88+p3s/sb5/P
HaTRyYoXbS+3Xx9rsPcm1tPpuNnL3To+/E9p78frb9+GaazJ72XvZ6226y+J
qU80dq1p7e+u78nZXi+OVsfN6bhhC0p27pdebyfu0CeZnFtz2vdzJf3PVKdv
WmYwJeI4UXr0xe+oHt8b+O+8XkO2mC7CFBkAYr7R3YRuUMmKUEvKptrL/kTl
uWyfQdTy06RXfP9SfZaLZaPel6vPJT5r7pMv8SuK0q9dBlblOt/v5e/O7u/q
7wN+YA4zbYpeFOzuOcCH3zZiGpJDxhVv/9w9DeX7DdXjBhgOK7JEHrJEYuvG
1a7X6+Lvxy4+qy/yQ14/HeWIXNpALsCJsz2U9wDAV9D5DfLUBPl35fwFYKxD
cV+j9qHdiuVX9iZ0cuQ357HXuoLdIqLNa1Dwc+atsjbtu4nh78R2cNcNdqYR
M+57rRasvkeODzbDWyZRxh+790zdag0pvV/LVp/WVwcNye9zu4yni0VHTHpq
RLjDS6br8no8l7+2aynPs05f7YNW1dhVUzbBrWsgGbcEj7GurT8UrSiL1TxU
VSNZ3b1Kt6GqfgLHWhMHlSs8PKs8xWo0wSlY1ca60F6aOY56OYsOcU0OcWj6
4pLkmvf6avdrt1acnnWb7Cb5dOepXLnPp+f0dNVc+zOzN6TV8KPfk7mAKrGL
+tpEfw2Q2AUS7QJM9hQtaKbwKufrkA6GKUvnYdSjTS4cWE7owD0ZYll12kx7
hbeBNDvE4fXwwP/ED3Sa73WHQ8iAQdCGBGVrGnsrUvBAQ3hX3pGZBrGiZOkK
BokeqHvU9NOy3aUw2k3Sa0qBbzzwqdpC5NEezM+YJE13ONbWY/jMW8rOLv5e
V62IpfLlwKX8Zkap/nZ+BC4u7qPHQnGp5zjjFQt5no6Y+vJqVxvUdtsu3HT3
sKfTzPJt0iWVAm1Ijb4kPqW+ruL/sn/bt/vsYMudbGvWtqy9f37Shyza+zJ4
seLZpqwv/vKq/7jbvg0vP3DXJsN1NQadgg/a/z7fsXwOarMbdDa0QpK9qJJN
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
u47D9+Xo4JHFe4ELi/qo/rNwsnG80SPeYw9DNtTUVMyOqU+rjpbLiv9yqQ+X
KudHu3oxDs/XeQ1/elYXOnFA/n1xRm8+9HPxuMbf3YlD0/drleJrYQB+jl5e
X4asIk46s+fBpLfTye27buUot+8yrm6xgdavy1vyUf7rn6Jrv86Pw7KlE+Mk
GwR2v7Yya8pheDukulXXidGTyvGsQ+EaOSaMF3q6T9QikfZmqFZEM838XtMW
yCasW1fQKbiRs4nCaiBYEpzFaYcrd4HHxhHIwDclIa6DiFjozzjYC3m0CADA
8jJjHucOJ7Skmnv3vEbuikAN5PE07MshnM96mw9PXpqtqP0mcI293NkdArZF
RjCKcDieQmWwKwpq963xPufwVNF3XHPLTZZ0fcyRyouhTHEuI2CA37GyhFCA
2irB15x2VYjFbIEIPywNv1LW0lw7GYv6cqSvSJBmJ2ubkhA6h07hpEsJRP9L
3W1oDBiGgLHYlcDYQG6HI/de5bxN9yw8ShTx3VY3t7tj/xakYvketEIzdaUA
41webhuTtfFGXws2Sj+N6xsoFh+mmIarjVTKkm68NGquIrgLyuk2UFrRDByq
Rd+TP9TWWShD4JwAFLCslHeBaAtOh8CCNx8l3cp3MHLWb8nKx8bLR/btuGvO
Ty5etMlSaZu4m32RnB+ftepnvAfl/tB7Es0pPYPKPr8zEaq7hDTyvwu7yfFR
tZbJnGtGJTNUpeBLN+XmWp98kgp6gDRnhfgTqJrYJAMzSVYUu3cULYqOdEUt
eUdtJcrwxqvAPW0weuhBoc24pB43U09b2nrWr6mjngZazYiEtwVpQzkzIs03
aw6b1yqXVwno33PXq78nBDs2I/paLoqO6jpfSRnu3mz29qY/rD1cBbMY9vCC
fqMIRYf3OUhR/c+i7pUn8pQ70XotLaS2o7KKKYjdm4YS1oF2DsmbTpguOGTE
5vo6h1Xlo6SfZgcUFa6bvcxsfTNxNts4/0uTMHZbPsDqX7tD7jK4Z4yw2WMs
jnhLgx4y2GeMOaYKCvHpn+Lm3EzLlyWFn0lNXuz21D8eVVvyoZKLXw8r7tlw
5zno6kcH8KFHP1cHlpnMPO5sufTirZ9Ly+Y7f86d2mFEZ8/q0vy+NP16v96f
DqSuudj5yfo8uj6T8UrY+D5eH5KOyPf8smNbXg7a/T6aip+OqqKSDq7JL9aX
+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
3uvJJOeeyzcp7e4LDDYOodp2x8UuVOZaQsw8woXbzihU9luUWBtlHaNgCbC7
9rvpx3nzj39tbY9vX1zn66ds7OVmVtjRcsua/JPS2m4hUJWsb4RhWvXeTRHb
x0kO9SYa/GiFrK+l5kyrENDALQ7iVg6xvevZeMkOp1ALt/jP9SwiD87g+I2t
/g0xDpcLCtyN+WMrxT1kmNyBXXVnylYPdtYmZHLBQ+5uh5DJgwEOO1tLNbQm
oePZSOJjV/Wsns/v94mHoztvP0r2sDxfjw/u74eVS9+hNohp3Mqftm5aj7NT
q/q/a3Tcl3+PP3rkPZfx8/Tx+DBmTKvD//xMEu/9GSDJGttByU/YjyHwUTUP
WrqZQjmR18Xx+X2tt/jpsN33hTn5FJuQ9+b+0W1fk/t2VPXQzv51aOXRo/15
LRYpAWXv2qQdedNn8ZF6O3Wwb879/wTYCif16IIgTYWhN57MuzXIxCEkPOph
YmEn6zVUPvLSZHvv4KJKllo/uTofzpeXpK5evRKrm9fbvyzp/Hgyf5na3zxe
eTOcvaPXmg1HKwDv9HdgI/z9D3wa4e9/sHzgxgxPTz/o1qw3kFQeDuZ+A8nI
QxSbjBxtIBlhbSAZsYli11ihRCVPPvCpEOnb3EQlT54+Jo5K0hFoVOIsKknR
1agEKuuIUcmOtGtUAjOLj5/4NMKPn5REJcBnPnnscwZPHu/OoA6ewdNjnzN4
erw7g8ad9guUtjy85Zw33P0CVW93tV+g0E2RvueuIaLVo837N6vgcBgoWoKG
Eyt+36uSf/+xm1jx6dET4lgxHYHGis5ixRRdjRWhso4YK+5Iu8aKILP49Min
EU7fVhIrGh+e8qxuJ4Pm587kBM3u0Jn51gQ2k+Zn46slwK3Pz1MqjS8OWKRT
ABx9s3y57Sy6b7bDNr3TcjG9iWFWs7+LGXxrJIQ0je4bm0tVl2bBgrzlxfYr
R/DFbJ5DAnL0DByGzyZfpmMzvRKhWz+rpUM3Ov+ltrDWngxv04MqFwM8wAeE
gA9sAK+fDmyH6vLGkPIzsHpP03//7vyvPlxlNw8rE5mH4/SBj2ZXlw9n6SPf
t175oGtnTny0MyeO2pkTrHbmhE87c5JvKzQ/dcs2DrE4swwzEKnvBiKGd8iQ
e671qC3uiLGwpIm173J5jGXF+W+9T5M72tJkPhm87Cfz88HDV5NxamfG5/PX
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
M2qJEPgCy+l/LbC4tQmV2wI=
      "]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895064344848476*^9, 3.895069714655981*^9, 
  3.895400656225038*^9, 3.8954006908239202`*^9, 3.8954128056857777`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"fd16837b-6eed-4c43-990e-309c28b73bbd"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{
         RowBox[{"\"BY\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             RowBox[{
               
               RowBox[{
                "\"name\"", "\[Rule]", "\"Original long-run risk model\""}], 
               ",", 
               RowBox[{"\"shortname\"", "\[Rule]", "\"BY\""}], ",", 
               TemplateBox[{"18"}, "OutputSizeLimit`Skeleton"], ",", 
               RowBox[{"\"Properties\"", "\[Rule]", 
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"name\"", ",", "\"shortname\"", ",", "\"bibRef\"", ",", 
                    "\"desc\"", ",", "\"parameters\"", ",", "\"stateVars\"", 
                    ",", "\"numStocks\"", ",", "\"assignParam\"", ",", 
                    "\"assignParamStocks\"", ",", "\"params\"", ",", 
                    "\"exogenousVars\"", ",", "\"exogenousEq\"", ",", 
                    "\"endogenousVars\"", ",", "\"endogenousEq\"", ",", 
                    "\"modelAssumptions\"", ",", "\"uncondMomOfStateVars\"", 
                    ",", "\"ratioUncondE\"", ",", "\"coeffsSystem\"", ",", 
                    "\"extraInfo\"", ",", "\"coeffsSolution\""}], "}"}]}]}], 
             "\[RightAssociation]"}]}], ",", 
         RowBox[{"\"NRC\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], 
             "\[RightAssociation]"}]}], ",", 
         RowBox[{"\"DES\"", "\[Rule]", 
           RowBox[{"\[LeftAssociation]", 
             TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], 
             "\[RightAssociation]"}]}]}], "\[RightAssociation]"}], 
     Short[#, 8]& ], "line" -> 5, "sessionID" -> 28990256229756152793, 
   "byteCount" -> 7903120, "size" -> 8, "stored" -> False, "expr" -> 
   Missing["NotAvailable", "NewSessionID"], "wrap" -> OutputSizeLimit`Defer, 
   "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.895064344848476*^9, 3.895069714655981*^9, 
  3.895400656225038*^9, 3.8954006908239202`*^9, 3.895412805829226*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"6b1dd0c3-8706-43e8-b52c-403e0ee2f608"]
}, Open  ]]
},
WindowSize->{1452, 837},
WindowMargins->{{-1743, Automatic}, {50, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.5 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 46, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 215, 4, 46, "Input",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],
Cell[1259, 40, 1680, 33, 140, "Input",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],
Cell[2942, 75, 1671, 34, 111, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[4616, 111, 2200, 46, 264, "Input",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],
Cell[6819, 159, 672, 12, 46, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[7494, 173, 981, 25, 140, "Input",ExpressionUUID->"41857172-5d13-45da-aa26-355e76cb43e7"],
Cell[8478, 200, 1339, 27, 109, "Input",ExpressionUUID->"399bf9e1-863b-4529-a74a-012d41e91008"],
Cell[CellGroupData[{
Cell[9842, 231, 1243, 24, 109, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[11088, 257, 666, 14, 70, "Message",ExpressionUUID->"bfcb6514-86a5-48fc-b2f3-96f838ca2da0"]
}, Open  ]],
Cell[11769, 274, 129, 3, 46, "Input",ExpressionUUID->"45117e05-75bb-47a0-8081-f1683368955f"],
Cell[11901, 279, 213, 4, 46, "Input",ExpressionUUID->"b6328497-0bd9-43fd-bd5e-219d8a08c985"],
Cell[12117, 285, 677, 16, 78, "Input",ExpressionUUID->"17bd1208-2f22-4ced-9e63-7ba8547d59e6"],
Cell[12797, 303, 502, 11, 78, "Input",ExpressionUUID->"d3c91b0a-469e-4730-a4f9-76fdc32b8381"],
Cell[CellGroupData[{
Cell[13324, 318, 783, 15, 109, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[14110, 335, 159066, 2713, 91, "Output",ExpressionUUID->"fd16837b-6eed-4c43-990e-309c28b73bbd"],
Cell[173179, 3050, 2239, 42, 193, "Output",ExpressionUUID->"6b1dd0c3-8706-43e8-b52c-403e0ee2f608"]
}, Open  ]]
}
]
*)

