(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    103972,       2050]
NotebookOptionsPosition[     55234,       1165]
NotebookOutlinePosition[    101598,       2020]
CellTagsIndexPosition[    101555,       2017]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "uses", " ", "basic", " ", "definition", " ", "of", " ", "models"}], ",", 
   " ", 
   RowBox[{"processes", " ", "them", " ", "according", " ", "to", " ", 
    RowBox[{"processModels", ".", "wl"}]}], ",", " ", 
   RowBox[{"and", " ", "saves", " ", "to", " ", "Resources"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8948047319431143`*^9, 
  3.894804780848584*^9}},ExpressionUUID->"95d0223c-eae4-4110-9ee7-\
1b467655e8aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895667804661036*^9, 3.895667805565455*^9}, 
   3.895668160653308*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.895602929877912*^9, 3.895602945574039*^9}, {
   3.895603150629443*^9, 3.895603155898622*^9}, 3.895603639155025*^9, {
   3.89560422507939*^9, 3.895604271915659*^9}, {3.895667789174368*^9, 
   3.895667803230785*^9}, {3.8956679941198807`*^9, 3.89566803225379*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsToProcess", "=", "  ", 
     RowBox[{"\"\<BY\>\"", "|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}]}], 
    RowBox[{"(*", 
     RowBox[{"|", "\"\<NRC\>\"", " ", "|", "\"\<DES\>\""}], "*)"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{
    "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", "\"\<WCratio\>\"", "|", 
     "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", "\"\<DES\>\""}], "*)"}], ";"}],
   " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<BY\>\"", "|", "\"\<BKY\>\"", "|", "\"\<NRC\>\"", "|", 
     "\"\<WCratio\>\"", "|", "\"\<hassel\>\"", "|", "\"\<BS\>\"", "|", 
     "\"\<DES\>\""}], ";"}], " ", "*)"}], 
  RowBox[{"(*", 
   RowBox[{"must", " ", "be", " ", "a", " ", "subset", " ", "of", " ", 
    RowBox[{
    "Keys", "@", "FernandoDuarte`LongRunRisk`Model`Catalog`models"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, 
   3.895064098804215*^9, {3.8954010616600122`*^9, 3.8954010638688383`*^9}, 
   3.895668171011196*^9, 3.895672752010098*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.8948048745963507`*^9, 3.894805012572357*^9}, {
   3.8948808283208113`*^9, 3.894880838204442*^9}, 3.894881695697893*^9, 
   3.894882655907054*^9, 3.894887455790009*^9, 3.894953030370551*^9, {
   3.8949552867373*^9, 3.894955289263371*^9}, {3.8949554265077677`*^9, 
   3.894955426692339*^9}, {3.894957902526409*^9, 3.894957915886273*^9}, {
   3.894964014173387*^9, 3.894964019053932*^9}, 3.8949675693950567`*^9, {
   3.8949778670900173`*^9, 3.894977868651688*^9}, {3.894984607848482*^9, 
   3.89498462243505*^9}, {3.894984802138855*^9, 3.894984887356785*^9}, {
   3.894984971712235*^9, 3.894984987896487*^9}, {3.894988440713682*^9, 
   3.89498844198901*^9}, 3.895000270939497*^9, 3.895000382568815*^9, {
   3.895064098804215*^9, 3.895064116644793*^9}, 3.895243642614601*^9, {
   3.895536399446925*^9, 3.89553640030827*^9}, 3.8956680059723253`*^9, {
   3.89566817615296*^9, 3.895668176932556*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FernandoDuarte`LongRunRisk`Models", "=", 
   RowBox[{"processModels", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"KeySelect", "[", 
      RowBox[{"models", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"KeySelect", "[", 
      RowBox[{"modelsExtraInfo", ",", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", " ", "modelsToProcess"}], "]"}], "&"}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<FindRootOptions\>\"", "->", 
      RowBox[{"{", "FernandoDuarte`LongRunRisk`FindRootOptions", "}"}]}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
      RowBox[{
      "{", "FernandoDuarte`LongRunRisk`RecurrenceTableOptions", "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<initialGuess\>\"", " ", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "FernandoDuarte`LongRunRisk`Ewc0", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "FernandoDuarte`LongRunRisk`Epd0", "}"}], "}"}]}]}], 
       "|>"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8956680395845013`*^9, 3.8956680418619413`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<DefinitionData\>\"", "]"}], "@", 
    "FernandoDuarte`LongRunRisk`Models"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.895543121137817*^9, 3.895543136900535*^9}, {
   3.895667942531457*^9, 3.8956679429341707`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"resourcesDir", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletDir", ",", "\"\<Resources\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Put", "[", 
   RowBox[{"data", ",", "filename"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8948050447264233`*^9, 3.894805112353306*^9}, 
   3.8948056672060127`*^9, {3.894881085617537*^9, 3.894881092515324*^9}, {
   3.894881235174959*^9, 3.8948812390050297`*^9}, {3.8948813037267857`*^9, 
   3.894881320322372*^9}, {3.894881427157349*^9, 3.894881438908939*^9}, {
   3.8948816842385817`*^9, 3.8948816850611353`*^9}, 3.8948819636639023`*^9, 
   3.894882111550132*^9, {3.894882167427806*^9, 3.894882167501503*^9}, 
   3.894884609110717*^9, {3.8948846730238657`*^9, 3.894884702153528*^9}, {
   3.89488555646986*^9, 3.894885558491194*^9}, {3.89488667223629*^9, 
   3.894886735375725*^9}, {3.894887422638444*^9, 3.894887424807941*^9}, 
   3.8955431197061167`*^9, {3.895668067742714*^9, 3.895668079032886*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],

Cell[BoxData[
 TemplateBox[{
  "Symbol", "symname", 
   "\"The string \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"ResourceSystemClient`DefinitionUtilities`\
WithContext\\\\\\\"\\\"}]\\)\\\" cannot be used for a symbol name. A symbol \
name must start with a letter followed by letters and numbers.\"", 2, 11, 1, 
   28991936680115578848, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.895669231298608*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"243d4cd2-91ad-4057-8cf0-429a64b752a1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"load", " ", "and", " ", "test"}], "*)"}]], "Input",
 CellChangeTimes->{{3.895668123084955*^9, 
  3.895668129710462*^9}},ExpressionUUID->"612c660d-6c54-4bf0-b214-\
400bf80133a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.895668130981999*^9, 3.895668133141368*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"resourcesDir", "=", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DirectoryName", "[", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
       "\"\<Resources\>\""}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"resourcesDir", ",", "\"\<Models.wl\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "=", 
  RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Get", "@", "data"}]}], "Input",
 CellChangeTimes->{{3.894805595213706*^9, 3.894805626435652*^9}, {
   3.894805703062829*^9, 3.894805751713066*^9}, 3.894880868918269*^9, {
   3.8948847961295757`*^9, 3.894884796244917*^9}, 3.8948855760134706`*^9, {
   3.8948867475700483`*^9, 3.8948867717367*^9}, {3.894886966447394*^9, 
   3.8948869698475647`*^9}, {3.8948874148815002`*^9, 3.89488741855857*^9}, {
   3.8956681020776243`*^9, 3.8956681346619*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{14., {2., 12.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{14., {2., 12.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["DefinitionData", "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"2.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/1c47a93c-9779-4b24-924f-82df82023364/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "DefinitionData"},
    TagBoxNote->"FunctionResourceBox"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["122", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox[
              RowBox[{
                RowBox[{"f", "[", "x_", "]"}], ":=", "\"\""}], "Input", 
              FontColor -> GrayLevel[0.25], FontFamily -> "Source Sans Pro", 
              FontSize -> 12, ShowAutoStyles -> True, StripOnInput -> False], 
             Background -> GrayLevel[0.95], FrameMargins -> {{2, 2}, {4, 3}}, 
             RoundingRadius -> 3, StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"FernandoDuarte`LongRunRisk`Models\"", "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Symbols: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["122", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "673.968`", "\"kB\"", "kilobytes", "\"Kilobytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Contexts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "8"}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Parameters`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["70", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: \
\"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["9", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`:\
 \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["17", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`Shocks`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`\
: \"", "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["5", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["15", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`var$$], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{8, 
                    Column[{
                    BoxForm`SummaryItem[{"FernandoDuarte`LongRunRisk`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Parameters`: ", 70}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`: ",
                     9}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`: \
", 17}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`Shocks`: ", 1}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ProcessModels`Private`: \
", 4}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`ExogenousEq`: ", 5}], 
                    
                    BoxForm`SummaryItem[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`: ", 
                    15}]}]}, False]], DynamicModuleValues -> Automatic], 
                   Setting[#, {0}]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ResourceFunction[
  "DefinitionData"][<|
   "Name" -> "FernandoDuarte`LongRunRisk`Models", "Definitions" -> 
    ByteArray[CompressedData["
1:eJyFumN4JkHzLxzesZONnY1t2+ZusrFt28YGG9u279i2bdtO3jzP+z/nOh/O
dZ0PU9U1011V013dM/3rIjawVTYABQEBMeUAAeEU4XbLuPCe+EsqkaR7l88P
BGrW49C2G7r5F4Lisy4qzy1U/r14GE2zcDEXb6NzLlWevVRHrqA1qYuwiE+d
kHWpfdLrK4a06sbsG+p43hbohiKE33q00b0I9L71BtW1wtqjliAfGSdLrTBo
f9olZREJjIswMhFtx7yi0Wl/HpjRbars+krlIVghHfJkrx3KfetztHXy4cbO
fAxMFvDa4bok4ixrDGxjoJfYWg0Mx70/7emYG+n2PkQ856iaK4d88rlAyEDj
gdcQ6fk1ofFQ3MX1qrFmEXOea/nxGWn/1S5QB1UJ6tnClxX1x/DRzRKLb7Pp
EoC5yRmVbVTdWLlR/7lSulbvkv15ONMXSljzC4/j+A9DdnXXOvA8FLOS6B6I
6YL82Oa6IgB1/lXd4Y//CPVxLVcuYBGMaTOmCU9sUXew1sljk9kRnhX96W7x
F+wRl7T8AdfzPHp10d/270oY1ojQVX3OSzthUBTTRBhTz4417fMOmfsL1CNT
w9BW58Lnk+9Hs++b+ewgg9vqdeDns/z71NcLOnuEoydnAw9UTTL2l3B6B/DO
2RdrTOLOiBGGu3G/fJJNj3VmjWKzkGfSmvElMV0l8+z5AjsTyV2HQNdt7kb3
I/PrMfurOTG1FMkt/Xrq3P4I0Qr6U8yX+/Nv9lZ119PvL0TOBSW0DdkvrXdc
+ffx8vaCN6zZ/CcUq7tcMoVknQPjxq2Bdt6J9vewtiOqIkvCuQf0d3a0GmNs
93Ea0rFqx0hKT29YbwGSzA6kX3Evb9r7bys3vtAnhGt+viFWehE2IBWXfVKu
775fJ3+/qN6XfEFZa2QjsKAsr5OZTBANbYBYmVcAaLhIHGc/d2xepZkxbfgu
r/U1PRtCqCNoTHifZIRXPP79k2ff9lfMr1Pfz2rfpNP9N1669qwY35utrZWP
oy9ytJabW94UwN7W58PQ136+wFu6L0QhKc+RF4Rewc/jzpD6TSgkbNq86p2Z
obMFrIT035/Gr+ya6w7cSMUqmo6EFRg6hNuMbfPmejjXGuCuOQiM/JzaVuDl
pNuZMBTq1v5z5ZzqsGC0kHNq5A7N02LN23uaglP7rMqRGiG7xV2itYbO8i/h
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
B50ux+fjnSFCUQPHp4GDY01PxnDbqzYhnSZKp5bW+u9dt9n29667xvoDZ3lg
+n8gHbj8ziwvdBSX63EZyjV5UhzQFRB1BU+4wY0s8nFbJ49n+Sv5mjsnvb86
8Q1PYS0dQ0qetkMX3lzY8LRPC2RAkpjGjefeR2zXhLUdLMsv9GWZp96LTi0T
+oh8WfT/JkJiAZkcp5ugNUDR7nEOrIzEYDxSd5wSiC682E7a9J1CTSlOuZJK
3a+uJwM6GDquA7D3aNvq2LlO+lax246Yvpo8EC3jsr0oZ0gEXmIbXfPlHjND
M1fZc/RpKFRiThlz9wXmE1D4lsOzGBvDJhZwdVqvBA3JiCYxxDJFSo+1ivsA
2nZNWIK2uPUp2b/GG4QFxY9wHAzFHFYYvozNag3d2BBZMrozznrq9V00WBk2
tZx+s+Jy/2bytIZdzAraem9umGFqL4/d0YbuO5PH5FaNs4t6gYKvRFrZ2gre
at5Vk7Pcy2th00NoGkpQshxP8/It3+2UCxGVt98q2hTDeKKz9q7xaZqI90s7
ZGhqGSmDG00ESQ3heS6jfyEclvyECoj/AlW7FZimeCE0Smh9NzXJ9aff7mcy
LtDUjXbiQtFLDBWvVwJH1gGt4gaBkiARomTP2GzSgdDkPvtfaeyVS5t+K6lC
Al4JRwP+Q365ZaB89BOJQcNy24gUZzjK/8m0uzsf2itFuspRkQEzIR9mNEDa
+H0N2r0VBMdyidf6QGgRaduJK99p+2AqvFEb+pnKg9VQGfmptx2jeZ5ay3Ex
xWtSPtZu8v0/uni+obBq9aPLUAWTbYb//bNjb8zG8vMG84p866vd2X0nZmPR
ru7YhPmUvr2BzwxBm0fcJdwH2+0oUmCuSrv4YZXg6aLeH24+Q6Q1zZFS0NHk
Nnox0UhMvMQ707LVIIPAsPnT2voGQT0KSQCFvm56b5Qx1bpbwWUuRERKM2NP
yohmbfkTznfQKyCEIT4k9Uyyj73fXImx7Yc/bopY6jhBCq45Lie9Xp8irEF3
RtAaIxmOv7O2Qucr/XufPvtoVNQY5Flq5cifTp5LT/lIPg7sv386ajmsMuU2
RbuWz8eGqRtDNynbzZjeWLAl7IvnkICbQdhA169ZfE/rx+araB+C0Bxw9s9f
89ZjiJrEe+40VoRNWCiVftiTJTM+y3Xgj3JnG8QsYeVyDF2vnz2okL5uteIi
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
RvnWoNO3HvCFdgo9Db4I/+mJLP9/BXOWWQ==
      "]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.895669212740267*^9, 3.895669237742738*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"65143d13-f7b3-4e75-a0c4-347ec8ae0583"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"\[LeftAssociation]", 
       RowBox[{"\"BY\"", "\[Rule]", 
         RowBox[{"\[LeftAssociation]", 
           RowBox[{
             
             RowBox[{"\"name\"", "\[Rule]", 
               "\"Original long-run risk model\""}], ",", 
             TemplateBox[{"22"}, "OutputSizeLimit`Skeleton"], ",", 
             RowBox[{"\"Properties\"", "\[Rule]", 
               RowBox[{"{", 
                 
                 RowBox[{
                  "\"name\"", ",", "\"shortname\"", ",", "\"bibRef\"", ",", 
                   "\"desc\"", ",", "\"parameters\"", ",", "\"stateVars\"", 
                   ",", "\"numStocks\"", ",", "\"assignParam\"", ",", 
                   "\"assignParamStocks\"", ",", 
                   TemplateBox[{"5"}, "OutputSizeLimit`Skeleton"], ",", 
                   "\"endogenousEq\"", ",", "\"exogenousVarNames\"", ",", 
                   "\"endogenousVarNames\"", ",", "\"toStateVars\"", ",", 
                   "\"uncondMomOfStateVars\"", ",", "\"ratioUncondE\"", ",", 
                   "\"coeffsSystem\"", ",", "\"extraInfo\"", ",", 
                   "\"coeffsSolution\""}], "}"}]}]}], 
           "\[RightAssociation]"}]}], "\[RightAssociation]"}], Short[#, 8]& ],
    "line" -> 4, "sessionID" -> 28991936778419867602, "byteCount" -> 531432, 
   "size" -> 8, "stored" -> False, "expr" -> Missing["NotStored"], "wrap" -> 
   OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{{3.895669212740267*^9, 3.8956692377668324`*^9}},
 CellLabel->"Out[4]=",ExpressionUUID->"339f694d-d320-474b-9759-a1b7021fc828"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Names", "[", "\"\<FernandoDuarte`LongRunRisk`*\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.895543393384572*^9, 3.895543394493181*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a$\"\>", ",", "\<\"b\"\>", ",", "\<\"b$\"\>",
    ",", "\<\"data\"\>", ",", "\<\"filename\"\>", 
   ",", "\<\"resourcesDir\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8956692139180317`*^9, 3.895669238591384*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"bf48c1f0-4040-4efe-b9b9-15319d17c9a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"FernandoDuarte`LongRunRisk`Epd0\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Ewc0\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`FindRootOptions\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Models\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`RecurrenceTableOptions\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8956692139180317`*^9, 3.895669238616152*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"f36c00c2-c803-464b-8dfd-f00a0e569976"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.895668292671256*^9, 3.895668308662959*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8956683171469507`*^9, 3.8956683919835253`*^9}, {
  3.8956684367796392`*^9, 3.895668436972262*^9}, {3.895669259079546*^9, 
  3.8956692679019814`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["FernandoDuarte`LongRunRisk`Model`Parameters`Esx", "2"],
        " ", 
       SuperscriptBox["FernandoDuarte`LongRunRisk`Model`Parameters`phix", 
        "2"], " ", 
       SuperscriptBox[
        RowBox[{
        "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "1", 
         "]"}], "2"]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox["FernandoDuarte`LongRunRisk`Model`Parameters`rhox", 
        "2"]}], ")"}]}], ")"}]}], "-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["FernandoDuarte`LongRunRisk`Model`Parameters`phisxs", 
      "2"], " ", 
     SuperscriptBox[
      RowBox[{
      "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "2", 
       "]"}], "2"]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["FernandoDuarte`LongRunRisk`Model`Parameters`vx", "2"]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{{3.89566925496463*^9, 3.895669268425021*^9}},
 CellLabel->"Out[13]=",ExpressionUUID->"c10a4bae-23e9-4d14-95a0-6d342ae2429c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<NRC\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672775030727*^9, 
  3.895672775360661*^9}},ExpressionUUID->"30f61f6c-4b9d-4296-aeca-\
b134333dfd1a"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", 
    RowBox[{"t", "+", "j"}], "]"}], ",", 
   RowBox[{"Models", "[", "\"\<DES\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895672777740477*^9, 
  3.895672778050181*^9}},ExpressionUUID->"757e1837-1879-4fb7-86b6-\
fba04edb9903"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.895540052650237*^9, 
  3.895540052953021*^9}},ExpressionUUID->"0a089709-115a-4115-b9df-\
019516b85bf4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Then", " ", "re"}], "-", 
  RowBox[{
  "repocess", " ", "models", " ", "and", " ", "save", " ", "model", " ", 
   "file"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "Then", " ", "load", " ", "main", " ", "package", " ", "and", " ", "check",
     " ", "leaks", " ", "gone"}], ",", " ", 
   RowBox[{"re", "-", 
    RowBox[{"exports", " ", "work"}]}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{"Then", " ", "keep", " ", "adding", " ", "symbols"}]}], "Input",
 CellChangeTimes->{{3.895604720862821*^9, 
  3.895604781799704*^9}},ExpressionUUID->"07feaaea-baa6-4da0-9a9b-\
9320eb389fd2"],

Cell[BoxData[
 RowBox[{"UncondVar", "[", 
  RowBox[{
   RowBox[{"wc", "[", "t", "]"}], ",", 
   RowBox[{"processedModels", "[", "\"\<BY\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.895603677180604*^9, 3.895603691941772*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"]
},
WindowSize->{897, 881},
WindowMargins->{{Automatic, -1306}, {3, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6623984b-ef05-4091-ac72-a57ded9363aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 480, 12, 90, "Input",ExpressionUUID->"95d0223c-eae4-4110-9ee7-1b467655e8aa"],
Cell[1041, 34, 241, 5, 37, "Input",ExpressionUUID->"1d717bd7-0f72-40d1-b23f-daf15159d19d"],
Cell[1285, 41, 954, 23, 142, "Input",ExpressionUUID->"126230d3-0c99-4786-87be-358c25aac0fc"],
Cell[2242, 66, 1802, 36, 119, "Input",ExpressionUUID->"54d6d35d-7425-40ba-af43-6787e254909b"],
Cell[4047, 104, 1129, 18, 37, "Input",ExpressionUUID->"b9bce4d9-dfd7-437b-a3bc-58ce79d53ba1"],
Cell[5179, 124, 1480, 34, 246, "Input",ExpressionUUID->"2a60bfb2-a9d0-4b76-9906-bc1783bedf3e"],
Cell[6662, 160, 841, 14, 37, "Input",ExpressionUUID->"79b268d7-ea9a-44c8-a589-28a9c9a23114"],
Cell[CellGroupData[{
Cell[7528, 178, 1315, 26, 90, "Input",ExpressionUUID->"99ebf16e-3223-4718-aaf2-581c661e263c"],
Cell[8846, 206, 525, 12, 57, "Message",ExpressionUUID->"243d4cd2-91ad-4057-8cf0-429a64b752a1"]
}, Open  ]],
Cell[9386, 221, 218, 5, 37, "Input",ExpressionUUID->"612c660d-6c54-4bf0-b214-400bf80133a3"],
Cell[9607, 228, 215, 4, 37, "Input",ExpressionUUID->"40d280eb-3966-47e0-b5e0-a37c475da579"],
Cell[CellGroupData[{
Cell[9847, 236, 1190, 27, 168, "Input",ExpressionUUID->"8b00926c-216a-4a62-b9ba-1782ef264a28"],
Cell[11040, 265, 37249, 716, 76, "Output",ExpressionUUID->"65143d13-f7b3-4e75-a0c4-347ec8ae0583"],
Cell[48292, 983, 1663, 30, 163, "Output",ExpressionUUID->"339f694d-d320-474b-9759-a1b7021fc828"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49992, 1018, 316, 5, 64, "Input",ExpressionUUID->"d0d8bfc4-073d-4a97-b212-28e923b890fd"],
Cell[50311, 1025, 356, 6, 45, "Output",ExpressionUUID->"bf48c1f0-4040-4efe-b9b9-15319d17c9a1"],
Cell[50670, 1033, 489, 9, 121, "Output",ExpressionUUID->"f36c00c2-c803-464b-8dfd-f00a0e569976"]
}, Open  ]],
Cell[51174, 1045, 546, 14, 90, "Input",ExpressionUUID->"75220368-7c5f-413d-b16d-08194cd9abce"],
Cell[CellGroupData[{
Cell[51745, 1063, 434, 9, 37, "Input",ExpressionUUID->"2c923d34-1bc2-487c-990a-b69765112a7a"],
Cell[52182, 1074, 1219, 35, 217, "Output",ExpressionUUID->"c10a4bae-23e9-4d14-95a0-6d342ae2429c"]
}, Open  ]],
Cell[53416, 1112, 310, 8, 37, "Input",ExpressionUUID->"30f61f6c-4b9d-4296-aeca-b134333dfd1a"],
Cell[53729, 1122, 310, 8, 37, "Input",ExpressionUUID->"757e1837-1879-4fb7-86b6-fba04edb9903"],
Cell[54042, 1132, 232, 5, 116, "Input",ExpressionUUID->"0a089709-115a-4115-b9df-019516b85bf4"],
Cell[54277, 1139, 638, 16, 90, "Input",ExpressionUUID->"07feaaea-baa6-4da0-9a9b-9320eb389fd2"],
Cell[54918, 1157, 312, 6, 37, "Input",ExpressionUUID->"baae1d23-fcb2-4b37-aef1-1cd32e4d841e"]
}
]
*)

