(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    128315,       2548]
NotebookOptionsPosition[     75464,       1577]
NotebookOutlinePosition[    121826,       2432]
CellTagsIndexPosition[    121783,       2429]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"31e1b2df-6c38-4738-ae7d-\
157759dc5a90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"confirm", "=", "True"}], ";"}]], "Input",
 CellChangeTimes->{{3.8899677184366713`*^9, 3.88996772700289*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"91c1009c-f5f8-4c13-a87a-42c785c70d90"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"Needs", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8899652151465197`*^9, 3.889965235350771*^9}, 
   3.8899652808817787`*^9, {3.889967731242805*^9, 3.8899677356636972`*^9}, {
   3.889967971867523*^9, 3.889967975146998*^9}, {3.889968339451161*^9, 
   3.88996834001075*^9}, 3.889968619774049*^9, {3.8899688826075077`*^9, 
   3.88996888992594*^9}, {3.88996899475625*^9, 3.8899690018858624`*^9}, {
   3.8899691256166267`*^9, 3.8899691257757883`*^9}, {3.889969207667478*^9, 
   3.8899692141700287`*^9}, {3.8899692798779783`*^9, 3.889969288274632*^9}, 
   3.889969387087708*^9, 3.889969585993528*^9, {3.8899702972149563`*^9, 
   3.889970314454108*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"df3441c2-82a3-4dc6-ae55-72fe028a7826"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-1N009Y\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-1N009Y"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890016245570259*^9, 3.890060636718602*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"6a438360-fafe-4ebc-8e15-4f990c257028"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890016245570259*^9, 3.890060636748487*^9},
 CellLabel->
  "During evaluation of \
In[6]:=",ExpressionUUID->"445f7d85-201b-4647-8329-a14eaa5065c3"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`\"", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\
\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-1N009Y\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.083, "AbsoluteTiming" -> 
   0.10300000000000001`, "InputString" :> ToString[
     Unevaluated[
      Needs["FernandoDuarte`LongRunRisk`"]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016245606235*^9, 3.890060636764126*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"02b96a7b-613a-4e8a-b147-0f1a72171c7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"$ContextPath", ",", "\"\<FernandoDuarte`LongRunRisk`\>\""}], 
    "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.889901579125684*^9, {3.889965035911569*^9, 3.889965039550325*^9}, {
   3.889965296152458*^9, 3.889965305191854*^9}, 3.8899653858152437`*^9, 
   3.889967740469187*^9, {3.889968345370779*^9, 3.889968347169169*^9}, {
   3.889968526692542*^9, 3.8899685355316963`*^9}, {3.889968649261517*^9, 
   3.889968660343141*^9}, 3.889969395693264*^9, {3.88996958684683*^9, 
   3.8899695947482367`*^9}, {3.889970300225127*^9, 3.889970329366473*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"37a69960-4a4b-47f2-bed8-e68905e00bd9"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-DXJURD\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-DXJURD"],
  Editable->False]], "Print",
 CellChangeTimes->{3.8900162480753202`*^9, 3.890060638241741*^9},
 CellLabel->
  "During evaluation of \
In[7]:=",ExpressionUUID->"e5a55aa2-841c-481c-884b-7961fc0e286b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.8900162480753202`*^9, 3.890060638244824*^9},
 CellLabel->
  "During evaluation of \
In[7]:=",ExpressionUUID->"1e2504cf-af70-4dc2-be71-c13e766f8bf0"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tMemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-DXJURD\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      MemberQ[$ContextPath, "FernandoDuarte`LongRunRisk`"]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$\
]; Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016248083091*^9, 3.890060638253879*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"e7755972-a3e1-40a7-8f58-729382997320"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
   "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889970444788332*^9, 3.889970460485238*^9}, 
   3.889972027468637*^9, {3.890015991835294*^9, 3.890015993219262*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"b822a665-a923-4386-b002-407f0c5b80cd"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-BS7LY9\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-BS7LY9"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890016249572627*^9, 3.890060639887232*^9},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"e18138cf-67b8-4a9d-9dd9-d7bead1e0676"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890016249572627*^9, 3.890060639890196*^9},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"c53a0502-1b7d-48ac-b8d0-02a7908fa87d"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\
\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      Needs["FernandoDuarte`LongRunRisk`Model`Catalog`"]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\n\t,\n\tNull\n\t,\n\t{}\
\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016249591527*^9, 3.890060639918643*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"5eb476da-6f7d-488a-9797-087f00e86161"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "models", " ", "can", 
     " ", "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*models\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, {3.890016004516365*^9, 3.890016008058874*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"78efcfa0-e9fa-47a2-9b51-782cbea2e41b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-SV9YAT\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-SV9YAT"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890016251020383*^9, 3.8900606412257*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"d04f564e-e97a-4c8a-b592-197bb2b0bdad"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890016251020383*^9, 3.890060641228158*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"2fa9fe12-c360-46ce-bd68-84b37b5b5173"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "!SameQ[Names @ \"*models\", {}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t!SameQ[Names @ \"*models\", {}]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-SV9YAT\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.021, "AbsoluteTiming" -> 0.022, 
   "InputString" :> ToString[
     Unevaluated[
      Not[Names["*models"] === {}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\n\t,\n\tNull\n\t,\n\t{}\
\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*models\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-SV9YAT\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016251041669*^9, 3.890060641253112*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"7cc2ffad-c246-4712-91de-c0bf6f675838"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "be", " ", "true"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"StringQ", "/@", 
    RowBox[{"Keys", "[", "models", "]"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
   3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
   3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
   3.88996754071059*^9}, {3.8899676626847277`*^9, 3.889967663326408*^9}, {
   3.889967743694665*^9, 3.889967744059184*^9}, {3.8899677859095707`*^9, 
   3.8899678081741953`*^9}, {3.8899679955631647`*^9, 3.889968003395926*^9}, {
   3.889969462764024*^9, 3.8899694656136417`*^9}, {3.889969517081333*^9, 
   3.8899695670076637`*^9}, {3.889970354531378*^9, 3.889970361426557*^9}, 
   3.889970446358612*^9, 3.889971586268968*^9, 3.8899720413397284`*^9, {
   3.890016031161611*^9, 3.8900160360345497`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"3b136a4b-47f6-4831-84cf-79751d15b3d2"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-EDEQJ2\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-EDEQJ2"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890016252587188*^9, 3.890060642956778*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"554c41f9-5815-40bb-9887-5a3e6bf0ed34"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890016252587188*^9, 3.890060642959313*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a8e70fea-076f-4d9c-88c3-5d607f2cef3c"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Map[StringQ, Keys @ FernandoDuarte`LongRunRisk`Model`Catalog`models]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = {
  True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tMap[StringQ, Keys @ \
FernandoDuarte`LongRunRisk`Model`Catalog`models]\n\t,\n\t{True, True, True, \
True, True, True, True, True, True, True, True, True, True, True, True}\n\t,\n\
\t{}\n\t,\n\tTestID->\"Catalog_20230409-EDEQJ2\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> {
    True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True}, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.029, "AbsoluteTiming" -> 0.024, 
   "InputString" :> ToString[
     Unevaluated[
      Map[StringQ, 
       Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\n\t,\n\tNull\n\t,\n\t{}\
\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*models\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-SV9YAT\"\n]\n\n\nVerificationTest[\n\tMap[StringQ, \
Keys @ FernandoDuarte`LongRunRisk`Model`Catalog`models]\n\t,\n\t{True, True, \
True, True, True, True, True, True, True, True, True, True, True, True, True}\
\n\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-EDEQJ2\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016252608904*^9, 3.89006064298176*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"863d1d58-3e03-41e3-b94f-8630f5ea64b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "be", " ", "true"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"StringQ", "/@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<name\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<shortname\>\"", "]"}],
           ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<bibRef\>\"", "]"}], 
          ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<desc\>\"", "]"}]}], 
         "}"}], "&"}], "/@", 
       RowBox[{"Keys", "[", "models", "]"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{3.890016052447173*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"086c67ce-011c-45b8-81d0-c7167de13fb0"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-B614GG\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-B614GG"],
  Editable->False]], "Print",
 CellChangeTimes->{3.8900162545826397`*^9, 3.890060644799451*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"f9ef7aff-f739-4f3a-a334-560a30d9ae32"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.8900162545826397`*^9, 3.890060644801853*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"d4df177e-4630-495b-bdcd-c1b9597e64d1"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Map[StringQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\tFunction @ {\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"name\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"shortname\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"bibRef\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"desc\"]\n\t\t\t\t},\n\t\t\
\t\tKeys @ FernandoDuarte`LongRunRisk`Model`Catalog`models\n\t\t\t]\n\t\t]\n\t\
]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = {
  True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tMap[StringQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\t\
Function @ {\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"name\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"shortname\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"bibRef\"],\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"desc\"]\n\t\t\t\t},\n\t\t\
\t\tKeys @ FernandoDuarte`LongRunRisk`Model`Catalog`models\n\t\t\t]\n\t\t]\n\t\
]\n\t,\n\t{\n\t\tTrue, True, True, True, True, True, True, True, True, True, \
True, True,\n\t\tTrue, True, True, True, True, True, True, True, True, True, \
True, True,\n\t\tTrue, True, True, True, True, True, True, True, True, True, \
True, True,\n\t\tTrue, True, True, True, True, True, True, True, True, True, \
True, True,\n\t\tTrue, True, True, True, True, True, True, True, True, True, \
True, True\n\t}\n\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-B614GG\"\n]\n\n\
", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> {
    True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True}, 
   "Success" -> True, "FailureType" -> None, "OutputLog" -> {}, 
   "Messages" -> {}, "MessagesText" -> {}, "MessagesExpressions" -> {}, 
   "Timing" -> 0.534, "AbsoluteTiming" -> 0.534, "InputString" :> ToString[
     Unevaluated[
      Map[StringQ, 
       Flatten[
        Map[{
          FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["name"], 
          FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["shortname"], 
          FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["bibRef"], 
          FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["desc"]}& , 
         Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\n\t,\n\tNull\n\t,\n\t{}\
\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*models\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-SV9YAT\"\n]\n\n\nVerificationTest[\n\tMap[StringQ, \
Keys @ FernandoDuarte`LongRunRisk`Model`Catalog`models]\n\t,\n\t{True, True, \
True, True, True, True, True, True, True, True, True, True, True, True, True}\
\n\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-EDEQJ2\"\n]\n\n\n\
VerificationTest[\n\tMap[StringQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\tFunction \
@ {\n\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"name\"],\n\
\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"shortname\"],\n\
\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"bibRef\"],\n\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"desc\"]\n\t\t\t\t\
},\n\t\t\t\tKeys @ FernandoDuarte`LongRunRisk`Model`Catalog`models\n\t\t\t]\n\
\t\t]\n\t]\n\t,\n\t{\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True\n\t}\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-B614GG\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.890016254604062*^9, 3.890060644822801*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"40d4a3e1-3e51-49dc-864e-45a591eaa8b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "be", " ", "true"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"NumberQ", "/@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Values", "@", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<parameters\>\"", 
           "]"}], ",", 
          RowBox[{"Except", "[", 
           RowBox[{"gamma", "|", "theta"}], "]"}]}], "]"}]}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{"\"\<BY\>\"", ",", "\"\<BKY\>\""}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
   3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
   3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
   3.88996754071059*^9}, {3.8899676626847277`*^9, 3.889967663326408*^9}, {
   3.889967743694665*^9, 3.889967744059184*^9}, {3.8899677859095707`*^9, 
   3.8899678081741953`*^9}, {3.8899679955631647`*^9, 3.889968003395926*^9}, {
   3.889969462764024*^9, 3.8899694656136417`*^9}, {3.889969517081333*^9, 
   3.8899695670076637`*^9}, {3.889970354531378*^9, 3.889970361426557*^9}, 
   3.889970446358612*^9, 3.889971586268968*^9, 3.8899720413397284`*^9, {
   3.890016031161611*^9, 3.8900160360345497`*^9}, {3.8900160737670794`*^9, 
   3.890016085435741*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"a3a609d1-b215-40d6-9e60-398b1031989e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-A2GEFV\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-A2GEFV"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890016256145426*^9, 3.890060646193428*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"5e44f523-15f3-47d6-a8a9-b9ebfd723433"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890016256145426*^9, 3.89006064619604*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"7cad5e8b-1610-4286-854c-d2f8db4326cd"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Map[NumberQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\tFunction[\n\t\t\t\t\t\
Values[FilterRules[FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"\
parameters\"], Except[gamma | theta]]]\n\t\t\t\t],\n\t\t\t\t{\"BY\", \"BKY\"}\
\n\t\t\t]\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = {
  True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True, True, True, True, True, True, True, True, True, 
   True, True, True, True}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tMap[NumberQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\t\
Function[\n\t\t\t\t\t\
Values[FilterRules[FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"\
parameters\"], Except[gamma | theta]]]\n\t\t\t\t],\n\t\t\t\t{\"BY\", \"BKY\"}\
\n\t\t\t]\n\t\t]\n\t]\n\t,\n\t{\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True\n\t}\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-A2GEFV\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> {
    True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True, True, True, True, True, True, True, True, True, 
     True, True, True, True}, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.022, "AbsoluteTiming" -> 0.022, 
   "InputString" :> ToString[
     Unevaluated[
      Map[NumberQ, 
       Flatten[
        Map[Values[
          FilterRules[
           FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["parameters"], 
           Except[
            Alternatives[$CellContext`gamma, $CellContext`theta]]]]& , {
         "BY", "BKY"}]]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"Catalog\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`\"\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-1N009Y\"\n]\n\n\nVerificationTest[\n\t\
MemberQ[$ContextPath, \"FernandoDuarte`LongRunRisk`\"]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-DXJURD\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`Model`Catalog`\"\n\t,\n\tNull\n\t,\n\t{}\
\n\t,\n\tTestID->\"Catalog_20230409-BS7LY9\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*models\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-SV9YAT\"\n]\n\n\nVerificationTest[\n\tMap[StringQ, \
Keys @ FernandoDuarte`LongRunRisk`Model`Catalog`models]\n\t,\n\t{True, True, \
True, True, True, True, True, True, True, True, True, True, True, True, True}\
\n\t,\n\t{}\n\t,\n\tTestID->\"Catalog_20230409-EDEQJ2\"\n]\n\n\n\
VerificationTest[\n\tMap[StringQ,\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\tFunction \
@ {\n\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"name\"],\n\
\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"shortname\"],\n\
\t\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"bibRef\"],\n\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"desc\"]\n\t\t\t\t\
},\n\t\t\t\tKeys @ FernandoDuarte`LongRunRisk`Model`Catalog`models\n\t\t\t]\n\
\t\t]\n\t]\n\t,\n\t{\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True,\n\t\tTrue, True, True, True, True, True, True, True, \
True, True, True, True\n\t}\n\t,\n\t{}\n\t,\n\t\
TestID->\"Catalog_20230409-B614GG\"\n]\n\n\nVerificationTest[\n\tMap[NumberQ,\
\n\t\tFlatten[\n\t\t\tMap[\n\t\t\t\tFunction[\n\t\t\t\t\t\
Values[FilterRules[FernandoDuarte`LongRunRisk`Model`Catalog`models[#][\"\
parameters\"], Except[gamma | theta]]]\n\t\t\t\t],\n\t\t\t\t{\"BY\", \"BKY\"}\
\n\t\t\t]\n\t\t]\n\t]\n\t,\n\t{\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True, True, True, \
True, True, True, True, True, True,\n\t\tTrue, True, True, True\n\t}\n\t,\n\t\
{}\n\t,\n\tTestID->\"Catalog_20230409-A2GEFV\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.8900162561667223`*^9, 3.89006064622375*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"53fc0bb0-208e-4f5f-9f00-029aed788bfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "give", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], ",", 
       RowBox[{"sx", "[", "t", "]"}]}], "}"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"models", "[", "\"\<BY\>\"", "]"}], "[", "\"\<stateVars\>\"", 
    "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966121134981*^9, 3.889966129513671*^9}, {
  3.8899675430265427`*^9, 3.889967546703742*^9}, {3.889967666639736*^9, 
  3.8899676668939447`*^9}, {3.889967746374608*^9, 3.889967746668034*^9}, {
  3.88996781333914*^9, 3.8899678201195583`*^9}, {3.88996801609513*^9, 
  3.88996801967063*^9}, {3.8900161094568357`*^9, 3.890016118394877*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"ea3d9744-ad21-4709-9e68-2e602fb4625c"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-O76X3R\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-O76X3R"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890060654797516*^9},
 CellLabel->"",ExpressionUUID->"184b2422-5775-439e-b8f0-c41ad676dd2b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.890060654806044*^9},
 CellLabel->"",ExpressionUUID->"4dad1b46-a488-438f-9cc2-9e9fdd0d630c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "be", " ", "true"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "models", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{"\"\<BY\>\"", ",", "\"\<BKY\>\""}], "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966137593294*^9, 3.889966157676291*^9}, {
  3.8899675483847713`*^9, 3.889967551583518*^9}, {3.8899676691600733`*^9, 
  3.889967669364262*^9}, {3.889967748725914*^9, 3.889967749007223*^9}, {
  3.889967825028019*^9, 3.8899678304574842`*^9}, {3.889968028194545*^9, 
  3.889968031839179*^9}, {3.890016134135317*^9, 3.890016138691626*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"44fb97e9-5f9a-4e84-afbf-a0ac1a1142de"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-94MN6Y\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-94MN6Y"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890060656546157*^9},
 CellLabel->"",ExpressionUUID->"f6028aa0-01e9-43c0-9daa-22565c2d1fbb"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.8900606565527573`*^9},
 CellLabel->"",ExpressionUUID->"e61c9e2e-4963-46e8-a110-1ec6ec0b284a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "Association"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Head", "[", "models", "]"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"models", "[", "#", "]"}], "]"}], "&"}], "/@", 
       RowBox[{"Keys", "[", "models", "]"}]}]}], "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899661404752703`*^9, 3.889966162544742*^9}, {
  3.88996755330625*^9, 3.8899675539045153`*^9}, {3.8899676717688217`*^9, 
  3.889967672005005*^9}, {3.88996775093589*^9, 3.8899677512290583`*^9}, {
  3.889967834057867*^9, 3.88996783977798*^9}, {3.889968042239496*^9, 
  3.889968052278575*^9}, {3.890016146817315*^9, 3.8900161536190767`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"bfa88386-6324-49f2-ae9a-0226f7867840"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"Catalog_20230409-0FE1VR\"\>"}],
  SequenceForm["Adding test: ", "Catalog_20230409-0FE1VR"],
  Editable->False]], "Print",
 CellChangeTimes->{3.890060659013689*^9},
 CellLabel->"",ExpressionUUID->"a513b3ec-98ee-44fb-b280-117cce50bdcf"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>"], "Print",
 CellChangeTimes->{3.8900606590196533`*^9},
 CellLabel->"",ExpressionUUID->"1763034d-0d06-446c-8b64-e0bbe9830b15"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"2c4a83cf-8af5-4d19-89ae-\
a864a258310f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Model\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Model`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
  3.889998753242611*^9, 3.8899987613556004`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"f275bdc7-d1c5-4b14-9c2f-42b3fa65a747"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Kernel/Model/Catalog.wl\"\>"], "Output",
 CellChangeTimes->{3.89001628518836*^9, 3.890032959435354*^9, 
  3.89006066250316*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"22a4515e-4241-4a2c-9e58-ce6087de394f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"models", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.8900155176659718`*^9, 3.8900155182062263`*^9}, {
  3.890016290339801*^9, 3.8900163245868483`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"ebbba576-a288-4095-9797-111d65f603ff"],

Cell[BoxData[
 TagBox[
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"BY\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", 
        "\[Rule]", "\<\"Original long-run risk model\"\>"}], ",", 
       RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
       RowBox[{"\<\"parameters\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
          RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
          RowBox[{"gamma", "\[Rule]", "10"}], ",", 
          RowBox[{"theta", "\[Rule]", 
           FractionBox[
            RowBox[{"1", "-", "gamma"}], 
            RowBox[{"1", "-", 
             FractionBox["1", "psi"]}]]}], ",", 
          RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
          RowBox[{"rhoxpbar", "\[Rule]", "0"}], ",", 
          RowBox[{"\[LeftSkeleton]", "58", "\[RightSkeleton]"}], ",", 
          RowBox[{
           RowBox[{"phidpc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
          RowBox[{
           RowBox[{"phidpp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
          RowBox[{
           RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
          RowBox[{
           RowBox[{"phidcd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
          RowBox[{
           RowBox[{"phidpd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
          RowBox[{
           RowBox[{"taugd", "[", "1", "]"}], "\[Rule]", "0"}]}], "}"}]}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], ",", 
    RowBox[{"\<\"BS\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}],
  Short[#, 5]& ]], "Output",
 CellChangeTimes->{{3.8900162870581217`*^9, 3.8900163250176973`*^9}, 
   3.890032961857539*^9, 3.8900606650778933`*^9},
 CellLabel->
  "Out[18]//Short=",ExpressionUUID->"c496d884-06da-42a5-acca-f3a7ace78c51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"StringQ", "/@", 
    RowBox[{"Keys", "[", "models", "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{
  3.89000889839254*^9, {3.890016339728188*^9, 3.890016342139681*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"78177850-499e-456b-b442-fad780dafdf0"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016330510503*^9, 3.890016360986127*^9, 
  3.8900329705899982`*^9, 3.890060667044271*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"58c40f30-da9e-4efc-b019-3a7a50ffbedd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"StringQ", "/@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<name\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<shortname\>\"", "]"}],
           ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<bibRef\>\"", "]"}], 
          ",", 
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<desc\>\"", "]"}]}], 
         "}"}], "&"}], "/@", 
       RowBox[{"Keys", "[", "models", "]"}]}], ")"}]}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.890008770382118*^9, 3.890008858894733*^9}, {
  3.890016345133547*^9, 3.8900163569166937`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"a17059c2-5416-45b1-b84e-0c2f842f7fb5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.890016333170814*^9, 3.890016362680401*^9}, 
   3.890032972092759*^9, 3.890060668409647*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"05568e0b-a10a-43b9-9ca6-be1b04e5823b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"NumberQ", "/@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Values", "@", 
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"models", "[", "#", "]"}], "[", "\"\<parameters\>\"", 
           "]"}], ",", 
          RowBox[{"Except", "[", 
           RowBox[{"gamma", "|", "theta"}], "]"}]}], "]"}]}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{"\"\<BY\>\"", ",", "\"\<BKY\>\""}], "}"}]}], "]"}]}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.890008965671461*^9, 3.8900089726778793`*^9}, {
   3.8900090147612762`*^9, 3.890009193827691*^9}, 3.8900101461421833`*^9, 
   3.890015540563738*^9, {3.8900156352184877`*^9, 3.89001567714233*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"61202b86-4708-4e03-aa51-3fcb0e388f46"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.890016334527555*^9, 3.89001636396594*^9}, 
   3.890032973231872*^9, 3.890060668629961*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"d0d26cae-36ad-4b29-985c-d393a6f219f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"models", "[", "\"\<BY\>\"", "]"}], "[", "\"\<stateVars\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.890008358526595*^9, 3.890008367251541*^9}, {
  3.890008571631298*^9, 3.890008637654916*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c6bbd0ce-43eb-4838-b846-eed9f4e82d49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "[", "t", "]"}], ",", 
   RowBox[{"sx", "[", "t", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.890016366093617*^9, 3.890032974213314*^9, 
  3.890060670079206*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"2e85ae47-29a6-4209-8a49-b911732618df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "models", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{"\"\<BY\>\"", ",", "\"\<BKY\>\""}], "}"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8900087062162313`*^9, 3.890008740193614*^9}, {
  3.89001637048425*^9, 3.890016372993977*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"78983d07-8f42-43d9-a50f-d26a03b2ee5c"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.890016368666882*^9, 3.890016373785022*^9}, 
   3.890032975070776*^9, 3.890060670947837*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"8ccecc0b-9aaf-4d32-9dc7-975e400247a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AllTrue", "[", 
  RowBox[{"models", ",", "AssociationQ"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AllTrue", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"models", "[", "#", "]"}], "&"}], "/@", 
    RowBox[{"Keys", "[", "models", "]"}]}], ",", "AssociationQ"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8900086430073547`*^9, 3.890008684982678*^9}, {
  3.890010177349143*^9, 3.890010179091837*^9}, {3.8900163791247263`*^9, 
  3.890016449580503*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"33533fdf-b808-460b-a76c-9a554476db8f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8900163754614763`*^9, 3.890016401488854*^9}, 
   3.890016451487769*^9, 3.890032975905486*^9, 3.890060671851157*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"536e0958-2442-465c-991a-94007ae7c98d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8900163754614763`*^9, 3.890016401488854*^9}, 
   3.890016451487769*^9, 3.890032975905486*^9, 3.8900606719971113`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"8035392f-ce6c-49a2-ad34-1f7c30ded95a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{921, 890},
WindowMargins->{{185, Automatic}, {Automatic, 0}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9463f144-165a-4c11-9859-b1ba37118027"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 214, 4, 37, "Input",ExpressionUUID->"2d530782-807c-4677-ac15-0a1524d3eb66"],
Cell[775, 26, 1283, 30, 142, "Input",ExpressionUUID->"0360f784-d335-43f3-8e4d-2bba830763e2"],
Cell[CellGroupData[{
Cell[2083, 60, 255, 4, 67, "Subsection",ExpressionUUID->"31e1b2df-6c38-4738-ae7d-157759dc5a90"],
Cell[2341, 66, 221, 4, 37, "Input",ExpressionUUID->"91c1009c-f5f8-4c13-a87a-42c785c70d90"],
Cell[CellGroupData[{
Cell[2587, 74, 1034, 16, 90, "Input",ExpressionUUID->"df3441c2-82a3-4dc6-ae55-72fe028a7826"],
Cell[CellGroupData[{
Cell[3646, 94, 388, 9, 29, "Print",ExpressionUUID->"6a438360-fafe-4ebc-8e15-4f990c257028"],
Cell[4037, 105, 285, 5, 29, "Print",ExpressionUUID->"445f7d85-201b-4647-8329-a14eaa5065c3"]
}, Open  ]],
Cell[4337, 113, 4788, 87, 69, "Output",ExpressionUUID->"02b96a7b-613a-4e8a-b147-0f1a72171c7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9162, 205, 914, 15, 90, "Input",ExpressionUUID->"37a69960-4a4b-47f2-bed8-e68905e00bd9"],
Cell[CellGroupData[{
Cell[10101, 224, 390, 9, 29, "Print",ExpressionUUID->"e5a55aa2-841c-481c-884b-7961fc0e286b"],
Cell[10494, 235, 287, 5, 29, "Print",ExpressionUUID->"1e2504cf-af70-4dc2-be71-c13e766f8bf0"]
}, Open  ]],
Cell[10796, 243, 4977, 91, 69, "Output",ExpressionUUID->"e7755972-a3e1-40a7-8f58-729382997320"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15810, 339, 573, 10, 90, "Input",ExpressionUUID->"b822a665-a923-4386-b002-407f0c5b80cd"],
Cell[CellGroupData[{
Cell[16408, 353, 388, 9, 29, "Print",ExpressionUUID->"e18138cf-67b8-4a9d-9dd9-d7bead1e0676"],
Cell[16799, 364, 285, 5, 29, "Print",ExpressionUUID->"c53a0502-1b7d-48ac-b8d0-02a7908fa87d"]
}, Open  ]],
Cell[17099, 372, 5126, 92, 69, "Output",ExpressionUUID->"5eb476da-6f7d-488a-9797-087f00e86161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22262, 469, 786, 15, 116, "Input",ExpressionUUID->"78efcfa0-e9fa-47a2-9b51-782cbea2e41b"],
Cell[CellGroupData[{
Cell[23073, 488, 386, 9, 29, "Print",ExpressionUUID->"d04f564e-e97a-4c8a-b592-197bb2b0bdad"],
Cell[23462, 499, 285, 5, 29, "Print",ExpressionUUID->"2fa9fe12-c360-46ce-bd68-84b37b5b5173"]
}, Open  ]],
Cell[23762, 507, 5186, 93, 69, "Output",ExpressionUUID->"7cc2ffad-c246-4712-91de-c0bf6f675838"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28985, 605, 1314, 21, 116, "Input",ExpressionUUID->"3b136a4b-47f6-4831-84cf-79751d15b3d2"],
Cell[CellGroupData[{
Cell[30324, 630, 389, 9, 29, "Print",ExpressionUUID->"554c41f9-5815-40bb-9887-5a3e6bf0ed34"],
Cell[30716, 641, 286, 5, 29, "Print",ExpressionUUID->"a8e70fea-076f-4d9c-88c3-5d607f2cef3c"]
}, Open  ]],
Cell[31017, 649, 5845, 103, 69, "Output",ExpressionUUID->"863d1d58-3e03-41e3-b94f-8630f5ea64b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36899, 757, 1155, 29, 194, "Input",ExpressionUUID->"086c67ce-011c-45b8-81d0-c7167de13fb0"],
Cell[CellGroupData[{
Cell[38079, 790, 391, 9, 29, "Print",ExpressionUUID->"f9ef7aff-f739-4f3a-a334-560a30d9ae32"],
Cell[38473, 801, 288, 5, 29, "Print",ExpressionUUID->"d4df177e-4630-495b-bdcd-c1b9597e64d1"]
}, Open  ]],
Cell[38776, 809, 8815, 143, 69, "Output",ExpressionUUID->"40d4a3e1-3e51-49dc-864e-45a591eaa8b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47628, 957, 1786, 35, 169, "Input",ExpressionUUID->"a3a609d1-b215-40d6-9e60-398b1031989e"],
Cell[CellGroupData[{
Cell[49439, 996, 389, 9, 29, "Print",ExpressionUUID->"5e44f523-15f3-47d6-a8a9-b9ebfd723433"],
Cell[49831, 1007, 285, 5, 29, "Print",ExpressionUUID->"7cad5e8b-1610-4286-854c-d2f8db4326cd"]
}, Open  ]],
Cell[50131, 1015, 10967, 174, 69, "Output",ExpressionUUID->"53fc0bb0-208e-4f5f-9f00-029aed788bfa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61135, 1194, 1019, 21, 116, "Input",ExpressionUUID->"ea3d9744-ad21-4709-9e68-2e602fb4625c"],
Cell[CellGroupData[{
Cell[62179, 1219, 333, 7, 29, "Print",ExpressionUUID->"184b2422-5775-439e-b8f0-c41ad676dd2b"],
Cell[62515, 1228, 230, 3, 29, "Print",ExpressionUUID->"4dad1b46-a488-438f-9cc2-9e9fdd0d630c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[62794, 1237, 1043, 22, 116, "Input",ExpressionUUID->"44fb97e9-5f9a-4e84-afbf-a0ac1a1142de"],
Cell[CellGroupData[{
Cell[63862, 1263, 333, 7, 29, "Print",ExpressionUUID->"f6028aa0-01e9-43c0-9daa-22565c2d1fbb"],
Cell[64198, 1272, 232, 3, 29, "Print",ExpressionUUID->"e61c9e2e-4963-46e8-a110-1ec6ec0b284a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64479, 1281, 1123, 24, 116, "Input",ExpressionUUID->"bfa88386-6324-49f2-ae9a-0226f7867840"],
Cell[CellGroupData[{
Cell[65627, 1309, 333, 7, 29, "Print",ExpressionUUID->"a513b3ec-98ee-44fb-b280-117cce50bdcf"],
Cell[65963, 1318, 232, 3, 29, "Print",ExpressionUUID->"1763034d-0d06-446c-8b64-e0bbe9830b15"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[66256, 1328, 214, 4, 67, "Subsection",ExpressionUUID->"2c4a83cf-8af5-4d19-89ae-a864a258310f"],
Cell[CellGroupData[{
Cell[66495, 1336, 908, 21, 142, "Input",ExpressionUUID->"f275bdc7-d1c5-4b14-9c2f-42b3fa65a747"],
Cell[67406, 1359, 290, 4, 69, "Output",ExpressionUUID->"22a4515e-4241-4a2c-9e58-ce6087de394f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67733, 1368, 286, 5, 37, "Input",ExpressionUUID->"ebbba576-a288-4095-9797-111d65f603ff"],
Cell[68022, 1375, 2017, 46, 199, "Output",ExpressionUUID->"c496d884-06da-42a5-acca-f3a7ace78c51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70076, 1426, 313, 7, 37, "Input",ExpressionUUID->"78177850-499e-456b-b442-fad780dafdf0"],
Cell[70392, 1435, 223, 3, 42, "Output",ExpressionUUID->"58c40f30-da9e-4efc-b019-3a7a50ffbedd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70652, 1443, 925, 24, 142, "Input",ExpressionUUID->"a17059c2-5416-45b1-b84e-0c2f842f7fb5"],
Cell[71580, 1469, 224, 3, 42, "Output",ExpressionUUID->"05568e0b-a10a-43b9-9ca6-be1b04e5823b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71841, 1477, 860, 21, 143, "Input",ExpressionUUID->"61202b86-4708-4e03-aa51-3fcb0e388f46"],
Cell[72704, 1500, 223, 3, 42, "Output",ExpressionUUID->"d0d26cae-36ad-4b29-985c-d393a6f219f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72964, 1508, 309, 6, 37, "Input",ExpressionUUID->"c6bbd0ce-43eb-4838-b846-eed9f4e82d49"],
Cell[73276, 1516, 300, 7, 42, "Output",ExpressionUUID->"2e85ae47-29a6-4209-8a49-b911732618df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73613, 1528, 490, 12, 37, "Input",ExpressionUUID->"78983d07-8f42-43d9-a50f-d26a03b2ee5c"],
Cell[74106, 1542, 224, 3, 42, "Output",ExpressionUUID->"8ccecc0b-9aaf-4d32-9dc7-975e400247a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74367, 1550, 565, 13, 64, "Input",ExpressionUUID->"33533fdf-b808-460b-a76c-9a554476db8f"],
Cell[74935, 1565, 248, 3, 42, "Output",ExpressionUUID->"536e0958-2442-465c-991a-94007ae7c98d"],
Cell[75186, 1570, 250, 3, 62, "Output",ExpressionUUID->"8035392f-ce6c-49a2-ad34-1f7c30ded95a"]
}, Open  ]]
}, Open  ]]
}
]
*)

