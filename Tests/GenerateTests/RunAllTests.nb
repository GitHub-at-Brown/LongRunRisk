(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    565127,      11310]
NotebookOptionsPosition[    560969,      11249]
NotebookOutlinePosition[    561443,      11267]
CellTagsIndexPosition[    561400,      11264]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8899684458207283`*^9, 3.889968446659306*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"4a4e2e24-fcb6-4e5b-a6de-9a788f0ea471"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"pacletBaseDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletBaseDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testFileNames", " ", "=", " ", 
  RowBox[{"FileNames", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletBaseDir", ",", "\"\<Tests\>\"", ",", "\"\<*.wlt\>\""}], 
     "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8894111683493032`*^9, 3.8894112087815933`*^9}, {
   3.889411242053163*^9, 3.88941126569147*^9}, {3.889603572176957*^9, 
   3.88960360623313*^9}, {3.88960408745549*^9, 3.889604092938833*^9}, {
   3.889969691249559*^9, 3.88996969252437*^9}, {3.889970717286119*^9, 
   3.889970718153995*^9}, {3.889971173708085*^9, 3.889971181843957*^9}, {
   3.889971229070705*^9, 3.8899712293375397`*^9}, {3.8899714432222357`*^9, 
   3.8899714500808268`*^9}, 3.890495920897338*^9, {3.890495957177495*^9, 
   3.8904959657175426`*^9}, {3.890496000595605*^9, 3.890496010113224*^9}, {
   3.890496054450512*^9, 3.890496056417246*^9}, {3.890555640296084*^9, 
   3.8905556405146093`*^9}, {3.8905942747634373`*^9, 3.890594276210952*^9}, {
   3.891158085135849*^9, 3.891158137208028*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b9f2d453-3e98-41bc-b67a-28793e860800"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.89550762830015*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"768c9ed2-c22d-465d-82a1-c12b2fdec233"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.895507628386088*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"138b1797-5246-49d0-8a82-8ee6c5c4ea10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\"\>\
", ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\"\
\>", ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/PacletizeResources.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/TimeAggregation.wlt\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.895507628387451*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"d502a82a-b552-4867-ae81-13b0a65dbbae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HighlightingCompatibility`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.895507628388955*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"2de1e6fb-9a15-4a5f-a7cc-8e48f907b40c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tr", "=", 
   RowBox[{
   "TestReport", "[", 
    "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\>\"\
", "]"}]}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.895362797280583*^9, 3.895362797460813*^9}, {
  3.895362883185739*^9, 3.8953628833320417`*^9}, {3.895362914081757*^9, 
  3.895362914242923*^9}, {3.895363069271865*^9, 3.895363069433126*^9}, {
  3.895364934971695*^9, 3.89536493511489*^9}, {3.8954190984559937`*^9, 
  3.895419107713436*^9}, {3.895431466385002*^9, 3.8954314730424356`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"1153a7e3-a4a9-44e1-a1d1-2c85ee2d32e0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Shocks.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Shocks.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.082743`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: Shocks.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     2828029488974863090 -> 
      TestResultObject[<|
        "TestKey" -> 2828029488974863090, "TestID" -> 
         "Shocks_20230610-7XMM72", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`Shocks`"]], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629777962*^9, "AbsoluteTimeUsed" -> 
         0.009458`4.1263143075113975, "CPUTimeUsed" -> 0.009417999999999704, 
         "MemoryUsed" -> 88016|>], 7978155910965902445 -> 
      TestResultObject[<|
        "TestKey" -> 7978155910965902445, "TestID" -> 
         "Shocks_20230610-PJZSVW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           MemberQ[$ContextPath, "FernandoDuarte`LongRunRisk`Model`Shocks`"]],
          "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> 
         HoldForm[True], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.89550762980544*^9, 
         "AbsoluteTimeUsed" -> 0.000036`1.7068174985992763, "CPUTimeUsed" -> 
         0.00003200000000047609, "MemoryUsed" -> 3296|>], 6665220333730664622 -> 
      TestResultObject[<|
        "TestKey" -> 6665220333730664622, "TestID" -> 
         "Shocks_20230610-R3SZX4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Not[Names["*rulesE"] === {}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.8955076298056383`*^9, 
         "AbsoluteTimeUsed" -> 0.017203`4.386119187171829, "CPUTimeUsed" -> 
         0.01725800000000044, "MemoryUsed" -> 2808|>], 576403780184493446 -> 
      TestResultObject[<|
        "TestKey" -> 576403780184493446, "TestID" -> "Shocks_20230610-LCIGAM",
          "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
              Shocks`t, Shocks`ii], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.89550762982313*^9, "AbsoluteTimeUsed" -> 
         0.000241`2.532532040406858, "CPUTimeUsed" -> 0.00024099999999949162`,
          "MemoryUsed" -> 4344|>], 8173114366685700460 -> 
      TestResultObject[<|
        "TestKey" -> 8173114366685700460, "TestID" -> 
         "Shocks_20230610-B7YF3O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "ActualOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629823561*^9, "AbsoluteTimeUsed" -> 
         0.021511`4.483175598102627, "CPUTimeUsed" -> 0.02155599999999991, 
         "MemoryUsed" -> 3789512|>], 9106633090545938032 -> 
      TestResultObject[<|
        "TestKey" -> 9106633090545938032, "TestID" -> 
         "Shocks_20230610-5O0ERJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^3, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^3, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629845368*^9, "AbsoluteTimeUsed" -> 
         0.002928`3.6170860702183485, "CPUTimeUsed" -> 0.0029660000000002462`,
          "MemoryUsed" -> 3016|>], 751588020548242018 -> 
      TestResultObject[<|
        "TestKey" -> 751588020548242018, "TestID" -> "Shocks_20230610-6K6OZX",
          "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "ActualOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629848494*^9, "AbsoluteTimeUsed" -> 0.002911`3.6145572032708,
          "CPUTimeUsed" -> 0.002941999999999556, "MemoryUsed" -> 3016|>], 
      8741522474942156818 -> 
      TestResultObject[<|
        "TestKey" -> 8741522474942156818, "TestID" -> 
         "Shocks_20230610-8KJ8DP", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             If[Shocks`f === Shocks`g, 0, 
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t] 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`g][
                Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}, {
             Shocks`g, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}, {
             Shocks`f, {"x", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
         "ExpectedOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ActualOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.8955076298516483`*^9, 
         "AbsoluteTimeUsed" -> 0.001604`3.3557193617801344, "CPUTimeUsed" -> 
         0.0016039999999999388`, "MemoryUsed" -> 7408|>], 5560745614110524166 -> 
      TestResultObject[<|
        "TestKey" -> 5560745614110524166, "TestID" -> 
         "Shocks_20230610-Z8UMT4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Map[StringDelete[#, 
             StringExpression[
              Alternatives["FernandoDuarte", "`"], 
              BlankSequence[], "`"]]& , 
            Table[
             ToString[
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
                Shocks`t, Shocks`ii] 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dc"][Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]]], "ExpectedOutput" -> 
         HoldForm[{"taugd[1]", "taugd[i]", "taugd[j]"}], "ActualOutput" -> 
         HoldForm[{"taugd[1]", "taugd[i]", "taugd[j]"}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629853432*^9, "AbsoluteTimeUsed" -> 
         0.00025`2.5484550065040295, "CPUTimeUsed" -> 0.0002510000000004453, 
         "MemoryUsed" -> 2760|>], 5598221598799487192 -> 
      TestResultObject[<|
        "TestKey" -> 5598221598799487192, "TestID" -> 
         "Shocks_20230610-DQXRBH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "ActualOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629853867*^9, "AbsoluteTimeUsed" -> 
         0.002889`3.6112625396761864, "CPUTimeUsed" -> 0.002917999999999754, 
         "MemoryUsed" -> 3016|>], 8131315414493388942 -> 
      TestResultObject[<|
        "TestKey" -> 8131315414493388942, "TestID" -> 
         "Shocks_20230610-S35S1M", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             If[Shocks`f === Shocks`g, 0, 
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
                 Shocks`t]^2 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`g][
                Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}, {
             Shocks`g, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
                Shocks`t, Shocks`ii]^2 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}, {
             Shocks`f, {"x", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
         "ExpectedOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ActualOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629856988*^9, 
         "AbsoluteTimeUsed" -> 0.019528`4.441172764241123, "CPUTimeUsed" -> 
         0.019780999999999604`, "MemoryUsed" -> 6208|>], 1381640533889703051 -> 
      TestResultObject[<|
        "TestKey" -> 1381640533889703051, "TestID" -> 
         "Shocks_20230610-EHYH2J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t + 1], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[
                ToExpression[Shocks`f]][Shocks`t], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, {
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t + 1, Shocks`i], 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`dd][
               Shocks`t, Shocks`i]}}]}], "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True, True, True, True, True, True}, {True, True}}], 
         "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True, True, True, True, True, True}, {True, True}}], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629876748*^9, "AbsoluteTimeUsed" -> 
         0.000433`2.787002894185357, "CPUTimeUsed" -> 0.00043199999999998795`,
          "MemoryUsed" -> 7304|>], 8173017122994513820 -> 
      TestResultObject[<|
        "TestKey" -> 8173017122994513820, "TestID" -> 
         "Shocks_20230610-0H61YL", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629877374*^9, 
         "AbsoluteTimeUsed" -> 0.000211`2.474797453129687, "CPUTimeUsed" -> 
         0.00021099999999973917`, "MemoryUsed" -> 3168|>], 
      6803978974693068197 -> 
      TestResultObject[<|
        "TestKey" -> 6803978974693068197, "TestID" -> 
         "Shocks_20230610-JVI7UX", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f], {
               Shocks`f, {
                "xx", "adc", "p", "rhobar", "ssg", "ssx", "sdc", "spi"}}]}], 
            Table[ReplaceAll[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["ddd"], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["ddd"], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629877766*^9, 
         "AbsoluteTimeUsed" -> 0.00021`2.4727342925659115, "CPUTimeUsed" -> 
         0.00021100000000018326`, "MemoryUsed" -> 3168|>], 
      3797002050895597418 -> 
      TestResultObject[<|
        "TestKey" -> 3797002050895597418, "TestID" -> 
         "Shocks_20230610-QQ63CQ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`tt], {
               Shocks`f, {
                "xx", "adc", "p", "rhobar", "ssg", "ssx", "sdc", "spi"}}, {
               Shocks`tt, {
                Shocks`t + 1, Shocks`t - 1, Shocks`s, Shocks`t + 
                 Shocks`h}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`tt, Shocks`ii], {Shocks`ii, {1, Shocks`i, Shocks`j}}, {
               Shocks`tt, {
                Shocks`t + 1, Shocks`t - 1, Shocks`s, Shocks`t + 
                 Shocks`h}}]}]}], "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629878189*^9, 
         "AbsoluteTimeUsed" -> 0.000297`2.6232714471492042, "CPUTimeUsed" -> 
         0.00029799999999946536`, "MemoryUsed" -> 3200|>], 
      6795375763177041016 -> 
      TestResultObject[<|
        "TestKey" -> 6795375763177041016, "TestID" -> 
         "Shocks_20230610-BFE4LW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
              NewContext`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
              NewContext`eps["dd"][Shocks`t, Shocks`ii], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629878655*^9, "AbsoluteTimeUsed" -> 
         0.000173`2.3885611009607874, "CPUTimeUsed" -> 
         0.00017400000000034055`, "MemoryUsed" -> 4160|>], 
      1729032691231151722 -> 
      TestResultObject[<|
        "TestKey" -> 1729032691231151722, "TestID" -> 
         "Shocks_20230610-Q6UEUJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`Private`eps[Shocks`f][
               Shocks`t]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`Private`eps["dd"][
               Shocks`t, Shocks`ii]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "ActualOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629878992*^9, "AbsoluteTimeUsed" -> 
         0.00286`3.606881030961035, "CPUTimeUsed" -> 0.002889999999999837, 
         "MemoryUsed" -> 3016|>]|>, 
    "TestsSucceededKeys" -> {2828029488974863090, 7978155910965902445, 
     6665220333730664622, 576403780184493446, 8173114366685700460, 
     9106633090545938032, 751588020548242018, 8741522474942156818, 
     5560745614110524166, 5598221598799487192, 8131315414493388942, 
     1381640533889703051, 8173017122994513820, 6803978974693068197, 
     3797002050895597418, 6795375763177041016, 1729032691231151722}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431208289164*^9, 3.895507629895403*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"ce1c5af8-134d-45e4-a6eb-b3edf484c365"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Catalog.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["13", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Catalog.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["13", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["13", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.045895`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: Catalog.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     7228177162518494870 -> 
      TestResultObject[<|
        "TestKey" -> 7228177162518494870, "TestID" -> 
         "Catalog_20230610-OQB689", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> 
         HoldForm[Get["FernandoDuarte`LongRunRisk`Model`Catalog`"]; Null], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629898697*^9, "AbsoluteTimeUsed" -> 
         0.040061`4.753236783754636, "CPUTimeUsed" -> 0.040067000000000075`, 
         "MemoryUsed" -> 6506552|>], 5543659660063995717 -> 
      TestResultObject[<|
        "TestKey" -> 5543659660063995717, "TestID" -> 
         "Catalog_20230610-HTF3BH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           MemberQ[$ContextPath, 
            "FernandoDuarte`LongRunRisk`Model`Catalog`"]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507629938998*^9, "AbsoluteTimeUsed" -> 
         0.000023`1.512242833849585, "CPUTimeUsed" -> 0.00002300000000010627, 
         "MemoryUsed" -> 2928|>], 6520116624367725394 -> 
      TestResultObject[<|
        "TestKey" -> 6520116624367725394, "TestID" -> 
         "Catalog_20230610-BN4CMJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[StringQ, 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8955076299391813`*^9, "AbsoluteTimeUsed" -> 
         0.000023`1.512242833849585, "CPUTimeUsed" -> 0.00002300000000010627, 
         "MemoryUsed" -> 2856|>], 843701730937317966 -> 
      TestResultObject[<|
        "TestKey" -> 843701730937317966, "TestID" -> 
         "Catalog_20230610-WT7OAT", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[StringQ, 
             Flatten[
              Map[{
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["name"], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                "shortname"], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["bibRef"], 
                
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["desc"]}& , 
               Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629939365*^9, "AbsoluteTimeUsed" -> 
         0.000058`1.9139429913949293, "CPUTimeUsed" -> 0.00005699999999997374,
          "MemoryUsed" -> 2856|>], 5594984155449555397 -> 
      TestResultObject[<|
        "TestKey" -> 5594984155449555397, "TestID" -> 
         "Catalog_20230610-C1FMQ2", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[NumberQ, 
             Flatten[
              Map[ReplaceRepeated[
                Part[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "parameters"], 
                 Span[1, All], 2], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                "parameters"]]& , 
               Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629939577*^9, "AbsoluteTimeUsed" -> 
         0.00235`3.5215828601037282, "CPUTimeUsed" -> 0.0023490000000001565`, 
         "MemoryUsed" -> 176256|>], 5028969074267004880 -> 
      TestResultObject[<|
        "TestKey" -> 5028969074267004880, "TestID" -> 
         "Catalog_20230610-UQSRTE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           FernandoDuarte`LongRunRisk`Model`Catalog`models["BY"][
           "stateVars"]], "ExpectedOutput" -> HoldForm[{
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`x[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t], 
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sx[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t]}], 
         "ActualOutput" -> HoldForm[{
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`x[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t], 
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sx[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t]}], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629942091*^9, "AbsoluteTimeUsed" -> 
         0.00002`1.4515449934959728, "CPUTimeUsed" -> 
         0.000018999999999991246`, "MemoryUsed" -> 2816|>], 
      718844489252086330 -> 
      TestResultObject[<|
        "TestKey" -> 718844489252086330, "TestID" -> 
         "Catalog_20230610-9P3GIH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[MemberQ[
              Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models], #]& , {
             "BY", "BKY"}]]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629942256*^9, 
         "AbsoluteTimeUsed" -> 0.000025`1.5484550065040283, "CPUTimeUsed" -> 
         0.000024999999999941735`, "MemoryUsed" -> 3120|>], 
      1840451808574842193 -> 
      TestResultObject[<|
        "TestKey" -> 1840451808574842193, "TestID" -> 
         "Catalog_20230610-A2TH7C", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[AssociationQ, 
             Flatten[{
               Head[FernandoDuarte`LongRunRisk`Model`Catalog`models], 
               Map[Head[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#]]& , 
                Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]}]]]], 
         "ExpectedOutput" -> HoldForm[False], "ActualOutput" -> 
         HoldForm[False], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629942427*^9, 
         "AbsoluteTimeUsed" -> 0.000034`1.6819939148742447, "CPUTimeUsed" -> 
         0.00003399999999986747, "MemoryUsed" -> 2864|>], 4531017187686467451 -> 
      TestResultObject[<|
        "TestKey" -> 4531017187686467451, "TestID" -> 
         "Catalog_20230610-7VIZ3G", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              
              Map[# === 
               "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                    Map[
                    StringDrop[#, -2]& , 
                    FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                    SymbolName[#]]& ][
                   BlankSequence[]] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8955076299426293`*^9, "AbsoluteTimeUsed" -> 
         0.000551`2.891666596683777, "CPUTimeUsed" -> 0.0005530000000004698, 
         "MemoryUsed" -> 6088|>], 2250476567322526644 -> 
      TestResultObject[<|
        "TestKey" -> 2250476567322526644, "TestID" -> 
         "Catalog_20230610-CRNM7A", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "eps"]& ][
                   BlankSequence[]][
                   BlankSequence[]] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629943336*^9, "AbsoluteTimeUsed" -> 
         0.000091`2.1095563901530854, "CPUTimeUsed" -> 0.00009000000000014552,
          "MemoryUsed" -> 3072|>], 8507626823758030730 -> 
      TestResultObject[<|
        "TestKey" -> 8507626823758030730, "TestID" -> 
         "Catalog_20230610-19YY4G", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "parameters"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                   FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                    SymbolName[#]]& ] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629943581*^9, "AbsoluteTimeUsed" -> 
         0.001425`3.3043298621765187, "CPUTimeUsed" -> 0.0014250000000002316`,
          "MemoryUsed" -> 10280|>], 44217477253085511 -> 
      TestResultObject[<|
        "TestKey" -> 44217477253085511, "TestID" -> "Catalog_20230610-QA6G8W",
          "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                   FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                    SymbolName[#]]& ] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.89550762994516*^9, "AbsoluteTimeUsed" -> 
         0.000207`2.466485343288912, "CPUTimeUsed" -> 0.00020700000000006824`,
          "MemoryUsed" -> 3072|>], 7829263073834114756 -> 
      TestResultObject[<|
        "TestKey" -> 7829263073834114756, "TestID" -> 
         "Catalog_20230610-Z5QV8I", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "SameTest" -> SameQ, 
         "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[MatchQ[{}, #]& , 
             Map[Cases[
               FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
               "stateVars"], PatternTest[
                 Pattern[Catalog`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> Catalog`var, Infinity]& , 
              Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.89550762994552*^9, "AbsoluteTimeUsed" -> 
         0.001027`3.16208544142927, "CPUTimeUsed" -> 0.0010279999999998068`, 
         "MemoryUsed" -> 2952|>]|>, 
    "TestsSucceededKeys" -> {7228177162518494870, 5543659660063995717, 
     6520116624367725394, 843701730937317966, 5594984155449555397, 
     5028969074267004880, 718844489252086330, 1840451808574842193, 
     4531017187686467451, 2250476567322526644, 8507626823758030730, 
     44217477253085511, 7829263073834114756}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431208289164*^9, 3.895507629953421*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"4f0d2740-c3a2-4b26-a428-68f85f92fb93"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ExogenousEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ExogenousEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.038022`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ExogenousEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     5812946853475271417 -> 
      TestResultObject[<|
        "TestKey" -> 5812946853475271417, "TestID" -> 
         "ExogenousEq_20230610-CGCOH1", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`ExogenousEq`"]], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629958447*^9, "AbsoluteTimeUsed" -> 
         0.000035`1.6945830421822692, "CPUTimeUsed" -> 0.00003500000000000725,
          "MemoryUsed" -> 3096|>], 3634504013163856257 -> 
      TestResultObject[<|
        "TestKey" -> 3634504013163856257, "TestID" -> 
         "ExogenousEq_20230610-AEPY7W", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Not[Names["*xeq"] === {}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507629958664*^9, 
         "AbsoluteTimeUsed" -> 0.019682`4.444584225302881, "CPUTimeUsed" -> 
         0.019687000000000232`, "MemoryUsed" -> 2808|>], 8594279148642002033 -> 
      TestResultObject[<|
        "TestKey" -> 8594279148642002033, "TestID" -> 
         "ExogenousEq_20230610-LOKXUS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "x"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`pieq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "pi"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`pibareq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "pibar"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sgeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sg"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sxeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sx"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sceq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sc"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`speq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sp"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             Not[{} === Cases[
                Map[Symbol, 
                 Names[
                 "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                PatternTest[
                  Pattern[ExogenousEq`var, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "dc"]& ] :> ExogenousEq`var, Infinity]], 
             Not[{} === Cases[
                Map[Symbol, 
                 Names[
                 "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                PatternTest[
                  Pattern[ExogenousEq`var, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "dd"]& ] :> ExogenousEq`var, Infinity]], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 Map[Symbol, 
                  Names[
                  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                 PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "dc"]& ] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 Map[Symbol, 
                  Names[
                  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                 PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "dd"]& ] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"]}]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629978836*^9, "AbsoluteTimeUsed" -> 
         0.016907`4.378581550489964, "CPUTimeUsed" -> 0.016915000000000013`, 
         "MemoryUsed" -> 5744|>], 925063772776273080 -> 
      TestResultObject[<|
        "TestKey" -> 925063772776273080, "TestID" -> 
         "ExogenousEq_20230610-PH3WLM", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.89550762999608*^9, "AbsoluteTimeUsed" -> 
         0.000818`3.063268301503315, "CPUTimeUsed" -> 0.0008170000000000677, 
         "MemoryUsed" -> 4496|>], 7703786943235509269 -> 
      TestResultObject[<|
        "TestKey" -> 7703786943235509269, "TestID" -> 
         "ExogenousEq_20230610-WZA87O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MatchQ[
                  SymbolName[#], "eps"]& ][
                 BlankSequence[]][
                 BlankSequence[]] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629997072*^9, "AbsoluteTimeUsed" -> 
         0.000171`2.3835111082241456, "CPUTimeUsed" -> 
         0.00017099999999992122`, "MemoryUsed" -> 3456|>], 865795430142348555 -> 
      TestResultObject[<|
        "TestKey" -> 865795430142348555, "TestID" -> 
         "ExogenousEq_20230610-DNIA16", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                 FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                  SymbolName[#]]& ] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507629997413*^9, "AbsoluteTimeUsed" -> 
         0.000323`2.6597175201630945, "CPUTimeUsed" -> 0.0003229999999998512, 
         "MemoryUsed" -> 3072|>], 3710502558640517009 -> 
      TestResultObject[<|
        "TestKey" -> 3710502558640517009, "TestID" -> 
         "ExogenousEq_20230610-FG8FUM", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "SameTest" -> SameQ,
          "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[ExogenousEq`t],
               foo`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
               ExogenousEq`t], ExogenousEq`t]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t], 
              ExogenousEq`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t], 
               foo`t]], 
             Not[
             foo`xeq[ExogenousEq`t] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
               ExogenousEq`t]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[ExogenousEq`t] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t]]}]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8955076299979*^9, "AbsoluteTimeUsed" -> 
         0.000086`2.0850134490755594, "CPUTimeUsed" -> 0.00008699999999972619,
          "MemoryUsed" -> 3128|>]|>, 
    "TestsSucceededKeys" -> {5812946853475271417, 3634504013163856257, 
     8594279148642002033, 925063772776273080, 7703786943235509269, 
     865795430142348555, 3710502558640517009}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431208289164*^9, 3.895507630004744*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"c564145a-127f-4169-9b3b-c2f4fc25c0b3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: EndogenousEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["9", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: EndogenousEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["9", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["9", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.021555`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: EndogenousEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6097286541709740712 -> 
      TestResultObject[<|
        "TestKey" -> 6097286541709740712, "TestID" -> 
         "EndogenousEq_20230610-0G7T30", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`EndogenousEq`"]], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507630008539*^9, "AbsoluteTimeUsed" -> 
         0.000033`1.669028937709879, "CPUTimeUsed" -> 0.00003400000000031156, 
         "MemoryUsed" -> 3096|>], 4371457634921003458 -> 
      TestResultObject[<|
        "TestKey" -> 4371457634921003458, "TestID" -> 
         "EndogenousEq_20230610-DIWSB8", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Not[Names["*pdeq"] === {}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507630008746*^9, 
         "AbsoluteTimeUsed" -> 0.019546`4.441572892266268, "CPUTimeUsed" -> 
         0.01958100000000007, "MemoryUsed" -> 2808|>], 5932362036597321995 -> 
      TestResultObject[<|
        "TestKey" -> 5932362036597321995, "TestID" -> 
         "EndogenousEq_20230610-OV08TN", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507630028622*^9, "AbsoluteTimeUsed" -> 
         0.000554`2.894024762560422, "CPUTimeUsed" -> 0.0005539999999997214, 
         "MemoryUsed" -> 12912|>], 31596314463895748 -> 
      TestResultObject[<|
        "TestKey" -> 31596314463895748, "TestID" -> 
         "EndogenousEq_20230610-I0J24M", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MatchQ[
                  SymbolName[#], "eps"]& ][
                 BlankSequence[]][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507630029351*^9, "AbsoluteTimeUsed" -> 
         0.000146`2.314867853616427, "CPUTimeUsed" -> 0.00014700000000011926`,
          "MemoryUsed" -> 3240|>], 5831018890950696523 -> 
      TestResultObject[<|
        "TestKey" -> 5831018890950696523, "TestID" -> 
         "EndogenousEq_20230610-12MROW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                 FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                  SymbolName[#]]& ] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507630029662*^9, "AbsoluteTimeUsed" -> 
         0.00025`2.5484550065040295, "CPUTimeUsed" -> 0.00024999999999986144`,
          "MemoryUsed" -> 4288|>], 805636002008265910 -> 
      TestResultObject[<|
        "TestKey" -> 805636002008265910, "TestID" -> 
         "EndogenousEq_20230610-1W6A38", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507630030078*^9, "AbsoluteTimeUsed" -> 
         0.000922`3.1152459188856194, "CPUTimeUsed" -> 0.0009220000000000894, 
         "MemoryUsed" -> 3200|>], 1806219790618545363 -> 
      TestResultObject[<|
        "TestKey" -> 1806219790618545363, "TestID" -> 
         "EndogenousEq_20230610-SZNWBO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, EndogenousEq`m], foo`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m], EndogenousEq`t]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              foo`t, EndogenousEq`m], EndogenousEq`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               foo`t, EndogenousEq`m], foo`t]], 
             Not[
             foo`bondyieldeq[EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               foo`t, EndogenousEq`m]]}]], "ExpectedOutput" -> HoldForm[True],
          "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507630031177*^9, "AbsoluteTimeUsed" -> 
         0.000036`1.706817498599281, "CPUTimeUsed" -> 0.00003500000000000725, 
         "MemoryUsed" -> 3000|>], 3322293620310753193 -> 
      TestResultObject[<|
        "TestKey" -> 3322293620310753193, "TestID" -> 
         "EndogenousEq_20230610-5I43IK", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, EndogenousEq`m], foo`m], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m], EndogenousEq`m]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, foo`m], EndogenousEq`m], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, foo`m], foo`m]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, foo`m]]}]], "ExpectedOutput" -> HoldForm[True],
          "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8955076300313773`*^9, "AbsoluteTimeUsed" -> 
         0.000031`1.6418766916662644, "CPUTimeUsed" -> 
         0.000030999999999892225`, "MemoryUsed" -> 3128|>], 
      4794658445321025396 -> 
      TestResultObject[<|
        "TestKey" -> 4794658445321025396, "TestID" -> 
         "EndogenousEq_20230610-X1EP37", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfweq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfweq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondreteq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondreteq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfwspreadeq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfwspreadeq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondexcreteq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondexcreteq[
              EndogenousEq`t, EndogenousEq`m, 1]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507630031575*^9, "AbsoluteTimeUsed" -> 
         0.000037`1.718716721898985, "CPUTimeUsed" -> 0.00003799999999998249, 
         "MemoryUsed" -> 2856|>]|>, 
    "TestsSucceededKeys" -> {6097286541709740712, 4371457634921003458, 
     5932362036597321995, 31596314463895748, 5831018890950696523, 
     805636002008265910, 1806219790618545363, 3322293620310753193, 
     4794658445321025396}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}|>],
  
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431208289164*^9, 3.895507630038171*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"cc423dde-aea4-43f2-89b4-d9f81a020ee0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeConditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeConditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["14", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "33.379654`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ComputeConditionalExpectations.wlt", "Aborted" -> 
    False, "TestResults" -> <|
     7167730366011987625 -> 
      TestResultObject[<|
        "TestKey" -> 7167730366011987625, "TestID" -> 
         "ComputeConditionalExpectations_20230610-U8AMCQ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          Get["FernandoDuarte`LongRunRisk`Model`Catalog`"]; 
           Needs["FernandoDuarte`LongRunRisk`Model`ProcessModels`"]; 
           Needs["PacletizedResourceFunctions`"]; Null], "ExpectedOutput" -> 
         HoldForm[Null], "ActualOutput" -> HoldForm[Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507630047976*^9, "AbsoluteTimeUsed" -> 
         0.022171`4.496300279791207, "CPUTimeUsed" -> 0.022165999999999908`, 
         "MemoryUsed" -> 492344|>], 2722733654549901677 -> 
      TestResultObject[<|
        "TestKey" -> 2722733654549901677, "TestID" -> 
         "ComputeConditionalExpectations_20230610-TNKSLD", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`"]; $ContextAliases["ce`"] = 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`"; Null], "ExpectedOutput" -> 
         HoldForm[Null], "ActualOutput" -> HoldForm[Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8955076300703983`*^9, "AbsoluteTimeUsed" -> 
         0.005636`3.901485982269308, "CPUTimeUsed" -> 0.0056549999999995215`, 
         "MemoryUsed" -> 2312|>], 409962477604730398 -> 
      TestResultObject[<|
        "TestKey" -> 409962477604730398, "TestID" -> 
         "ComputeConditionalExpectations_20230610-2YY3L6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             
             MemberQ[$ContextPath, 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`"]}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507630076288*^9, 
         "AbsoluteTimeUsed" -> 0.000025`1.5484550065040295, "CPUTimeUsed" -> 
         0.000023999999999801958`, "MemoryUsed" -> 2952|>], 
      4786111524001914720 -> 
      TestResultObject[<|
        "TestKey" -> 4786111524001914720, "TestID" -> 
         "ComputeConditionalExpectations_20230610-XWDHYS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {
             Not[Names["*ev"] === {}], 
             Not[Names["ce`lagStateVarst"] === {}]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507630076468*^9, "AbsoluteTimeUsed" -> 
         0.017136`4.384424451319773, "CPUTimeUsed" -> 0.017141000000000073`, 
         "MemoryUsed" -> 2824|>], 5697518230657618166 -> 
      TestResultObject[<|
        "TestKey" -> 5697518230657618166, "TestID" -> 
         "ComputeConditionalExpectations_20230610-88XBF6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          ComputationalEngine`Cond`mm = 
            FernandoDuarte`LongRunRisk`Model`Catalog`models; 
           ComputationalEngine`Cond`ms = 
            KeySelect[ComputationalEngine`Cond`mm, MatchQ[#, 
               Alternatives["BKY", "NRC"]]& ]; 
           ComputationalEngine`Cond`msp = 
            FernandoDuarte`LongRunRisk`Model`ProcessModels`processModels[
             ComputationalEngine`Cond`ms]; 
           ComputationalEngine`Cond`modNRC = 
            Part[ComputationalEngine`Cond`msp, 2]; Null], "ExpectedOutput" -> 
         HoldForm[Null], "ActualOutput" -> HoldForm[Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8955076300938582`*^9, "AbsoluteTimeUsed" -> 
         27.003952`7.581942325183374, "CPUTimeUsed" -> 27.1336, "MemoryUsed" -> 
         152267256|>], 7243980881092663137 -> 
      TestResultObject[<|
        "TestKey" -> 7243980881092663137, "TestID" -> 
         "ComputeConditionalExpectations_20230610-J1EV2C", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
            ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t + 1]
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
             ComputationalEngine`Cond`t - 1, ComputationalEngine`Cond`modNRC] === 
           FernandoDuarte`LongRunRisk`Model`Parameters`phip], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507657098136*^9, "AbsoluteTimeUsed" -> 
         0.004249`3.778801728921506, "CPUTimeUsed" -> 0.00458099999999817, 
         "MemoryUsed" -> 5640|>], 6463909676053288347 -> 
      TestResultObject[<|
        "TestKey" -> 6463909676053288347, "TestID" -> 
         "ComputeConditionalExpectations_20230610-GEUQW1", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i]
                    ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                 ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                  ComputationalEngine`Cond`rhodp[ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i]
                    ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                   ComputationalEngine`Cond`rhodp[
                    ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`muc + (
                   ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + 
                ComputationalEngine`Cond`phic 
                 ComputationalEngine`Cond`phidc[ComputationalEngine`Cond`i]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^3 (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) ((
                   ComputationalEngine`Cond`mup + (
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                   ComputationalEngine`Cond`muc + (
                    ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`phip^2 + 
                  ComputationalEngine`Cond`xic ComputationalEngine`Cond`phip 
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                 ComputationalEngine`Cond`rhop 
                  ComputationalEngine`Cond`phip^2 + 
                 ComputationalEngine`Cond`xip 
                  ComputationalEngine`Cond`phip)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`muc + (
                   ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                 ComputationalEngine`Cond`rhocp 
                  ComputationalEngine`Cond`phip^2 + 
                 ComputationalEngine`Cond`xic ComputationalEngine`Cond`phip 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t])]], 
             0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 3] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 4] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog) ComputationalEngine`Cond`Esg 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]] + 
                ComputationalEngine`Cond`rhog 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^3, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog) (
                  ComputationalEngine`Cond`Esg ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                   ComputationalEngine`Cond`phig^2)) + 
                ComputationalEngine`Cond`rhog ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^3 + 
                  3 (ComputationalEngine`Cond`phig^2 (
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog^2) 
                 ComputationalEngine`Cond`Esg 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]] + 
                ComputationalEngine`Cond`rhog^2 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^3, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog^2) (
                  ComputationalEngine`Cond`Esg ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                   ComputationalEngine`Cond`phig^2)) + 
                ComputationalEngine`Cond`rhog^2 ((
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^3 + 
                  3 (ComputationalEngine`Cond`phig^2 (
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) + 
                ComputationalEngine`Cond`rhog 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) + 
                ComputationalEngine`Cond`rhog^2 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) + (
                 ComputationalEngine`Cond`rhog^3 
                  ComputationalEngine`Cond`phig^2 + 
                 ComputationalEngine`Cond`rhog 
                  ComputationalEngine`Cond`phig^2)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^4 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) + (
                 ComputationalEngine`Cond`rhog^4 
                  ComputationalEngine`Cond`phig^2 + 
                 ComputationalEngine`Cond`rhog^2 
                  ComputationalEngine`Cond`phig^2)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]], 0 === 
             Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^2 (
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 2, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^3 (
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                ComputationalEngine`Cond`phig^2]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t - 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]^2],
              0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t - 2]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2]^2],
              0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]^2],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg))^2 + (
                  ComputationalEngine`Cond`rhog^2 + 1) 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t - 2, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`Esg))^2 + (
                  ComputationalEngine`Cond`rhog^4 + 
                  ComputationalEngine`Cond`rhog^2 + 1) 
                 ComputationalEngine`Cond`phig^2]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - (
               ComputationalEngine`Cond`Esg + 
               ComputationalEngine`Cond`rhog (
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                 ComputationalEngine`Cond`Esg))], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - (
               ComputationalEngine`Cond`Esg + 
               ComputationalEngine`Cond`rhog (
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                 ComputationalEngine`Cond`Esg))], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`Esg + 
                ComputationalEngine`Cond`rhog^2 (
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] - 
                  ComputationalEngine`Cond`Esg)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp 
                  ComputationalEngine`Cond`rhop (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`mup) + 
                 ComputationalEngine`Cond`rhocp ComputationalEngine`Cond`xip 
                  ComputationalEngine`Cond`eps["pi"][
                   ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`mup) + 
                 ComputationalEngine`Cond`xic 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`eps["pi"][
                   ComputationalEngine`Cond`t - 1])]]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8955076571038404`*^9, "AbsoluteTimeUsed" -> 
         5.769694`6.911667778468577, "CPUTimeUsed" -> 2.141795000000002, 
         "MemoryUsed" -> 32799552|>], 4258834640794546445 -> 
      TestResultObject[<|
        "TestKey" -> 4258834640794546445, "TestID" -> 
         "ComputeConditionalExpectations_20230610-6W05Y4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> 
         HoldForm[
          ComputationalEngine`Cond`dc1 = 
            PacletizedResourceFunctions`SetSymbolsContext[
              ReplaceAll[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 1], 
               Normal[
                ComputationalEngine`Cond`modNRC["exogenousEq"]]]]; 
           ComputationalEngine`Cond`dc2 = 
            PacletizedResourceFunctions`SetSymbolsContext[
              ReplaceAll[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 2], 
               Normal[
                ComputationalEngine`Cond`modNRC["exogenousEq"]]]]; Apply[And, {
              Simplify[
              ComputationalEngine`Cond`dc1 === 
               ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                   ComputationalEngine`Cond`mup) + (
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 3]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                  ComputationalEngine`Cond`phic 
                   ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1]))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 3] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1]))]], 
              Simplify[
              ComputationalEngine`Cond`dc2 === 
               ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                   ComputationalEngine`Cond`mup) + (
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 4]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                  ComputationalEngine`Cond`phic 
                   ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2]))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 4] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2]))]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhocp ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop (
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                  ComputationalEngine`Cond`xip)]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop (
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                  ComputationalEngine`Cond`xip)]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t]
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]], 0 === 
              Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]]], 0 === 
              Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 2]]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 2, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 2]], 
              0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^4 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^3 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - (
                ComputationalEngine`Cond`Esg + 
                ComputationalEngine`Cond`rhog (
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                  ComputationalEngine`Cond`Esg))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i], ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                  ComputationalEngine`Cond`rhodp[ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`mup + (
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phip^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`muc + (
                    ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phic^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`Esg + 
                   ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                    ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i]^2, ComputationalEngine`Cond`t,
                    ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`mud[
                    ComputationalEngine`Cond`i] + (
                    ComputationalEngine`Cond`rhodp[
                    ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phidc[
                   ComputationalEngine`Cond`i]^2]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phip^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phic^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phig^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i], ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phidc[
                 ComputationalEngine`Cond`i]^2]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507662875194*^9, "AbsoluteTimeUsed" -> 
         0.173834`5.39064972143058, "CPUTimeUsed" -> 0.18679800000000313`, 
         "MemoryUsed" -> 175424|>], 8413155225868626754 -> 
      TestResultObject[<|
        "TestKey" -> 8413155225868626754, "TestID" -> 
         "ComputeConditionalExpectations_20230610-F2XLQV", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, {0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                  ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]^2,
                  ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t + 2, ComputationalEngine`Cond`i], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                  ComputationalEngine`Cond`t + 2, ComputationalEngine`Cond`i],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507663050351*^9, "AbsoluteTimeUsed" -> 
         0.349308`5.693723529980001, "CPUTimeUsed" -> 0.37540100000000365`, 
         "MemoryUsed" -> 247648|>], 6468475968646308785 -> 
      TestResultObject[<|
        "TestKey" -> 6468475968646308785, "TestID" -> 
         "ComputeConditionalExpectations_20230610-KQBZPE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                foo`pi[foo`t + 1], foo`t, ComputationalEngine`Cond`modNRC], 
               foo`t -> ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[foo`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               foo`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[foo`t + 1], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], foo`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[bar`t + 1], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + bar`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], bar`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[bar`t + 1], goo`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + bar`t]}]], "ExpectedOutput" -> HoldForm[True], 
         "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.8955076634000263`*^9, 
         "AbsoluteTimeUsed" -> 0.013107`4.268018297261223, "CPUTimeUsed" -> 
         0.013764000000001886`, "MemoryUsed" -> 43232|>], 5571721386851416307 -> 
      TestResultObject[<|
        "TestKey" -> 5571721386851416307, "TestID" -> 
         "ComputeConditionalExpectations_20230610-JHHDMS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], {
               "pi"}] === ComputationalEngine`Cond`t, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1], {
               "pi"}] === ComputationalEngine`Cond`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1], {
               "pi"}] === Infinity, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1], {
               "pi", "sg"}] === ComputationalEngine`Cond`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t - 2], {"pi", "sg"}] === 
             ComputationalEngine`Cond`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t - 2], {"pi", "sg", "eps"}] === 
             ComputationalEngine`Cond`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
               ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t - 2, ComputationalEngine`Cond`i], {
               "pi", "sg", "dd"}] === ComputationalEngine`Cond`t - 2, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] + (
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] + 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1]^2/
                 ComputationalEngine`Cond`sg[
                 ComputationalEngine`Cond`t - 2]), {"pi"}] === 
             ComputationalEngine`Cond`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] + (
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] + 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1]^2/
                 ComputationalEngine`Cond`sg[
                 ComputationalEngine`Cond`t - 2]), {"pi", "sg"}] === 
             ComputationalEngine`Cond`t - 2, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[{
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] + (
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] + 
                 ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1]^2/
                  ComputationalEngine`Cond`sg[
                  ComputationalEngine`Cond`t - 2]), 
                Sqrt[
                 ComputationalEngine`Cond`sg[
                 ComputationalEngine`Cond`t - 3]]}, {"pi", "sg"}] === 
             ComputationalEngine`Cond`t - 3}]], "ExpectedOutput" -> 
         HoldForm[False], "ActualOutput" -> HoldForm[False], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895507663413502*^9, "AbsoluteTimeUsed" -> 
         0.000048`1.831756235207577, "CPUTimeUsed" -> 0.00004799999999249849, 
         "MemoryUsed" -> 2904|>], 6775028294677605849 -> 
      TestResultObject[<|
        "TestKey" -> 6775028294677605849, "TestID" -> 
         "ComputeConditionalExpectations_20230610-T2R47X", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               ComputationalEngine`Cond`pi[foo`t], {"pi"}] === foo`t, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               foo`pi[ComputationalEngine`Cond`t], {"pi"}] == 
             ComputationalEngine`Cond`t, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
               foo`pi[bar`t], {"pi"}] == bar`t, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`pi[context1`t] 
               ComputationalEngine`Cond`pi[context2`t - 1], {"pi"}] === 
             Min[context1`t, context2`t - 1], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`pi[context1`t] 
               ComputationalEngine`Cond`sg[context2`t - 1], {"pi"}] === 
             context1`t, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              ComputationalEngine`Cond`pi[context1`t] 
               ComputationalEngine`Cond`pi[context1`t - 1], {"pi"}] === 
             context1`t - 1, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`minTfun[
              c1`sg[c2`t - 1] foo`pi[ComputationalEngine`Cond`t] - 
               ComputationalEngine`Cond`pi[foo`t - 2], {"pi", "sg"}] === 
             Min[c2`t - 1, foo`t - 2, ComputationalEngine`Cond`t]}]], 
         "ExpectedOutput" -> HoldForm[False], "ActualOutput" -> 
         HoldForm[False], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895507663413787*^9, 
         "AbsoluteTimeUsed" -> 0.000032`1.6556649761518971, "CPUTimeUsed" -> 
         0.000032000000004472895`, "MemoryUsed" -> 2928|>], 
      3643130258752655473 -> 
      TestResultObject[<|
        "TestKey" -> 3643130258752655473, "TestID" -> 
         "ComputeConditionalExpectations_20230610-FVVM4U", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
               FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                  ComputationalEngine`Cond`t - 1] - 
                 FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Cond`t - 1] + 
                FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Cond`t])), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t -> 
               ComputationalEngine`Cond`t + 1], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
               FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                 ComputationalEngine`Cond`t] + (
                FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                    FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                   FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Cond`t - 1] + 
                   FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Cond`t])) + 
                FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  1 + ComputationalEngine`Cond`t])), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Cond`t] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               2 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Cond`t] (
               FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
                FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                  FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                   ComputationalEngine`Cond`t - 1] - 
                  FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                 FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Cond`t - 1] + 
                 FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Cond`t]))), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`delta, ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`delta, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`A[0], ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`R[ComputationalEngine`Cond`m - 1][0], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`R[
              ComputationalEngine`Cond`m - 1][0], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pieq[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`m], 
               ComputationalEngine`Cond`t + 1, 
               ComputationalEngine`Cond`modNRC] === 
             ComputationalEngine`Cond`pieq[
              ComputationalEngine`Cond`t, ComputationalEngine`Cond`m], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`wceq[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t + 1, 
               ComputationalEngine`Cond`modNRC] === 
             ComputationalEngine`Cond`wceq[ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[{
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t]}, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === {
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], 
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], 
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC]},
              FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               foo`pi[ComputationalEngine`Cond`t], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t] 
               bar`delta, ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               foo`eps["pi"][ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`delta, ComputationalEngine`Cond`t - 1,
                ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[foo`t], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[foo`t], foo`t - 1, 
                ComputationalEngine`Cond`modNRC], foo`t -> 
               ComputationalEngine`Cond`t], ExpandAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[foo`t] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                foo`t - 1, ComputationalEngine`Cond`modNRC]] === 
             ExpandAll[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                 ComputationalEngine`Cond`pi[foo`t], foo`t - 1, 
                 ComputationalEngine`Cond`modNRC]], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[foo`t - 1] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], foo`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               foo`t - 1] 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Cond`t]}]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895507663414369*^9, "AbsoluteTimeUsed" -> 
         0.020436`4.460910891842218, "CPUTimeUsed" -> 0.02163499999998919, 
         "MemoryUsed" -> 64848|>], 7682342596783997096 -> 
      TestResultObject[<|
        "TestKey" -> 7682342596783997096, "TestID" -> 
         "ComputeConditionalExpectations_20230610-Y0ZKOM", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "Outcome" -> "Success", "Input" -> HoldForm[
           Unset[
            $ContextAliases["ce`"]]], "ExpectedOutput" -> HoldForm[Null], 
         "ActualOutput" -> HoldForm[Null], "ExpectedMessages" -> HoldForm[{}],
          "ActualMessages" -> {}, "AbsoluteTime" -> 3.8955076634350033`*^9, 
         "AbsoluteTimeUsed" -> 0.000026`1.5654883458028093, "CPUTimeUsed" -> 
         0.000025000000000829914`, "MemoryUsed" -> 2568|>]|>, 
    "TestsSucceededKeys" -> {7167730366011987625, 2722733654549901677, 
     409962477604730398, 4786111524001914720, 5697518230657618166, 
     7243980881092663137, 6463909676053288347, 4258834640794546445, 
     8413155225868626754, 6468475968646308785, 5571721386851416307, 
     6775028294677605849, 3643130258752655473, 7682342596783997096}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431208289164*^9, 3.895507663447412*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"25aa5353-55f0-4c9e-95c1-e6d526769eed"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", "]"}]}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"e330a50a-d51d-4861-9e79-8ecbadd6a684"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\>\"", 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"5a7b1be5-0bb0-47d8-8966-c6eaeeeabe17"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             InsetBox[
              PaneBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "MUnitExpressions", "TestFailureIcon"], 
                ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]]], AspectRatio -> 1, Axes -> False, 
             Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"10%\"", ShowStringCharacters -> False], 0.1, 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             InsetBox[
              PaneBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "MUnitExpressions", "TestFailureIcon"], 
                ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]]], AspectRatio -> 1, Axes -> False, 
             Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"10%\"", ShowStringCharacters -> False], 0.1, 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["9", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.114504`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity"], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: CreateEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     1626945589543236739 -> 
      TestResultObject[<|
        "TestKey" -> 1626945589543236739, "TestID" -> 
         "CreateEulerEq_20230610-GFA92E", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "MessagesFailure", "Input" -> HoldForm[Get[
             Get[
              
              FileNameJoin[{
               ComputationalEngine`CreateEulerEq`pacletDir, "Resources", 
                "Models.wl"}]]]; 
           ComputationalEngine`CreateEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`CreateEulerEq`modBY = 
            ComputationalEngine`CreateEulerEq`msp["BY"]; 
           ComputationalEngine`CreateEulerEq`modNRC = 
            ComputationalEngine`CreateEulerEq`msp["NRC"]; 
           ComputationalEngine`CreateEulerEq`modDES = 
            ComputationalEngine`CreateEulerEq`msp["DES"]; 
           ComputationalEngine`CreateEulerEq`mods = {
             ComputationalEngine`CreateEulerEq`modBY, 
              ComputationalEngine`CreateEulerEq`modNRC, 
              ComputationalEngine`CreateEulerEq`modDES}; Null], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[Get, "stream"], 
             HoldForm[
              
              FileNameJoin[{
               ComputationalEngine`CreateEulerEq`pacletDir, "Resources", 
                "Models.wl"}]]]], 
           HoldForm[
            Message[
             MessageName[Get, "stream"], 
             HoldForm[$Failed]]]}, "AbsoluteTime" -> 3.8954314797993865`*^9, 
         "AbsoluteTimeUsed" -> 0.004699`3.822520442854946, "CPUTimeUsed" -> 
         0.004677999999999738, "MemoryUsed" -> 11472|>], 4634569935301063044 -> 
      TestResultObject[<|
        "TestKey" -> 4634569935301063044, "TestID" -> 
         "CreateEulerEq_20230610-EXYC8D", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "MessagesFailure", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
"]; ComputationalEngine`CreateEulerEq`ee[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := {
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`nomeulereq[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model]}; 
           ComputationalEngine`CreateEulerEq`eeAll = 
            Map[ComputationalEngine`CreateEulerEq`ee, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffWc[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffPd[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffNomBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffWcAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffWc, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffPdAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffPd, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffBond, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
              ComputationalEngine`CreateEulerEq`mods]; Null], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[Get, "noopen"], 
             HoldForm[
             "FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]]\
], 
           HoldForm[
            Message[
             MessageName[Needs, "nocont"], 
             HoldForm[
             "FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]]\
]}, "AbsoluteTime" -> 3.8954314798228574`*^9, "AbsoluteTimeUsed" -> 
         0.033557`4.676298125743038, "CPUTimeUsed" -> 0.033588000000000395`, 
         "MemoryUsed" -> 14792|>], 2939173236823293881 -> 
      TestResultObject[<|
        "TestKey" -> 2939173236823293881, "TestID" -> 
         "CreateEulerEq_20230610-D1JX8J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Not[Names["*eulereq"] === {}]], "ExpectedOutput" -> HoldForm[True],
          "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8954314798566465`*^9, "AbsoluteTimeUsed" -> 
         0.017822`4.401471437163887, "CPUTimeUsed" -> 0.017825000000000202`, 
         "MemoryUsed" -> 2808|>], 5283461346862092770 -> 
      TestResultObject[<|
        "TestKey" -> 5283461346862092770, "TestID" -> 
         "CreateEulerEq_20230610-K9CXQS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modBY]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modNRC]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modDES]]}]]], 
         "ExpectedOutput" -> HoldForm[False], "ActualOutput" -> 
         HoldForm[True], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.8954314798747997`*^9, 
         "AbsoluteTimeUsed" -> 0.002569`3.56027910209834, "CPUTimeUsed" -> 
         0.002581999999999862, "MemoryUsed" -> 195632|>], 5114563586197213695 -> 
      TestResultObject[<|
        "TestKey" -> 5114563586197213695, "TestID" -> 
         "CreateEulerEq_20230610-VPAZX0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffWcAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffPdAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> 
         HoldForm[False], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.8954314798776097`*^9, 
         "AbsoluteTimeUsed" -> 0.000076`2.031328590112785, "CPUTimeUsed" -> 
         0.00007700000000010476, "MemoryUsed" -> 7400|>], 7439833848682234939 -> 
      TestResultObject[<|
        "TestKey" -> 7439833848682234939, "TestID" -> 
         "CreateEulerEq_20230610-CRU3E0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[False], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8954314798778877`*^9, "AbsoluteTimeUsed" -> 
         0.000031`1.6418766916662664, "CPUTimeUsed" -> 
         0.000029999999999752447`, "MemoryUsed" -> 3056|>], 
      8921945106589869628 -> 
      TestResultObject[<|
        "TestKey" -> 8921945106589869628, "TestID" -> 
         "CreateEulerEq_20230610-2NVH3P", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> HoldForm[
           Apply[And, 
            
            Flatten[{
             Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[False], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8954314798781376`*^9, "AbsoluteTimeUsed" -> 
         0.000039`1.7415796048584933, "CPUTimeUsed" -> 0.00003799999999998249,
          "MemoryUsed" -> 2928|>], 7629573984396969170 -> 
      TestResultObject[<|
        "TestKey" -> 7629573984396969170, "TestID" -> 
         "CreateEulerEq_20230610-AVEZU6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[False], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8954314798783927`*^9, "AbsoluteTimeUsed" -> 
         0.00006`1.9286662482156374, "CPUTimeUsed" -> 0.00005999999999994898, 
         "MemoryUsed" -> 3160|>], 1601878777295622223 -> 
      TestResultObject[<|
        "TestKey" -> 1601878777295622223, "TestID" -> 
         "CreateEulerEq_20230610-GHU9ZO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> 
         HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
           DeleteDuplicates[
             Flatten[{
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                   Span[1, All], 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]]}]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> 
         HoldForm[False], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[Context, "ssle"], 
             HoldForm[
              Context[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[Context, "ssle"], 
             HoldForm[
              Context[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[Context, "ssle"], 
             HoldForm[
              Context[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[General, "stop"], 
             HoldForm[
              MessageName[Context, "ssle"]]]]}, "AbsoluteTime" -> 
         3.8954314798786507`*^9, "AbsoluteTimeUsed" -> 
         0.029127`4.6148107536391985, "CPUTimeUsed" -> 0.029137999999999664`, 
         "MemoryUsed" -> 5704|>], 7483955374294693622 -> 
      TestResultObject[<|
        "TestKey" -> 7483955374294693622, "TestID" -> 
         "CreateEulerEq_20230610-T9CC4Q", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Failure", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := 
            Module[{ComputationalEngine`CreateEulerEq`e0, 
               ComputationalEngine`CreateEulerEq`e1, 
               ComputationalEngine`CreateEulerEq`e2, 
               ComputationalEngine`CreateEulerEq`e3, 
               ComputationalEngine`CreateEulerEq`e0p, 
               ComputationalEngine`CreateEulerEq`e1p, 
               ComputationalEngine`CreateEulerEq`e2p, 
               ComputationalEngine`CreateEulerEq`e3p}, 
              ComputationalEngine`CreateEulerEq`e0 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e1 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 1], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e2 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e3 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model, True]; 
              ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                  Normal[
                   ComputationalEngine`CreateEulerEq`model["parameters"]], 
                  Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                  4}]; ComputationalEngine`CreateEulerEq`e1p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                    Blank[]] -> 4, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    Blank[]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e2p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                   
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e3p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                 ComputationalEngine`CreateEulerEq`e0p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                 ComputationalEngine`CreateEulerEq`e1p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                 ComputationalEngine`CreateEulerEq`e2p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                 ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
             Map[BooleanQ, 
              Flatten[
               ComputationalEngine`CreateEulerEq`checkBoolean[
               ComputationalEngine`CreateEulerEq`modBY]]]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[False], 
         "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[ReplaceAll, "reps"], 
             HoldForm[{
               FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
               FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
               4}]]], 
           HoldForm[
            Message[
             MessageName[ReplaceAll, "reps"], 
             HoldForm[{
               FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
               FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4,
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                 Blank[]] -> 4, 
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                 Blank[]] -> 4}]]], 
           HoldForm[
            Message[
             MessageName[ReplaceAll, "reps"], 
             HoldForm[{
               FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
               FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4,
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                 Pattern[ComputationalEngine`CreateEulerEq`m, 
                  Blank[]]] -> 4}]]], 
           HoldForm[
            Message[
             MessageName[General, "stop"], 
             HoldForm[
              MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTime" -> 
         3.8954314799080467`*^9, "AbsoluteTimeUsed" -> 
         0.0265240000000000001`4.574154017071965, "CPUTimeUsed" -> 
         0.026533000000000584`, "MemoryUsed" -> 12536|>]|>, 
    "TestsSucceededKeys" -> {2939173236823293881}, 
    "TestsFailedWrongResultsKeys" -> {5283461346862092770, 
     5114563586197213695, 7439833848682234939, 8921945106589869628, 
     7629573984396969170, 1601878777295622223, 7483955374294693622}, 
    "TestsFailedWithMessagesKeys" -> {1626945589543236739, 
     4634569935301063044}, "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8954314801113243`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"c0ed6b4a-45c7-49b1-a374-e9d2ad5c685a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.89299130782999*^9, 3.892991351007729*^9, {3.8930019651870403`*^9, 
   3.8930019657580433`*^9}, {3.89300203804469*^9, 3.8930020428746147`*^9}, {
   3.893002126415174*^9, 3.893002148237515*^9}, 3.8931769328580713`*^9, 
   3.895362705268759*^9, 3.8953628816709433`*^9, 
   3.895362912835907*^9},ExpressionUUID->"84c78bb2-8e0f-4b6f-ae00-\
0d2abae7a844"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"tr", "=", 
   RowBox[{
   "TestReport", "[", 
    "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\>\"", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8930037604438353`*^9, 3.893003767636511*^9}, {
   3.8930274724828367`*^9, 3.893027481454776*^9}, 3.893176929602127*^9, 
   3.8953627959840918`*^9},ExpressionUUID->"5121ffd6-f567-4da8-bdc7-\
b02da924ab5e"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.8930376107794113`*^9, {3.893105240088758*^9, 3.8931052440724087`*^9}, 
   3.893176925930255*^9, 3.895363067666274*^9, 
   3.895364932747463*^9},ExpressionUUID->"7f4ea337-0076-4787-aac5-\
76cf6f1f79da"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{3.893175870362602*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"e19bde9e-a625-488e-9cf4-b74f7c4fcb22"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\>\"\
", ",", "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8931055175849867`*^9, 3.8931055372377996`*^9}, {
  3.8931758788796062`*^9, 3.893175879649167*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6d80ab2b-2576-4050-b521-9cae711fed04"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"2ebef7d6-d331-419f-a64e-ead93d146e3f"],

Cell[BoxData["tr"], "Input",
 CellChangeTimes->{{3.8954298041926622`*^9, 3.895429804361904*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"cd632827-fda3-49db-ba6c-c16c6cd48a28"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{3.895422375358493*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"d38c1461-d4f4-423b-8b82-09b784289135"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",ExpressionUUID->\
"74fa26f9-abc6-4219-a123-f978597737ff"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileNames", "]"}]}]], "Input",
 CellChangeTimes->{{3.889411155314384*^9, 3.8894111646376877`*^9}, {
  3.889411308437488*^9, 3.889411311891931*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8a9c9e85-8cbf-4e1c-870c-0a5ec229dd8b"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileNames", "]"}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"89327c75-70af-4b75-adfd-86608c4fe806"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"f1d84011-dcfc-4f83-98b5-d531ed681557"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"5283461346862092770", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-K9CXQS\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-K9CXQS\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-K9CXQS"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
           GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-K9CXQS\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-K9CXQS\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-K9CXQS"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modBY", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modNRC", "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modDES", "]"}]}]}], 
                    "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modBY", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modNRC", "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modDES", "]"}]}]}], 
                    "}"}], "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modBY]], 
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modNRC]], 
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modDES]]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 5283461346862092770, "TestID" -> 
       "CreateEulerEq_20230610-K9CXQS", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modBY]], 
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modNRC]], 
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modDES]]}]]], "ExpectedOutput" -> 
       HoldForm[False], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
       HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
       3.8954314798747997`*^9, "AbsoluteTimeUsed" -> 
       0.002569`3.56027910209834, "CPUTimeUsed" -> 0.002581999999999862, 
       "MemoryUsed" -> 195632|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"5114563586197213695", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-VPAZX0\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-VPAZX0\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-VPAZX0"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-VPAZX0\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-VPAZX0\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-VPAZX0"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "2"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "3"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "4"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "2"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "3"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "4"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffWcAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffPdAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffBondAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}]}]]]], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]], Background -> GrayLevel[0.85], 
                    StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 5114563586197213695, "TestID" -> 
       "CreateEulerEq_20230610-VPAZX0", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 1], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffWcAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 2], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffPdAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 3], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffBondAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 4], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
       "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[False], 
       "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
       "AbsoluteTime" -> 3.8954314798776097`*^9, "AbsoluteTimeUsed" -> 
       0.000076`2.031328590112785, "CPUTimeUsed" -> 0.00007700000000010476, 
       "MemoryUsed" -> 7400|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"7439833848682234939", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-CRU3E0\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-CRU3E0\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-CRU3E0"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
           GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-CRU3E0\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-CRU3E0\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-CRU3E0"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}]}],
                     "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}]}],
                     "}"}], "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 7439833848682234939, "TestID" -> 
       "CreateEulerEq_20230610-CRU3E0", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`j], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #, True], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
       HoldForm[True], "ActualOutput" -> HoldForm[False], "ExpectedMessages" -> 
       HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
       3.8954314798778877`*^9, "AbsoluteTimeUsed" -> 
       0.000031`1.6418766916662664, "CPUTimeUsed" -> 0.000029999999999752447`,
        "MemoryUsed" -> 3056|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"8921945106589869628", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-2NVH3P\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-2NVH3P\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-2NVH3P"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-2NVH3P\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-2NVH3P\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-2NVH3P"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1", ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}]}], "}"}], 
                    "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1", ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}]}], "}"}], 
                    "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    
                    Flatten[{Map[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`j], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], #, True]& , 
                    ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 8921945106589869628, "TestID" -> 
       "CreateEulerEq_20230610-2NVH3P", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> HoldForm[
         Apply[And, 
          
          Flatten[{
           Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`j], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #, True]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], #, True]& , 
              ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
       HoldForm[True], "ActualOutput" -> HoldForm[False], "ExpectedMessages" -> 
       HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
       3.8954314798781376`*^9, "AbsoluteTimeUsed" -> 
       0.000039`1.7415796048584933, "CPUTimeUsed" -> 0.00003799999999998249, 
       "MemoryUsed" -> 2928|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"7629573984396969170", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-AVEZU6\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-AVEZU6\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-AVEZU6"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-AVEZU6\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-AVEZU6\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-AVEZU6"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], "}"}], 
                    "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], "}"}], 
                    "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 7629573984396969170, "TestID" -> 
       "CreateEulerEq_20230610-AVEZU6", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`j], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #, True]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
       HoldForm[True], "ActualOutput" -> HoldForm[False], "ExpectedMessages" -> 
       HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
       3.8954314798783927`*^9, "AbsoluteTimeUsed" -> 
       0.00006`1.9286662482156374, "CPUTimeUsed" -> 0.00005999999999994898, 
       "MemoryUsed" -> 3160|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"1601878777295622223", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-GHU9ZO\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-GHU9ZO\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-GHU9ZO"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-GHU9ZO\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-GHU9ZO\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-GHU9ZO"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    
                    RowBox[{"{", 
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
\"", "}"}], "===", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}]}], 
                    "}"}], "]"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    
                    RowBox[{"{", 
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
\"", "}"}], "===", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}]}], 
                    "}"}], "]"}], "]"}]}], "\"Copy to clipboard.\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    Unevaluated[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
                    DeleteDuplicates[
                    Flatten[{
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                    Span[1, All], 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Expected messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> RowBox[{"{", "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", "}"}], "\"Copy to clipboard.\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{}]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], Background -> 
                    GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"], ",", 
                    RowBox[{"Context", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", "FernandoDuarte`LongRunRisk`Models",
                     "]"}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"Context", "::", "ssle"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[Context, "ssle"], 
                    HoldForm[
                    Context[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
                    HoldForm[1]]], 
                    HoldForm[
                    Message[
                    MessageName[Context, "ssle"], 
                    HoldForm[
                    Context[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
                    HoldForm[1]]], 
                    HoldForm[
                    Message[
                    MessageName[Context, "ssle"], 
                    HoldForm[
                    Context[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
                    HoldForm[1]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[Context, "ssle"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 1601878777295622223, "TestID" -> 
       "CreateEulerEq_20230610-GHU9ZO", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> 
       HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
         DeleteDuplicates[
           Flatten[{
             Map[Context[
               Evaluate[#]]& , 
              Flatten[
               Map[Part[
                 Flatten[
                  Rest[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                 Span[1, All], 0]& , 
                ComputationalEngine`CreateEulerEq`mods]]], 
             Map[Context[
               Evaluate[#]]& , 
              Flatten[
               Map[Part[
                 Flatten[
                  Rest[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                 Span[1, All], 0, 0]& , 
                ComputationalEngine`CreateEulerEq`mods]]], 
             Map[Context[
               Evaluate[#]]& , 
              Flatten[
               Map[Part[
                 Flatten[
                  Rest[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                 Span[1, All], 0, 0]& , 
                ComputationalEngine`CreateEulerEq`mods]]], 
             Map[Context[
               Evaluate[#]]& , 
              Flatten[
               Map[Part[
                 Flatten[
                  Rest[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                 Span[1, All], 0, 0]& , 
                ComputationalEngine`CreateEulerEq`mods]]]}]]], 
       "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[False], 
       "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[Context, "ssle"], 
           HoldForm[
            Context[
             
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
           HoldForm[1]]], 
         HoldForm[
          Message[
           MessageName[Context, "ssle"], 
           HoldForm[
            Context[
             
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
           HoldForm[1]]], 
         HoldForm[
          Message[
           MessageName[Context, "ssle"], 
           HoldForm[
            Context[
             
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[FernandoDuarte`LongRunRisk`Models]]], 
           HoldForm[1]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[Context, "ssle"]]]]}, "AbsoluteTime" -> 
       3.8954314798786507`*^9, "AbsoluteTimeUsed" -> 
       0.029127`4.6148107536391985, "CPUTimeUsed" -> 0.029137999999999664`, 
       "MemoryUsed" -> 5704|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"7483955374294693622", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestResultObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-T9CC4Q\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-T9CC4Q\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-T9CC4Q"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230610-T9CC4Q\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230610-T9CC4Q\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230610-T9CC4Q"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", ",", 
                    "ComputationalEngine`CreateEulerEq`e1", ",", 
                    "ComputationalEngine`CreateEulerEq`e2", ",", 
                    "ComputationalEngine`CreateEulerEq`e3", ",", 
                    "ComputationalEngine`CreateEulerEq`e0p", ",", 
                    "ComputationalEngine`CreateEulerEq`e1p", ",", 
                    "ComputationalEngine`CreateEulerEq`e2p", ",", 
                    "ComputationalEngine`CreateEulerEq`e3p"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`model"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model", ",", "True"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Normal", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"parameters\"", "]"}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "\[Rule]", "4"}], "]"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e0p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e1p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e2p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e3p"}]}], "}"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"And", "@@", 
                    RowBox[{"BooleanQ", "/@", 
                    RowBox[{"Flatten", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`modBY", "]"}], 
                    "]"}]}]}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", ",", 
                    "ComputationalEngine`CreateEulerEq`e1", ",", 
                    "ComputationalEngine`CreateEulerEq`e2", ",", 
                    "ComputationalEngine`CreateEulerEq`e3", ",", 
                    "ComputationalEngine`CreateEulerEq`e0p", ",", 
                    "ComputationalEngine`CreateEulerEq`e1p", ",", 
                    "ComputationalEngine`CreateEulerEq`e2p", ",", 
                    "ComputationalEngine`CreateEulerEq`e3p"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`model"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model", ",", "True"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Normal", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"parameters\"", "]"}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "\[Rule]", "4"}], "]"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e0p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e1p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e2p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e3p"}]}], "}"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"And", "@@", 
                    RowBox[{"BooleanQ", "/@", 
                    RowBox[{"Flatten", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`modBY", "]"}], 
                    "]"}]}]}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[ComputationalEngine`CreateEulerEq`checkBoolean[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := Module[{
                    ComputationalEngine`CreateEulerEq`e0, 
                    ComputationalEngine`CreateEulerEq`e1, 
                    ComputationalEngine`CreateEulerEq`e2, 
                    ComputationalEngine`CreateEulerEq`e3, 
                    ComputationalEngine`CreateEulerEq`e0p, 
                    ComputationalEngine`CreateEulerEq`e1p, 
                    ComputationalEngine`CreateEulerEq`e2p, 
                    ComputationalEngine`CreateEulerEq`e3p}, 
                    ComputationalEngine`CreateEulerEq`e0 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e1 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 1], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e2 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e3 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`model, True]; 
                    ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                    Normal[
                    ComputationalEngine`CreateEulerEq`model["parameters"]], 
                    Thread[
                    Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                    4}]; ComputationalEngine`CreateEulerEq`e1p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd[
                    Blank[]] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    
                    Blank[]] -> 4}]; 
                    ComputationalEngine`CreateEulerEq`e2p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
                    ComputationalEngine`CreateEulerEq`e3p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                    ComputationalEngine`CreateEulerEq`e0p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                    ComputationalEngine`CreateEulerEq`e1p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                    ComputationalEngine`CreateEulerEq`e2p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                    ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
                    Map[BooleanQ, 
                    Flatten[
                    ComputationalEngine`CreateEulerEq`checkBoolean[
                    ComputationalEngine`CreateEulerEq`modBY]]]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Expected messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> RowBox[{"{", "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", "}"}], "\"Copy to clipboard.\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{}]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], Background -> 
                    GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "[", "\"parameters\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"FernandoDuarte`LongRunRisk`Models", "[", 
                    "\"BY\"", "]"}], "\[Rule]", "4"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
                    FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                    4}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
                    FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                    4, FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd[
                    Blank[]] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    
                    Blank[]] -> 4}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
                    FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                    4, FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceAll, "reps"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestResultObject[<|
      "TestKey" -> 7483955374294693622, "TestID" -> 
       "CreateEulerEq_20230610-T9CC4Q", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
       SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
       DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
       "Outcome" -> "Failure", "Input" -> 
       HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := 
          Module[{ComputationalEngine`CreateEulerEq`e0, 
             ComputationalEngine`CreateEulerEq`e1, 
             ComputationalEngine`CreateEulerEq`e2, 
             ComputationalEngine`CreateEulerEq`e3, 
             ComputationalEngine`CreateEulerEq`e0p, 
             ComputationalEngine`CreateEulerEq`e1p, 
             ComputationalEngine`CreateEulerEq`e2p, 
             ComputationalEngine`CreateEulerEq`e3p}, 
            ComputationalEngine`CreateEulerEq`e0 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e1 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 1], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e2 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e3 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`model, True]; 
            ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                Normal[
                 ComputationalEngine`CreateEulerEq`model["parameters"]], 
                Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                4}]; ComputationalEngine`CreateEulerEq`e1p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                  Blank[]] -> 4, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                  Blank[]] -> 4}]; 
            ComputationalEngine`CreateEulerEq`e2p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                  Pattern[ComputationalEngine`CreateEulerEq`m, 
                   Blank[]]] -> 4}]; 
            ComputationalEngine`CreateEulerEq`e3p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                  Pattern[ComputationalEngine`CreateEulerEq`m, 
                   Blank[]]] -> 4}]; {
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e0, 1], 
               ComputationalEngine`CreateEulerEq`e0p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e1, 1], 
               ComputationalEngine`CreateEulerEq`e1p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e2, 1], 
               ComputationalEngine`CreateEulerEq`e2p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e3, 1], 
               ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
           Map[BooleanQ, 
            Flatten[
             ComputationalEngine`CreateEulerEq`checkBoolean[
             ComputationalEngine`CreateEulerEq`modBY]]]]], "ExpectedOutput" -> 
       HoldForm[True], "ActualOutput" -> HoldForm[False], "ExpectedMessages" -> 
       HoldForm[{}], "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
             FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
             4}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
             FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
               Blank[]] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
               Blank[]] -> 4}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             FernandoDuarte`LongRunRisk`Models["BY"]["parameters"], 
             FernandoDuarte`LongRunRisk`Models["BY"] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTime" -> 
       3.8954314799080467`*^9, "AbsoluteTimeUsed" -> 
       0.0265240000000000001`4.574154017071965, "CPUTimeUsed" -> 
       0.026533000000000584`, "MemoryUsed" -> 12536|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.895431492563198*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"361026cd-6753-488f-bd2f-09b604f3a36f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}]], "Input",
 CellChangeTimes->{3.891216973918013*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"72b3648a-0cee-4dc9-be71-a2ec78ccaeb6"],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.895422591422832*^9, 3.89542259294866*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"281bd614-8e68-4b51-a25c-d118be0d8280"],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<AllTestsSucceeded\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.891244270667821*^9, 3.8912442806861467`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"a6c5e524-ea19-4388-b400-11e7955f8ea5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ex", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ExpectedOutput\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ac", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ActualOutput\>\"", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ex", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"ex", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
  "TableForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ac", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ex", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
   "TableForm"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ex", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}], "===", 
    RowBox[{"ac", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"ex", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8911892423610697`*^9, 3.891189408745401*^9}, {
  3.891189440317423*^9, 3.891189493958919*^9}, {3.8911896616276073`*^9, 
  3.891189661921062*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"76cb4ed9-01ec-476a-a9e9-6b94634d9568"],

Cell[BoxData[{
 RowBox[{"ex", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ExpectedMessages\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ac", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ActualMessages\>\"", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ex", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"ex", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
  "TableForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ac", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ex", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
   "TableForm"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ex", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}], "===", 
    RowBox[{"ac", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"ex", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8912473352654257`*^9, 3.8912473460524397`*^9}, {
  3.891247384832871*^9, 3.8912474129725733`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3618d278-2bdc-4117-943a-ec2c4120cbb3"],

Cell[BoxData[{
 RowBox[{"tr", "[", "\"\<Properties\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<Properties\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.891247311071122*^9, 3.89124731367701*^9}, {
  3.891247369997828*^9, 3.8912473769236097`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"6969c719-aae4-437c-b901-af76b3071aca"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"keyRename", ",", "models"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"models", "=", " ", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<key1\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<key2\>\"", "->", "B"}]}], " ", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keyRename", "[", 
   RowBox[{"a_Association", ",", " ", 
    RowBox[{"HoldPattern", "[", 
     RowBox[{"key_", " ", "->", " ", "key_"}], "]"}]}], "]"}], " ", ":=", " ",
   "a"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key1\>\"", ":>", "\"\<key1\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key2\>\"", "->", "\"\<key2\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key1\>\"", "->", "\"\<key2\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.891252513394017*^9, 3.8912526675960073`*^9}, {
  3.891252750079225*^9, 3.89125279098596*^9}},
 CellLabel->"",ExpressionUUID->"145c4020-2b7b-424d-be26-24a62efb7eb2"],

Cell[BoxData["HoldPattern"], "Input",
 CellChangeTimes->{{3.8912526951004057`*^9, 
  3.891252696617908*^9}},ExpressionUUID->"5ee11ed9-1b48-4a05-b95e-\
bf6433e60297"],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"7eacb08d-7f5b-464e-af3c-e1f85d1ec65e"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ex", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}], "[", 
       "5429993755576444103", "]"}], ")"}], "[", "\"\<ExpectedOutput\>\"", 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"ac", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}], "[", 
       "5429993755576444103", "]"}], ")"}], "[", "\"\<ActualOutput\>\"", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{
  3.891312835745772*^9, {3.891312920186902*^9, 3.8913129515677156`*^9}, {
   3.891313033820343*^9, 3.891313036755728*^9}, 
   3.891313069029059*^9},ExpressionUUID->"86c4bf81-c4ec-4e81-9ee4-\
eb2a9bac87a8"]
},
WindowSize->{1668, 942},
WindowMargins->{{-1777, Automatic}, {Automatic, 116}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6603c207-289c-456f-bd11-6175ead60d45"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 199, 3, 37, "Input",ExpressionUUID->"4a4e2e24-fcb6-4e5b-a6de-9a788f0ea471"],
Cell[CellGroupData[{
Cell[782, 27, 1575, 30, 116, "Input",ExpressionUUID->"b9f2d453-3e98-41bc-b67a-28793e860800"],
Cell[2360, 59, 242, 3, 42, "Output",ExpressionUUID->"768c9ed2-c22d-465d-82a1-c12b2fdec233"],
Cell[2605, 64, 265, 4, 42, "Output",ExpressionUUID->"138b1797-5246-49d0-8a82-8ee6c5c4ea10"],
Cell[2873, 70, 1533, 28, 329, "Output",ExpressionUUID->"d502a82a-b552-4867-ae81-13b0a65dbbae"],
Cell[4409, 100, 290, 5, 42, "Output",ExpressionUUID->"2de1e6fb-9a15-4a5f-a7cc-8e48f907b40c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4736, 110, 1500, 38, 220, "Input",ExpressionUUID->"1153a7e3-a4a9-44e1-a1d1-2c85ee2d32e0"],
Cell[6239, 150, 35154, 645, 76, "Output",ExpressionUUID->"ce1c5af8-134d-45e4-a6eb-b3edf484c365"],
Cell[41396, 797, 24728, 474, 76, "Output",ExpressionUUID->"4f0d2740-c3a2-4b26-a428-68f85f92fb93"],
Cell[66127, 1273, 22336, 462, 76, "Output",ExpressionUUID->"c564145a-127f-4169-9b3b-c2f4fc25c0b3"],
Cell[88466, 1737, 21681, 430, 76, "Output",ExpressionUUID->"cc423dde-aea4-43f2-89b4-d9f81a020ee0"],
Cell[110150, 2169, 174684, 3259, 76, "Output",ExpressionUUID->"25aa5353-55f0-4c9e-95c1-e6d526769eed"]
}, Open  ]],
Cell[284849, 5431, 290, 7, 37, "Input",ExpressionUUID->"e330a50a-d51d-4861-9e79-8ecbadd6a684"],
Cell[CellGroupData[{
Cell[285164, 5442, 272, 7, 37, "Input",ExpressionUUID->"5a7b1be5-0bb0-47d8-8966-c6eaeeeabe17"],
Cell[285439, 5451, 43263, 868, 189, "Output",ExpressionUUID->"c0ed6b4a-45c7-49b1-a374-e9d2ad5c685a"]
}, Open  ]],
Cell[328717, 6322, 454, 8, 90, "Input",ExpressionUUID->"84c78bb2-8e0f-4b6f-ae00-0d2abae7a844"],
Cell[329174, 6332, 461, 11, 64, "Input",ExpressionUUID->"5121ffd6-f567-4da8-bdc7-b02da924ab5e"],
Cell[329638, 6345, 271, 5, 64, "Input",ExpressionUUID->"7f4ea337-0076-4787-aac5-76cf6f1f79da"],
Cell[329912, 6352, 314, 8, 37, "Input",ExpressionUUID->"e19bde9e-a625-488e-9cf4-b74f7c4fcb22"],
Cell[330229, 6362, 1261, 26, 220, "Input",ExpressionUUID->"6d80ab2b-2576-4050-b521-9cae711fed04"],
Cell[331493, 6390, 289, 7, 37, "Input",ExpressionUUID->"2ebef7d6-d331-419f-a64e-ead93d146e3f"],
Cell[331785, 6399, 174, 2, 37, "Input",ExpressionUUID->"cd632827-fda3-49db-ba6c-c16c6cd48a28"],
Cell[331962, 6403, 314, 8, 37, "Input",ExpressionUUID->"d38c1461-d4f4-423b-8b82-09b784289135"],
Cell[332279, 6413, 155, 3, 37, "Input",ExpressionUUID->"74fa26f9-abc6-4219-a123-f978597737ff"],
Cell[332437, 6418, 295, 5, 37, "Input",ExpressionUUID->"8a9c9e85-8cbf-4e1c-870c-0a5ec229dd8b"],
Cell[332735, 6425, 177, 3, 37, "Input",ExpressionUUID->"89327c75-70af-4b75-adfd-86608c4fe806"],
Cell[CellGroupData[{
Cell[332937, 6432, 163, 2, 37, "Input",ExpressionUUID->"f1d84011-dcfc-4f83-98b5-d531ed681557"],
Cell[333103, 6436, 220340, 4595, 1383, "Output",ExpressionUUID->"361026cd-6753-488f-bd2f-09b604f3a36f"]
}, Open  ]],
Cell[553458, 11034, 206, 3, 37, "Input",ExpressionUUID->"72b3648a-0cee-4dc9-be71-a2ec78ccaeb6"],
Cell[553667, 11039, 219, 3, 37, "Input",ExpressionUUID->"281bd614-8e68-4b51-a25c-d118be0d8280"],
Cell[553889, 11044, 225, 3, 37, "Input",ExpressionUUID->"a6c5e524-ea19-4388-b400-11e7955f8ea5"],
Cell[554117, 11049, 2104, 62, 194, "Input",ExpressionUUID->"76cb4ed9-01ec-476a-a9e9-6b94634d9568"],
Cell[556224, 11113, 2013, 59, 194, "Input",ExpressionUUID->"3618d278-2bdc-4117-943a-ec2c4120cbb3"],
Cell[558240, 11174, 481, 10, 64, "Input",ExpressionUUID->"6969c719-aae4-437c-b901-af76b3071aca"],
Cell[558724, 11186, 1143, 29, 168, "Input",ExpressionUUID->"145c4020-2b7b-424d-be26-24a62efb7eb2"],
Cell[559870, 11217, 165, 3, 37, "Input",ExpressionUUID->"5ee11ed9-1b48-4a05-b95e-bf6433e60297"],
Cell[560038, 11222, 155, 2, 37, "Input",ExpressionUUID->"7eacb08d-7f5b-464e-af3c-e1f85d1ec65e"],
Cell[560196, 11226, 769, 21, 90, "Input",ExpressionUUID->"86c4bf81-c4ec-4e81-9ee4-eb2a9bac87a8"]
}
]
*)

