(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    894458,      18173]
NotebookOptionsPosition[    889392,      18093]
NotebookOutlinePosition[    889862,      18111]
CellTagsIndexPosition[    889819,      18108]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8899684458207283`*^9, 3.889968446659306*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"4a4e2e24-fcb6-4e5b-a6de-9a788f0ea471"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"pacletBaseDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletBaseDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testFileNames", " ", "=", " ", 
  RowBox[{"FileNames", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"pacletBaseDir", ",", "\"\<Tests\>\"", ",", "\"\<*.wlt\>\""}], 
     "}"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8894111683493032`*^9, 3.8894112087815933`*^9}, {
   3.889411242053163*^9, 3.88941126569147*^9}, {3.889603572176957*^9, 
   3.88960360623313*^9}, {3.88960408745549*^9, 3.889604092938833*^9}, {
   3.889969691249559*^9, 3.88996969252437*^9}, {3.889970717286119*^9, 
   3.889970718153995*^9}, {3.889971173708085*^9, 3.889971181843957*^9}, {
   3.889971229070705*^9, 3.8899712293375397`*^9}, {3.8899714432222357`*^9, 
   3.8899714500808268`*^9}, 3.890495920897338*^9, {3.890495957177495*^9, 
   3.8904959657175426`*^9}, {3.890496000595605*^9, 3.890496010113224*^9}, {
   3.890496054450512*^9, 3.890496056417246*^9}, {3.890555640296084*^9, 
   3.8905556405146093`*^9}, {3.8905942747634373`*^9, 3.890594276210952*^9}, {
   3.891158085135849*^9, 3.891158137208028*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b9f2d453-3e98-41bc-b67a-28793e860800"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.89550762830015*^9, 
  3.901503484274679*^9, 3.901526869198831*^9, 3.9015274972203283`*^9, 
  3.901527715779168*^9, 3.9015279455230293`*^9, 3.901528418997151*^9, 
  3.901528486756774*^9, 3.901529120965581*^9, 3.901529232099811*^9, 
  3.90152945797661*^9, 3.901548903953965*^9, 3.9015932966505747`*^9, 
  3.901593955844013*^9, 3.9026741931972923`*^9, 3.9033163721335287`*^9, 
  3.903341572191222*^9, 3.903356233973134*^9, 3.90335661412578*^9, 
  3.905081216330208*^9, 3.90508219684044*^9, 3.905095537960334*^9, 
  3.905096100849764*^9, 3.9050966578385*^9, 3.905097113256054*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"0947851e-f791-4f37-8496-d8048c62195a"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.89550762830015*^9, 
  3.901503484274679*^9, 3.901526869198831*^9, 3.9015274972203283`*^9, 
  3.901527715779168*^9, 3.9015279455230293`*^9, 3.901528418997151*^9, 
  3.901528486756774*^9, 3.901529120965581*^9, 3.901529232099811*^9, 
  3.90152945797661*^9, 3.901548903953965*^9, 3.9015932966505747`*^9, 
  3.901593955844013*^9, 3.9026741931972923`*^9, 3.9033163721335287`*^9, 
  3.903341572191222*^9, 3.903356233973134*^9, 3.90335661412578*^9, 
  3.905081216330208*^9, 3.90508219684044*^9, 3.905095537960334*^9, 
  3.905096100849764*^9, 3.9050966578385*^9, 3.905097113290285*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"e1785497-7ae2-44a8-ab89-bd75a9e6db95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\"\>\
", ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\"\
\>", ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/PacletizeResources.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/TimeAggregation.wlt\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.89550762830015*^9, 
  3.901503484274679*^9, 3.901526869198831*^9, 3.9015274972203283`*^9, 
  3.901527715779168*^9, 3.9015279455230293`*^9, 3.901528418997151*^9, 
  3.901528486756774*^9, 3.901529120965581*^9, 3.901529232099811*^9, 
  3.90152945797661*^9, 3.901548903953965*^9, 3.9015932966505747`*^9, 
  3.901593955844013*^9, 3.9026741931972923`*^9, 3.9033163721335287`*^9, 
  3.903341572191222*^9, 3.903356233973134*^9, 3.90335661412578*^9, 
  3.905081216330208*^9, 3.90508219684044*^9, 3.905095537960334*^9, 
  3.905096100849764*^9, 3.9050966578385*^9, 3.905097113291176*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"d0b6aaea-87b3-4ce3-b6e9-454d93eb1704"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.895431205532568*^9, 3.89550762830015*^9, 
  3.901503484274679*^9, 3.901526869198831*^9, 3.9015274972203283`*^9, 
  3.901527715779168*^9, 3.9015279455230293`*^9, 3.901528418997151*^9, 
  3.901528486756774*^9, 3.901529120965581*^9, 3.901529232099811*^9, 
  3.90152945797661*^9, 3.901548903953965*^9, 3.9015932966505747`*^9, 
  3.901593955844013*^9, 3.9026741931972923`*^9, 3.9033163721335287`*^9, 
  3.903341572191222*^9, 3.903356233973134*^9, 3.90335661412578*^9, 
  3.905081216330208*^9, 3.90508219684044*^9, 3.905095537960334*^9, 
  3.905096100849764*^9, 3.9050966578385*^9, 3.905097113292179*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"95df616f-c613-4d69-8aff-2df5b4b17385"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\>\"", "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"a02079b6-dc93-4662-a435-00398ad5c39a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Catalog.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Catalog.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["16", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.0631799999999999999`3.746974636745197", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: Catalog.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     9016306824257130648 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658117714*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "1ed8c32a-1de0-46ea-82c9-85dbeee0b6fc", "TestID" -> 
         "Catalog_20230818-EZ0IPS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "4b07c380-9e35-48ab-8f69-51c8bda45278", "Input" -> 
         HoldForm[Get["FernandoDuarte`LongRunRisk`Model`Catalog`"]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.056033`4.898958872995738, "CPUTimeUsed" -> 0.05592200000000025, 
         "MemoryUsed" -> 7380240, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 3287600567213742336 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658174178*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a4e041bb-fc32-467c-bdcf-2c9e05925df1", "TestID" -> 
         "Catalog_20230818-9IB3BO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "ee35b983-dd20-4e20-bff8-05ab66cc5c75", "Input" -> HoldForm[
           
           MemberQ[$ContextPath, 
            "FernandoDuarte`LongRunRisk`Model`Catalog`"]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00003`1.627636252551652, "CPUTimeUsed" -> 0.000029999999999752447`,
          "MemoryUsed" -> 3104, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 7985577172406590441 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658174479*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "6eff493f-bc32-4a5d-aa60-8a5d2bc4d863", "TestID" -> 
         "Catalog_20230818-Q9619E", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "30416565-ab7d-4e0a-809f-e9decb1ce26f", "Input" -> HoldForm[
           Apply[And, 
            Map[StringQ, 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000024`1.530726239543596, "CPUTimeUsed" -> 
         0.000024000000000246047`, "MemoryUsed" -> 2560, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 6406497884369768325 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658174738*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "764cac5f-b4f5-4956-af6d-c00ef4441fa7", "TestID" -> 
         "Catalog_20230818-J79VTR", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "c2fd3d93-2ee2-49fd-a86f-289b53370739", "Input" -> HoldForm[
           Apply[And, 
            Map[StringQ, 
             Flatten[
              Map[{
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["name"], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                "shortname"], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["bibRef"], 
                
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#]["desc"]}& , 
               Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000058`1.9139429913949293, "CPUTimeUsed" -> 
         0.000059999999999504894`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 1312590946194642195 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658175015*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "c2be714e-a2a8-4af1-9d85-a921eea4168f", "TestID" -> 
         "Catalog_20230818-TYBNVE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "7e724ec1-c726-4d11-8b20-67ccafd99abd", "Input" -> HoldForm[
           Apply[And, 
            Map[NumberQ, 
             Flatten[
              Map[ReplaceRepeated[
                Part[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "parameters"], 
                 Span[1, All], 2], 
                FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                "parameters"]]& , 
               Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.002811`3.5993758434394323, "CPUTimeUsed" -> 0.0028130000000001765`,
          "MemoryUsed" -> 190600, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 4460245845149791628 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658178197*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "5744cd48-a147-488e-a680-2fc154b97657", "TestID" -> 
         "Catalog_20230818-O92FQK", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "d9bb2e2a-67d3-43eb-a9b2-6684cb19a9aa", "Input" -> HoldForm[
           FernandoDuarte`LongRunRisk`Model`Catalog`models["BY"][
           "stateVars"]], "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[{
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`x[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t], 
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sx[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t]}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000026`1.5654883458028073, "CPUTimeUsed" -> 
         0.000026000000000081513`, "MemoryUsed" -> 2688, "ExpectedOutput" -> 
         HoldForm[{
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`x[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t], 
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sx[
            FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`t]}], 
         "Outcome" -> "Success"|>], 3074540162755188260 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658178483*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "24ad60cd-ae79-498b-b782-ae16af4f2786", "TestID" -> 
         "Catalog_20230818-JMDSLH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "5673d2d8-89be-448f-a9b4-023b02ad3fc4", "Input" -> HoldForm[
           Apply[And, 
            Map[MemberQ[
              Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models], #]& , {
             "BY", "BKY"}]]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000026`1.5654883458028093, "CPUTimeUsed" -> 
         0.000025999999999637424`, "MemoryUsed" -> 2800, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 1059805591890613639 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966581787367`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "5115e33d-7d82-430e-afb1-05ca0d6bc16a", "TestID" -> 
         "Catalog_20230818-378O7D", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "95c92aed-a92d-46e7-816b-e2384ce79877", "Input" -> HoldForm[
           Apply[And, 
            Map[AssociationQ, 
             Flatten[{
               Head[FernandoDuarte`LongRunRisk`Model`Catalog`models], 
               Map[Head[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#]]& , 
                Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]}]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[False], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000034`1.6819939148742462, "CPUTimeUsed" -> 0.00003299999999972769,
          "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[False], 
         "Outcome" -> "Success"|>], 1974613805097214322 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966581790137`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "af819a86-08fe-4a7f-9c94-0985db2abab1", "TestID" -> 
         "Catalog_20230818-S2LCS4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "c5b24775-5be4-4a77-9036-bb0a23963d94", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              
              Map[# === 
               "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                    Map[
                    StringDrop[#, -2]& , 
                    FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                    SymbolName[#]]& ][
                   BlankSequence[]] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000656`2.9674188372076498, "CPUTimeUsed" -> 0.0006550000000000722, 
         "MemoryUsed" -> 5840, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 1799576689517660162 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658179901*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "d107728f-08b2-46ca-9549-18554214dc1a", "TestID" -> 
         "Catalog_20230818-YAL7TY", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "8845465c-d5ba-4560-8b30-3a0f537aa1db", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "eps"]& ][
                   BlankSequence[]][
                   BlankSequence[]] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000099`2.146150192429542, "CPUTimeUsed" -> 0.00010000000000021103`,
          "MemoryUsed" -> 2664, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3607830716473873665 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658180222*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "de08c061-a735-44bf-ac05-6f889c9f1b3d", "TestID" -> 
         "Catalog_20230818-O8TATH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "dfb1608b-ef30-4ef7-9f26-a78fe9087d83", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "parameters"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                   FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                    SymbolName[#]]& ] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.001667`3.3724505976599954, "CPUTimeUsed" -> 0.0016449999999998965`,
          "MemoryUsed" -> 9872, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3438001069945732111 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658182243*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "27ad6e9d-1e3a-4baf-9423-e972f4b29e42", "TestID" -> 
         "Catalog_20230818-WHJ85T", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "d3911756-46f5-4fe0-abfb-90e59f961918", "Input" -> HoldForm[
           Apply[And, 
            Map[Apply[And, 
              Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                 "stateVars"], PatternTest[
                   Pattern[Catalog`var, 
                    Blank[Symbol]], MemberQ[
                   FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                    SymbolName[#]]& ] :> Catalog`var, Infinity]]]]& , 
             Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000254`2.5553487144519296, "CPUTimeUsed" -> 0.0002539999999995324, 
         "MemoryUsed" -> 2664, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 6121647870686573561 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658182776*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "53be78af-699f-4bcb-af52-4395b6d81dde", "TestID" -> 
         "Catalog_20230818-8QV3HS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "ed0ca663-d52d-4d19-9c0a-dcf3ac26cec9", "Input" -> HoldForm[
           Apply[And, 
            Map[MatchQ[{}, #]& , 
             Map[Cases[
               FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
               "stateVars"], PatternTest[
                 Pattern[Catalog`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> Catalog`var, Infinity]& , 
              Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.001262`3.2515743527401075, "CPUTimeUsed" -> 0.0012620000000000964`,
          "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2600016409128563308 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966581842637`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b336dc9b-1960-4db9-9c25-b3bdc620703d", "TestID" -> 
         "Catalog_20230818-BV7QIC", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "047f7649-7313-46dc-982b-3b621141e93e", "Input" -> HoldForm[
           Apply[And, {
             AllTrue[
             FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo, 
              AssociationQ], 
             AllTrue[
              Map[
              FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo[#]& , 
               Keys[
               FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo]], 
              AssociationQ]}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000027`1.5818787619909789, "CPUTimeUsed" -> 
         0.00002799999999947289, "MemoryUsed" -> 2560, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 1776924035279079096 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658184498*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "e0b029f6-60f5-4dbb-994f-904c42df0205", "TestID" -> 
         "Catalog_20230818-SBMA65", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "ecc5cad0-0aba-4263-914e-b1633b5e5802", "Input" -> HoldForm[
           Apply[And, {
             SubsetQ[
              Keys[FernandoDuarte`LongRunRisk`Model`Catalog`models], 
              Keys[
              FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000069`1.9893640885692467, "CPUTimeUsed" -> 0.0000700000000000145, 
         "MemoryUsed" -> 6576, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3046980664372408144 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658184801*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "58a00aa6-b630-4980-99b5-49393a57b7d4", "TestID" -> 
         "Catalog_20230818-HONONJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "EvaluationID" -> 
         "68da747f-6e1f-43ca-8f15-9ca551766071", "Input" -> HoldForm[
           Apply[And, {
             And[
              VectorQ[
               FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo[
                "BY"["initialGuess"]["Ewc"]], NumberQ], Dimensions[
                FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo[
                 "BY"["initialGuess"]["Ewc"]]] == {1}], 
             Apply[And, 
              Map[Implies[
                KeyExistsQ[
                 FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo[#], 
                 "initialGuess"], Dimensions[
                  FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo[
                   #["initialGuess"]["Epd"]]] == {
                  Count[
                   FernandoDuarte`LongRunRisk`Model`Catalog`models[#][
                   "parameters"], 
                   Catalog`mud[
                    Blank[Integer]], Infinity], 1}]& , 
               Keys[
               FernandoDuarte`LongRunRisk`Model`Catalog`modelsExtraInfo]]]}]],
          "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[False], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000104`2.167548337130772, "CPUTimeUsed" -> 0.00011699999999992272`,
          "MemoryUsed" -> 3016, "ExpectedOutput" -> HoldForm[False], 
         "Outcome" -> "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {9016306824257130648, 3287600567213742336, 
     7985577172406590441, 6406497884369768325, 1312590946194642195, 
     4460245845149791628, 3074540162755188260, 1059805591890613639, 
     1974613805097214322, 1799576689517660162, 3607830716473873665, 
     3438001069945732111, 6121647870686573561, 2600016409128563308, 
     1776924035279079096, 3046980664372408144}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9015034863347607`*^9, 3.901526870423787*^9, 
  3.901527498993659*^9, 3.901527718965764*^9, 3.901527948025434*^9, 
  3.9015284908329897`*^9, 3.9015291224158688`*^9, 3.901529233976678*^9, 
  3.901593299637603*^9, 3.902674195149075*^9, 3.9033164182451487`*^9, 
  3.903341573898316*^9, 3.903356235662754*^9, 3.903356614684965*^9, 
  3.905081216905744*^9, 3.9050966583845882`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"9503a873-c2c3-4864-9ef9-62d315a94bcb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.895362797280583*^9, 3.895362797460813*^9}, {
  3.895362883185739*^9, 3.8953628833320417`*^9}, {3.895362914081757*^9, 
  3.895362914242923*^9}, {3.895363069271865*^9, 3.895363069433126*^9}, {
  3.895364934971695*^9, 3.89536493511489*^9}, {3.8954190984559937`*^9, 
  3.895419107713436*^9}, {3.895431466385002*^9, 3.8954314730424356`*^9}, {
  3.901503471271722*^9, 3.901503477273381*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"1153a7e3-a4a9-44e1-a1d1-2c85ee2d32e0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Shocks.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: Shocks.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.082249`3.8351967028675586", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: Shocks.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6629149293462438129 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658696244*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "19456093-5af2-44d9-863e-71486e7975ee", "TestID" -> 
         "Shocks_20230820-TAJQBR", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "979a9eb5-6e5f-4042-91b3-438f861f2ef6", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`Shocks`"]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000034`1.6819939148742447, "CPUTimeUsed" -> 0.00003499999999956316,
          "MemoryUsed" -> 2832, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
         "Success"|>], 2578142114904232721 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658696527*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "719ffafc-0c4d-4e2f-9ea5-b96bcb9b6aea", "TestID" -> 
         "Shocks_20230820-T9VK9N", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "c06d67f0-6860-4bbd-8b55-ed429eb61bac", "Input" -> HoldForm[
           MemberQ[$ContextPath, "FernandoDuarte`LongRunRisk`Model`Shocks`"]],
          "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[True], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000019`1.429268598784821, "CPUTimeUsed" -> 
         0.000021000000000270802`, "MemoryUsed" -> 2736, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 8851131406152422541 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658696744*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "f67106c1-0adc-4c07-9d5d-f717439bbc49", "TestID" -> 
         "Shocks_20230820-5NR5FW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "40ba8ce6-7361-45dd-a967-44c339a02a91", "Input" -> HoldForm[
           Not[Names["*rulesE"] === {}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.021858`4.490125419457551, "CPUTimeUsed" -> 
         0.021844000000000197`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2021032608490247513 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90509665871899*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "1b151c5b-cf6b-4694-ba5d-a6c86255d116", "TestID" -> 
         "Shocks_20230820-B6CZF5", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "57f82ae3-6dfc-4b58-ba57-87029bcc4cb5", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
              Shocks`t, Shocks`ii], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00023`2.512242833849583, "CPUTimeUsed" -> 0.0002309999999998702, 
         "MemoryUsed" -> 4048, "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "Outcome" -> 
         "Success"|>], 2772481505847720268 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658719544*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "437e56da-f266-4494-9b27-64855e22dc9a", "TestID" -> 
         "Shocks_20230820-6R8M4G", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "46a17d05-9bc5-461e-b8f3-2d9c9ada1475", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.025176`4.551501727737156, "CPUTimeUsed" -> 0.023477999999999888`, 
         "MemoryUsed" -> 3784992, "ExpectedOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "Outcome" -> 
         "Success"|>], 6715240508132458786 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658745052*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "48cc88af-be68-4b5e-ab69-14ad900cff08", "TestID" -> 
         "Shocks_20230820-HLXJ19", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "5be2b991-0c54-4832-b95f-c86f9edd9b3e", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^3, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^3, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.002989`3.6260409128712725, "CPUTimeUsed" -> 0.0030280000000000307`,
          "MemoryUsed" -> 4096, "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "Outcome" -> 
         "Success"|>], 9086314971737384631 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966587483277`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "e69917f4-7ff7-449d-ac8a-11e050e3aaf0", "TestID" -> 
         "Shocks_20230820-1ZZAK9", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "266bc111-2af7-48f4-acbc-2d5643c570e4", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00291`3.6144079868178993, "CPUTimeUsed" -> 0.002959000000000156, 
         "MemoryUsed" -> 4096, "ExpectedOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "Outcome" -> 
         "Success"|>], 5488832781471634024 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966587515388`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "1d75f4d4-b9bb-4a84-9f5e-aba7496c5c5b", "TestID" -> 
         "Shocks_20230820-CGQ5WC", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "8d417b23-3a0a-4947-b407-b2e0cdf96580", "Input" -> HoldForm[{
            Table[
             If[Shocks`f === Shocks`g, 0, 
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t] 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`g][
                Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}, {
             Shocks`g, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}, {
             Shocks`f, {"x", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.001672`3.373751270934989, "CPUTimeUsed" -> 
         0.0016660000000001673`, "MemoryUsed" -> 6992, "ExpectedOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "Outcome" -> "Success"|>], 
      3181270778115641333 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658753503*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "882a0b2e-0411-4ba7-90d5-b2250ddc74fc", "TestID" -> 
         "Shocks_20230820-0YMJD5", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "0e2e842f-2ad5-4ac1-b3d0-dbf31c5eadea", "Input" -> HoldForm[
           Map[StringDelete[#, 
             StringExpression[
              Alternatives["FernandoDuarte", "`"], 
              BlankSequence[], "`"]]& , 
            Table[
             ToString[
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
                Shocks`t, Shocks`ii] 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dc"][Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{"taugd[1]", "taugd[i]", "taugd[j]"}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000251`2.550188719313032, "CPUTimeUsed" -> 0.000252000000000141, 
         "MemoryUsed" -> 3712, "ExpectedOutput" -> 
         HoldForm[{"taugd[1]", "taugd[i]", "taugd[j]"}], "Outcome" -> 
         "Success"|>], 3446369905349204810 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658754014*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "09d00354-fbbf-4ef3-813f-a594d4489a3e", "TestID" -> 
         "Shocks_20230820-S28EFW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "0992fd9f-2098-459c-a21b-5f3a9267e2bb", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t, Shocks`ii]^4, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.002954`3.6209254888079205, "CPUTimeUsed" -> 0.003006000000000064, 
         "MemoryUsed" -> 4096, "ExpectedOutput" -> 
         HoldForm[{{3, 3, 3, 3, 3, 3, 3, 3}, {3, 3, 3}}], "Outcome" -> 
         "Success"|>], 1081082284325510999 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658757259*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "866b22c7-5d22-4839-b4cf-0ffdfccbaf05", "TestID" -> 
         "Shocks_20230820-5AO44D", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "262d5ace-395a-4f3c-b5ec-da72891e475b", "Input" -> HoldForm[{
            Table[
             If[Shocks`f === Shocks`g, 0, 
              ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
                 Shocks`t]^2 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`g][
                Shocks`t], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}, {
             Shocks`g, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
                Shocks`t, Shocks`ii]^2 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}, {
             Shocks`f, {"x", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.019968`4.450849565834322, "CPUTimeUsed" -> 
         0.020238999999999674`, "MemoryUsed" -> 7112, "ExpectedOutput" -> 
         HoldForm[{{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
            0, 0, 0, 0, 0, 0}}, {{0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0}}}], "Outcome" -> "Success"|>], 
      5582619656427806745 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658777564*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "d44fa60f-547e-4c70-a3e1-65b31adc906b", "TestID" -> 
         "Shocks_20230820-3WWN1J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "9959b5ff-4594-4e5f-8cd3-d87e0fc9a5dc", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`t + 1], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[
                ToExpression[Shocks`f]][Shocks`t], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, {
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`t + 1, Shocks`i], 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`dd][
               Shocks`t, Shocks`i]}}]}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True, True, True, True, True, True}, {True, True}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000441`2.79495358729983, "CPUTimeUsed" -> 0.00044199999999960937`, 
         "MemoryUsed" -> 6632, "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True, True, True, True, True, True}, {True, True}}], 
         "Outcome" -> "Success"|>], 5399558039358607016 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658778294*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "545f96bb-35d9-4b61-9796-f87278655c55", "TestID" -> 
         "Shocks_20230820-2RAXFM", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "952652cf-274b-4d68-b12e-a0c578a99ac9", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f], {
               Shocks`f, {
                "x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}]}], 
            Table[ReplaceAll[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000203`2.4580110357452067, "CPUTimeUsed" -> 0.000204000000000093, 
         "MemoryUsed" -> 2752, "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "Outcome" -> "Success"|>], 
      2429712582203507715 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658778771*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "06347c6a-db95-4514-aac2-5a60847f0056", "TestID" -> 
         "Shocks_20230820-WXF9HU", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "1a966f18-5e64-42eb-91b7-293599613234", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f], {
               Shocks`f, {
                "xx", "adc", "p", "rhobar", "ssg", "ssx", "sdc", "spi"}}]}], 
            Table[ReplaceAll[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["ddd"], 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["ddd"], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000208`2.4685783327947513, "CPUTimeUsed" -> 0.0002080000000006521, 
         "MemoryUsed" -> 2752, "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "Outcome" -> "Success"|>], 
      2728870851826405419 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658779272*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a8c638e3-547a-4c05-a381-083d716d3db4", "TestID" -> 
         "Shocks_20230820-HY28GR", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "01a5fac4-842f-49bf-97b5-199c435d7448", "Input" -> HoldForm[{
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps[Shocks`f][
               Shocks`tt], {
               Shocks`f, {
                "xx", "adc", "p", "rhobar", "ssg", "ssx", "sdc", "spi"}}, {
               Shocks`tt, {
                Shocks`t + 1, Shocks`t - 1, Shocks`s, Shocks`t + 
                 Shocks`h}}]}], 
            Table[ReplaceAll[Shocks`expr, 
               FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]] === 
             Shocks`expr, {Shocks`expr, 
              Table[
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["dd"][
               Shocks`tt, Shocks`ii], {Shocks`ii, {1, Shocks`i, Shocks`j}}, {
               Shocks`tt, {
                Shocks`t + 1, Shocks`t - 1, Shocks`s, Shocks`t + 
                 Shocks`h}}]}]}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000286`2.606881030961037, "CPUTimeUsed" -> 0.00028699999999970416`,
          "MemoryUsed" -> 2752, "ExpectedOutput" -> 
         HoldForm[{{True, True, True, True, True, True, True, True}, {
            True, True, True}}], "Outcome" -> "Success"|>], 
      6730662728042911760 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966587797837`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "6b8916de-8969-4562-afca-195680f10c5d", "TestID" -> 
         "Shocks_20230820-K7QDZ3", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "6401e2f9-9dcf-4053-9ca6-ad0f4378f339", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
              NewContext`eps[Shocks`f][Shocks`t], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
              NewContext`eps["dd"][Shocks`t, Shocks`ii], 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00018`2.4057875029352975, "CPUTimeUsed" -> 0.00017999999999984695`,
          "MemoryUsed" -> 3968, "ExpectedOutput" -> 
         HoldForm[{{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0}}], "Outcome" -> 
         "Success"|>], 7901234538065514910 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658780199*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "85ceddf6-1b75-4e30-a62c-212e02d9b3d8", "TestID" -> 
         "Shocks_20230820-SL5SNR", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt", "EvaluationID" -> 
         "245da405-3cb3-41df-b31b-20b430efc6ba", "Input" -> HoldForm[{
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`Private`eps[Shocks`f][
               Shocks`t]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`f, {"x", "dc", "pi", "pibar", "sg", "sx", "sc", "sp"}}], 
            Table[
             ReplaceAll[
             FernandoDuarte`LongRunRisk`Model`Shocks`Private`eps["dd"][
               Shocks`t, Shocks`ii]^2, 
              FernandoDuarte`LongRunRisk`Model`Shocks`rulesE[Shocks`t]], {
             Shocks`ii, {1, Shocks`i, Shocks`j}}]}], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00287`3.608396894565984, "CPUTimeUsed" -> 0.0029080000000001327`, 
         "MemoryUsed" -> 4096, "ExpectedOutput" -> 
         HoldForm[{{1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1}}], "Outcome" -> 
         "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {6629149293462438129, 2578142114904232721, 
     8851131406152422541, 2021032608490247513, 2772481505847720268, 
     6715240508132458786, 9086314971737384631, 5488832781471634024, 
     3181270778115641333, 3446369905349204810, 1081082284325510999, 
     5582619656427806745, 5399558039358607016, 2429712582203507715, 
     2728870851826405419, 6730662728042911760, 7901234538065514910}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.90150348784181*^9, 3.901526871005251*^9, 
  3.901527500154902*^9, 3.9015277199371862`*^9, 3.901527949287406*^9, 
  3.9015291233916473`*^9, 3.90152923508018*^9, 3.9015933009823933`*^9, 
  3.902674196437294*^9, 3.903316420542942*^9, 3.903341575471341*^9, 
  3.903356236896036*^9, 3.903356614855048*^9, 3.905081217134901*^9, 
  3.905096658790715*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"c19a1363-8232-46c8-bdf2-52f9669d8b52"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ExogenousEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ExogenousEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.04892`3.9949034061819826", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ExogenousEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     9175254201678473366 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658802837*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "bace46ff-4445-4077-b7a3-85c310963afd", "TestID" -> 
         "ExogenousEq_20230820-PPHZ2X", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "bfa85cdf-d7ec-438b-9e91-41351b79605b", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`ExogenousEq`"]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000033`1.669028937709879, "CPUTimeUsed" -> 0.00003499999999956316, 
         "MemoryUsed" -> 2832, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
         "Success"|>], 3507920987783802623 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966588031387`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "195c9df8-1c8e-4e8e-9ce5-4ea367be0f96", "TestID" -> 
         "ExogenousEq_20230820-E03FUC", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "79baf9bf-8642-43ac-962d-8126ed5a170a", "Input" -> HoldForm[
           Not[Names["*xeq"] === {}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.022151`4.49590833492285, "CPUTimeUsed" -> 
         0.022170000000000467`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 5707219142883346028 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658825799*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "89b91054-4e6a-4a6f-99d6-7616140e6f6b", "TestID" -> 
         "ExogenousEq_20230820-JGOJKJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "78a8eb7c-2015-4d82-8037-66788c5cbcd3", "Input" -> HoldForm[
           Apply[And, {
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "x"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`pieq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "pi"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`pibareq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "pibar"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sgeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sg"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sxeq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sx"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`sceq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sc"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`speq[
                 ExogenousEq`t], PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "sp"]& ][
                   BlankNullSequence[]] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             Not[{} === Cases[
                Map[Symbol, 
                 Names[
                 "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                PatternTest[
                  Pattern[ExogenousEq`var, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "dc"]& ] :> ExogenousEq`var, Infinity]], 
             Not[{} === Cases[
                Map[Symbol, 
                 Names[
                 "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                PatternTest[
                  Pattern[ExogenousEq`var, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "dd"]& ] :> ExogenousEq`var, Infinity]], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 Map[Symbol, 
                  Names[
                  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                 PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "dc"]& ] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"], 
             MemberQ[
              DeleteDuplicates[
               Map[Context, 
                Cases[
                 Map[Symbol, 
                  Names[
                  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*"]], 
                 PatternTest[
                   Pattern[ExogenousEq`var, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "dd"]& ] :> ExogenousEq`var, Infinity]]], 
              "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.025201`4.551932772179614, "CPUTimeUsed" -> 0.0251929999999998, 
         "MemoryUsed" -> 5248, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 8364177983400253597 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658851401*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "60fd4031-8970-4a89-a551-4730cdd6e201", "TestID" -> 
         "ExogenousEq_20230820-PS61V4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "42a54827-dffc-48f1-9c47-76bfab21e378", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000916`3.112410471499842, "CPUTimeUsed" -> 0.0009079999999999089, 
         "MemoryUsed" -> 5200, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 8400373108822810991 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658852727*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "071c14c4-554d-46fe-8f66-5385d6566ce0", "TestID" -> 
         "ExogenousEq_20230820-EAMK3N", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "e71de854-bbc2-4443-a3a4-3af3723b3825", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MatchQ[
                  SymbolName[#], "eps"]& ][
                 BlankSequence[]][
                 BlankSequence[]] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000199`2.449368074241699, "CPUTimeUsed" -> 0.0001989999999998382, 
         "MemoryUsed" -> 3048, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 1958499068842184892 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658853211*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a8e4ec90-50c9-4b43-b49a-0ad77804dec0", "TestID" -> 
         "ExogenousEq_20230820-D98YBT", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "43bfe775-6e17-4124-8aa6-f38fe4982017", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
             Map[Context, 
              Cases[
               Map[#[ExogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`$exogenousVars]]\
, PatternTest[
                 Pattern[ExogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                 FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                  SymbolName[#]]& ] :> ExogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000333`2.6729592313383095, "CPUTimeUsed" -> 0.0003339999999996124, 
         "MemoryUsed" -> 2664, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3199576298106632738 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658853795*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "dfaaffc5-1baa-4337-9104-fa564cd646d8", "TestID" -> 
         "ExogenousEq_20230820-29R5H7", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt", "EvaluationID" -> 
         "e190186d-47bb-43a8-ae25-981b304350f7", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[ExogenousEq`t],
               foo`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
               ExogenousEq`t], ExogenousEq`t]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t], 
              ExogenousEq`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t], 
               foo`t]], 
             Not[
             foo`xeq[ExogenousEq`t] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[
               ExogenousEq`t]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[ExogenousEq`t] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`xeq[foo`t]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000087`2.0900342504506106, "CPUTimeUsed" -> 0.00008699999999972619,
          "MemoryUsed" -> 2800, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {9175254201678473366, 3507920987783802623, 
     5707219142883346028, 8364177983400253597, 8400373108822810991, 
     1958499068842184892, 3199576298106632738}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.90150348784181*^9, 3.901526871005251*^9, 
  3.901527500154902*^9, 3.9015277199371862`*^9, 3.901527949287406*^9, 
  3.9015291233916473`*^9, 3.90152923508018*^9, 3.9015933009823933`*^9, 
  3.902674196437294*^9, 3.903316420542942*^9, 3.903341575471341*^9, 
  3.903356236896036*^9, 3.903356614855048*^9, 3.905081217134901*^9, 
  3.905096658860239*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"23226036-9e0e-4501-9dba-1364baa8edfc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: EndogenousEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: EndogenousEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.025964`3.564886598291078", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: EndogenousEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     1898041362319404884 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658871309*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "fd38e619-dc50-4ce5-aaef-13d9ce16051f", "TestID" -> 
         "EndogenousEq_20230910-4DQU12", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "3577fbed-c23d-438d-b196-f7cc667c2ce1", "Input" -> HoldForm[
           Needs["FernandoDuarte`LongRunRisk`Model`EndogenousEq`"]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000029`1.612912995730948, "CPUTimeUsed" -> 
         0.000030000000000196536`, "MemoryUsed" -> 2832, "ExpectedOutput" -> 
         HoldForm[Null], "Outcome" -> "Success"|>], 3757099951930804468 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658871594*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a3c7b718-842b-4553-80f3-cf09d31f043f", "TestID" -> 
         "EndogenousEq_20230910-URX6TH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "741e760e-3308-48dc-b74c-d846519e97f3", "Input" -> HoldForm[
           Not[Names["*pdeq"] === {}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.022789`4.508240266232624, "CPUTimeUsed" -> 
         0.022787000000000113`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2373468300470682494 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658894764*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "188cfc6a-8b26-49c5-b584-6184bc34d0c8", "TestID" -> 
         "EndogenousEq_20230910-UJMW6O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "1dddb718-b72c-40bf-82cd-876630d13354", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`$\
exogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000546`2.887707640536731, "CPUTimeUsed" -> 0.0005469999999996311, 
         "MemoryUsed" -> 8048, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2320480668690937115 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658895615*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "21fba996-6213-4a8e-8e7d-1ae884fae938", "TestID" -> 
         "EndogenousEq_20230910-6RNT7U", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "2a469851-f7e2-4b45-b6b0-fee1697093fb", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Shocks`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MatchQ[
                  SymbolName[#], "eps"]& ][
                 BlankSequence[]][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000144`2.3088774899272413, "CPUTimeUsed" -> 
         0.00014300000000000423`, "MemoryUsed" -> 3464, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 7209320498136295487 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658895985*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "436da955-3c53-45cd-9baa-74ec835484f1", "TestID" -> 
         "EndogenousEq_20230910-Q7VW1N", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "d1099b30-cb15-42bf-b902-4024f3f9d925", "Input" -> HoldForm[
           Apply[And, 
            Map[# === "FernandoDuarte`LongRunRisk`Model`Parameters`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                 FernandoDuarte`LongRunRisk`Model`Parameters`$parameters, 
                  SymbolName[#]]& ] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000253`2.55363551900781, "CPUTimeUsed" -> 0.00024999999999986144`, 
         "MemoryUsed" -> 3752, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2440623807198026819 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658896465*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "c312f99d-2075-4cdc-bd3b-9298237e82f0", "TestID" -> 
         "EndogenousEq_20230910-348WK6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "6db16a2f-10e2-4255-b8fa-2b65cb026689", "Input" -> HoldForm[
           Apply[And, 
            
            Map[# === 
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"& , 
             Map[Context, 
              Cases[
               Map[#[EndogenousEq`t]& , 
                Map[
                Symbol, 
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars]], PatternTest[
                 Pattern[EndogenousEq`var, 
                  Blank[Symbol]], MemberQ[
                  Map[
                  StringDrop[#, -2]& , 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`$\
endogenousVars], 
                  SymbolName[#]]& ][
                 BlankSequence[]] :> EndogenousEq`var, Infinity]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000892`3.100879852208117, "CPUTimeUsed" -> 0.0008930000000004767, 
         "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2237492053664758726 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658897601*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "fdabfae3-d73d-4358-bbcb-d9e1d83a3655", "TestID" -> 
         "EndogenousEq_20230910-ZT5HJC", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "fb267c83-b7b7-41f2-a157-ab620372c602", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, EndogenousEq`m], foo`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m], EndogenousEq`t]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              foo`t, EndogenousEq`m], EndogenousEq`t], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               foo`t, EndogenousEq`m], foo`t]], 
             Not[
             foo`bondyieldeq[EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               foo`t, EndogenousEq`m]]}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000033`1.669028937709879, "CPUTimeUsed" -> 
         0.000036000000000147026`, "MemoryUsed" -> 2664, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 4369721272296530509 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658897852*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "7b433303-4c81-493d-bef6-942c5ffc9e59", "TestID" -> 
         "EndogenousEq_20230910-Q8OJ3S", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "9af3203e-243f-4542-961c-b398bbee7235", "Input" -> HoldForm[
           Apply[And, {
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, EndogenousEq`m], foo`m], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m], EndogenousEq`m]], 
             FreeQ[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
              EndogenousEq`t, foo`m], EndogenousEq`m], 
             Not[
              FreeQ[
               FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, foo`m], foo`m]], 
             Not[
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, EndogenousEq`m] === 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondyieldeq[
               EndogenousEq`t, foo`m]]}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000029`1.612912995730948, "CPUTimeUsed" -> 
         0.000029999999999752447`, "MemoryUsed" -> 2800, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 5702581719415207327 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096658898101*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2c60f558-daba-4f7f-97db-6409ac71bfb0", "TestID" -> 
         "EndogenousEq_20230910-M67H2E", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "65c4a9f8-7ff7-45d0-88a6-329e88379958", "Input" -> HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfweq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfweq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondreteq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondreteq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfwspreadeq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondfwspreadeq[
              EndogenousEq`t, EndogenousEq`m, 1], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondexcreteq[
              EndogenousEq`t, EndogenousEq`m] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`bondexcreteq[
              EndogenousEq`t, EndogenousEq`m, 1]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000033`1.669028937709879, "CPUTimeUsed" -> 0.00003400000000031156, 
         "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 8966252276860888774 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966588985567`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2ebe1d9d-d965-440a-9640-168cc2a1618d", "TestID" -> 
         "EndogenousEq_20230910-DE837N", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt", "EvaluationID" -> 
         "2f36be8e-9e9c-4c24-8037-b178f522d4af", "Input" -> 
         HoldForm[
          EndogenousEq`coefwc = 
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc; 
           EndogenousEq`coefpd = 
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd; 
           EndogenousEq`coefb = 
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb; 
           EndogenousEq`coefnb = 
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb; 
           EndogenousEq`hpd = Head[EndogenousEq`coefpd]; 
           EndogenousEq`hb = Head[EndogenousEq`coefb]; 
           EndogenousEq`hnb = Head[EndogenousEq`coefnb]; 
           EndogenousEq`ch = Flatten[{{
                EndogenousEq`coefwc[0], 
                N[
                 EndogenousEq`coefwc[0]], 
                N[
                 EndogenousEq`coefwc[0]], 
                EndogenousEq`coefwc[0.], 
                N[
                 EndogenousEq`coefwc[0.]], 
                N[
                 EndogenousEq`coefwc[0.]]}, 
               Table[{
                 EndogenousEq`c[0], 
                 N[
                  EndogenousEq`c[0]], 
                 N[
                  EndogenousEq`c[0]], 
                 EndogenousEq`c[0.], 
                 N[
                  EndogenousEq`c[0.]], 
                 N[
                  EndogenousEq`c[0.]]}, {
                EndogenousEq`c, {
                 EndogenousEq`coefpd, EndogenousEq`coefb, 
                  EndogenousEq`coefnb}}], 
               Table[
                ReplaceAll[
                 ReplaceAll[{
                   EndogenousEq`h[1][0], 
                   N[
                    EndogenousEq`h[1][0]], 
                   N[
                    EndogenousEq`h[1][0]], 
                   EndogenousEq`h[1][0.], 
                   N[
                    EndogenousEq`h[1][0.]], 
                   N[
                    EndogenousEq`h[1][0.]], 
                   EndogenousEq`h[0][1], 
                   N[
                    EndogenousEq`h[0][1]], 
                   N[
                    EndogenousEq`h[0][1]], 
                   EndogenousEq`h[0.][1], 
                   N[
                    EndogenousEq`h[0.][1]], 
                   N[
                    EndogenousEq`h[0.][1]], 
                   EndogenousEq`h[1.][0], 
                   N[
                    EndogenousEq`h[1.][0]], 
                   N[
                    EndogenousEq`h[1.][0]], 
                   EndogenousEq`h[1.][0.], 
                   N[
                    EndogenousEq`h[1.][0.]], 
                   N[
                    EndogenousEq`h[1.][0.]], 
                   EndogenousEq`h[0][1.], 
                   N[
                    EndogenousEq`h[0][1.]], 
                   N[
                    EndogenousEq`h[0]][1.], 
                   EndogenousEq`h[0.][1.], 
                   N[
                    EndogenousEq`h[0.][1.]], 
                   N[
                    EndogenousEq`h[0.][1.]], 
                   EndogenousEq`h[0][EndogenousEq`j], 
                   N[
                    EndogenousEq`h[0][EndogenousEq`j]], 
                   N[
                    EndogenousEq`h[0][EndogenousEq`j]], 
                   EndogenousEq`h[0.][EndogenousEq`j], 
                   N[
                    EndogenousEq`h[0.][EndogenousEq`j]], 
                   N[
                    EndogenousEq`h[0.][EndogenousEq`j]], 
                   EndogenousEq`h[EndogenousEq`j][0], 
                   N[
                    EndogenousEq`h[EndogenousEq`j][0]], 
                   N[
                    EndogenousEq`h[EndogenousEq`j][0]], 
                   EndogenousEq`h[EndogenousEq`j][0.], 
                   N[
                    EndogenousEq`h[EndogenousEq`j][0.]], 
                   N[
                    EndogenousEq`h[EndogenousEq`j][0.]], 
                   EndogenousEq`h[0][EndogenousEq`jj], 
                   N[
                    EndogenousEq`h[0][EndogenousEq`jj]], 
                   N[
                    EndogenousEq`h[0][EndogenousEq`jj]], 
                   EndogenousEq`h[0.][EndogenousEq`jj], 
                   N[
                    EndogenousEq`h[0.][EndogenousEq`jj]], 
                   N[
                    EndogenousEq`h[0.][EndogenousEq`jj]], 
                   EndogenousEq`h[EndogenousEq`jj][0], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][0]], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][0]], 
                   EndogenousEq`h[EndogenousEq`jj][0.], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][0.]], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][0.]], 
                   EndogenousEq`h[EndogenousEq`jj][EndogenousEq`kk], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][EndogenousEq`kk]], 
                   N[
                    EndogenousEq`h[EndogenousEq`jj][EndogenousEq`kk]], 
                   N[
                    Table[{
                    EndogenousEq`h[EndogenousEq`ii][EndogenousEq`qq], 
                    N[
                    EndogenousEq`h[EndogenousEq`ii][EndogenousEq`qq]], 
                    N[
                    EndogenousEq`h[EndogenousEq`ii][EndogenousEq`qq]]}, {
                    EndogenousEq`ii, 0, 1}, {EndogenousEq`qq, 2, 3}]]}, 
                  EndogenousEq`jj -> 2], EndogenousEq`kk -> 3], {
                EndogenousEq`h, {
                  Head[EndogenousEq`coefpd], 
                  Head[EndogenousEq`coefb], 
                  Head[EndogenousEq`coefnb]}}]}]; Apply[And, 
             Flatten[{{
                Map[Not, 
                 Map[InexactNumberQ, 
                  Select[
                   Flatten[
                    Cases[EndogenousEq`ch, Pattern[EndogenousEq`x, 
                    Blank[]][
                    Pattern[EndogenousEq`i, 
                    Blank[]]] :> EndogenousEq`i]], NumberQ]]], 
                Map[Not, 
                 Map[InexactNumberQ, 
                  Select[
                   Flatten[
                    Cases[EndogenousEq`ch, Pattern[EndogenousEq`x, 
                    Blank[]][
                    Pattern[EndogenousEq`i, 
                    Blank[]]][
                    Pattern[EndogenousEq`j, 
                    Blank[]]] :> {EndogenousEq`i, EndogenousEq`j}]], 
                   NumberQ]]]}}]]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.001216`3.235448572768708, "CPUTimeUsed" -> 
         0.0012159999999998838`, "MemoryUsed" -> 54864, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>]|>, 
    "FailureResults" -> <||>, "TestsNotEvaluatedKeys" -> {}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {1898041362319404884, 3757099951930804468, 
     2373468300470682494, 2320480668690937115, 7209320498136295487, 
     2440623807198026819, 2237492053664758726, 4369721272296530509, 
     5702581719415207327, 8966252276860888774}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.90150348784181*^9, 3.901526871005251*^9, 
  3.901527500154902*^9, 3.9015277199371862`*^9, 3.901527949287406*^9, 
  3.9015291233916473`*^9, 3.90152923508018*^9, 3.9015933009823933`*^9, 
  3.902674196437294*^9, 3.903316420542942*^9, 3.903341575471341*^9, 
  3.903356236896036*^9, 3.903356614855048*^9, 3.905081217134901*^9, 
  3.90509665890662*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"7187e23d-51a9-49a5-b03e-efd25a5fe54b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\>\"\
", "]"}]}]], "Input",
 CellChangeTimes->{{3.895362797280583*^9, 3.895362797460813*^9}, {
  3.895362883185739*^9, 3.8953628833320417`*^9}, {3.895362914081757*^9, 
  3.895362914242923*^9}, {3.895363069271865*^9, 3.895363069433126*^9}, {
  3.895364934971695*^9, 3.89536493511489*^9}, {3.8954190984559937`*^9, 
  3.895419107713436*^9}, {3.895431466385002*^9, 3.8954314730424356`*^9}, {
  3.901503471271722*^9, 3.901503477273381*^9}, {3.901549113211192*^9, 
  3.901549114083599*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"16b4a727-0558-4183-a2f8-e2e1a7b3a611"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeConditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeConditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "3.824701`5.653931241175782", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ComputeConditionalExpectations.wlt", "Aborted" -> 
    False, "TestResults" -> <|
     8760225476319191317 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096660919398*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "49e56e48-6991-426b-a3ed-c708c2800db1", "TestID" -> 
         "ComputeConditionalExpectations_20230820-ADEJ7S", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "a7c36a79-4a06-4f51-a843-c926e20da771", "Input" -> 
         HoldForm[Needs["PacletizedResourceFunctions`"]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000049`1.8407110778605051, "CPUTimeUsed" -> 0.00004900000000018778,
          "MemoryUsed" -> 2800, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
         "Success"|>], 5162312135170919831 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096660919808*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "8f7f4362-4d1b-478c-8169-45c7e13b2567", "TestID" -> 
         "ComputeConditionalExpectations_20230820-9BEMDA", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "6c9c7a1e-5121-4fbd-b639-0422035c30d4", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`"]; $ContextAliases["ce`"] = 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`"; Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.007108`4.002262416965253, "CPUTimeUsed" -> 0.007097999999999605, 
         "MemoryUsed" -> 102160, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 4217746919591628090 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096660927379*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a446e941-cce2-4b87-b9da-287e0520d649", "TestID" -> 
         "ComputeConditionalExpectations_20230820-D9GCPJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "d9cef9f5-76c9-4c54-b538-0431ab483300", "Input" -> 
         HoldForm[
           Apply[And, {
             
             MemberQ[$ContextPath, 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`"]}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000034`1.6819939148742442, "CPUTimeUsed" -> 
         0.00003400000000031156, "MemoryUsed" -> 2760, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 877514080915410961 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096660927753*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "ad9cca2a-eb57-48cb-a8b5-30b7bc9f1209", "TestID" -> 
         "ComputeConditionalExpectations_20230820-ZA3JN7", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "c095cf0b-e8a1-40d3-a3a3-f1aa7aa44f4c", "Input" -> 
         HoldForm[
           Apply[And, {
             Not[Names["*ev"] === {}], 
             Not[Names["ce`lagStateVarst"] === {}]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.022222`4.4972981410901145, "CPUTimeUsed" -> 0.02225799999999989, 
         "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 6649763027426706412 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096660950333*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "e1e522d8-0648-4b10-b744-ed0281a976ab", "TestID" -> 
         "ComputeConditionalExpectations_20230820-RG80SJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "f5a59c11-e889-4b53-8730-d3a550ecad1e", "Input" -> 
         HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`Cond`msp = FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`Cond`modBY = 
            ComputationalEngine`Cond`msp["BY"]; 
           ComputationalEngine`Cond`modNRC = 
            ComputationalEngine`Cond`msp["NRC"]; Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.363624`5.711167537738315, "CPUTimeUsed" -> 0.3593010000000003, 
         "MemoryUsed" -> 22939632, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 7731030771504396931 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096661314386*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "22d309f4-3663-4f4f-ba70-8a5d1f4a611b", "TestID" -> 
         "ComputeConditionalExpectations_20230820-RK0S77", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "d72e16e2-5304-44e0-8e79-0fd5881f7345", "Input" -> 
         HoldForm[
          FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
            ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t + 1]
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
             ComputationalEngine`Cond`t - 1, ComputationalEngine`Cond`modNRC] === 
           FernandoDuarte`LongRunRisk`Model`Parameters`phip], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.003499`3.6944589403149006, "CPUTimeUsed" -> 0.0035439999999997696`,
          "MemoryUsed" -> 94080, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 5303012509592825237 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096661319367*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "620a2c00-68d8-4435-970c-894526e49fdd", "TestID" -> 
         "ComputeConditionalExpectations_20230820-1JAYC4", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "7be13630-c365-4c31-9233-5891baa79320", "Input" -> 
         HoldForm[
           Apply[And, {0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i]
                    ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                 ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                  ComputationalEngine`Cond`rhodp[ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i]
                    ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                   ComputationalEngine`Cond`rhodp[
                    ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`muc + (
                   ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + 
                ComputationalEngine`Cond`phic 
                 ComputationalEngine`Cond`phidc[ComputationalEngine`Cond`i]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^3 (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) ((
                   ComputationalEngine`Cond`mup + (
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                   ComputationalEngine`Cond`muc + (
                    ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`phip^2 + 
                  ComputationalEngine`Cond`xic ComputationalEngine`Cond`phip 
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                 ComputationalEngine`Cond`rhop 
                  ComputationalEngine`Cond`phip^2 + 
                 ComputationalEngine`Cond`xip 
                  ComputationalEngine`Cond`phip)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                  ComputationalEngine`Cond`muc + (
                   ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhocp 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) + (
                 ComputationalEngine`Cond`rhocp 
                  ComputationalEngine`Cond`phip^2 + 
                 ComputationalEngine`Cond`xic ComputationalEngine`Cond`phip 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t])]], 
             0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 3] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2] (
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 4] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2])))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog) ComputationalEngine`Cond`Esg 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]] + 
                ComputationalEngine`Cond`rhog 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^3, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog) (
                  ComputationalEngine`Cond`Esg ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                   ComputationalEngine`Cond`phig^2)) + 
                ComputationalEngine`Cond`rhog ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^3 + 
                  3 (ComputationalEngine`Cond`phig^2 (
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog^2) 
                 ComputationalEngine`Cond`Esg 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]] + 
                ComputationalEngine`Cond`rhog^2 
                 PacletizedResourceFunctions`SetSymbolsContext[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^3, 
                    ComputationalEngine`Cond`t, 
                    ComputationalEngine`Cond`modNRC]]]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (1 - 
                  ComputationalEngine`Cond`rhog^2) (
                  ComputationalEngine`Cond`Esg ((ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                   ComputationalEngine`Cond`phig^2)) + 
                ComputationalEngine`Cond`rhog^2 ((
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^3 + 
                  3 (ComputationalEngine`Cond`phig^2 (
                    ComputationalEngine`Cond`Esg + 
                    ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) + 
                ComputationalEngine`Cond`rhog 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg)) + 
                ComputationalEngine`Cond`rhog^2 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 2] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) + (
                 ComputationalEngine`Cond`rhog^3 
                  ComputationalEngine`Cond`phig^2 + 
                 ComputationalEngine`Cond`rhog 
                  ComputationalEngine`Cond`phig^2)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 3] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^4 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg)) + (
                 ComputationalEngine`Cond`rhog^4 
                  ComputationalEngine`Cond`phig^2 + 
                 ComputationalEngine`Cond`rhog^2 
                  ComputationalEngine`Cond`phig^2)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]], 0 === 
             Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 1]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t - 2]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1]]],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog (
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^2 (
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 2, 
                  ComputationalEngine`Cond`modNRC]], (
                 ComputationalEngine`Cond`Esg + 
                 ComputationalEngine`Cond`rhog^3 (
                   ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] - 
                   ComputationalEngine`Cond`Esg)) (
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2]))]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                ComputationalEngine`Cond`phig^2]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t - 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]^2],
              0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t - 2]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2]^2],
              0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]^2],
              0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^2 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`Esg))^2 + (
                  ComputationalEngine`Cond`rhog^2 + 1) 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t - 2, 
                  ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`Esg + 
                  ComputationalEngine`Cond`rhog^3 (
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`Esg))^2 + (
                  ComputationalEngine`Cond`rhog^4 + 
                  ComputationalEngine`Cond`rhog^2 + 1) 
                 ComputationalEngine`Cond`phig^2]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - (
               ComputationalEngine`Cond`Esg + 
               ComputationalEngine`Cond`rhog (
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                 ComputationalEngine`Cond`Esg))], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]], 0 === 
             Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t + 1, 
                  ComputationalEngine`Cond`modNRC]] - 
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]], 
             0 === Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC]] - (
               ComputationalEngine`Cond`Esg + 
               ComputationalEngine`Cond`rhog (
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                 ComputationalEngine`Cond`Esg))], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`Esg + 
                ComputationalEngine`Cond`rhog^2 (
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1] - 
                  ComputationalEngine`Cond`Esg)]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp 
                  ComputationalEngine`Cond`rhop (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`mup) + 
                 ComputationalEngine`Cond`rhocp ComputationalEngine`Cond`xip 
                  ComputationalEngine`Cond`eps["pi"][
                   ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
               Subtract[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
                  ComputationalEngine`Cond`t - 1, 
                  ComputationalEngine`Cond`modNRC]], 
                ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                   ComputationalEngine`Cond`mup) + 
                 ComputationalEngine`Cond`xic 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 2] 
                  ComputationalEngine`Cond`eps["pi"][
                   ComputationalEngine`Cond`t - 1])]]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         3.011999`6.629369821172555, "CPUTimeUsed" -> 1.5093099999999993`, 
         "MemoryUsed" -> 20382288, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 6627335853332363152 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664333148*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "25892763-8166-4a05-ae70-a21b6c585749", "TestID" -> 
         "ComputeConditionalExpectations_20230820-WWS30X", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "45c98a47-e451-47d2-8215-3743a6200784", "Input" -> 
         HoldForm[
          ComputationalEngine`Cond`dc1 = 
            PacletizedResourceFunctions`SetSymbolsContext[
              ReplaceAll[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 1], 
               Normal[
                ComputationalEngine`Cond`modNRC["exogenousEq"]]]]; 
           ComputationalEngine`Cond`dc2 = 
            PacletizedResourceFunctions`SetSymbolsContext[
              ReplaceAll[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t - 2], 
               Normal[
                ComputationalEngine`Cond`modNRC["exogenousEq"]]]]; Apply[And, {
              Simplify[
              ComputationalEngine`Cond`dc1 === 
               ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                   ComputationalEngine`Cond`mup) + (
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 3]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                  ComputationalEngine`Cond`phic 
                   ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1]))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 3] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 1]))]], 
              Simplify[
              ComputationalEngine`Cond`dc2 === 
               ComputationalEngine`Cond`muc + (
                 ComputationalEngine`Cond`rhocp (
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                   ComputationalEngine`Cond`mup) + (
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 4]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                  ComputationalEngine`Cond`phic 
                   ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2]))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 3] - 
                    ComputationalEngine`Cond`mup) + (
                   ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 4] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 3] + 
                   ComputationalEngine`Cond`phic 
                    ComputationalEngine`Cond`eps["dc"][
                    ComputationalEngine`Cond`t - 2]))]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhocp ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhocp 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 1] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t - 2] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop (
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                  ComputationalEngine`Cond`xip)]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop (
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                  ComputationalEngine`Cond`xip)]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`rhop ComputationalEngine`Cond`phip + 
                 ComputationalEngine`Cond`xip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`phip]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 0]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t]
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]], 0 === 
              Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 2]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], (
                  ComputationalEngine`Cond`mup + (
                   ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1] - 
                    ComputationalEngine`Cond`mup) + 
                   ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1])) 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t + 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]]], 0 === 
              Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 1]]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t] 
                   ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t] 
                 ComputationalEngine`Cond`pi[
                  ComputationalEngine`Cond`t - 2]]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 2, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 2]], 
              0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t + 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t + 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 2], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^4 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^3 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 1, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^2 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 1])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t - 2, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop^3 (
                    ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t - 2] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`rhop^2 
                   ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t - 2])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mup + (
                  ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xip 
                   ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`muc + (
                  ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xic 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - (
                ComputationalEngine`Cond`Esg + 
                ComputationalEngine`Cond`rhog (
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                  ComputationalEngine`Cond`Esg))], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                   ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i], ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], 
                 ComputationalEngine`Cond`mud[ComputationalEngine`Cond`i] + (
                  ComputationalEngine`Cond`rhodp[ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                  ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                   ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t - 1]
                     ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t])]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`pi[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`mup + (
                    ComputationalEngine`Cond`rhop (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xip 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phip^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`muc + (
                    ComputationalEngine`Cond`rhocp (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xic 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phic^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t + 1]^2, 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`Esg + 
                   ComputationalEngine`Cond`rhog (
                    ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`Esg))^2 + 
                 ComputationalEngine`Cond`phig^2]], 0 === Simplify[
                Subtract[
                 PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                    ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i]^2, ComputationalEngine`Cond`t,
                    ComputationalEngine`Cond`modNRC]], (
                   ComputationalEngine`Cond`mud[
                    ComputationalEngine`Cond`i] + (
                    ComputationalEngine`Cond`rhodp[
                    ComputationalEngine`Cond`i] (
                    ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] - 
                    ComputationalEngine`Cond`mup) + 
                    ComputationalEngine`Cond`xid[ComputationalEngine`Cond`i] 
                    ComputationalEngine`Cond`sg[
                    ComputationalEngine`Cond`t - 1] 
                    ComputationalEngine`Cond`eps["pi"][
                    ComputationalEngine`Cond`t]))^2 + 
                 ComputationalEngine`Cond`phidc[
                   ComputationalEngine`Cond`i]^2]], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`pi[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phip^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`dc[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phic^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1], 
                   ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phig^2], 0 === 
              Simplify[PacletizedResourceFunctions`SetSymbolsContext[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var[
                   ComputationalEngine`Cond`dd[
                   ComputationalEngine`Cond`t + 1, 
                    ComputationalEngine`Cond`i], ComputationalEngine`Cond`t, 
                   ComputationalEngine`Cond`modNRC]] - 
                ComputationalEngine`Cond`phidc[
                 ComputationalEngine`Cond`i]^2]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.126463`5.252478477918648, "CPUTimeUsed" -> 0.12827199999999994`, 
         "MemoryUsed" -> 201496, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 2822118264491230414 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664461152*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "f0a93e2a-b433-449b-8e17-968400ca3ea1", "TestID" -> 
         "ComputeConditionalExpectations_20230820-C03H8O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "22e74376-80a2-460f-9ae7-e02111b6b69e", "Input" -> 
         HoldForm[
           Apply[And, {0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                  ComputationalEngine`Cond`t + 1, ComputationalEngine`Cond`i],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                 ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t + 1] 
                  ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t + 1]^2,
                  ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`sg[
                   ComputationalEngine`Cond`t + 1]^2, 
                  ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t + 2, ComputationalEngine`Cond`i], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                  ComputationalEngine`Cond`dd[
                  ComputationalEngine`Cond`t + 2, ComputationalEngine`Cond`i],
                   ComputationalEngine`Cond`t, 
                  ComputationalEngine`Cond`modNRC], 
                 ComputationalEngine`Cond`t - 1, 
                 ComputationalEngine`Cond`modNRC]]], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["dc"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 0 === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
               ComputationalEngine`Cond`eps["sg"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t]^2 
                ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["pi"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["pi"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["sg"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["sg"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`i], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
              ComputationalEngine`Cond`dd[
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
               ComputationalEngine`Cond`eps["dc"][
                 ComputationalEngine`Cond`t + 1]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`dd[
                 ComputationalEngine`Cond`t, ComputationalEngine`Cond`i] 
                ComputationalEngine`Cond`eps["dc"][
                  ComputationalEngine`Cond`t + 1]^2, 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.261141`5.5673900606770665, "CPUTimeUsed" -> 0.26499000000000006`, 
         "MemoryUsed" -> 249032, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 1002584384835922241 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664722841*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "fd431167-90fc-4c25-8f5a-7b6c1b0efdf1", "TestID" -> 
         "ComputeConditionalExpectations_20230820-5NK8TB", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "3b93fd0c-1ac0-47ee-af6b-8fadd841e3c8", "Input" -> 
         HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
                foo`pi[foo`t + 1], foo`t, ComputationalEngine`Cond`modNRC], 
               foo`t -> ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[foo`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               foo`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[foo`t + 1], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], foo`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[bar`t + 1], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + bar`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[ComputationalEngine`Cond`t + 1], bar`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev[
               foo`pi[bar`t + 1], goo`t, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              1 + bar`t]}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.011186`4.199189812824221, "CPUTimeUsed" -> 
         0.01130900000000068, "MemoryUsed" -> 57952, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 4740498144565959267 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664734726*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a838d724-3ce6-4cb5-8de8-a3fec77f9c61", "TestID" -> 
         "ComputeConditionalExpectations_20230820-HSGW1A", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "46d31680-3b59-4d85-8b15-c0ad5d123e43", "Input" -> 
         HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
               FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                  ComputationalEngine`Cond`t - 1] - 
                 FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Cond`t - 1] + 
                FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Cond`t])), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC] === 
             ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], ComputationalEngine`Cond`t -> 
               ComputationalEngine`Cond`t + 1], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t + 1], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
               FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                 ComputationalEngine`Cond`t] + (
                FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                    FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Cond`t - 1] - 
                    FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                   FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Cond`t - 1] + 
                   FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Cond`t])) + 
                FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  1 + ComputationalEngine`Cond`t])), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][
                ComputationalEngine`Cond`t + 2], ComputationalEngine`Cond`t, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Cond`t] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               2 + ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t],
                ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Cond`t] (
               FernandoDuarte`LongRunRisk`Model`Parameters`mup + (
                FernandoDuarte`LongRunRisk`Model`Parameters`rhop (
                  FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                   ComputationalEngine`Cond`t - 1] - 
                  FernandoDuarte`LongRunRisk`Model`Parameters`mup) + (
                 FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Cond`t - 1] + 
                 FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Cond`t]))), 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`delta, ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`delta, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`A[0], ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`R[ComputationalEngine`Cond`m - 1][0], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`R[
              ComputationalEngine`Cond`m - 1][0], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pieq[
               ComputationalEngine`Cond`t, ComputationalEngine`Cond`m], 
               ComputationalEngine`Cond`t + 1, 
               ComputationalEngine`Cond`modNRC] === 
             ComputationalEngine`Cond`pieq[
              ComputationalEngine`Cond`t, ComputationalEngine`Cond`m], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`wceq[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t + 1, 
               ComputationalEngine`Cond`modNRC] === 
             ComputationalEngine`Cond`wceq[ComputationalEngine`Cond`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[{
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t]}, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === {
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], 
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`sg[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t - 1, 
                ComputationalEngine`Cond`modNRC], 
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`dc[ComputationalEngine`Cond`t], 
                ComputationalEngine`Cond`t, ComputationalEngine`Cond`modNRC]},
              FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               foo`pi[ComputationalEngine`Cond`t], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t]^2, 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              foo`pi[ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`eps["pi"][ComputationalEngine`Cond`t] 
               bar`delta, ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t] 
               foo`eps["pi"][ComputationalEngine`Cond`t] 
               ComputationalEngine`Cond`delta, ComputationalEngine`Cond`t - 1,
                ComputationalEngine`Cond`modNRC], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[foo`t], ComputationalEngine`Cond`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[foo`t], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
               ComputationalEngine`Cond`t - 1, 
               ComputationalEngine`Cond`modNRC] === ReplaceAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                ComputationalEngine`Cond`pi[foo`t], foo`t - 1, 
                ComputationalEngine`Cond`modNRC], foo`t -> 
               ComputationalEngine`Cond`t], ExpandAll[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
               ComputationalEngine`Cond`pi[foo`t] 
                ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], 
                foo`t - 1, ComputationalEngine`Cond`modNRC]] === 
             ExpandAll[
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                ComputationalEngine`Cond`t] 
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
                 ComputationalEngine`Cond`pi[foo`t], foo`t - 1, 
                 ComputationalEngine`Cond`modNRC]], 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`Private`lagStateVarst[
              ComputationalEngine`Cond`pi[foo`t - 1] 
               ComputationalEngine`Cond`pi[ComputationalEngine`Cond`t], foo`t - 
               1, ComputationalEngine`Cond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               foo`t - 1] 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Cond`t]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.017351`4.3898395076197865, "CPUTimeUsed" -> 0.017559999999999576`, 
         "MemoryUsed" -> 65360, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 5004082249954805405 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664752381*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "8d1fef0c-c3d7-47ce-b4df-ede1dbbf9ed7", "TestID" -> 
         "ComputeConditionalExpectations_20230820-A0SS6D", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt", 
         "EvaluationID" -> "15b9a81d-4270-4b8a-bda7-129dcf01af03", "Input" -> 
         HoldForm[
           Unset[
            $ContextAliases["ce`"]]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[Null], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000025`1.5484550065040295, "CPUTimeUsed" -> 
         0.000024999999999941735`, "MemoryUsed" -> 2376, "ExpectedOutput" -> 
         HoldForm[Null], "Outcome" -> "Success"|>]|>, 
    "FailureResults" -> <||>, "TestsNotEvaluatedKeys" -> {}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {8760225476319191317, 5162312135170919831, 
     4217746919591628090, 877514080915410961, 6649763027426706412, 
     7731030771504396931, 5303012509592825237, 6627335853332363152, 
     2822118264491230414, 1002584384835922241, 4740498144565959267, 
     5004082249954805405}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.895431208289164*^9, 3.895507629895403*^9, 3.901526875348246*^9, 
   3.901527505283366*^9, 3.901527725061488*^9, 3.9015279559250937`*^9, 
   3.901528427199664*^9, 3.9015284973652554`*^9, {3.9015291285135927`*^9, 
   3.901529147778441*^9}, 3.901529241164372*^9, 3.90159330616811*^9, 
   3.902674205844184*^9, 3.903316428389922*^9, 3.9033415805222054`*^9, 
   3.9033562417820044`*^9, 3.90335661868184*^9, 3.905081223999151*^9, 
   3.905096664772131*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"b181f30a-7703-4dc8-94f1-2a750149a41c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", "]"}]}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"e330a50a-d51d-4861-9e79-8ecbadd6a684"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeUnconditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: ComputeUnconditionalExpectations.wlt\"", 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["17", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "5.2980420000000000001`5.644181473279397", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ComputeUnconditionalExpectations.wlt", "Aborted" -> 
    False, "TestResults" -> <|
     2362453208692472451 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966648891697`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "977cbc72-917f-4dd7-a291-c0bb559a8e17", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-Q2RBAZ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "bda0b0ca-f557-47f7-96b4-c4bf70d7eee3", "Input" -> 
         HoldForm[Needs["PacletizedResourceFunctions`"]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000034`1.6819939148742489, "CPUTimeUsed" -> 0.00003399999999942338,
          "MemoryUsed" -> 2800, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
         "Success"|>], 3802763712086687861 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966648894887`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b23a7bf6-1ca6-4930-a091-d216aafe142d", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-KVOFDU", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "093ee4f6-b5dd-4a00-b75a-56ffa9aec4a1", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`"]; Null], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.009919`4.1469828880937065, "CPUTimeUsed" -> 0.00991300000000006, 
         "MemoryUsed" -> 103888, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 8146532831817764695 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664899789*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "3d660b89-2ab6-431b-9601-3d3e9e12d7bd", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-SGLYXZ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "612aed31-27e4-4d13-9212-d7ef6cf282be", "Input" -> 
         HoldForm[
           
           MemberQ[$ContextPath, 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`"]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000026`1.5654883458028104, "CPUTimeUsed" -> 
         0.000026000000000081513`, "MemoryUsed" -> 2736, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 5645792472320312638 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050966649000688`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "d3ee8a1d-a924-455b-816d-5f6f68ab09d1", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-MCPBVO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "fe4c2e3d-ea19-49ea-971d-ed18e26be3ff", "Input" -> 
         HoldForm[
           Not[Names["*uncondE"] === {}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.030108`4.629196905194227, "CPUTimeUsed" -> 
         0.03013599999999972, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 9049415796529525232 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096664930598*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "4896a8f6-3194-46a3-8e21-99e10ac215bb", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-TWJTSP", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "4194bd03-e65a-40df-b03a-3afeba8ed40a", "Input" -> 
         HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`Uncond`msp = FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`Uncond`modBY = 
            ComputationalEngine`Uncond`msp["BY"]; 
           ComputationalEngine`Uncond`modNRC = 
            ComputationalEngine`Uncond`msp["NRC"]; 
           ComputationalEngine`Uncond`createSystem = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`createSystem; 
           ComputationalEngine`Uncond`evNoEpsStateVarsProduct = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`evNoEpsStateVarsProduct; 
           ComputationalEngine`Uncond`uncondEStep = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`Private`uncondEStep; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.16044`5.355827651141603, "CPUTimeUsed" -> 0.16579799999999967`, 
         "MemoryUsed" -> 14866256, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 7246276430665035012 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096665091581*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "3bbd8838-7996-40d3-9ee3-b881d300b569", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-0HNLHS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "c1546eee-9646-46d2-9a18-3141f05ccb0e", "Input" -> 
         HoldForm[{
             ComputationalEngine`Uncond`nameRules1, 
              ComputationalEngine`Uncond`system1, 
              ComputationalEngine`Uncond`unknowns1} = 
            ComputationalEngine`Uncond`createSystem[
             1, ComputationalEngine`Uncond`modNRC]; {
             ComputationalEngine`Uncond`nameRules2, 
              ComputationalEngine`Uncond`system2, 
              ComputationalEngine`Uncond`unknowns2} = 
            ComputationalEngine`Uncond`createSystem[
             2, ComputationalEngine`Uncond`modNRC]; {
             ComputationalEngine`Uncond`nameRules3, 
              ComputationalEngine`Uncond`system3, 
              ComputationalEngine`Uncond`unknowns3} = 
            ComputationalEngine`Uncond`createSystem[
             3, ComputationalEngine`Uncond`modNRC]; {
             ComputationalEngine`Uncond`nameRules4, 
              ComputationalEngine`Uncond`system4, 
              ComputationalEngine`Uncond`unknowns4} = 
            ComputationalEngine`Uncond`createSystem[
             4, ComputationalEngine`Uncond`modNRC]; 
           ComputationalEngine`Uncond`sol1 = Flatten[
              Solve[
              ComputationalEngine`Uncond`system1, 
               ComputationalEngine`Uncond`unknowns1]]; 
           ComputationalEngine`Uncond`sol2 = Flatten[
              Solve[
              ComputationalEngine`Uncond`system2, 
               ComputationalEngine`Uncond`unknowns2]]; 
           ComputationalEngine`Uncond`sol3 = Flatten[
              Solve[
              ComputationalEngine`Uncond`system3, 
               ComputationalEngine`Uncond`unknowns3]]; 
           ComputationalEngine`Uncond`sol4 = Flatten[
              Solve[
              ComputationalEngine`Uncond`system4, 
               ComputationalEngine`Uncond`unknowns4]]; Apply[And, {
              Apply[And, {
                Not[ComputationalEngine`Uncond`nameRules1 === $Failed], 
                Not[ComputationalEngine`Uncond`system1 === $Failed], 
                Not[ComputationalEngine`Uncond`unknowns1 === $Failed]}], 
              Apply[And, {
                Not[ComputationalEngine`Uncond`nameRules2 === $Failed], 
                Not[ComputationalEngine`Uncond`system2 === $Failed], 
                Not[ComputationalEngine`Uncond`unknowns2 === $Failed]}], 
              Apply[And, {
                Not[ComputationalEngine`Uncond`nameRules3 === $Failed], 
                Not[ComputationalEngine`Uncond`system3 === $Failed], 
                Not[ComputationalEngine`Uncond`unknowns3 === $Failed]}], 
              Apply[And, {
                Not[ComputationalEngine`Uncond`nameRules4 === $Failed], 
                Not[ComputationalEngine`Uncond`system4 === $Failed], 
                Not[ComputationalEngine`Uncond`unknowns4 === $Failed]}], 
              Apply[And, {
                Not[ComputationalEngine`Uncond`sol1 === {}], 
                Not[ComputationalEngine`Uncond`sol2 === {}], 
                Not[ComputationalEngine`Uncond`sol3 === {}], 
                Not[ComputationalEngine`Uncond`sol4 === {}]}], 
              Apply[And, {
                Apply[MatchQ, 
                 ReplaceAll[
                  Intersection[
                  ComputationalEngine`Uncond`unknowns1, 
                   ComputationalEngine`Uncond`unknowns3], {
                  ComputationalEngine`Uncond`sol1, 
                   ComputationalEngine`Uncond`sol3}]], 
                Apply[MatchQ, 
                 ReplaceAll[
                  Intersection[
                  ComputationalEngine`Uncond`unknowns2, 
                   ComputationalEngine`Uncond`unknowns3], {
                  ComputationalEngine`Uncond`sol2, 
                   ComputationalEngine`Uncond`sol3}]], 
                Apply[MatchQ, 
                 ReplaceAll[
                  Intersection[
                  ComputationalEngine`Uncond`unknowns1, 
                   ComputationalEngine`Uncond`unknowns4], {
                  ComputationalEngine`Uncond`sol1, 
                   ComputationalEngine`Uncond`sol4}]], 
                Apply[MatchQ, 
                 ReplaceAll[
                  Intersection[
                  ComputationalEngine`Uncond`unknowns2, 
                   ComputationalEngine`Uncond`unknowns4], {
                  ComputationalEngine`Uncond`sol2, 
                   ComputationalEngine`Uncond`sol4}]], 
                Apply[MatchQ, 
                 ReplaceAll[
                  Intersection[
                  ComputationalEngine`Uncond`unknowns3, 
                   ComputationalEngine`Uncond`unknowns4], {
                  ComputationalEngine`Uncond`sol3, 
                   ComputationalEngine`Uncond`sol4}]]}]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         3.838082`6.734629246961795, "CPUTimeUsed" -> 3.8451770000000014`, 
         "MemoryUsed" -> 20775168, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 2095963936900960928 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096668930202*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "6733beb0-bfee-4455-8e1b-e9d207c2b6f3", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-Q5454K", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "926852c9-ad09-4162-9b19-5e2de1029e90", "Input" -> 
         HoldForm[
           Apply[
           And, {ReplaceAll[
              ComputationalEngine`Uncond`pi1, 
               ComputationalEngine`Uncond`sol1] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup, 
             ReplaceAll[
              ComputationalEngine`Uncond`sg1, 
               ComputationalEngine`Uncond`sol1] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`Esg, FullSimplify[
               ExpandAll[
                ReplaceAll[
                ComputationalEngine`Uncond`pi2, 
                 ComputationalEngine`Uncond`sol2]]] === FullSimplify[
               ExpandAll[
               FernandoDuarte`LongRunRisk`Model`Parameters`mup^2 + 
                Divide[FernandoDuarte`LongRunRisk`Model`Parameters`xip^2 + 
                  2 FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
                   FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                   FernandoDuarte`LongRunRisk`Model`Parameters`phip + 
                  FernandoDuarte`LongRunRisk`Model`Parameters`phip^2, 1 - 
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhop^2]]], 
             Simplify[
               ReplaceAll[
               ComputationalEngine`Uncond`sg2, 
                ComputationalEngine`Uncond`sol2]] === 
             Simplify[
              FernandoDuarte`LongRunRisk`Model`Parameters`Esg^2 + 
               FernandoDuarte`LongRunRisk`Model`Parameters`phig^2/(1 - 
                FernandoDuarte`LongRunRisk`Model`Parameters`rhog^2)], Simplify[
               ReplaceAll[
               ComputationalEngine`Uncond`pi1sg1, 
                ComputationalEngine`Uncond`sol2]] === 
             Simplify[
              FernandoDuarte`LongRunRisk`Model`Parameters`Esg 
               FernandoDuarte`LongRunRisk`Model`Parameters`mup]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[False], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.025496`4.55698704829767, "CPUTimeUsed" -> 0.025591999999999615`, 
         "MemoryUsed" -> 211368, "ExpectedOutput" -> HoldForm[False], 
         "Outcome" -> "Success"|>], 6106170594374487752 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096668956218*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "973b3cfd-39ce-4423-b3cd-0015c5f20e16", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-DIRKCN", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "845b5b19-f71f-4f67-a534-f9648e14a818", "Input" -> 
         HoldForm[
           Apply[
           And, {FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`mup, 
             FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`modNRC] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`Esg, FullSimplify[
               ExpandAll[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t]^2,
                  ComputationalEngine`Uncond`modNRC]]] === FullSimplify[
               ExpandAll[
               FernandoDuarte`LongRunRisk`Model`Parameters`mup^2 + 
                Divide[FernandoDuarte`LongRunRisk`Model`Parameters`xip^2 + 
                  2 FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
                   FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                   FernandoDuarte`LongRunRisk`Model`Parameters`phip + 
                  FernandoDuarte`LongRunRisk`Model`Parameters`phip^2, 1 - 
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhop^2]]], 
             Simplify[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t]^2, 
                ComputationalEngine`Uncond`modNRC]] === 
             Simplify[
              FernandoDuarte`LongRunRisk`Model`Parameters`Esg^2 + 
               FernandoDuarte`LongRunRisk`Model`Parameters`phig^2/(1 - 
                FernandoDuarte`LongRunRisk`Model`Parameters`rhog^2)], Simplify[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`modNRC]] === 
             Simplify[
              FernandoDuarte`LongRunRisk`Model`Parameters`Esg 
               FernandoDuarte`LongRunRisk`Model`Parameters`mup]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.006951`3.9925622863416317, "CPUTimeUsed" -> 0.007035999999999376, 
         "MemoryUsed" -> 19432, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2152082816945211212 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90509666896357*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "85102dc9-2786-49c0-9de1-71618c0df0c1", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-NMVEK0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "44def68e-3060-44f7-9625-470db900aed4", "Input" -> 
         HoldForm[
           Apply[And, {
             Apply[And, 
              Map[NumberQ, 
               ReplaceRepeated[
                Values[ComputationalEngine`Uncond`sol1], 
                ComputationalEngine`Uncond`modNRC["parameters"]]]], 
             Apply[And, 
              Map[NumberQ, 
               ReplaceRepeated[
                Values[ComputationalEngine`Uncond`sol2], 
                ComputationalEngine`Uncond`modNRC["parameters"]]]], 
             Apply[And, 
              Map[NumberQ, 
               ReplaceRepeated[
                Values[ComputationalEngine`Uncond`sol3], 
                ComputationalEngine`Uncond`modNRC["parameters"]]]], 
             Apply[And, 
              Map[NumberQ, 
               ReplaceRepeated[
                Values[ComputationalEngine`Uncond`sol4], 
                ComputationalEngine`Uncond`modNRC["parameters"]]]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.001461`3.3151652137662904, "CPUTimeUsed" -> 0.0014520000000022293`,
          "MemoryUsed" -> 3240, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 8113835901561917751 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096668965763*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b43e5f31-0240-48e9-869d-852091066840", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-OZ70LI", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "0d3741f8-2838-4dc8-b98f-8a04ec087d0a", "Input" -> 
         HoldForm[
          ComputationalEngine`Uncond`stateVarsNoEps = {
             ComputationalEngine`Uncond`sg, ComputationalEngine`Uncond`pi}; 
           ComputationalEngine`Uncond`model = 
            ComputationalEngine`Uncond`modNRC; 
           Apply[And, {
             ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t - 1], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t - 1] 
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps], 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Uncond`t], 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                ComputationalEngine`Uncond`t] 
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sg[
                ComputationalEngine`Uncond`t], ExpandAll[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[
                  ComputationalEngine`Uncond`t - 1] 
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps]] === ExpandAll[
                Subtract[
                FernandoDuarte`LongRunRisk`Model`Parameters`Esg 
                  FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                   ComputationalEngine`Uncond`t - 1] + (
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhog 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Uncond`t - 1] 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sg[
                    ComputationalEngine`Uncond`t - 1] + 
                  FernandoDuarte`LongRunRisk`Model`Parameters`phig 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Uncond`t - 1] 
                   FernandoDuarte`LongRunRisk`Model`Shocks`eps["sg"][
                    ComputationalEngine`Uncond`t]), 
                 FernandoDuarte`LongRunRisk`Model`Parameters`Esg 
                 FernandoDuarte`LongRunRisk`Model`Parameters`rhog 
                 FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                  ComputationalEngine`Uncond`t - 1]]], ExpandAll[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps]] === ExpandAll[
                Subtract[
                FernandoDuarte`LongRunRisk`Model`Parameters`mup 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Uncond`t] + (
                  FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Uncond`t - 1] 
                   FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t] + (
                   FernandoDuarte`LongRunRisk`Model`Parameters`xip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t - 1] 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t] + 
                   FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t]^2)), 
                 FernandoDuarte`LongRunRisk`Model`Parameters`mup 
                 FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Uncond`t]]], 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t + 1], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                ComputationalEngine`Uncond`t] 
               FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                1 + ComputationalEngine`Uncond`t], ExpandAll[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`dd[
                  ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i],
                  ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps]] === 
              ExpandAll[
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`dd[
                 ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
                FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                 ComputationalEngine`Uncond`t]], ExpandAll[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`dd[
                  ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i],
                  ComputationalEngine`Uncond`model, 
                 Append[
                 ComputationalEngine`Uncond`stateVarsNoEps, 
                  ComputationalEngine`Uncond`dd]]] === ExpandAll[
                Subtract[
                FernandoDuarte`LongRunRisk`Model`Parameters`mud[
                   ComputationalEngine`Uncond`i] 
                  FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                   ComputationalEngine`Uncond`t] + (
                  FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
                    ComputationalEngine`Uncond`t - 1] 
                   FernandoDuarte`LongRunRisk`Model`Parameters`rhodp[
                    ComputationalEngine`Uncond`i] 
                   FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t] + (
                   FernandoDuarte`LongRunRisk`Model`Parameters`phidc[
                    ComputationalEngine`Uncond`i] 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["dc"][
                    ComputationalEngine`Uncond`t] 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t] + 
                   FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sg[
                    ComputationalEngine`Uncond`t - 2] 
                    FernandoDuarte`LongRunRisk`Model`Parameters`xid[
                    ComputationalEngine`Uncond`i] 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t - 1] 
                    FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                    ComputationalEngine`Uncond`t])), 
                 FernandoDuarte`LongRunRisk`Model`Parameters`mup 
                 FernandoDuarte`LongRunRisk`Model`Parameters`rhodp[
                  ComputationalEngine`Uncond`i] 
                 FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                  ComputationalEngine`Uncond`t]]], 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t - 1], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t - 1] 
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps], 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`sg[
                 ComputationalEngine`Uncond`t - 1], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps] === 
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t - 1]
                  ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t],
                 ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.025265`4.553034300406243, "CPUTimeUsed" -> 0.025539999999999452`, 
         "MemoryUsed" -> 73032, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 209795708906577596 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096668991533*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "3aa54b7e-e7ae-46e8-a5bb-d6c7dff23c3a", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-ICMHSL", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "3187b1b2-fb09-4681-834f-90a550341a97", "Input" -> 
         HoldForm[
           Apply[And, {
             Apply[And, 
              Map[MatchQ[#, "FernandoDuarte`LongRunRisk`Model`Shocks`"]& , 
               DeleteDuplicates[
                Cases[
                 ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] 
                  ComputationalEngine`Uncond`dd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1], 
                  ComputationalEngine`Uncond`model, 
                  Append[
                  ComputationalEngine`Uncond`stateVarsNoEps, 
                   ComputationalEngine`Uncond`dd]], PatternTest[
                   Pattern[ComputationalEngine`Uncond`x, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "eps"]& ][
                   BlankSequence[]][
                   BlankSequence[], 
                   BlankNullSequence[]] :> 
                 Context[ComputationalEngine`Uncond`x], Infinity]]]], 
             Apply[And, 
              Map[MatchQ[#, "FernandoDuarte`LongRunRisk`Model`Shocks`"]& , 
               DeleteDuplicates[
                Cases[
                 ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] (
                   ComputationalEngine`Uncond`dd[
                    ComputationalEngine`Uncond`t, 
                    ComputationalEngine`Uncond`i] 
                   ComputationalEngine`Uncond`eps["pi"][
                    ComputationalEngine`Uncond`t] 
                   ComputationalEngine`Uncond`eps["pi"][
                    ComputationalEngine`Uncond`t - 1]), 
                  ComputationalEngine`Uncond`model, 
                  Append[
                  ComputationalEngine`Uncond`stateVarsNoEps, 
                   ComputationalEngine`Uncond`dd]], PatternTest[
                   Pattern[ComputationalEngine`Uncond`x, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "eps"]& ][
                   BlankSequence[]][
                   BlankSequence[], 
                   BlankNullSequence[]] :> 
                 Context[ComputationalEngine`Uncond`x], Infinity]]]], 
             Apply[And, 
              Map[MatchQ[#, "FernandoDuarte`LongRunRisk`Model`Shocks`"]& , 
               DeleteDuplicates[
                Cases[
                 ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] 
                  ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`dd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1], 
                  ComputationalEngine`Uncond`model, 
                  Append[
                  ComputationalEngine`Uncond`stateVarsNoEps, 
                   ComputationalEngine`Uncond`dd]], PatternTest[
                   Pattern[ComputationalEngine`Uncond`x, 
                    Blank[Symbol]], MatchQ[
                    SymbolName[#], "eps"]& ][
                   BlankSequence[]][
                   BlankSequence[], 
                   BlankNullSequence[]] :> 
                 Context[ComputationalEngine`Uncond`x], Infinity]]]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.056505`4.902601877090938, "CPUTimeUsed" -> 0.056979999999999364`, 
         "MemoryUsed" -> 120208, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 7829768356784843196 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096669048595*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "bf56f1ad-4b06-4143-b0a8-fe7f42d6e19b", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-BG34M6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "471fc8a6-be83-451c-b586-232c68fd9bb7", "Input" -> 
         HoldForm[
           Apply[And, {{} === Cases[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`sg[
                 ComputationalEngine`Uncond`t - 1], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t], 
               Infinity], 
             Not[{} === Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`sg[
                  ComputationalEngine`Uncond`t - 1], 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], 
                PatternTest[
                 Blank[Symbol], MatchQ[
                  SymbolName[#], "sg"]& ][ComputationalEngine`Uncond`t - 1], 
                Infinity]], {} === Cases[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`sg[
                  ComputationalEngine`Uncond`t - 1] + 
                ComputationalEngine`Uncond`pi[
                  ComputationalEngine`Uncond`t - 1] 
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t], 
               Infinity], {} === Cases[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`sg[
                  ComputationalEngine`Uncond`t - 1] + 
                ComputationalEngine`Uncond`pi[
                  ComputationalEngine`Uncond`t - 1] 
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "sg"]& ][ComputationalEngine`Uncond`t], 
               Infinity], 
             Not[{} === Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`sg[
                   ComputationalEngine`Uncond`t - 1] + 
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] 
                  ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t],
                  ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], 
                PatternTest[
                 Blank[Symbol], MatchQ[
                  SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t - 1], 
                Infinity]], 
             Not[{} === Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`sg[
                   ComputationalEngine`Uncond`t - 1] + 
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] 
                  ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t],
                  ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], 
                PatternTest[
                 Blank[Symbol], MatchQ[
                  SymbolName[#], "sg"]& ][ComputationalEngine`Uncond`t - 1], 
                Infinity]]}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.028265`4.6017639876281295, "CPUTimeUsed" -> 
         0.028521999999998826`, "MemoryUsed" -> 71992, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 3527495757829325383 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096669077249*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b4b37f52-59f9-44f8-b2cd-d47b215d411a", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-H1Y2RW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "9151149c-5c41-4588-9423-c9de40f42ade", "Input" -> 
         HoldForm[
           Apply[
           And, {ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`foo[
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               ComputationalEngine`Uncond`stateVarsNoEps] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Uncond`t] 
              ComputationalEngine`Uncond`foo[
               ComputationalEngine`Uncond`t - 1], ExpandAll[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t + 1] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, 
                ComputationalEngine`Uncond`stateVarsNoEps]] === 
             ExpandAll[
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
                ComputationalEngine`Uncond`t + 1] 
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.003617`3.7088635065936137, "CPUTimeUsed" -> 0.0036330000000006635`,
          "MemoryUsed" -> 9104, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 8640400258219515319 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90509666908121*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "21711014-0965-45a7-a93a-32cf726afa1a", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-A5ZEUE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "608c731c-a3a3-4c76-ba6c-3fc7aa6052c9", "Input" -> 
         HoldForm[
           Apply[
           And, {ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`myVariable]] === 
             ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
             ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`irrelevantVar]] === 
             FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
              ComputationalEngine`Uncond`t], 
             ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`anotherIrrelevantVar 
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`anotherIrrelevantVar]] === 
             ComputationalEngine`Uncond`anotherIrrelevantVar 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Uncond`t] 
              FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`sg[
               ComputationalEngine`Uncond`t]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.004513`3.8049803313521378, "CPUTimeUsed" -> 0.004554000000000613, 
         "MemoryUsed" -> 8240, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 1852789500290300350 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096669086196*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "5f746567-6926-4aee-a86f-daa7b2a6a320", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-O1PYED", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "05029bb7-017c-4a91-8730-564668846e37", "Input" -> 
         HoldForm[
           Apply[And, {
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`dd[
                ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "dd"]& ][
              ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]], 
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`dd[
                ComputationalEngine`Uncond`t - 1, 
                 ComputationalEngine`Uncond`i], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t]], 
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`dd[
                ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
               ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "dd"]& ][
              ComputationalEngine`Uncond`t - 1, 
               ComputationalEngine`Uncond`i]], 
             Not[
              FreeQ[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t - 1]
                  ComputationalEngine`Uncond`dd[
                 ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t - 1], 
                ComputationalEngine`Uncond`model, 
                Append[
                ComputationalEngine`Uncond`stateVarsNoEps, 
                 ComputationalEngine`Uncond`dd]], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "eps"]& ]["pi"][
               ComputationalEngine`Uncond`t - 1]]], 
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`dd[
                ComputationalEngine`Uncond`t - 1, 
                 ComputationalEngine`Uncond`i] 
               ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "pi"]& ][
              ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]], 
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`dd[
                ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
               ComputationalEngine`Uncond`eps["dd"][
                ComputationalEngine`Uncond`t - 1, 
                 ComputationalEngine`Uncond`i], 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "dd"]& ][
              ComputationalEngine`Uncond`t - 1, 
               ComputationalEngine`Uncond`i]], 
             Not[
              FreeQ[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t - 1]
                  ComputationalEngine`Uncond`dd[
                 ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
                ComputationalEngine`Uncond`eps["dd"][
                 ComputationalEngine`Uncond`t - 1, 
                  ComputationalEngine`Uncond`i], 
                ComputationalEngine`Uncond`model, 
                Append[
                ComputationalEngine`Uncond`stateVarsNoEps, 
                 ComputationalEngine`Uncond`dd]], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "eps"]& ]["dd"][
               ComputationalEngine`Uncond`t - 1, 
                ComputationalEngine`Uncond`i]]], 
             FreeQ[
              ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] (
                ComputationalEngine`Uncond`dd[
                 ComputationalEngine`Uncond`t - 1, 
                  ComputationalEngine`Uncond`i] 
                ComputationalEngine`Uncond`eps["dd"][
                 ComputationalEngine`Uncond`t - 1, 
                  ComputationalEngine`Uncond`i]), 
               ComputationalEngine`Uncond`model, 
               Append[
               ComputationalEngine`Uncond`stateVarsNoEps, 
                ComputationalEngine`Uncond`dd]], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t]], 
             Not[
              FreeQ[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] (
                 ComputationalEngine`Uncond`dd[
                  ComputationalEngine`Uncond`t - 1, 
                   ComputationalEngine`Uncond`i] 
                 ComputationalEngine`Uncond`eps["dd"][
                  ComputationalEngine`Uncond`t - 1, 
                   ComputationalEngine`Uncond`i]), 
                ComputationalEngine`Uncond`model, 
                Append[
                ComputationalEngine`Uncond`stateVarsNoEps, 
                 ComputationalEngine`Uncond`dd]], 
               PatternTest[
                Blank[Symbol], MatchQ[
                 SymbolName[#], "pi"]& ][
                Blank[]]]], 
             FreeQ[
              ComputationalEngine`Uncond`uncondEStep[
              ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`modNRC], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "dc"]& ], Infinity], 
             FreeQ[
              ComputationalEngine`Uncond`uncondEStep[
              ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t - 1] 
               ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
               ComputationalEngine`Uncond`modNRC], 
              PatternTest[
               Blank[Symbol], MatchQ[
                SymbolName[#], "pi"]& ][ComputationalEngine`Uncond`t], 
              Infinity]}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.200047`5.451647040709142, "CPUTimeUsed" -> 
         0.20123299999999844`, "MemoryUsed" -> 400520, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 8632970848626110411 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096669286953*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2756a42a-5544-4d03-b018-6d0186a9423b", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-GZT9XJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "5fb4c9bd-376c-4529-a37a-9da2bde92db5", "Input" -> 
         HoldForm[
           Apply[
           And, {ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t] 
               ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               ComputationalEngine`Uncond`stateVarsNoEps] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`wc[
               ComputationalEngine`Uncond`t] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Uncond`t - 1], Coefficient[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, {
                ComputationalEngine`Uncond`wc}], 
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Uncond`t - 1]] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[1] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Uncond`t], DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] 
                 ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t - 1], 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "A"]& ][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}, 
             DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] 
                 ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t] 
                 ComputationalEngine`Uncond`eps["pi"][
                  ComputationalEngine`Uncond`t - 1], 
                 ComputationalEngine`Uncond`model, {
                 ComputationalEngine`Uncond`wc}], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "A"]& ][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}, 
             ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
              ComputationalEngine`Uncond`pd[
                ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
               ComputationalEngine`Uncond`eps["pi"][
                ComputationalEngine`Uncond`t - 1], 
               ComputationalEngine`Uncond`model, 
               ComputationalEngine`Uncond`stateVarsNoEps] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`pd[
               ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Uncond`t - 1], Coefficient[
               ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
               ComputationalEngine`Uncond`pd[
                 ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i] 
                ComputationalEngine`Uncond`eps["pi"][
                 ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`model, {
                ComputationalEngine`Uncond`pd}], 
               FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`pi[
               ComputationalEngine`Uncond`t - 1]] === 
             FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`B[
               ComputationalEngine`Uncond`i][1] 
              FernandoDuarte`LongRunRisk`Model`Shocks`eps["pi"][
               ComputationalEngine`Uncond`t], DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] (
                  ComputationalEngine`Uncond`B[ComputationalEngine`Uncond`i][
                   1] ComputationalEngine`Uncond`pd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1]), 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "A"]& ][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}, 
             DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] (
                  ComputationalEngine`Uncond`B[ComputationalEngine`Uncond`i][
                   1] ComputationalEngine`Uncond`pd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1]), 
                 ComputationalEngine`Uncond`model, 
                 ComputationalEngine`Uncond`stateVarsNoEps], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "B"]& ][
                  Blank[]][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}, 
             DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] (
                  ComputationalEngine`Uncond`B[ComputationalEngine`Uncond`i][
                   1] ComputationalEngine`Uncond`pd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1]), 
                 ComputationalEngine`Uncond`model, {
                 ComputationalEngine`Uncond`pd}], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "A"]& ][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}, 
             DeleteDuplicates[
               Cases[
                ComputationalEngine`Uncond`evNoEpsStateVarsProduct[
                ComputationalEngine`Uncond`A[0] (
                  ComputationalEngine`Uncond`B[ComputationalEngine`Uncond`i][
                   1] ComputationalEngine`Uncond`pd[
                   ComputationalEngine`Uncond`t, ComputationalEngine`Uncond`i]
                    ComputationalEngine`Uncond`eps["pi"][
                   ComputationalEngine`Uncond`t - 1]), 
                 ComputationalEngine`Uncond`model, {
                 ComputationalEngine`Uncond`pd}], PatternTest[
                  Pattern[ComputationalEngine`Uncond`x, 
                   Blank[Symbol]], MatchQ[
                   SymbolName[#], "B"]& ][
                  Blank[]][
                  Blank[]] :> Context[ComputationalEngine`Uncond`x], 
                Infinity]] === {
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"}}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.027505`4.589926647117776, "CPUTimeUsed" -> 0.02770399999999995, 
         "MemoryUsed" -> 26816, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 2351805172103730582 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096669315134*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "f50a1363-4b76-4bad-a8d6-4a26e695f6da", "TestID" -> 
         "ComputeUnconditionalExpectations_20230821-C0PFTM", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt",
          "EvaluationID" -> "3cbafcf6-7adb-4c1f-9044-d1060c7716b3", "Input" -> 
         HoldForm[
           Apply[And, {Simplify[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`modNRC]] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
             Simplify[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                ComputationalEngine`Uncond`wc[ComputationalEngine`Uncond`t], 
                ComputationalEngine`Uncond`modBY]] === 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 0 === 
             Simplify[
               Subtract[
               FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t]^3, 
                  ComputationalEngine`Uncond`modNRC] 
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                  ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t],
                   ComputationalEngine`Uncond`modNRC], 
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t]^3 
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`modNRC]]], 0 === Simplify[
               Subtract[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t]^3 
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`modNRC], 
                FernandoDuarte`LongRunRisk`Model`Parameters`Esg (
                 FernandoDuarte`LongRunRisk`Model`Parameters`mup 
                 Subtract[FernandoDuarte`LongRunRisk`Model`Parameters`mup^2, 
                   Divide[
                   3 (FernandoDuarte`LongRunRisk`Model`Parameters`phip^2 + 
                    2 FernandoDuarte`LongRunRisk`Model`Parameters`phip 
                    FernandoDuarte`LongRunRisk`Model`Parameters`rhop 
                    FernandoDuarte`LongRunRisk`Model`Parameters`xip + 
                    FernandoDuarte`LongRunRisk`Model`Parameters`xip^2), 
                    FernandoDuarte`LongRunRisk`Model`Parameters`rhop^2 - 
                    1]])]], Simplify[
               PacletizedResourceFunctions`SetSymbolsContext[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t], 
                 ComputationalEngine`Uncond`modNRC]]] === 
             ComputationalEngine`Uncond`muc, FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`dc[
                   ComputationalEngine`Uncond`t]^2, 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`muc^2 + (
                 ComputationalEngine`Uncond`phic^2 + (
                  2 ComputationalEngine`Uncond`Esg 
                   ComputationalEngine`Uncond`phip 
                   ComputationalEngine`Uncond`rhocp 
                   ComputationalEngine`Uncond`xic + (
                   ComputationalEngine`Uncond`xic^2 (
                    ComputationalEngine`Uncond`Esg^2 + 
                    ComputationalEngine`Uncond`phig^2/(1 - 
                    ComputationalEngine`Uncond`rhog^2)) + 
                   Divide[ComputationalEngine`Uncond`rhocp^2 (
                    ComputationalEngine`Uncond`phip^2 + 
                    2 ComputationalEngine`Uncond`phip 
                    ComputationalEngine`Uncond`rhop 
                    ComputationalEngine`Uncond`xip + 
                    ComputationalEngine`Uncond`xip^2), 1 - 
                    ComputationalEngine`Uncond`rhop^2])))]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t],
                   ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`muc 
                 ComputationalEngine`Uncond`mup + (
                 ComputationalEngine`Uncond`rhocp 
                  ComputationalEngine`Uncond`xip 
                  ComputationalEngine`Uncond`phip + (
                  ComputationalEngine`Uncond`xic 
                   ComputationalEngine`Uncond`rhop 
                   ComputationalEngine`Uncond`phip 
                   ComputationalEngine`Uncond`Esg + (
                   ComputationalEngine`Uncond`xic 
                    ComputationalEngine`Uncond`xip 
                    ComputationalEngine`Uncond`Esg + 
                   Divide[(ComputationalEngine`Uncond`rhocp 
                    ComputationalEngine`Uncond`rhop) (
                    ComputationalEngine`Uncond`xip^2 + 
                    2 ComputationalEngine`Uncond`rhop 
                    ComputationalEngine`Uncond`xip 
                    ComputationalEngine`Uncond`phip + 
                    ComputationalEngine`Uncond`phip^2), 1 - 
                    ComputationalEngine`Uncond`rhop^2])))]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t],
                   ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`muc 
                ComputationalEngine`Uncond`Esg]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`sg[
                   ComputationalEngine`Uncond`t + 1], 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`Esg^2 + (
                  ComputationalEngine`Uncond`rhog/(1 - 
                  ComputationalEngine`Uncond`rhog^2)) 
                 ComputationalEngine`Uncond`phig^2]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`sg[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`sg[
                   ComputationalEngine`Uncond`t - 1], 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`Esg^2 + (
                  ComputationalEngine`Uncond`rhog/(1 - 
                  ComputationalEngine`Uncond`rhog^2)) 
                 ComputationalEngine`Uncond`phig^2]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t + 1], 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`mup^2 + (
                 ComputationalEngine`Uncond`phip 
                  ComputationalEngine`Uncond`xip + 
                 Divide[ComputationalEngine`Uncond`rhop (
                    ComputationalEngine`Uncond`phip^2 + 
                    2 ComputationalEngine`Uncond`rhop 
                    ComputationalEngine`Uncond`xip 
                    ComputationalEngine`Uncond`phip + 
                    ComputationalEngine`Uncond`xip^2), 1 - 
                   ComputationalEngine`Uncond`rhop^2])]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1], 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`mup^2 + (
                 ComputationalEngine`Uncond`phip 
                  ComputationalEngine`Uncond`xip + 
                 Divide[ComputationalEngine`Uncond`rhop (
                    ComputationalEngine`Uncond`phip^2 + 
                    2 ComputationalEngine`Uncond`rhop 
                    ComputationalEngine`Uncond`xip 
                    ComputationalEngine`Uncond`phip + 
                    ComputationalEngine`Uncond`xip^2), 1 - 
                   ComputationalEngine`Uncond`rhop^2])]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[ComputationalEngine`Uncond`t] 
                  ComputationalEngine`Uncond`sg[
                   ComputationalEngine`Uncond`t + 1], 
                  ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`Esg 
                ComputationalEngine`Uncond`mup]], FullSimplify[
               Expand[
                PacletizedResourceFunctions`SetSymbolsContext[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE[
                 ComputationalEngine`Uncond`pi[
                   ComputationalEngine`Uncond`t - 1] 
                  ComputationalEngine`Uncond`dc[ComputationalEngine`Uncond`t],
                   ComputationalEngine`Uncond`modNRC]]]] === FullSimplify[
               Expand[
               ComputationalEngine`Uncond`muc 
                 ComputationalEngine`Uncond`mup + (
                 ComputationalEngine`Uncond`Esg 
                  ComputationalEngine`Uncond`phip 
                  ComputationalEngine`Uncond`xic + 
                 Divide[ComputationalEngine`Uncond`rhocp (
                    ComputationalEngine`Uncond`phip^2 + 
                    2 ComputationalEngine`Uncond`phip 
                    ComputationalEngine`Uncond`rhop 
                    ComputationalEngine`Uncond`xip + 
                    ComputationalEngine`Uncond`xip^2), 1 - 
                   ComputationalEngine`Uncond`rhop^2])]]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.879808`6.094902904484043, "CPUTimeUsed" -> 0.8816520000000008, 
         "MemoryUsed" -> 3051120, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {2362453208692472451, 3802763712086687861, 
     8146532831817764695, 5645792472320312638, 9049415796529525232, 
     7246276430665035012, 2095963936900960928, 6106170594374487752, 
     2152082816945211212, 8113835901561917751, 209795708906577596, 
     7829768356784843196, 3527495757829325383, 8640400258219515319, 
     1852789500290300350, 8632970848626110411, 2351805172103730582}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.901529470848894*^9, 3.901593313330052*^9, 
  3.901593972011983*^9, 3.902674212473827*^9, 3.903316433777993*^9, 
  3.9033415860512247`*^9, 3.9033562472603607`*^9, 3.903356624255772*^9, 
  3.9050812294813347`*^9, 3.905096670216385*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d65a25e1-141e-4a09-a470-b01a7e476aea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\>\"", 
   "]"}]}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"5a7b1be5-0bb0-47d8-8966-c6eaeeeabe17"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "108.6984359999999999999`7.186738293146839", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: CreateEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     7460174036251824014 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096670269796*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "0868d1c4-a025-4029-83d1-5a682bc027d3", "TestID" -> 
         "CreateEulerEq_20230820-UJLDBE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "8f9d75fe-2e79-4254-a143-f125b31ed90a", "Input" -> HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`CreateEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`CreateEulerEq`modBY = 
            ComputationalEngine`CreateEulerEq`msp["BY"]; 
           ComputationalEngine`CreateEulerEq`modNRC = 
            ComputationalEngine`CreateEulerEq`msp["NRC"]; 
           ComputationalEngine`CreateEulerEq`modDES = 
            ComputationalEngine`CreateEulerEq`msp["DES"]; 
           ComputationalEngine`CreateEulerEq`mods = {
             ComputationalEngine`CreateEulerEq`modBY, 
              ComputationalEngine`CreateEulerEq`modNRC, 
              ComputationalEngine`CreateEulerEq`modDES}; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.167456`5.374415710891566, "CPUTimeUsed" -> 0.17324500000000143`, 
         "MemoryUsed" -> 14866776, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 2358151599142534161 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90509667043778*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "0234a9b1-d1d9-4a2a-adc0-de3b1e5ab434", "TestID" -> 
         "CreateEulerEq_20230820-XD2P9G", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "ab9271e8-a51c-4be5-9af9-e9b5380858f2", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
"]; ComputationalEngine`CreateEulerEq`ee[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := {
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`nomeulereq[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model]}; 
           ComputationalEngine`CreateEulerEq`eeAll = 
            Map[ComputationalEngine`CreateEulerEq`ee, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffWc[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffPd[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffNomBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffWcAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffWc, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffPdAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffPd, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffBond, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
              ComputationalEngine`CreateEulerEq`mods]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.001341`3.277943775683593, "CPUTimeUsed" -> 0.0013420000000010646`, 
         "MemoryUsed" -> 103168, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 5693320893576931634 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096670439403*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "94961264-99ec-43ed-a108-2a5ff77177c3", "TestID" -> 
         "CreateEulerEq_20230820-13QTF7", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "630d8890-6345-4f18-b9e9-04fbfa523e21", "Input" -> HoldForm[
           Not[Names["*eulereq"] === {}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.0319459999999999999`4.6549314851564505, 
         "CPUTimeUsed" -> 0.03197399999999995, "MemoryUsed" -> 2528, 
         "ExpectedOutput" -> HoldForm[True], "Outcome" -> "Success"|>], 
      521104138622481317 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096670471795*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "557033dc-13a7-4f98-a189-d7726ed1600b", "TestID" -> 
         "CreateEulerEq_20230820-0SCP5W", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "cb431ce7-4789-411b-91d2-5cade21be357", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modBY]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modNRC]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modDES]]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[False], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.204753`5.461745271506941, "CPUTimeUsed" -> 0.2048059999999996, 
         "MemoryUsed" -> 8960, "ExpectedOutput" -> HoldForm[False], "Outcome" -> 
         "Success"|>], 3959880210617936452 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096670677041*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "d50dabc4-cb20-4f34-8cec-608f162b03ca", "TestID" -> 
         "CreateEulerEq_20230820-Q4Z5LO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "7cc2c73e-e3b5-42e5-90e2-3c9121676d25", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffWcAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffPdAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.01567`4.345583994300583, "CPUTimeUsed" -> 0.015670999999999324`, 
         "MemoryUsed" -> 38984, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 1504474137724546304 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096670693183*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "fce54d4b-74d1-4c49-a8ca-36ac9ee0f772", "TestID" -> 
         "CreateEulerEq_20230820-JHMC1M", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "9b1c1998-6290-4264-8463-2fa5d05016ea", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         35.311389`7.698429799030627, "CPUTimeUsed" -> 35.565670000000004`, 
         "MemoryUsed" -> 257112600, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 4917837352106452267 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050967060051527`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "a3b4cbf6-a354-4760-95d0-c28cd326e738", "TestID" -> 
         "CreateEulerEq_20230820-JD404O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "19962afa-5d43-486b-8e44-215a3d5c6415", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         18.337145`7.413846716992347, "CPUTimeUsed" -> 18.45358800000001, 
         "MemoryUsed" -> 5943184, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 7170441637871071680 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096724342966*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2cf8a86e-0040-4216-8edb-7e26b5a17598", "TestID" -> 
         "CreateEulerEq_20230820-0UIR4J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "111cb449-e8ff-458c-88c2-0d397cca9fbd", "Input" -> HoldForm[
           Apply[And, 
            
            Flatten[{
             Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         35.149105`7.696429268908747, "CPUTimeUsed" -> 35.329150999999996`, 
         "MemoryUsed" -> 9094680, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 4821684394374934846 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905096759492714*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2072b57d-8881-46e7-9982-041c1cf87bd8", "TestID" -> 
         "CreateEulerEq_20230820-PX7O15", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "46490699-9b2a-4528-a09a-309bbad9cffc", "Input" -> 
         HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
           DeleteDuplicates[
             Flatten[{
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                   Span[1, All], 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         18.027965`7.406461704080189, "CPUTimeUsed" -> 18.113944000000004`, 
         "MemoryUsed" -> 3081456, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 6721198862070083398 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050967775214157`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "17e1aa6d-5dc6-4a42-9cfe-01031e664a6f", "TestID" -> 
         "CreateEulerEq_20230820-PF3P04", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "248c455b-9f07-4b76-830d-a9950132f48a", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := 
            Module[{ComputationalEngine`CreateEulerEq`e0, 
               ComputationalEngine`CreateEulerEq`e1, 
               ComputationalEngine`CreateEulerEq`e2, 
               ComputationalEngine`CreateEulerEq`e3, 
               ComputationalEngine`CreateEulerEq`e0p, 
               ComputationalEngine`CreateEulerEq`e1p, 
               ComputationalEngine`CreateEulerEq`e2p, 
               ComputationalEngine`CreateEulerEq`e3p}, 
              ComputationalEngine`CreateEulerEq`e0 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e1 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 1], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e2 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e3 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model, True]; 
              ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                  Normal[
                   ComputationalEngine`CreateEulerEq`model["parameters"]], 
                  Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                  4}]; ComputationalEngine`CreateEulerEq`e1p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                    Blank[]] -> 4, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    Blank[]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e2p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                   
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e3p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                 ComputationalEngine`CreateEulerEq`e0p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                 ComputationalEngine`CreateEulerEq`e1p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                 ComputationalEngine`CreateEulerEq`e2p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                 ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
             Map[BooleanQ, 
              Flatten[
               ComputationalEngine`CreateEulerEq`checkBoolean[
               ComputationalEngine`CreateEulerEq`modBY]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         1.451666`6.312381703009588, "CPUTimeUsed" -> 1.4699109999999962`, 
         "MemoryUsed" -> 182496, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {7460174036251824014, 2358151599142534161, 
     5693320893576931634, 521104138622481317, 3959880210617936452, 
     1504474137724546304, 4917837352106452267, 7170441637871071680, 
     4821684394374934846, 6721198862070083398}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8954314801113243`*^9, 3.901549013172578*^9, 
  3.9015934245857973`*^9, 3.902674323705262*^9, 3.903316480425647*^9, 
  3.903341696412951*^9, 3.903356294952075*^9, 3.90335673398013*^9, 
  3.905081337649701*^9, 3.9050967789898357`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"d79a1195-f6d0-4f45-81fa-7ae8857f1686"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"TableForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}], "[", 
       RowBox[{"[", "\"\<ActualMessages\>\"", "]"}], "]"}], ",", 
      RowBox[{"ReleaseHold", "@", 
       RowBox[{
        RowBox[{
         RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}], "[", 
        RowBox[{"[", "\"\<ExpectedMessages\>\"", "]"}], "]"}]}]}], "}"}], 
    "]"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.905097131309546*^9, 
  3.905097132763056*^9}},ExpressionUUID->"2f5705e2-54a0-49dc-bed2-\
96972ce91fe4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "11.626451`7.215962163434331", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: SolveEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     2758010412025134270 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905097117882193*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "9cbf9d22-9c82-4958-b53c-78c07f834496", "TestID" -> 
         "SolveEulerEq_20230930-OSUXTN", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "EvaluationID" -> 
         "6792d8a9-f458-48e6-86dc-2158c68e2553", "Input" -> HoldForm[Off[
             MessageName[General, "stop"]]; 
           Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
"]; $ContextPath = DeleteDuplicates[
              
              Prepend[$ContextPath, 
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`"]]; Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`SolveEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`SolveEulerEq`modBY = 
            ComputationalEngine`SolveEulerEq`msp["BY"]; 
           ComputationalEngine`SolveEulerEq`modBKY = 
            ComputationalEngine`SolveEulerEq`msp["BKY"]; 
           ComputationalEngine`SolveEulerEq`modNRC = 
            ComputationalEngine`SolveEulerEq`msp["NRC"]; 
           ComputationalEngine`SolveEulerEq`modDES = 
            ComputationalEngine`SolveEulerEq`msp["DES"]; 
           ComputationalEngine`SolveEulerEq`modNRCStochVol = 
            ComputationalEngine`SolveEulerEq`msp["NRCStochVol"]; 
           ComputationalEngine`SolveEulerEq`mods = {
             ComputationalEngine`SolveEulerEq`modBY, 
              ComputationalEngine`SolveEulerEq`modBKY, 
              ComputationalEngine`SolveEulerEq`modNRC, 
              ComputationalEngine`SolveEulerEq`modDES, 
              ComputationalEngine`SolveEulerEq`modNRCStochVol}; 
           ComputationalEngine`SolveEulerEq`coeffsQ[
              Pattern[ComputationalEngine`SolveEulerEq`sol, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`coeffName, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`numStateVars, 
               Blank[]], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`numAssets, 
                Blank[]], 0], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`bond, 
                Blank[]], 0]] := Apply[And, {
               If[ComputationalEngine`SolveEulerEq`numAssets == 0, Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`i]] === 
                Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1, 
                Sort[
                  
                  Tuples[{
                   Range[ComputationalEngine`SolveEulerEq`numAssets] - 
                    ComputationalEngine`SolveEulerEq`bond, 
                    Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 
                    1}]] == Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> {
                    ComputationalEngine`SolveEulerEq`i, 
                    ComputationalEngine`SolveEulerEq`j}]]], 
               Apply[And, 
                Map[MatchQ[#, ComputationalEngine`SolveEulerEq`coeffName]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  ComputationalEngine`SolveEulerEq`var]]], 
               Apply[And, 
                Map[MatchQ[#, 
                  StringDrop[
                   ToString[
                   ComputationalEngine`SolveEulerEq`coeffName], -1]]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  Context[ComputationalEngine`SolveEulerEq`var]]]], 
               Apply[And, 
                Map[NumberQ, 
                 Map[Values, ComputationalEngine`SolveEulerEq`sol]]]}]; 
           ComputationalEngine`SolveEulerEq`opts = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>}, {
              "PrintResidualsNorm" -> False}, {"MaxIterations" -> 1}, {
              "FindRootOptions" -> {"MaxIterations" -> 1}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}}; 
           ComputationalEngine`SolveEulerEq`optsRepeated = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {"MaxIterations" -> 5}}, {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, 
                  WorkingPrecision -> $MachinePrecision}}; {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision},
                 WorkingPrecision -> $MachinePrecision}}; 
           ComputationalEngine`SolveEulerEq`optsMany = Join[
              Part[ComputationalEngine`SolveEulerEq`opts, 
               Span[5, -1]], ComputationalEngine`SolveEulerEq`optsRepeated]; 
           Do[ComputationalEngine`SolveEulerEq`ind = 0; 
             ComputationalEngine`SolveEulerEq`numStateVars = Length[
                ComputationalEngine`SolveEulerEq`model["stateVars"][
                ComputationalEngine`SolveEulerEq`t]]; 
             ComputationalEngine`SolveEulerEq`numStocks = 
              ComputationalEngine`SolveEulerEq`model["numStocks"]; 
             ComputationalEngine`SolveEulerEq`coeffsQWc[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, 
                ComputationalEngine`SolveEulerEq`numStateVars]; 
             ComputationalEngine`SolveEulerEq`coeffsQPd[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`numStocks]; 
             ComputationalEngine`SolveEulerEq`coeffsQBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb], 
                ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`updateCoeffs = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs; 
             ComputationalEngine`SolveEulerEq`updateCoeffsSol = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol; 
             ComputationalEngine`SolveEulerEq`updateCoeffsWc = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc; 
             ComputationalEngine`SolveEulerEq`updateCoeffsPd = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsPd; 
             ComputationalEngine`SolveEulerEq`updateCoeffsBond = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsBond; 
             ComputationalEngine`SolveEulerEq`newParameters = {
               ComputationalEngine`SolveEulerEq`delta -> 0.99}; 
             ComputationalEngine`SolveEulerEq`guessCoeffsSolution = {
               ComputationalEngine`SolveEulerEq`A[0] -> 4.6}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, \
{}] == ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Quiet[
                Apply[And, 
                 Flatten[{
                   Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[{}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, {}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], 
                    Last[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    Most[#]], 
                    Last[#]]}& , 
                    Part[ComputationalEngine`SolveEulerEq`opts, 
                    Span[1, 4]]], {2}], 
                   Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Rest[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Sequence[
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    First[#], 
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], {
                    Last[#]}], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {
                    First[#]}, 
                    Rest[#]]}& , ComputationalEngine`SolveEulerEq`optsMany], {
                    2}]}]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsWc = {
               "MaxIterations" -> 100}; 
             ComputationalEngine`SolveEulerEq`solWc = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`solWc == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 ComputationalEngine`SolveEulerEq`optsWc] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["params"], {}, 
                 ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`solWc1 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "initialGuess" -> <|"Ewc" -> {3}|>]; 
             ComputationalEngine`SolveEulerEq`solWc2 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "initialGuess" -> <|"Ewc" -> {1}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc2]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`solWc1 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {3}|>]; 
             ComputationalEngine`SolveEulerEq`solWc2 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {1}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc2]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m3 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m4 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m1]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m4]] == {{3}}}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "MaxIterations" -> 3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m3 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m4 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "MaxIterations" -> 1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m1]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m4]] == {{1}}}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> False]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> True]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              First[ComputationalEngine`SolveEulerEq`m2] == {
                 HoldForm[
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                ReleaseHold[
                 First[
                  Flatten[
                   Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    False], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    True, "Tol" -> 1], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True, "Tol" -> 10.^(-20)], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`Ewc0 = 4.6; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                   "Epd" -> {{5.5}}|>]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`coeffsWcPd = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> True, 
                "initialGuess" -> <|
                 "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                  "Epd" -> {{5.5}}|>]; 
             ComputationalEngine`SolveEulerEq`coeffsWc = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
                 Blank[Integer]]]; 
             ComputationalEngine`SolveEulerEq`coeffsPd = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                 Blank[Integer]]]; ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
               ComputationalEngine`SolveEulerEq`coeffsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQPd[
               ComputationalEngine`SolveEulerEq`coeffsPd]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                   "Epd" -> {{5.5}}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 SubsetQ[
                  Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                  Options[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]], 
                 SubsetQ[
                  Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                  Options[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`oldOptions = 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
             ComputationalEngine`SolveEulerEq`oldOptionsSol = 
              Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol]; 
             ComputationalEngine`SolveEulerEq`oldOptionsWc = 
              Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsWc]; ComputationalEngine`SolveEulerEq`ig = 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                 "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             SetOptions[
              ComputationalEngine`SolveEulerEq`updateCoeffs, 
               "initialGuess" -> <|
                "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
              ComputationalEngine`SolveEulerEq`oldOptions; 
             SetOptions[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, 
               "initialGuess" -> <|
                "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Not[
                TrueQ[
                ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, 
                   MaxIterations -> 1] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                   1]]]; ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol] = 
              ComputationalEngine`SolveEulerEq`oldOptionsSol; 
             SetOptions[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                 "Ewc0" -> ComputationalEngine`SolveEulerEq`ig] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Not[
                TrueQ[ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "wc"], 
                   ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                   MaxIterations -> 1] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                   1]]]; ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsWc] = 
              ComputationalEngine`SolveEulerEq`oldOptionsWc; 
             ComputationalEngine`SolveEulerEq`oldOptions = 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
             ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {{
                "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{4.6}}|>}, {
                "PrintResidualsNorm" -> True}}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                   ComputationalEngine`SolveEulerEq`out = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                   ComputationalEngine`SolveEulerEq`out}& , 
                  ComputationalEngine`SolveEulerEq`optsUpdateCoeff]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsBad = {{
                MaxIterations -> 100}, {PrecisionGoal -> $MachinePrecision}}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{ComputationalEngine`SolveEulerEq`m = 
                    Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                    Reap[Module[{}, 
                    SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]]; \
$MessageList]]; Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; First[
                    First[ComputationalEngine`SolveEulerEq`m]] == HoldForm[
                    MessageName[SetOptions, "optnf"]]}& , 
                  ComputationalEngine`SolveEulerEq`optsBad]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsFindRoot = {
               "FindRootOptions" -> {MaxIterations -> 1}, 
                "FindRootOptions" -> {AccuracyGoal -> 2}}; 
             ComputationalEngine`SolveEulerEq`oldFindRootOpts = 
              Options[FindRoot]; 
             ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = Keys[
                ReplaceAll["FindRootOptions", 
                 Options[ComputationalEngine`SolveEulerEq`updateCoeffs]]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                   ComputationalEngine`SolveEulerEq`out1 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                   Unprotect[FindRoot]; SetOptions[FindRoot, 
                    Last[#]]; 
                   ComputationalEngine`SolveEulerEq`out2 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   ComputationalEngine`SolveEulerEq`out2 = If[
                    MemberQ[
                    ComputationalEngine`SolveEulerEq`\
withFindRootOptionDefault, 
                    First[
                    First[
                    Last[#]]]], 
                    Not[
                    TrueQ[ComputationalEngine`SolveEulerEq`out2]], 
                    ComputationalEngine`SolveEulerEq`out2]; 
                   Options[FindRoot] = 
                    ComputationalEngine`SolveEulerEq`oldFindRootOpts; 
                   Protect[FindRoot]; {
                    ComputationalEngine`SolveEulerEq`out1, 
                    ComputationalEngine`SolveEulerEq`out2}}& , 
                  ComputationalEngine`SolveEulerEq`optsFindRoot]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1., 8.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4., 1., 8.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 12; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`newBondParams = {
               FernandoDuarte`LongRunRisk`Model`Parameters`psi -> 
                ReplaceAll[
                 0.1 + FernandoDuarte`LongRunRisk`Model`Parameters`psi, 
                  ComputationalEngine`SolveEulerEq`model["params"]]}; 
             ComputationalEngine`SolveEulerEq`solWcNewBondParams = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`solBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`solNomBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solBond === 
                  ComputationalEngine`SolveEulerEq`solBondNew], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solNomBond === 
                  ComputationalEngine`SolveEulerEq`solNomBondNew]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`oldMaxMaturity = 
              ComputationalEngine`SolveEulerEq`maxMaturity; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 2; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solNomBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 
              ComputationalEngine`SolveEulerEq`oldMaxMaturity; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic,
                 "Precision" -> 1]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic,
                 "Precision" -> 1]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {FilterRules[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                    Blank[]]] === 
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "bond"], 
                   ComputationalEngine`SolveEulerEq`model["params"], {}, 
                   ComputationalEngine`SolveEulerEq`maxMaturity, 
                   ComputationalEngine`SolveEulerEq`solWc], FilterRules[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateNomBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                   
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]] === 
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "nombond"], 
                   ComputationalEngine`SolveEulerEq`model["params"], {}, 
                   ComputationalEngine`SolveEulerEq`maxMaturity, 
                   ComputationalEngine`SolveEulerEq`solWc]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {Sort[
                   FilterRules[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBonds" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                    Alternatives[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Blank[]], 
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]]]] === Sort[
                   Join[
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "bond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc], 
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "nombond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc]]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> False]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> True]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = MemberQ[
                ReleaseHold[
                 First[ComputationalEngine`SolveEulerEq`m2]], 
                MessageName[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                ReleaseHold[
                 First[
                  Flatten[
                   Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> False], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                   True, "CheckResiduals" -> True], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> True, "Tol" -> 1], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                   True, "CheckResiduals" -> True, "Tol" -> 10.^(-20)], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`noMissingTest = {}; 
           Do[ComputationalEngine`SolveEulerEq`testNumber = Sort[
                Cases[
                 Keys[
                  SubValues[ComputationalEngine`SolveEulerEq`outTests]], 
                 Verbatim[HoldPattern][
                   ComputationalEngine`SolveEulerEq`outTests[
                    ComputationalEngine`SolveEulerEq`model["shortname"]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]]] :> ComputationalEngine`SolveEulerEq`i]]; 
             AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Range[0, 
                 Max[ComputationalEngine`SolveEulerEq`testNumber]] == 
               ComputationalEngine`SolveEulerEq`testNumber]; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`out = Apply[And, {
               Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest], 
               Apply[And, 
                Values[
                 SubValues[ComputationalEngine`SolveEulerEq`outTests]]]}]; 
           On[
             MessageName[General, "stop"]]; 
           ComputationalEngine`SolveEulerEq`out], "ExpectedMessages" -> 
         HoldForm[{
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.5569089476209456`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.4890825068561554`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.1898485160071426`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.8764093488563845`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.6632349341506793`*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.5569089476209456`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.4890825068561554`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.1898485160071426`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.8764093488563845`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.6632349341506793`*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}, 
         "AbsoluteTimeUsed" -> 11.626451`7.215962163434331, "CPUTimeUsed" -> 
         11.640813999999999`, "MemoryUsed" -> 51738520, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>]|>, 
    "FailureResults" -> <||>, "TestsNotEvaluatedKeys" -> {}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {2758010412025134270}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.905081349306175*^9, 3.905082213195653*^9, {3.9050955299719267`*^9, 
   3.905095554861765*^9}, 3.905095960630362*^9, 3.905096118978527*^9, 
   3.905096211379533*^9, 3.905096790970491*^9, {3.905096873818177*^9, 
   3.905096974672638*^9}, 3.9050971296952753`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"2aa3659c-2223-4316-b2fc-896298438da4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.89299130782999*^9, 3.892991351007729*^9, {3.8930019651870403`*^9, 
   3.8930019657580433`*^9}, {3.89300203804469*^9, 3.8930020428746147`*^9}, {
   3.893002126415174*^9, 3.893002148237515*^9}, 3.8931769328580713`*^9, 
   3.895362705268759*^9, 3.8953628816709433`*^9, 
   3.895362912835907*^9},ExpressionUUID->"84c78bb2-8e0f-4b6f-ae00-\
0d2abae7a844"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"tr", "=", 
   RowBox[{
   "TestReport", "[", 
    "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\>\"", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8930037604438353`*^9, 3.893003767636511*^9}, {
   3.8930274724828367`*^9, 3.893027481454776*^9}, 3.893176929602127*^9, 
   3.8953627959840918`*^9},ExpressionUUID->"5121ffd6-f567-4da8-bdc7-\
b02da924ab5e"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.8930376107794113`*^9, {3.893105240088758*^9, 3.8931052440724087`*^9}, 
   3.893176925930255*^9, 3.895363067666274*^9, 
   3.895364932747463*^9},ExpressionUUID->"7f4ea337-0076-4787-aac5-\
76cf6f1f79da"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.893175870362602*^9, 
  3.905081174588763*^9},ExpressionUUID->"e19bde9e-a625-488e-9cf4-\
b74f7c4fcb22"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeConditionalExpectations.wlt\>\"\
", ",", "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/EndogenousEq.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ExogenousEq.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ProcessModels.wlt\>\"", ",", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Shocks.wlt\>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8931055175849867`*^9, 3.8931055372377996`*^9}, {
  3.8931758788796062`*^9, 3.893175879649167*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6d80ab2b-2576-4050-b521-9cae711fed04"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ComputeUnconditionalExpectations.wlt\>\
\"", "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"2ebef7d6-d331-419f-a64e-ead93d146e3f"],

Cell[BoxData["tr"], "Input",
 CellChangeTimes->{{3.8954298041926622`*^9, 3.895429804361904*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"cd632827-fda3-49db-ba6c-c16c6cd48a28"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{
  "TestReport", "[", 
   "\"\</Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{3.895422375358493*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"d38c1461-d4f4-423b-8b82-09b784289135"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",ExpressionUUID->\
"74fa26f9-abc6-4219-a123-f978597737ff"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileNames", "]"}]}]], "Input",
 CellChangeTimes->{{3.889411155314384*^9, 3.8894111646376877`*^9}, {
  3.889411308437488*^9, 3.889411311891931*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8a9c9e85-8cbf-4e1c-870c-0a5ec229dd8b"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileNames", "]"}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"89327c75-70af-4b75-adfd-86608c4fe806"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"f1d84011-dcfc-4f83-98b5-d531ed681557"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"5485125857216978783", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-Q4Z5LO\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-Q4Z5LO\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-Q4Z5LO"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
           GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-Q4Z5LO\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-Q4Z5LO\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-Q4Z5LO"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "2"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "3"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "4"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    
                    RowBox[{"Length", "[", 
                    "ComputationalEngine`CreateEulerEq`mods", "]"}]}], 
                    "}"}]}], "]"}]}], "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "2"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "3"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "4"}], 
                    "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}], ",", "#1"}], "]"}]}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", 
                    "\[LeftDoubleBracket]", 
                    "ComputationalEngine`CreateEulerEq`n", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`n", ",", "1", 
                    ",", 
                    RowBox[{
                    "Length", "[", "ComputationalEngine`CreateEulerEq`mods", 
                    "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffWcAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffPdAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffBondAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}], 
                    Table[
                    Map[Not[
                    FreeQ[
                    Part[
                    Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                    ComputationalEngine`CreateEulerEq`n], #]]& , 
                    Part[
                    ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                    ComputationalEngine`CreateEulerEq`n]], {
                    ComputationalEngine`CreateEulerEq`n, 1, 
                    Length[ComputationalEngine`CreateEulerEq`mods]}]}]]]], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]], StripOnInput -> False, 
                    Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316434043663*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "65432189-5b46-4841-b81e-4cbef68306f9", "TestID" -> 
       "CreateEulerEq_20230820-Q4Z5LO", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "8305a050-c22a-486b-b19b-a56b18d53fb5", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 1], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffWcAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 2], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffPdAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 3], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffBondAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}], 
            Table[
             Map[Not[
               FreeQ[
                Part[
                 Part[ComputationalEngine`CreateEulerEq`eeAll, 
                  Span[1, All], 4], 
                 ComputationalEngine`CreateEulerEq`n], #]]& , 
              Part[
              ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
               ComputationalEngine`CreateEulerEq`n]], {
             ComputationalEngine`CreateEulerEq`n, 1, 
              Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
       "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[False], 
       "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       0.001233`3.2414780744277216, "CPUTimeUsed" -> 0.0012410000000002697`, 
       "MemoryUsed" -> 14376, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
       "Failure"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"7815033166971378501", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-JHMC1M\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-JHMC1M\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-JHMC1M"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
           GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"],
                   ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
                 BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
                 Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                InsetBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "TestFailureIcon"], 
                   ImageSizeCache -> {15., {4., 11.}}], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]]], AspectRatio -> 1, Axes -> False, 
                Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-JHMC1M\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-JHMC1M\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-JHMC1M"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], "}"}], 
                    "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"0", "\[Equal]", 
                    "ComputationalEngine`CreateEulerEq`x__"}], 
                    "\[RuleDelayed]", "True"}]}], "]"}], ",", "True"}], "]"}],
                     "===", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}], "+", 
                    "1"}]}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], "}"}], 
                    "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods], 
                    Map[Count[
                    Cases[
                    First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                    0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                    #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 
                    1& , ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    StripOnInput -> False, Background -> GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceRepeated, "reps"]]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceAll, "reps"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], StripOnInput -> False, Background -> 
                    GrayLevel[0.85]]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, ImageSize -> 
                    Automatic], Short[#, 
                    Rational[2, 3]]& ], BaselinePosition -> Baseline, 
                    ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 500}, Automatic}, StripOnInput -> True],
                     "SummaryItem"]}]}}, AutoDelete -> False, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
             False, BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316434072591*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "458368c3-d390-4df6-ba8a-44e579913cf3", "TestID" -> 
       "CreateEulerEq_20230820-JHMC1M", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "9e443f57-4ab2-4292-ae19-7d52029f02e5", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`j], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[Count[
               Cases[
                First[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #, True]], 
                0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                   BlankSequence[]] :> True], True] === Length[
                #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
             ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedMessages" -> 
       HoldForm[{}], "ActualOutput" -> HoldForm[False], "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceRepeated, "reps"]]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTimeUsed" -> 
       16.635447`7.3715494728309565, "CPUTimeUsed" -> 16.758347999999998`, 
       "MemoryUsed" -> 135098048, "ExpectedOutput" -> HoldForm[True], 
       "Outcome" -> "Failure"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"7448897495289333306", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-JD404O\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-JD404O\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-JD404O"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-JD404O\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-JD404O\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-JD404O"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}]}],
                     "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`t"}], "]"}], "&"}], 
                    ")"}], "/@", "ComputationalEngine`CreateEulerEq`mods"}]}],
                     "}"}], "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FreeQ[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True], 
                    ComputationalEngine`CreateEulerEq`t]& , 
                    ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceRepeated, "reps"]]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceAll, "reps"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316450708568*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "e7bb79fd-e5ac-4d91-be0f-60e4f147863b", "TestID" -> 
       "CreateEulerEq_20230820-JD404O", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "20b0a53c-3878-4272-9085-db2373e334bc", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`j], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods], 
            Map[FreeQ[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #, True], 
              ComputationalEngine`CreateEulerEq`t]& , 
             ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedMessages" -> 
       HoldForm[{}], "ActualOutput" -> HoldForm[False], "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceRepeated, "reps"]]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTimeUsed" -> 
       7.200382`7.007870535387047, "CPUTimeUsed" -> 7.183685999999998, 
       "MemoryUsed" -> 8821400, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
       "Failure"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"971623629882108983", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-0UIR4J\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-0UIR4J\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-0UIR4J"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "TestFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Failure\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-0UIR4J\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-0UIR4J\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-0UIR4J"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1", ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}]}], "}"}], 
                    "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "===", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "#1", ",", "True"}], "]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}]}], "}"}], 
                    "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    
                    Flatten[{Map[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`j], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], #]& , 
                    ComputationalEngine`CreateEulerEq`mods], 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]& , 
                    ComputationalEngine`CreateEulerEq`mods] === 
                    Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], #, True]& , 
                    ComputationalEngine`CreateEulerEq`mods]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceRepeated, "reps"]]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceAll, "reps"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316457909537*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "2e135c8f-0522-4b48-b4ac-542d91d95954", "TestID" -> 
       "CreateEulerEq_20230820-0UIR4J", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "58ebf24e-f716-476a-ba41-5807cbbf4eab", "Input" -> HoldForm[
         Apply[And, 
          
          Flatten[{
           Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`j], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], #]& , 
              ComputationalEngine`CreateEulerEq`mods], 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #, True]& , 
              ComputationalEngine`CreateEulerEq`mods] === 
            Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], #, True]& , 
              ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedMessages" -> 
       HoldForm[{}], "ActualOutput" -> HoldForm[False], "ActualMessages" -> {
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceRepeated, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceRepeated, "reps"]]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[ReplaceAll, "reps"], 
           HoldForm[{
             Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
         HoldForm[
          Message[
           MessageName[General, "stop"], 
           HoldForm[
            MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTimeUsed" -> 
       14.035415`7.297740256237819, "CPUTimeUsed" -> 14.115884000000001`, 
       "MemoryUsed" -> 733056, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
       "Failure"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.895431492563198*^9, 3.901526895282794*^9, 
  3.901527512051673*^9, 3.903316496663375*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"232ea0b6-949c-435f-b65d-eca16698bbb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}]], "Input",
 CellChangeTimes->{3.891216973918013*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"72b3648a-0cee-4dc9-be71-a2ec78ccaeb6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"8794141114673100555", "\[Rule]", 
   InterpretationBox[
    RowBox[{
     TagBox["TestObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-PX7O15\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-PX7O15\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-PX7O15"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "MessageFailureIcon"]], Alignment -> 
                    Center, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"MessagesFailure\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-PX7O15\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-PX7O15\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-PX7O15"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    
                    RowBox[{"{", 
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
\"", "}"}], "===", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}]}], 
                    "}"}], "]"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    
                    RowBox[{"{", 
                    "\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
\"", "}"}], "===", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", "#1"}],
                     "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "#1"}], "]"}], "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Context", "[", 
                    RowBox[{"Evaluate", "[", "#1", "]"}], "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Rest", "[", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", "#1",
                     ",", "True"}], "]"}], "]"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "0", ",", "0"}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}], "]"}]}]}], 
                    "}"}], "]"}], "]"}]}], "\"Copy to clipboard.\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    
                    Unevaluated[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
                    DeleteDuplicates[
                    Flatten[{
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                    Span[1, All], 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]], 
                    Map[Context[
                    Evaluate[#]]& , 
                    Flatten[
                    Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                    Span[1, All], 0, 0]& , 
                    ComputationalEngine`CreateEulerEq`mods]]]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual messages: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], "MessageName"],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    "\"toStateVars\"", "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "reps"}], 
                    "MessageName"]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Missing", "[", 
                    RowBox[{"\"KeyAbsent\"", ",", "\"DES\""}], "]"}], "[", 
                    RowBox[{"\"exogenousEq\"", ",", "\"endogenousEq\""}], 
                    "]"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"General", "::", "stop"}], "MessageName"], ",", 
                    StyleBox[
                    RowBox[{"ReplaceAll", "::", "reps"}], "MessageName"]}], 
                    "]"}]}], "}"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[{
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceRepeated, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceRepeated, "reps"]]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[ReplaceAll, "reps"], 
                    HoldForm[{
                    Missing["KeyAbsent", "DES"][
                    "exogenousEq", "endogenousEq"]}]]], 
                    HoldForm[
                    Message[
                    MessageName[General, "stop"], 
                    HoldForm[
                    MessageName[ReplaceAll, "reps"]]]]}]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestObject[<|
     "MetaInformation" -> None, "AbsoluteTime" -> 3.903316471945537*^9, 
      "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
      "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
      DirectedInfinity[1], "CreationID" -> 
      "918fbb05-10f8-43fd-9af0-ac05db9ccfc2", "TestID" -> 
      "CreateEulerEq_20230820-PX7O15", "TestFileName" -> 
      "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
      "a62d1adc-bf7b-40a0-b1ad-142fb0b1c153", "Input" -> 
      HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
        DeleteDuplicates[
          Flatten[{
            Map[Context[
              Evaluate[#]]& , 
             Flatten[
              Map[Part[
                Flatten[
                 Rest[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                   ComputationalEngine`CreateEulerEq`retc[
                   ComputationalEngine`CreateEulerEq`t], #]]], 
                Span[1, All], 0]& , ComputationalEngine`CreateEulerEq`mods]]], 
            Map[Context[
              Evaluate[#]]& , 
             Flatten[
              Map[Part[
                Flatten[
                 Rest[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                   ComputationalEngine`CreateEulerEq`ret[
                   ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                Span[1, All], 0, 0]& , 
               ComputationalEngine`CreateEulerEq`mods]]], 
            Map[Context[
              Evaluate[#]]& , 
             Flatten[
              Map[Part[
                Flatten[
                 Rest[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                   ComputationalEngine`CreateEulerEq`bondret[
                   ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                Span[1, All], 0, 0]& , 
               ComputationalEngine`CreateEulerEq`mods]]], 
            Map[Context[
              Evaluate[#]]& , 
             Flatten[
              Map[Part[
                Flatten[
                 Rest[
                  
                  FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                   ComputationalEngine`CreateEulerEq`nombondret[
                   ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                Span[1, All], 0, 0]& , 
               ComputationalEngine`CreateEulerEq`mods]]]}]]], 
      "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True], 
      "ActualMessages" -> {
        HoldForm[
         Message[
          MessageName[ReplaceAll, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
        HoldForm[
         Message[
          MessageName[ReplaceRepeated, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
        HoldForm[
         Message[
          MessageName[ReplaceRepeated, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
        HoldForm[
         Message[
          MessageName[ReplaceRepeated, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["toStateVars"]}]]], 
        HoldForm[
         Message[
          MessageName[General, "stop"], 
          HoldForm[
           MessageName[ReplaceRepeated, "reps"]]]], 
        HoldForm[
         Message[
          MessageName[ReplaceAll, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
        HoldForm[
         Message[
          MessageName[ReplaceAll, "reps"], 
          HoldForm[{
            Missing["KeyAbsent", "DES"]["exogenousEq", "endogenousEq"]}]]], 
        HoldForm[
         Message[
          MessageName[General, "stop"], 
          HoldForm[
           MessageName[ReplaceAll, "reps"]]]]}, "AbsoluteTimeUsed" -> 
      7.091072`7.001226892886961, "CPUTimeUsed" -> 7.130248999999999, 
      "MemoryUsed" -> 308320, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
      "MessagesFailure"|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.901526899024935*^9, 3.901527514486752*^9, 
  3.903316499202692*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"28c1af9d-f9a3-44bc-89a8-691f7d78fa3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.895422591422832*^9, 3.89542259294866*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"281bd614-8e68-4b51-a25c-d118be0d8280"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"5573954934645473919", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-UJLDBE\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-UJLDBE\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-UJLDBE"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-UJLDBE\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-UJLDBE\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-UJLDBE"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    RowBox[{"Get", "[", 
                    RowBox[{"Get", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"FernandoDuarte/LongRunRisk\"", ",", 
                    "\"Models.wl\""}], "}"}], "]"}], "]"}], "]"}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "=", 
                    "FernandoDuarte`LongRunRisk`Models"}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"BY\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"NRC\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"DES\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`mods", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", ",", 
                    "ComputationalEngine`CreateEulerEq`modNRC", ",", 
                    "ComputationalEngine`CreateEulerEq`modDES"}], "}"}]}], 
                    ";"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    RowBox[{"Get", "[", 
                    RowBox[{"Get", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"FernandoDuarte/LongRunRisk\"", ",", 
                    "\"Models.wl\""}], "}"}], "]"}], "]"}], "]"}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "=", 
                    "FernandoDuarte`LongRunRisk`Models"}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "=", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"BY\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"NRC\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`msp", "[", 
                    "\"DES\"", "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`mods", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", ",", 
                    "ComputationalEngine`CreateEulerEq`modNRC", ",", 
                    "ComputationalEngine`CreateEulerEq`modDES"}], "}"}]}], 
                    ";"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Get[
                    Get[
                    
                    FileNameJoin[{"FernandoDuarte/LongRunRisk", 
                    "Models.wl"}]]]; 
                    ComputationalEngine`CreateEulerEq`msp = 
                    FernandoDuarte`LongRunRisk`Models; 
                    ComputationalEngine`CreateEulerEq`modBY = 
                    ComputationalEngine`CreateEulerEq`msp["BY"]; 
                    ComputationalEngine`CreateEulerEq`modNRC = 
                    ComputationalEngine`CreateEulerEq`msp["NRC"]; 
                    ComputationalEngine`CreateEulerEq`modDES = 
                    ComputationalEngine`CreateEulerEq`msp["DES"]; 
                    ComputationalEngine`CreateEulerEq`mods = {
                    ComputationalEngine`CreateEulerEq`modBY, 
                    ComputationalEngine`CreateEulerEq`modNRC, 
                    ComputationalEngine`CreateEulerEq`modDES}; Null]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316433819695*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "be161d1b-4be0-4cd1-8445-7c1d3fbbbbd8", "TestID" -> 
       "CreateEulerEq_20230820-UJLDBE", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "981dd977-8f65-4bff-b9fe-7603536d56ef", "Input" -> HoldForm[Get[
           Get[
            FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
         ComputationalEngine`CreateEulerEq`msp = 
          FernandoDuarte`LongRunRisk`Models; 
         ComputationalEngine`CreateEulerEq`modBY = 
          ComputationalEngine`CreateEulerEq`msp["BY"]; 
         ComputationalEngine`CreateEulerEq`modNRC = 
          ComputationalEngine`CreateEulerEq`msp["NRC"]; 
         ComputationalEngine`CreateEulerEq`modDES = 
          ComputationalEngine`CreateEulerEq`msp["DES"]; 
         ComputationalEngine`CreateEulerEq`mods = {
           ComputationalEngine`CreateEulerEq`modBY, 
            ComputationalEngine`CreateEulerEq`modNRC, 
            ComputationalEngine`CreateEulerEq`modDES}; Null], 
       "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
       "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       0.093124`5.119576619998398, "CPUTimeUsed" -> 0.09812900000000013, 
       "MemoryUsed" -> 6016896, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
       "Success"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"5507937093117306378", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-XD2P9G\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-XD2P9G\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-XD2P9G"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-XD2P9G\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-XD2P9G\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-XD2P9G"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    
                    RowBox[{"Needs", "[", 
                    "\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`\"", "]"}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nomeulereq", 
                    "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], 
                    "}"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWc", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefwc", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPd", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBond", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffNomBond", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWc", "/@",
                     "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPd", "/@",
                     "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBond", 
                    "/@", "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", "=", 
                    
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffNomBond", 
                    "/@", "ComputationalEngine`CreateEulerEq`mods"}]}], ";"}],
                     True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    
                    RowBox[{"Needs", "[", 
                    "\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`\"", "]"}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`j"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`eulereq", "[", 
                    
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}], ",", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nomeulereq", 
                    "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", "+", "1"}],
                     ",", "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",",
                     "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], 
                    "}"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`eeAll", "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "/@", 
                    "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWc", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefwc", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPd", "[", 
                    "ComputationalEngine`CreateEulerEq`model_", "]"}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBond", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffNomBond", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`i", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`i", ",", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], "]"}]}], 
                    "}"}]}], "]"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWcAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffWc", "/@",
                     "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPdAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffPd", "/@",
                     "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBondAll", 
                    "=", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffBond", 
                    "/@", "ComputationalEngine`CreateEulerEq`mods"}]}], ";", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`coeffNomBondAll", "=", 
                    
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`coeffNomBond", 
                    "/@", "ComputationalEngine`CreateEulerEq`mods"}]}], ";"}],
                     "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"],
                     Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`"]; ComputationalEngine`CreateEulerEq`ee[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := {
                    ComputationalEngine`CreateEulerEq`eulereq[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t + 1], 
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`model], 
                    ComputationalEngine`CreateEulerEq`eulereq[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`j], 
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`model], 
                    ComputationalEngine`CreateEulerEq`eulereq[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`model], 
                    ComputationalEngine`CreateEulerEq`nomeulereq[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t + 1, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`model]}; 
                    ComputationalEngine`CreateEulerEq`eeAll = 
                    Map[ComputationalEngine`CreateEulerEq`ee, 
                    ComputationalEngine`CreateEulerEq`mods]; 
                    ComputationalEngine`CreateEulerEq`coeffWc[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := Table[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefwc[ComputationalEngine`CreateEulerEq`i], {
                    ComputationalEngine`CreateEulerEq`i, 
                    Length[
                    ComputationalEngine`CreateEulerEq`model["stateVars"][
                    ComputationalEngine`CreateEulerEq`t]]}]; 
                    ComputationalEngine`CreateEulerEq`coeffPd[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := Table[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd[ComputationalEngine`CreateEulerEq`i], {
                    ComputationalEngine`CreateEulerEq`i, 
                    Length[
                    ComputationalEngine`CreateEulerEq`model["stateVars"][
                    ComputationalEngine`CreateEulerEq`t]]}]; 
                    ComputationalEngine`CreateEulerEq`coeffBond[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := Table[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[ComputationalEngine`CreateEulerEq`i], {
                    ComputationalEngine`CreateEulerEq`i, 
                    Length[
                    ComputationalEngine`CreateEulerEq`model["stateVars"][
                    ComputationalEngine`CreateEulerEq`t]]}]; 
                    ComputationalEngine`CreateEulerEq`coeffNomBond[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := Table[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[ComputationalEngine`CreateEulerEq`i], {
                    ComputationalEngine`CreateEulerEq`i, 
                    Length[
                    ComputationalEngine`CreateEulerEq`model["stateVars"][
                    ComputationalEngine`CreateEulerEq`t]]}]; 
                    ComputationalEngine`CreateEulerEq`coeffWcAll = 
                    Map[ComputationalEngine`CreateEulerEq`coeffWc, 
                    ComputationalEngine`CreateEulerEq`mods]; 
                    ComputationalEngine`CreateEulerEq`coeffPdAll = 
                    Map[ComputationalEngine`CreateEulerEq`coeffPd, 
                    ComputationalEngine`CreateEulerEq`mods]; 
                    ComputationalEngine`CreateEulerEq`coeffBondAll = 
                    Map[ComputationalEngine`CreateEulerEq`coeffBond, 
                    ComputationalEngine`CreateEulerEq`mods]; 
                    ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
                    Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
                    ComputationalEngine`CreateEulerEq`mods]; Null]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316433913336*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "c4083736-2349-4158-86f7-a6f0d09eb57b", "TestID" -> 
       "CreateEulerEq_20230820-XD2P9G", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "778616e0-23fc-4ece-a52b-09c61034dd2a", "Input" -> 
       HoldForm[
        Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]\
; ComputationalEngine`CreateEulerEq`ee[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := {
            ComputationalEngine`CreateEulerEq`eulereq[
             ComputationalEngine`CreateEulerEq`retc[
             ComputationalEngine`CreateEulerEq`t + 1], 
             ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`model], 
            ComputationalEngine`CreateEulerEq`eulereq[
             ComputationalEngine`CreateEulerEq`ret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`j], 
             ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`model], 
            ComputationalEngine`CreateEulerEq`eulereq[
             ComputationalEngine`CreateEulerEq`bondret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`m], 
             ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`model], 
            ComputationalEngine`CreateEulerEq`nomeulereq[
             ComputationalEngine`CreateEulerEq`nombondret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`m], 
             ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`model]}; 
         ComputationalEngine`CreateEulerEq`eeAll = 
          Map[ComputationalEngine`CreateEulerEq`ee, 
            ComputationalEngine`CreateEulerEq`mods]; 
         ComputationalEngine`CreateEulerEq`coeffWc[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := Table[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
            ComputationalEngine`CreateEulerEq`i], {
            ComputationalEngine`CreateEulerEq`i, 
             Length[
              ComputationalEngine`CreateEulerEq`model["stateVars"][
              ComputationalEngine`CreateEulerEq`t]]}]; 
         ComputationalEngine`CreateEulerEq`coeffPd[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := Table[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
            ComputationalEngine`CreateEulerEq`i], {
            ComputationalEngine`CreateEulerEq`i, 
             Length[
              ComputationalEngine`CreateEulerEq`model["stateVars"][
              ComputationalEngine`CreateEulerEq`t]]}]; 
         ComputationalEngine`CreateEulerEq`coeffBond[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := Table[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
            ComputationalEngine`CreateEulerEq`i], {
            ComputationalEngine`CreateEulerEq`i, 
             Length[
              ComputationalEngine`CreateEulerEq`model["stateVars"][
              ComputationalEngine`CreateEulerEq`t]]}]; 
         ComputationalEngine`CreateEulerEq`coeffNomBond[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := Table[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
            ComputationalEngine`CreateEulerEq`i], {
            ComputationalEngine`CreateEulerEq`i, 
             Length[
              ComputationalEngine`CreateEulerEq`model["stateVars"][
              ComputationalEngine`CreateEulerEq`t]]}]; 
         ComputationalEngine`CreateEulerEq`coeffWcAll = 
          Map[ComputationalEngine`CreateEulerEq`coeffWc, 
            ComputationalEngine`CreateEulerEq`mods]; 
         ComputationalEngine`CreateEulerEq`coeffPdAll = 
          Map[ComputationalEngine`CreateEulerEq`coeffPd, 
            ComputationalEngine`CreateEulerEq`mods]; 
         ComputationalEngine`CreateEulerEq`coeffBondAll = 
          Map[ComputationalEngine`CreateEulerEq`coeffBond, 
            ComputationalEngine`CreateEulerEq`mods]; 
         ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
          Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
            ComputationalEngine`CreateEulerEq`mods]; Null], 
       "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
       "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       0.001234`3.2418301575292126, "CPUTimeUsed" -> 0.0012380000000007385`, 
       "MemoryUsed" -> 101384, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
       "Success"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"249147135681133925", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-13QTF7\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-13QTF7\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-13QTF7"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-13QTF7\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-13QTF7\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-13QTF7"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"!", 
                    RowBox[{
                    RowBox[{"Names", "[", "\"*eulereq\"", "]"}], "===", 
                    RowBox[{"{", "}"}]}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"!", 
                    RowBox[{
                    RowBox[{"Names", "[", "\"*eulereq\"", "]"}], "===", 
                    RowBox[{"{", "}"}]}]}], "\"Copy to clipboard.\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Not[Names["*eulereq"] === {}]]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.903316433914848*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "89edb91f-0fb7-4764-90c3-aa78aa2f9141", "TestID" -> 
       "CreateEulerEq_20230820-13QTF7", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "43949108-8155-4f1e-8877-dbe1bc305088", "Input" -> HoldForm[
         Not[Names["*eulereq"] === {}]], "ExpectedMessages" -> HoldForm[{}], 
       "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
       "AbsoluteTimeUsed" -> 0.029611`4.621968072129379, "CPUTimeUsed" -> 
       0.02964499999999859, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
       HoldForm[True], "Outcome" -> "Success"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"3796409800222695486", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-0SCP5W\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-0SCP5W\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-0SCP5W"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-0SCP5W\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-0SCP5W\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-0SCP5W"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modBY", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modNRC", "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modDES", "]"}]}]}], 
                    "}"}], "]"}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modBY", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modBY", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modNRC", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modNRC", "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`modDES", "[", 
                    "\"stateVars\"", "]"}], "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    SuperscriptBox[
                    
                    RowBox[{"_Symbol", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], 
                    "ComputationalEngine`CreateEulerEq`p_."], ",", 
                    "\[Infinity]"}], "]"}], "]"}]}], "]"}], "]"}], "]"}], 
                    "\[Equal]", "1"}], "&"}], ")"}], "/@", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`ee", "[", 
                    "ComputationalEngine`CreateEulerEq`modDES", "]"}]}]}], 
                    "}"}], "]"}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Apply[And, 
                    Flatten[{
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modBY]], 
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modNRC]], 
                    Map[Max[
                    Keys[
                    CoefficientRules[#, 
                    DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
                    ComputationalEngine`CreateEulerEq`ee[
                    ComputationalEngine`CreateEulerEq`modDES]]}]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "False", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "False", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[False]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.90331643394486*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "b9d69f2a-fc07-44a5-ae0e-92d8b03aaee9", "TestID" -> 
       "CreateEulerEq_20230820-0SCP5W", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "aff313b2-08ab-4bf8-bb78-3aff5dc6885e", "Input" -> HoldForm[
         Apply[And, 
          Flatten[{
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modBY]], 
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modNRC]], 
            Map[Max[
               Keys[
                CoefficientRules[#, 
                 DeleteDuplicates[
                  Cases[
                   ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                   ComputationalEngine`CreateEulerEq`t], 
                   Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
             ComputationalEngine`CreateEulerEq`ee[
             ComputationalEngine`CreateEulerEq`modDES]]}]]], 
       "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[False], 
       "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
       0.098431`5.143646895131909, "CPUTimeUsed" -> 0.09849099999999922, 
       "MemoryUsed" -> 8016, "ExpectedOutput" -> HoldForm[False], "Outcome" -> 
       "Success"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"9217285165197883177", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["TestObject",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-PF3P04\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-PF3P04\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-PF3P04"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 InsetBox[
                  BoxData[
                   FormBox[
                    PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
                PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
                Axes -> False, AspectRatio -> 1, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.55]]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Success\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox[
                    "\"CreateEulerEq_20230820-PF3P04\"", HoldForm], True -> 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"CreateEulerEq_20230820-PF3P04\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["CreateEulerEq_20230820-PF3P04"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", ",", 
                    "ComputationalEngine`CreateEulerEq`e1", ",", 
                    "ComputationalEngine`CreateEulerEq`e2", ",", 
                    "ComputationalEngine`CreateEulerEq`e3", ",", 
                    "ComputationalEngine`CreateEulerEq`e0p", ",", 
                    "ComputationalEngine`CreateEulerEq`e1p", ",", 
                    "ComputationalEngine`CreateEulerEq`e2p", ",", 
                    "ComputationalEngine`CreateEulerEq`e3p"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`model"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model", ",", "True"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Normal", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"parameters\"", "]"}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "\[Rule]", "4"}], "]"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e0p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e1p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e2p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e3p"}]}], "}"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"And", "@@", 
                    RowBox[{"BooleanQ", "/@", 
                    RowBox[{"Flatten", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`modBY", "]"}], 
                    "]"}]}]}]}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`model_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", ",", 
                    "ComputationalEngine`CreateEulerEq`e1", ",", 
                    "ComputationalEngine`CreateEulerEq`e2", ",", 
                    "ComputationalEngine`CreateEulerEq`e3", ",", 
                    "ComputationalEngine`CreateEulerEq`e0p", ",", 
                    "ComputationalEngine`CreateEulerEq`e1p", ",", 
                    "ComputationalEngine`CreateEulerEq`e2p", ",", 
                    "ComputationalEngine`CreateEulerEq`e3p"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`retc", "[", 
                    "ComputationalEngine`CreateEulerEq`t", "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ComputationalEngine`CreateEulerEq`ret", "[", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", "1"}],
                     "]"}], ",", "ComputationalEngine`CreateEulerEq`model"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`bondret", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", "=", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`nombondret", 
                    "[", 
                    RowBox[{
                    "ComputationalEngine`CreateEulerEq`t", ",", 
                    "ComputationalEngine`CreateEulerEq`m"}], "]"}], ",", 
                    "ComputationalEngine`CreateEulerEq`model", ",", "True"}], 
                    "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Normal", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`model", "[", 
                    "\"parameters\"", "]"}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                    "\[Rule]", "4"}], "]"}], ",", 
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Ewc", "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd", "[", "_", "]"}], "\[Rule]", "4"}], ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
Epd", "[", "_", "]"}], "\[Rule]", "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3p", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0p", ",", 
                    RowBox[{
                    
                    RowBox[{
                    "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "ComputationalEngine`CreateEulerEq`m_", "]"}], "\[Rule]", 
                    "4"}]}], "}"}], "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e0", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e0p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e1", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e1p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e2", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e2p"}], ",", 
                    RowBox[{
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`e3", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "/.", "\[VeryThinSpace]", 
                    "ComputationalEngine`CreateEulerEq`e3p"}]}], "}"}]}]}], 
                    "]"}]}], ";", 
                    RowBox[{"And", "@@", 
                    RowBox[{"BooleanQ", "/@", 
                    RowBox[{"Flatten", "[", 
                    
                    RowBox[{"ComputationalEngine`CreateEulerEq`checkBoolean", 
                    "[", "ComputationalEngine`CreateEulerEq`modBY", "]"}], 
                    "]"}]}]}]}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[ComputationalEngine`CreateEulerEq`checkBoolean[
                    Pattern[ComputationalEngine`CreateEulerEq`model, 
                    Blank[]]] := 
                    Module[{ComputationalEngine`CreateEulerEq`e0, 
                    ComputationalEngine`CreateEulerEq`e1, 
                    ComputationalEngine`CreateEulerEq`e2, 
                    ComputationalEngine`CreateEulerEq`e3, 
                    ComputationalEngine`CreateEulerEq`e0p, 
                    ComputationalEngine`CreateEulerEq`e1p, 
                    ComputationalEngine`CreateEulerEq`e2p, 
                    ComputationalEngine`CreateEulerEq`e3p}, 
                    ComputationalEngine`CreateEulerEq`e0 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e1 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 1], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e2 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`model]; 
                    ComputationalEngine`CreateEulerEq`e3 = 
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], 
                    ComputationalEngine`CreateEulerEq`model, True]; 
                    ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                    Normal[
                    ComputationalEngine`CreateEulerEq`model["parameters"]], 
                    Thread[
                    Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                    4}]; ComputationalEngine`CreateEulerEq`e1p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefpd[
                    Blank[]] -> 4, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    
                    Blank[]] -> 4}]; 
                    ComputationalEngine`CreateEulerEq`e2p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
                    ComputationalEngine`CreateEulerEq`e3p = 
                    Flatten[{ComputationalEngine`CreateEulerEq`e0p, 
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                    ComputationalEngine`CreateEulerEq`e0p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                    ComputationalEngine`CreateEulerEq`e1p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                    ComputationalEngine`CreateEulerEq`e2p], 
                    ReplaceAll[
                    Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                    ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
                    Map[BooleanQ, 
                    Flatten[
                    ComputationalEngine`CreateEulerEq`checkBoolean[
                    ComputationalEngine`CreateEulerEq`modBY]]]]]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "True", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "True", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[True]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TestObject[<|
      "MetaInformation" -> None, "AbsoluteTime" -> 3.9033164790373077`*^9, 
       "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
       "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
       DirectedInfinity[1], "CreationID" -> 
       "bdae4805-221a-4669-a38d-ddf62a2c1d01", "TestID" -> 
       "CreateEulerEq_20230820-PF3P04", "TestFileName" -> 
       "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
       "09715676-7143-4b8a-91c6-080c44036770", "Input" -> 
       HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
            Pattern[ComputationalEngine`CreateEulerEq`model, 
             Blank[]]] := 
          Module[{ComputationalEngine`CreateEulerEq`e0, 
             ComputationalEngine`CreateEulerEq`e1, 
             ComputationalEngine`CreateEulerEq`e2, 
             ComputationalEngine`CreateEulerEq`e3, 
             ComputationalEngine`CreateEulerEq`e0p, 
             ComputationalEngine`CreateEulerEq`e1p, 
             ComputationalEngine`CreateEulerEq`e2p, 
             ComputationalEngine`CreateEulerEq`e3p}, 
            ComputationalEngine`CreateEulerEq`e0 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e1 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 1], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e2 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`model]; 
            ComputationalEngine`CreateEulerEq`e3 = 
             FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`model, True]; 
            ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                Normal[
                 ComputationalEngine`CreateEulerEq`model["parameters"]], 
                Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                4}]; ComputationalEngine`CreateEulerEq`e1p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                  Blank[]] -> 4, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                  Blank[]] -> 4}]; 
            ComputationalEngine`CreateEulerEq`e2p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                  Pattern[ComputationalEngine`CreateEulerEq`m, 
                   Blank[]]] -> 4}]; 
            ComputationalEngine`CreateEulerEq`e3p = 
             Flatten[{
               ComputationalEngine`CreateEulerEq`e0p, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                  Pattern[ComputationalEngine`CreateEulerEq`m, 
                   Blank[]]] -> 4}]; {
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e0, 1], 
               ComputationalEngine`CreateEulerEq`e0p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e1, 1], 
               ComputationalEngine`CreateEulerEq`e1p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e2, 1], 
               ComputationalEngine`CreateEulerEq`e2p], 
              ReplaceAll[
               Part[ComputationalEngine`CreateEulerEq`e3, 1], 
               ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
           Map[BooleanQ, 
            Flatten[
             ComputationalEngine`CreateEulerEq`checkBoolean[
             ComputationalEngine`CreateEulerEq`modBY]]]]], "ExpectedMessages" -> 
       HoldForm[{}], "ActualOutput" -> HoldForm[True], "ActualMessages" -> {},
        "AbsoluteTimeUsed" -> 1.374183`6.288559569418735, "CPUTimeUsed" -> 
       1.3912190000000066`, "MemoryUsed" -> 1369664, "ExpectedOutput" -> 
       HoldForm[True], "Outcome" -> "Success"|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9015269005944777`*^9, 3.901527515573654*^9, 
  3.9033165020760612`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"58df5f91-7142-499f-80c7-85e64fa7f1d6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<AllTestsSucceeded\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.891244270667821*^9, 3.8912442806861467`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"a6c5e524-ea19-4388-b400-11e7955f8ea5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ex", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ExpectedOutput\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ac", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsFailedWrongResults\>\"", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ActualOutput\>\"", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ex", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"ex", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
  "TableForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ac", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ex", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
   "TableForm"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ex", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}], "===", 
    RowBox[{"ac", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"ex", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8911892423610697`*^9, 3.891189408745401*^9}, {
  3.891189440317423*^9, 3.891189493958919*^9}, {3.8911896616276073`*^9, 
  3.891189661921062*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"76cb4ed9-01ec-476a-a9e9-6b94634d9568"],

Cell[BoxData[{
 RowBox[{"ex", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ExpectedMessages\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ac", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<ActualMessages\>\"", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ex", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"ex", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
  "TableForm"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ac", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "i"}], "]"}], "]"}], "//", "Dataset"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ex", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], "//", 
   "TableForm"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ex", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}], "===", 
    RowBox[{"ac", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "i"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"ex", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8912473352654257`*^9, 3.8912473460524397`*^9}, {
  3.891247384832871*^9, 3.8912474129725733`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3618d278-2bdc-4117-943a-ec2c4120cbb3"],

Cell[BoxData[{
 RowBox[{"tr", "[", "\"\<Properties\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"tr", "[", "\"\<TestsFailedWithMessages\>\"", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], ")"}], "[", "\"\<Properties\>\"", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.891247311071122*^9, 3.89124731367701*^9}, {
  3.891247369997828*^9, 3.8912473769236097`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"6969c719-aae4-437c-b901-af76b3071aca"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"keyRename", ",", "models"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"models", "=", " ", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<key1\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<key2\>\"", "->", "B"}]}], " ", "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keyRename", "[", 
   RowBox[{"a_Association", ",", " ", 
    RowBox[{"HoldPattern", "[", 
     RowBox[{"key_", " ", "->", " ", "key_"}], "]"}]}], "]"}], " ", ":=", " ",
   "a"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key1\>\"", ":>", "\"\<key1\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key2\>\"", "->", "\"\<key2\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"keyRename", "[", 
  RowBox[{"models", ",", 
   RowBox[{"\"\<key1\>\"", "->", "\"\<key2\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.891252513394017*^9, 3.8912526675960073`*^9}, {
  3.891252750079225*^9, 3.89125279098596*^9}},
 CellLabel->"",ExpressionUUID->"145c4020-2b7b-424d-be26-24a62efb7eb2"],

Cell[BoxData["HoldPattern"], "Input",
 CellChangeTimes->{{3.8912526951004057`*^9, 
  3.891252696617908*^9}},ExpressionUUID->"5ee11ed9-1b48-4a05-b95e-\
bf6433e60297"],

Cell[BoxData[
 RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"7eacb08d-7f5b-464e-af3c-e1f85d1ec65e"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ex", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}], "[", 
       "5429993755576444103", "]"}], ")"}], "[", "\"\<ExpectedOutput\>\"", 
     "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"ac", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"tr", "[", "\"\<TestsSucceeded\>\"", "]"}], "[", 
       "5429993755576444103", "]"}], ")"}], "[", "\"\<ActualOutput\>\"", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{
  3.891312835745772*^9, {3.891312920186902*^9, 3.8913129515677156`*^9}, {
   3.891313033820343*^9, 3.891313036755728*^9}, 
   3.891313069029059*^9},ExpressionUUID->"86c4bf81-c4ec-4e81-9ee4-\
eb2a9bac87a8"]
},
WindowSize->{1551, 843},
WindowMargins->{{-1753, Automatic}, {Automatic, 46}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6603c207-289c-456f-bd11-6175ead60d45"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 199, 3, 37, "Input",ExpressionUUID->"4a4e2e24-fcb6-4e5b-a6de-9a788f0ea471"],
Cell[CellGroupData[{
Cell[782, 27, 1575, 30, 116, "Input",ExpressionUUID->"b9f2d453-3e98-41bc-b67a-28793e860800"],
Cell[2360, 59, 799, 11, 42, "Output",ExpressionUUID->"0947851e-f791-4f37-8496-d8048c62195a"],
Cell[3162, 72, 821, 12, 42, "Output",ExpressionUUID->"e1785497-7ae2-44a8-ab89-bd75a9e6db95"],
Cell[3986, 86, 2089, 36, 329, "Output",ExpressionUUID->"d0b6aaea-87b3-4ce3-b6e9-454d93eb1704"],
Cell[6078, 124, 837, 13, 42, "Output",ExpressionUUID->"95df616f-c613-4d69-8aff-2df5b4b17385"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6952, 142, 262, 6, 37, "Input",ExpressionUUID->"a02079b6-dc93-4662-a435-00398ad5c39a"],
Cell[7217, 150, 30344, 568, 76, "Output",ExpressionUUID->"9503a873-c2c3-4864-9ef9-62d315a94bcb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37598, 723, 1062, 25, 90, "Input",ExpressionUUID->"1153a7e3-a4a9-44e1-a1d1-2c85ee2d32e0"],
Cell[38663, 750, 36800, 673, 76, "Output",ExpressionUUID->"c19a1363-8232-46c8-bdf2-52f9669d8b52"],
Cell[75466, 1425, 22696, 463, 76, "Output",ExpressionUUID->"23226036-9e0e-4501-9dba-1364baa8edfc"],
Cell[98165, 1890, 29606, 605, 76, "Output",ExpressionUUID->"7187e23d-51a9-49a5-b03e-efd25a5fe54b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127808, 2500, 744, 14, 37, "Input",ExpressionUUID->"16b4a727-0558-4183-a2f8-e2e1a7b3a611"],
Cell[128555, 2516, 168345, 3154, 76, "Output",ExpressionUUID->"b181f30a-7703-4dc8-94f1-2a750149a41c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296937, 5675, 290, 7, 37, "Input",ExpressionUUID->"e330a50a-d51d-4861-9e79-8ecbadd6a684"],
Cell[297230, 5684, 85644, 1569, 76, "Output",ExpressionUUID->"d65a25e1-141e-4a09-a470-b01a7e476aea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382911, 7258, 273, 7, 37, "Input",ExpressionUUID->"5a7b1be5-0bb0-47d8-8966-c6eaeeeabe17"],
Cell[383187, 7267, 40390, 782, 76, "Output",ExpressionUUID->"d79a1195-f6d0-4f45-81fa-7ae8857f1686"]
}, Open  ]],
Cell[CellGroupData[{
Cell[423614, 8054, 968, 28, 64, "Input",ExpressionUUID->"2f5705e2-54a0-49dc-bed2-96972ce91fe4"],
Cell[424585, 8084, 138016, 3147, 76, "Output",ExpressionUUID->"2aa3659c-2223-4316-b2fc-896298438da4"]
}, Open  ]],
Cell[562616, 11234, 454, 8, 90, "Input",ExpressionUUID->"84c78bb2-8e0f-4b6f-ae00-0d2abae7a844"],
Cell[563073, 11244, 461, 11, 64, "Input",ExpressionUUID->"5121ffd6-f567-4da8-bdc7-b02da924ab5e"],
Cell[563537, 11257, 271, 5, 64, "Input",ExpressionUUID->"7f4ea337-0076-4787-aac5-76cf6f1f79da"],
Cell[563811, 11264, 150, 3, 37, "Input",ExpressionUUID->"e19bde9e-a625-488e-9cf4-b74f7c4fcb22"],
Cell[563964, 11269, 1261, 26, 220, "Input",ExpressionUUID->"6d80ab2b-2576-4050-b521-9cae711fed04"],
Cell[565228, 11297, 289, 7, 37, "Input",ExpressionUUID->"2ebef7d6-d331-419f-a64e-ead93d146e3f"],
Cell[565520, 11306, 174, 2, 37, "Input",ExpressionUUID->"cd632827-fda3-49db-ba6c-c16c6cd48a28"],
Cell[565697, 11310, 314, 8, 37, "Input",ExpressionUUID->"d38c1461-d4f4-423b-8b82-09b784289135"],
Cell[566014, 11320, 155, 3, 37, "Input",ExpressionUUID->"74fa26f9-abc6-4219-a123-f978597737ff"],
Cell[566172, 11325, 295, 5, 37, "Input",ExpressionUUID->"8a9c9e85-8cbf-4e1c-870c-0a5ec229dd8b"],
Cell[566470, 11332, 177, 3, 37, "Input",ExpressionUUID->"89327c75-70af-4b75-adfd-86608c4fe806"],
Cell[CellGroupData[{
Cell[566672, 11339, 164, 2, 37, "Input",ExpressionUUID->"f1d84011-dcfc-4f83-98b5-d531ed681557"],
Cell[566839, 11343, 145958, 3090, 1284, "Output",ExpressionUUID->"232ea0b6-949c-435f-b65d-eca16698bbb2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[712834, 14438, 206, 3, 37, "Input",ExpressionUUID->"72b3648a-0cee-4dc9-be71-a2ec78ccaeb6"],
Cell[713043, 14443, 40205, 878, 78, "Output",ExpressionUUID->"28c1af9d-f9a3-44bc-89a8-691f7d78fa3f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753285, 15326, 220, 3, 37, "Input",ExpressionUUID->"281bd614-8e68-4b51-a25c-d118be0d8280"],
Cell[753508, 15331, 128789, 2554, 305, "Output",ExpressionUUID->"58df5f91-7142-499f-80c7-85e64fa7f1d6"]
}, Open  ]],
Cell[882312, 17888, 225, 3, 37, "Input",ExpressionUUID->"a6c5e524-ea19-4388-b400-11e7955f8ea5"],
Cell[882540, 17893, 2104, 62, 194, "Input",ExpressionUUID->"76cb4ed9-01ec-476a-a9e9-6b94634d9568"],
Cell[884647, 17957, 2013, 59, 194, "Input",ExpressionUUID->"3618d278-2bdc-4117-943a-ec2c4120cbb3"],
Cell[886663, 18018, 481, 10, 64, "Input",ExpressionUUID->"6969c719-aae4-437c-b901-af76b3071aca"],
Cell[887147, 18030, 1143, 29, 168, "Input",ExpressionUUID->"145c4020-2b7b-424d-be26-24a62efb7eb2"],
Cell[888293, 18061, 165, 3, 37, "Input",ExpressionUUID->"5ee11ed9-1b48-4a05-b95e-bf6433e60297"],
Cell[888461, 18066, 155, 2, 37, "Input",ExpressionUUID->"7eacb08d-7f5b-464e-af3c-e1f85d1ec65e"],
Cell[888619, 18070, 769, 21, 90, "Input",ExpressionUUID->"86c4bf81-c4ec-4e81-9ee4-eb2a9bac87a8"]
}
]
*)

