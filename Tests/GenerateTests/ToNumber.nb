(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    656724,      13670]
NotebookOptionsPosition[    602073,      12690]
NotebookOutlinePosition[    648609,      13548]
CellTagsIndexPosition[    648566,      13545]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890031566462019*^9, 3.890031568811056*^9}, 
   3.891753377415228*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DirectoryName", "[", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testContextBase", "=", 
   RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891257888860939*^9, 3.8912578891768503`*^9}, 
   3.905170973360199*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905686461750742*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"47359d2e-3642-43eb-9345-85707f21d251"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
   3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
   3.889967626012704*^9}, 
   3.905679112791342*^9},ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-\
5f3e6c853d88"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellLabel->"In[6]:=",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", "testContextBase", "<>", 
   "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, {
   3.89115778716877*^9, 3.8911577875972347`*^9}, {3.891158046655726*^9, 
   3.8911580470847473`*^9}, 3.891159709758952*^9, {3.8911693241870728`*^9, 
   3.8911693246255407`*^9}, {3.891169516764063*^9, 3.891169517676881*^9}, {
   3.891170663100637*^9, 3.8911706635114517`*^9}, {3.891171054370618*^9, 
   3.8911710548413477`*^9}, {3.8917528896335487`*^9, 3.891752890069537*^9}, {
   3.891753097510297*^9, 3.891753097991836*^9}, {3.905678160665566*^9, 
   3.905678161082013*^9}, {3.905683958323824*^9, 3.905683958932675*^9}, {
   3.905684919813777*^9, 3.905684921171547*^9}, {3.90568674890057*^9, 
   3.905686749466343*^9}},ExpressionUUID->"d1369107-4139-4dd1-97c7-\
29279f71e417"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\"\>"], "Output",
 CellChangeTimes->{3.9056864637049103`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ec815a1f-dff0-4c2c-b1c2-712b07762e3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<Tools`ToNumber`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.891157128406151*^9, 3.8911596416641693`*^9, {3.905155790658827*^9, 
   3.905155792478663*^9}, {3.9056517545463953`*^9, 3.905651755834326*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],

Cell[BoxData["\<\"Tools`ToNumber`\"\>"], "Output",
 CellChangeTimes->{3.905686463711234*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"1f8c751e-757e-4147-b5b5-066a8407fb86"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`ToNumber`\>\"", "]"}],
     ";", "\[IndentingNewLine]", 
    RowBox[{"$ContextPath", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Prepend", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\>\""}], 
       "]"}]}]}], ";"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.905678121257594*^9, 3.905678138447627*^9}, {
  3.905678195053226*^9, 3.9056782031441097`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7ec442b7-0a2a-4d3c-9490-867ae4f98643"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"ToNumber_20231007-AGFTMU\"\>"}],
  SequenceForm["Adding test: ", "ToNumber_20231007-AGFTMU"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9056864640167437`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3129b934-597a-420b-a7bc-7be0575fcf32"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt\"\>"], "Print",
 CellChangeTimes->{3.905686464046074*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ac86c6b8-878b-4914-9842-036771a9d994"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`Tools`ToNumber`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\"];", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\"];\n\t,\n\tNull\n\t,\n\t\
{}\n\t,\n\tTestID->\"ToNumber_20231007-AGFTMU\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.053, "AbsoluteTiming" -> 0.053, 
   "InputString" :> ToString[
     Unevaluated[
     Needs["FernandoDuarte`LongRunRisk`Tools`ToNumber`"]; $ContextPath = 
       DeleteDuplicates[
         Prepend[$ContextPath, 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`"]]; Null], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"ToNumber\"]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\"];\n\t,\n\tNull\n\t,\n\t\
{}\n\t,\n\tTestID->\"ToNumber_20231007-AGFTMU\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686464050282*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d93925db-d402-4fc4-9240-8d33bb041b48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Off", "[", 
     RowBox[{"FindRoot", "::", "lstol"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\>\"", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\>\"", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`TimeAggregation`\>\"",
      "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modBKY", "=", 
     RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRCStochVol", "=", 
     RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"mods", "=", 
     RowBox[{"{", 
      RowBox[{
      "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
       "modNRCStochVol"}], "}"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"define", " ", "expressions", " ", "to", " ", "test"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expr", "[", 
      RowBox[{"t_", ",", "m_", ",", "i_", ",", "mu_"}], "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"wc", "[", "t", "]"}], ",", 
       RowBox[{"pd", "[", 
        RowBox[{"t", ",", "i"}], "]"}], ",", 
       RowBox[{"bond", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nombond", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"bondexcret", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"bondfw", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"bondfwspread", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"bondret", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"bondyield", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"excretc", "[", "t", "]"}], ",", 
       RowBox[{"excret", "[", 
        RowBox[{"t", ",", "i"}], "]"}], ",", 
       RowBox[{"kappa0", "[", "mu", "]"}], ",", 
       RowBox[{"kappa1", "[", "mu", "]"}], ",", 
       RowBox[{"nombondexcret", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nombondfw", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nombondfwspread", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nombondret", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nombondyield", "[", 
        RowBox[{"t", ",", "m"}], "]"}], ",", 
       RowBox[{"nomrf", "[", "t", "]"}], ",", 
       RowBox[{"nomsdf", "[", "t", "]"}], ",", 
       RowBox[{"retc", "[", "t", "]"}], ",", 
       RowBox[{"ret", "[", 
        RowBox[{"t", ",", "i"}], "]"}], ",", 
       RowBox[{"rf", "[", "t", "]"}], ",", 
       RowBox[{"sdf", "[", "t", "]"}], ",", 
       RowBox[{"pi", "[", "t", "]"}], ",", 
       RowBox[{"dc", "[", "t", "]"}], ",", 
       RowBox[{"growth", "[", 
        RowBox[{"dc", ",", "t", ",", 
         RowBox[{"\"\<TimeAggregation\>\"", "->", "2"}], ",", 
         RowBox[{"\"\<numPeriods\>\"", "->", "1"}]}], "]"}], ",", 
       RowBox[{"growth", "[", 
        RowBox[{"dd", ",", "t", ",", "1", ",", 
         RowBox[{"\"\<TimeAggregation\>\"", "->", "2"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"AA", " ", 
        RowBox[{"dc", "[", 
         RowBox[{"t", "+", "1"}], "]"}], 
        RowBox[{"excret", "[", 
         RowBox[{"t", ",", "1"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"AA", " ", 
         RowBox[{"excret", "[", 
          RowBox[{"t", ",", "1"}], "]"}]}], "+", 
        RowBox[{"BB", " ", 
         RowBox[{"nombondyield", "[", 
          RowBox[{"t", ",", "2"}], "]"}]}]}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"ee", "=", 
     RowBox[{"expr", "[", 
      RowBox[{"t", ",", "3", ",", "1", ",", "1"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"e1", "=", 
     RowBox[{"ee", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "define", " ", "expression", " ", "e2", " ", "and", " ", "list", " ", 
      "opts", " ", "to", " ", "test", " ", "options"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"e2", "=", 
     RowBox[{"ee", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"optsList", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"maxMaturity", "->", "6"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<FindRootOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"MaxIterations", "->", "100"}], "}"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "4", "}"}]}], ",", 
           RowBox[{"\"\<Epd\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"MaxIterations", "->", "100"}], "}"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"maxMaturity", "->", "6"}], ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
         RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
         RowBox[{"\"\<Tol\>\"", "->", 
          RowBox[{"10.", "^", 
           RowBox[{"-", "20"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], ",", 
         RowBox[{"maxMaturity", "->", "6"}], ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<DependentVariables\>\"", "->", "Automatic"}], "}"}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"DependentVariables", "->", "Automatic"}], "}"}]}], 
      "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"opts", "=", 
     RowBox[{"optsList", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "5"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"define", " ", "list", " ", "of", " ", "parameters"}], ",", " ",
       "guess", ",", " ", "options", ",", " ", "expr", ",", " ", 
      RowBox[{
      "to", " ", "test", " ", "passing", " ", "new", " ", "parameters"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"newParameters", "=", 
     RowBox[{"{", 
      RowBox[{"delta", "->", "0.99"}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"guessCoeffsSolution", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"optNewParam", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Ewc\>\"", "->", 
           RowBox[{"{", "4", "}"}]}], ",", 
          RowBox[{"\"\<Epd\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
       RowBox[{"MaxIterations", "->", "100"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"exprNewParam", " ", "=", " ", 
     RowBox[{"uncondE", "[", 
      RowBox[{"wc", "[", "t", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ind", "=", "0"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "rules", " ", "to", " ", "evaluate", " ", "numerically", " ", "at", 
           " ", "arbitrarily", " ", "chosen", " ", "values"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"stateVars", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", "_", "]"}], "&"}], "/@", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"Variables", "[", 
                 RowBox[{
                  RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                  "]"}], " ", "]"}], ",", 
                RowBox[{
                 RowBox[{"x_", "[", "_", "]"}], ":>", "x"}]}], "]"}], ",", 
              "0"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"numModel", "=", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Thread", "[", 
             RowBox[{"stateVars", "->", "1."}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                "FernandoDuarte`LongRunRisk`Model`Shocks`eps", "[", "_", 
                 "]"}], "[", "_", "]"}], "->", "1"}], ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "FernandoDuarte`LongRunRisk`Model`Shocks`eps", "[", "_", 
                 "]"}], "[", 
                RowBox[{"_", ",", "_"}], "]"}], "->", "1."}], ",", 
              RowBox[{"mu", "->", "2."}], ",", 
              RowBox[{"AA", "->", 
               RowBox[{"-", "1."}]}], ",", 
              RowBox[{"BB", "->", "3."}]}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"local", " ", "definitions"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`toNum", "=", 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`toEquation", "=", 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`toExogenousVars", "=", 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`toExogenousVars"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`toStateVars", "=", 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`toStateVars"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`processNewParameters", "=", 
          "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters"}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`uncondE", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`uncondVar", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondVar"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`uncondCov", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCov"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`uncondCorr", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCorr"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`ev", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`var", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`cov", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`cov"}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "Tools`ToNumber`corr", "=", 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`corr"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"**", "**", "**", "**"}], "*", "toNum"}], "**********)"}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"toNum", "[", "model", "]"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"tn", "=", 
          RowBox[{"toNum", "[", "model", "]"}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{
           RowBox[{"outTests", "[", 
            RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
           "ind", "]"}], "=", 
          RowBox[{"And", "@@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"NumericQ", "/@", 
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "@", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"e1", "//", "tn"}], ")"}], "//.", "numModel"}], 
                    ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondE", "/@", "e1"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondVar", "/@", "e1"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}]}], 
                   "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                 ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
            "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ind", "=", 
          RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"toNum", "[", 
           RowBox[{"expression", ",", " ", "model"}], "]"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"outTests", "[", 
            RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
           "ind", "]"}], "=", 
          RowBox[{"And", "@@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"NumericQ", "/@", 
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "@", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{"e1", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}]}], 
                 "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
              "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ind", "=", 
          RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"toNum", "[", 
           RowBox[{"\"\<Rules\>\"", ",", " ", "model"}], "]"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"outTests", "[", 
            RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
           "ind", "]"}], "=", 
          RowBox[{"And", "@@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"NumericQ", "/@", 
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Flatten", "@", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{"e1", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}]}], "//.", 
                  RowBox[{"toNum", "[", 
                   RowBox[{"\"\<Rules\>\"", ",", "model"}], "]"}]}], 
                 "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
              "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ind", "=", 
          RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"**", "**", "**", "**"}], "*", "options", " ", "for", " ", 
           "toNum"}], "**********)"}], "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"toNum", "[", "model", "]"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"tn", "=", 
             RowBox[{"toNum", "[", 
              RowBox[{"model", ",", 
               RowBox[{"Sequence", "@@", "opt"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}], "=", 
             RowBox[{"And", "@@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"NumericQ", "/@", 
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"e2", "//", "tn"}], ")"}], "//.", "numModel"}], 
                    ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondE", "/@", "e2"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondVar", "/@", "e2"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}]}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                    ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
               "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"ind", "=", 
             RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"toNum", "[", 
              RowBox[{"expression", ",", " ", "model"}], "]"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}], "=", 
             RowBox[{"And", "@@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"NumericQ", "/@", 
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{"e2", ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e2"}], ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e2"}], ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], " ", 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], ",", 
                    "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}]}], "\[IndentingNewLine]", "}"}]}], 
                    "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
                 "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"ind", "=", 
             RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"toNum", "[", 
              RowBox[{"\"\<Rules\>\"", ",", " ", "model"}], "]"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}], "=", 
             RowBox[{"And", "@@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"NumericQ", "/@", 
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Flatten", "@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{"e2", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e2"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e2"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}]}], "//.", 
                    RowBox[{"toNum", "[", 
                    RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}]}], 
                    "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
                 "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"ind", "=", 
             RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"opt", ",", "opts"}], "}"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "\"\<UpdatePd\>\"", ",", " ", "\"\<UpdateBond\>\"", ",", " ", 
           "\"\<UpdateNomBond\>\"", ",", " ", 
           RowBox[{"\"\<UpdateBonds\>\"", " ", "are", " ", "ignored"}], ",", 
           " ", 
           RowBox[{
            RowBox[{
            "toNum", " ", "always", " ", "uses", " ", "\"\<UpdatePd\>\""}], "->",
             "True"}], ",", 
           RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"outTests", "[", 
            RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
           "ind", "]"}], "=", 
          RowBox[{"And", "@@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"NumericQ", "/@", 
             RowBox[{"(", "\[IndentingNewLine]", 
              RowBox[{"Flatten", "@", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pd", "[", 
                   RowBox[{"t", ",", "1"}], "]"}], "//", 
                  RowBox[{
                   RowBox[{"toNum", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}], "//.",
                    "numModel"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"toNum", "[", 
                   RowBox[{
                    RowBox[{"pd", "[", 
                    RowBox[{"t", ",", "1"}], "]"}], ",", "model", ",", 
                    RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}], "//.",
                   "numModel"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"pd", "[", 
                    RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}], "//.", 
                   RowBox[{"toNum", "[", 
                    RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                    RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}]}], "//.",
                   "numModel"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bondyield", "[", 
                    RowBox[{"t", ",", "2"}], "]"}], ",", 
                    RowBox[{"nombondyield", "[", 
                    RowBox[{"t", ",", "3"}], "]"}]}], "}"}], "//", 
                  RowBox[{
                   RowBox[{"toNum", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}], "//.",
                    "numModel"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"toNum", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bondyield", "[", 
                    RowBox[{"t", ",", "2"}], "]"}], ",", 
                    RowBox[{"nombondyield", "[", 
                    RowBox[{"t", ",", "3"}], "]"}]}], "}"}], ",", "model", 
                    ",", 
                    RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}], "//.",
                   "numModel"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bondyield", "[", 
                    RowBox[{"t", ",", "2"}], "]"}], ",", 
                    RowBox[{"nombondyield", "[", 
                    RowBox[{"t", ",", "3"}], "]"}]}], "}"}], ",", "model"}], 
                    "]"}], "//.", 
                   RowBox[{"toNum", "[", 
                    RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                    RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}]}],
                   "//.", "numModel"}]}], "\[IndentingNewLine]", "}"}]}], 
              "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", 
            ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ind", "=", 
          RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"**", "**", "**", "**"}], "*", "new", " ", "parameters"}],
            ",", " ", 
           RowBox[{"guess", " ", "for", " ", "toNum"}]}], "**********)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"outTests", "[", 
            RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
           "ind", "]"}], "=", 
          RowBox[{"And", "@@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"NumericQ", "/@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{"pass", " ", "new", " ", "parameters"}], "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", "newParameters"}], "]"}], "//.", 
                 "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{"exprNewParam", ",", "model", ",", "newParameters"}],
                  "]"}], "//.", "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "\"\<Rules\>\"", ",", "model", ",", "newParameters"}], 
                  "]"}]}], "//.", "numModel"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"pass", " ", "guess"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}], "//.",
                  "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{"exprNewParam", ",", "model", ",", 
                  RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                   RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}]}], 
                "//.", "numModel"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                "pass", " ", "new", " ", "parameters", " ", "and", " ", 
                 "guess"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "model", ",", "newParameters", ",", "guessCoeffsSolution"}],
                   "]"}], "//.", "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{
                 "exprNewParam", ",", "model", ",", "newParameters", ",", 
                  "guessCoeffsSolution"}], "]"}], "//.", "numModel"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                   "guessCoeffsSolution"}], "]"}]}], "//.", "numModel"}], ",",
                "\n", "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"new", " ", "parameters"}], ",", " ", "guess", ",", 
                 " ", 
                 RowBox[{"and", " ", "options"}]}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", "newParameters", ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                 "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{
                 "exprNewParam", ",", "model", ",", "newParameters", ",", 
                  RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                 "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{"exprNewParam", ",", "model", ",", 
                  RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                  RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                   RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"exprNewParam", "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "model", ",", "newParameters", ",", "guessCoeffsSolution", 
                   ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                 "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{
                 "exprNewParam", ",", "model", ",", "newParameters", ",", 
                  "guessCoeffsSolution", ",", 
                  RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
                "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{
                  "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                   "guessCoeffsSolution", ",", 
                   RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.",
                 "numModel"}]}], "\[IndentingNewLine]", "}"}]}], 
            "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"ind", "=", 
          RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", 
       "]"}], ";"}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]",
     "\[IndentingNewLine]", 
    RowBox[{"noMissingTest", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
        RowBox[{"Sort", "@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "@", 
            RowBox[{"SubValues", "@", "outTests"}]}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"noMissingTest", ",", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", 
            RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
          "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"out", "=", 
     RowBox[{"(*", 
      RowBox[{"And", "@@"}], "*)"}], 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
         RowBox[{"And", "@@", 
          RowBox[{"Values", "@", 
           RowBox[{"SubValues", "@", "outTests"}]}]}]}], 
        "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ")"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"On", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Off", "[", 
     RowBox[{"FindRoot", "::", "lstol"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.905155825352765*^9, 3.9051558420392313`*^9}, {
   3.905155974170395*^9, 3.9051560234035263`*^9}, {3.905174890536059*^9, 
   3.905174895232579*^9}, {3.905651784906973*^9, 3.905651877278462*^9}, {
   3.905651935222211*^9, 3.905651948566352*^9}, {3.905652061141444*^9, 
   3.905652084670477*^9}, {3.905652118813607*^9, 3.905652155924294*^9}, 
   3.905652277636368*^9, 3.905652613078249*^9, {3.905652799738529*^9, 
   3.905652876048349*^9}, {3.90565291160854*^9, 3.905652927480397*^9}, {
   3.9056530256708727`*^9, 3.9056530407582617`*^9}, 3.905653196888523*^9, {
   3.9056582338748617`*^9, 3.9056582351199703`*^9}, {3.9056733309405403`*^9, 
   3.90567333165734*^9}, {3.90567344235441*^9, 3.9056734907650957`*^9}, {
   3.905674761961328*^9, 3.905674829080605*^9}, {3.905676836109086*^9, 
   3.905676866150215*^9}, {3.9056769110161953`*^9, 3.905676912755522*^9}, {
   3.905678117561372*^9, 3.9056781255468273`*^9}, 3.90567819505965*^9, 
   3.9056790838287077`*^9, 3.9056825214044647`*^9, {3.9056827993519907`*^9, 
   3.9056828113557873`*^9}, {3.905683291474573*^9, 3.9056833185752277`*^9}, 
   3.905684380391366*^9, {3.905684663409631*^9, 3.905684664875793*^9}, {
   3.9056849075360603`*^9, 3.905684908400971*^9}, {3.905685528055266*^9, 
   3.905685528204899*^9}, {3.905685718415286*^9, 3.90568573057867*^9}, {
   3.905686373365273*^9, 3.9056863760935173`*^9}, {3.905686432581316*^9, 
   3.9056864431246023`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"cb235074-df95-44d7-a0ca-7e5ab21c0383"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Off[General::stop];\n\tOff[FindRoot::lstol];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\";\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\";\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`\";\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`\";\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`TimeAggregation`\";\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\tGet @ \
Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`ToNumber`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
Tools`ToNumber`modBY = Tools`ToNumber`msp @ \"BY\";\n\tTools`ToNumber`modBKY \
= Tools`ToNumber`msp @ \"BKY\";\n\tTools`ToNumber`modNRC = Tools`ToNumber`msp \
@ \"NRC\";\n\tTools`ToNumber`modDES = Tools`ToNumber`msp @ \"DES\";\n\t\
Tools`ToNumber`modNRCStochVol = Tools`ToNumber`msp @ \"NRCStochVol\";\n\t\
Tools`ToNumber`mods = {Tools`ToNumber`modBY, Tools`ToNumber`modBKY, \
Tools`ToNumber`modNRC, Tools`ToNumber`modDES, Tools`ToNumber`modNRCStochVol};\
\n\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr[Tools`ToNumber`t_, \
Tools`ToNumber`m_, Tools`ToNumber`i_, Tools`ToNumber`mu_] := {\n\t\t\
Tools`ToNumber`wc @ Tools`ToNumber`t, Tools`ToNumber`pd[Tools`ToNumber`t, \
Tools`ToNumber`i],\n\t\tTools`ToNumber`bond[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nombond[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`bondexcret[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`bondfw[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`bondfwspread[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`bondret[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`bondyield[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`excretc @ Tools`ToNumber`t, \
Tools`ToNumber`excret[Tools`ToNumber`t, Tools`ToNumber`i],\n\t\t\
Tools`ToNumber`kappa0 @ Tools`ToNumber`mu, Tools`ToNumber`kappa1 @ \
Tools`ToNumber`mu, Tools`ToNumber`nombondexcret[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nombondfw[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nombondfwspread[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nombondret[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nombondyield[Tools`ToNumber`t, \
Tools`ToNumber`m],\n\t\tTools`ToNumber`nomrf @ Tools`ToNumber`t, \
Tools`ToNumber`nomsdf @ Tools`ToNumber`t, Tools`ToNumber`retc @ \
Tools`ToNumber`t, Tools`ToNumber`ret[Tools`ToNumber`t, Tools`ToNumber`i],\n\t\
\tTools`ToNumber`rf @ Tools`ToNumber`t, Tools`ToNumber`sdf @ \
Tools`ToNumber`t, Tools`ToNumber`pi @ Tools`ToNumber`t, Tools`ToNumber`dc @ \
Tools`ToNumber`t, Tools`ToNumber`growth[Tools`ToNumber`dc, Tools`ToNumber`t, \
\"TimeAggregation\" -> 2, \"numPeriods\" -> 1],\n\t\t\
Tools`ToNumber`growth[Tools`ToNumber`dd, Tools`ToNumber`t, 1, \
\"TimeAggregation\" -> 2],\n\t\tTools`ToNumber`AA * \
Tools`ToNumber`dc[Tools`ToNumber`t + 1] * \
Tools`ToNumber`excret[Tools`ToNumber`t, 1],\n\t\t(Tools`ToNumber`AA * \
Tools`ToNumber`excret[Tools`ToNumber`t, 1]) + Tools`ToNumber`BB * \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, 2]\n\t};\n\tTools`ToNumber`ee = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr[Tools`ToNumber`t, 3, \
1, 1];\n\tTools`ToNumber`e1 = Tools`ToNumber`ee[[1;;3]];\n\tTools`ToNumber`e2 \
= Tools`ToNumber`ee[[1;;2]];\n\tTools`ToNumber`optsList = {\n\t\t{},\n\t\t\
{Tools`ToNumber`maxMaturity -> 6},\n\t\t{\"FindRootOptions\" -> \
{MaxIterations -> 100}},\n\t\t{MaxIterations -> 100},\n\t\t{\"initialGuess\" \
-> <|\"Ewc\" -> {4}, \"Epd\" -> {{4}}|>},\n\t\t{\n\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}, \"Epd\" -> {{4}}|>,\n\t\t\tMaxIterations -> 100\n\t\t},\n\t\
\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}, \"Epd\" -> {{4}}|>,\n\t\t\t\
\"FindRootOptions\" -> {MaxIterations -> 100}\n\t\t},\n\t\t{\n\t\t\t\
Tools`ToNumber`maxMaturity -> 6,\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}, \
\"Epd\" -> {{4}}|>,\n\t\t\tMaxIterations -> 100\n\t\t},\n\t\t\
{\"PrintResidualsNorm\" -> True},\n\t\t{\"CheckResiduals\" -> True, \"Tol\" \
-> 1},\n\t\t{\"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)},\n\t\t{\n\t\t\
\t\"PrintResidualsNorm\" -> True, Tools`ToNumber`maxMaturity -> 6, \
\"initialGuess\" -> <|\"Ewc\" -> {4}, \"Epd\" -> {{4}}|>,\n\t\t\t\
MaxIterations -> 100\n\t\t},\n\t\t{\"RecurrenceTableOptions\" -> \
{\"DependentVariables\" -> Automatic}},\n\t\t{DependentVariables -> \
Automatic}\n\t};\n\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`opts = \
Tools`ToNumber`optsList[[1;;5]];\n\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters = \
{Tools`ToNumber`delta -> 0.99};\n\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution = \
{Tools`ToNumber`A[0] -> 4.6};\n\tTools`ToNumber`optNewParam = {\n\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}, \"Epd\" -> {{4}}|>,\n\t\tMaxIterations \
-> 100\n\t};\n\tTools`ToNumber`exprNewParam = Tools`ToNumber`uncondE @ \
Tools`ToNumber`wc @ Tools`ToNumber`t;\n\tAbortProtect[\n\t\tDo[\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 0;\n\t\t\t\
Tools`ToNumber`stateVars = Map[\n\t\t\t\tSlot[1][_]&,\n\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\tDeleteCases[\n\t\t\t\t\t\tCases[Variables @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[\"stateVars\"][Tools`\
ToNumber`t], Pattern[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x, \
_][_] :> FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x],\n\t\t\t\t\t\t0\
\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\t\tTools`ToNumber`numModel = Join[\n\t\
\t\t\tThread[Tools`ToNumber`stateVars -> 1.],\n\t\t\t\t{\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Shocks`eps[_][_] -> 1,\n\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`Shocks`eps[_][_, _] -> 1.,\n\t\t\t\t\t\
Tools`ToNumber`mu -> 2., Tools`ToNumber`AA -> -1., Tools`ToNumber`BB -> 3.\n\t\
\t\t\t}\n\t\t\t];\n\t\t\tTools`ToNumber`toNum = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum;\n\t\t\t\
Tools`ToNumber`toEquation = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation;\n\t\t\t\
Tools`ToNumber`toExogenousVars = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toExogenousVars;\n\t\t\t\
Tools`ToNumber`toStateVars = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toStateVars;\n\t\t\t\
Tools`ToNumber`processNewParameters = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters;\n\t\t\t\
Tools`ToNumber`uncondE = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE;\n\t\t\tTools`ToNumber`uncondVar = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondVar;\n\t\t\tTools`ToNumber`uncondCov = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCov;\n\t\t\tTools`ToNumber`uncondCorr \
= FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCorr;\n\t\t\tTools`ToNumber`ev = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
ev;\n\t\t\tTools`ToNumber`var = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
var;\n\t\t\tTools`ToNumber`cov = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
cov;\n\t\t\tTools`ToNumber`corr = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
corr;\n\t\t\tTools`ToNumber`tn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model;\n\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\tAnd,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tSameQ[Head \
@ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\tMap[NumericQ,\n\t\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Tools`ToNumber`e1] //. Tools`ToNumber`numModel,\n\t\t\t\t\t\
\t\t\t\tTools`ToNumber`tn[Map[Tools`ToNumber`uncondE, Tools`ToNumber`e1]] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e1]] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[MapThread[Tools`ToNumber`uncondCov[#, #2]&, \
{Tools`ToNumber`e1, Reverse[Tools`ToNumber`e1]}]] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\
\t\tTools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\
\t\tTools`ToNumber`uncondCorr[#, #2]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e1[[1;;2]], Tools`ToNumber`e1[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\
\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1]],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\
\t\t\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1]],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\
\t\t\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\tMapThread[Tools`ToNumber`cov[#, #2, \
Tools`ToNumber`t - 1]&, {Tools`ToNumber`e1, Reverse @ Tools`ToNumber`e1}]\n\t\
\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\
\t\t\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e1[[1;;2]], Tools`ToNumber`e1[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t\
}\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\tAnd,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tSameQ[Head \
@ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\tMap[NumericQ,\n\t\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`e1, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondE, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondVar, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[MapThread[Tools`\
ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e1, Reverse @ \
Tools`ToNumber`e1}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\t\t\t\t\t\t\t\
\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\
MapThread[\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`uncondCorr[#, #2]&,\n\t\t\t\
\t\t\t\t\t\t\t\t\t{Tools`ToNumber`e1[[1;;2]], Tools`ToNumber`e1[[-2;;-1]]}\n\t\
\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\
Map[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e1],\n\t\t\t\t\
\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\
\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\
Map[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e1],\n\t\t\t\
\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\
\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\
\t\t\t],\n\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\
MapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e1, Reverse @ Tools`ToNumber`e1}],\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\
MapThread[\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\t\t\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\
\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\
\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\tAnd,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tSameQ[Head \
@ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\tMap[NumericQ,\n\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
e1, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`\
uncondE, Tools`ToNumber`e1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`\
uncondVar, Tools`ToNumber`e1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[MapThread[Tools`\
ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e1, Reverse @ \
Tools`ToNumber`e1}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\t\t\t\t\t\t\t\
\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`uncondCorr[#, #2]&,\n\t\
\t\t\t\t\t\t\t\t\t\t\t\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\
\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\tMap[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e1],\n\t\t\t\
\t\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\
\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\
\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\tMap[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e1],\n\t\t\
\t\t\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\
\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\
\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\
\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\
\t\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e1, Reverse @ Tools`ToNumber`e1}],\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e1[[1;;2]], Tools`ToNumber`e1[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model]\n\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\tDo[\n\t\t\t\
\tTools`ToNumber`tn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`Private`model, Sequence @@ Tools`ToNumber`opt];\n\t\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\t\tAnd,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\
SameQ[Head @ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\
\tNumericQ,\n\t\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\
\tTools`ToNumber`tn[Tools`ToNumber`e2] //. Tools`ToNumber`numModel,\n\t\t\t\t\
\t\t\t\t\t\tTools`ToNumber`tn[Map[Tools`ToNumber`uncondE, Tools`ToNumber`e2]] \
//. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e2]] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[MapThread[Tools`ToNumber`uncondCov[#, #2]&, \
{Tools`ToNumber`e2, Reverse[Tools`ToNumber`e2]}]] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
\t\t\t\tTools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\t\tMapThread[\n\t\t\t\t\t\t\t\
\t\t\t\t\t\tTools`ToNumber`uncondCorr[#, #2]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e2[[1;;2]], Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2]],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[Map[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2]],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\t\tMapThread[Tools`ToNumber`cov[#, \
#2, Tools`ToNumber`t - 1]&, {Tools`ToNumber`e2, Reverse @ Tools`ToNumber`e2}]\
\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\
\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\
\t\tTools`ToNumber`tn[\n\t\t\t\t\t\t\t\t\t\t\t\tMapThread[\n\t\t\t\t\t\t\t\t\t\
\t\t\t\tTools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\
\t\t\t\t{Tools`ToNumber`e2[[1;;2]], Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\
\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\t\tAnd,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\
SameQ[Head @ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\
\tNumericQ,\n\t\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\
\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`e2, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Apply[Sequence, \
Tools`ToNumber`opt]] //. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondE, \
Tools`ToNumber`e2], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Sequence @@ Tools`ToNumber`opt] //. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\
\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`\
uncondVar, Tools`ToNumber`e2], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt] //. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
MapThread[Tools`ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e2, Reverse @ \
Tools`ToNumber`e2}],\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
MapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`uncondCorr[#, #2]&,\n\t\t\
\t\t\t\t\t\t\t\t\t\t\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
Map[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e2],\n\t\t\t\t\
\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Sequence @@ Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
Map[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e2],\n\t\t\t\
\t\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Sequence @@ Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
MapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e2, Reverse @ Tools`ToNumber`e2}],\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\t\t\t\
MapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e2[[1;;2]], Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\t\tAnd,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\
SameQ[Head @ Tools`ToNumber`tn, Function],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\
\tNumericQ,\n\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\tFlatten[\n\t\
\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`e2, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`\
uncondE, Tools`ToNumber`e2], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`\
uncondVar, Tools`ToNumber`e2], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\
\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[MapThread[\
Tools`ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e2, Reverse @ \
Tools`ToNumber`e2}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\t\t\t\t\t\t\t\
\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\
\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\t\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`uncondCorr[#, \
#2]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\
\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\t\tMap[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e2],\n\t\t\
\t\t\t\t\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\
\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\
\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\
\t\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\
\t\t\t\t\t\t\t\t\tMap[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\t\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e2, Reverse @ Tools`ToNumber`e2}],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\n\t\t\t\t\t\t\t\t\t\t\t\
\t\tMapThread[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - 1]&,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`e2[[1;;2]], Tools`ToNumber`e2[[-2;;-1]]}\n\t\t\t\t\t\t\t\t\t\t\
\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\n\t\t\t\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\
\t\t]\n\t\t\t\t];\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t,\n\t\t\t\t\
{Tools`ToNumber`opt, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`opts}\n\
\t\t\t];\n\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\tAnd,\n\t\t\t\tMap[NumericQ,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\
\t{\n\t\t\t\t\t\t\t\
ReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdatePd\" -> \
False], Tools`ToNumber`numModel][Tools`ToNumber`pd[Tools`ToNumber`t, 1]],\n\t\
\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`pd[\
Tools`ToNumber`t, 1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdatePd\" -> \
False] //. Tools`ToNumber`numModel,\n\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
pd[Tools`ToNumber`t, 1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdatePd\" -> \
False],\n\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\tReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdateBonds\" -> \
False], Tools`ToNumber`numModel][{Tools`ToNumber`bondyield[Tools`ToNumber`t, \
2], Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]}],\n\t\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\t\
{Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]},\n\t\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdateBonds\" -> \
False\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[{Tools`ToNumber`\
bondyield[Tools`ToNumber`t, 2], Tools`ToNumber`nombondyield[Tools`ToNumber`t, \
3]}, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \"UpdateBonds\" -> \
False],\n\t\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\
\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t\t\
Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\"shortname\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] \
= Apply[\n\t\t\t\tAnd,\n\t\t\t\tMap[NumericQ,\n\t\t\t\t\t{\n\t\t\t\t\t\t\
ReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters],\n\t\t\t\t\t\
\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution] //. \
Tools`ToNumber`numModel,\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\n\t\t\
\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\n\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\n\t\t\
\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\n\t\t\
\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam],\n\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\
\t\t][Tools`ToNumber`exprNewParam],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\
\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam],\n\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\
\t\t],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\
\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t][Tools`ToNumber`exprNewParam],\n\t\t\t\t\
\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\
Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\
\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\
\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\"Rules\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\
\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t][Tools`ToNumber`exprNewParam],\n\t\t\t\t\
\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\
Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Tools`ToNumber`numModel\n\t\t\t\t\t\t],\n\t\t\t\t\t\tReplaceRepeated[\n\t\t\t\
\t\t\t\tReplaceRepeated[\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\n\t\t\
\t\t\t\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\n\t\t\t\t\t\t\t\t\
\t\"Rules\", FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\tTools`ToNumber`numModel\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\
\t\t\t];\n\t\t\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\n\t\t,\n\t\t\t\
{FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Tools`ToNumber`mods}\n\t\t];\n\t];\n\tTools`ToNumber`noMissingTest = {};\n\t\
Do[\n\t\tTools`ToNumber`testNumber = Sort[\n\t\t\tCases[Keys @ SubValues @ \
Tools`ToNumber`outTests,\n\t\t\t\tRuleDelayed[\n\t\t\t\t\t\
Verbatim[HoldPattern][Tools`ToNumber`outTests[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`Private`model[\"shortname\"]][Tools`ToNumber`i_Integer]],\n\t\t\
\t\t\tTools`ToNumber`i\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[Tools`ToNumber`noMissingTest, Equal[Range[0, Max @ \
Tools`ToNumber`testNumber], Tools`ToNumber`testNumber]];\n\t,\n\t\t\
{FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Tools`ToNumber`mods}\n\t];\n\tTools`ToNumber`out = Flatten[\n\t\t{\n\t\t\t\
Apply[And, Tools`ToNumber`noMissingTest],\n\t\t\tApply[And, Values @ \
SubValues @ Tools`ToNumber`outTests]\n\t\t}\n\t];\n\tOn[General::stop];\n\t\
Off[FindRoot::lstol];\n\tTools`ToNumber`out", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = {
  True, True}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "{True, True}", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> {True, True}, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 277.549, "AbsoluteTiming" -> 
   269.675, "InputString" :> ToString[
     Unevaluated[Off[
        MessageName[General, "stop"]]; Off[
        MessageName[FindRoot, "lstol"]]; 
      Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`"]; 
      Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`"]; 
      Needs["FernandoDuarte`LongRunRisk`Model`EndogenousEq`"]; 
      Needs["FernandoDuarte`LongRunRisk`Model`ExogenousEq`"]; 
      Needs["FernandoDuarte`LongRunRisk`Tools`TimeAggregation`"]; 
      Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`"]; 
      Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      Tools`ToNumber`msp = FernandoDuarte`LongRunRisk`Models; 
      Tools`ToNumber`modBY = Tools`ToNumber`msp["BY"]; 
      Tools`ToNumber`modBKY = Tools`ToNumber`msp["BKY"]; 
      Tools`ToNumber`modNRC = Tools`ToNumber`msp["NRC"]; 
      Tools`ToNumber`modDES = Tools`ToNumber`msp["DES"]; 
      Tools`ToNumber`modNRCStochVol = Tools`ToNumber`msp["NRCStochVol"]; 
      Tools`ToNumber`mods = {
        Tools`ToNumber`modBY, Tools`ToNumber`modBKY, Tools`ToNumber`modNRC, 
         Tools`ToNumber`modDES, Tools`ToNumber`modNRCStochVol}; 
      FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr[
         Pattern[Tools`ToNumber`t, 
          Blank[]], 
         Pattern[Tools`ToNumber`m, 
          Blank[]], 
         Pattern[Tools`ToNumber`i, 
          Blank[]], 
         Pattern[Tools`ToNumber`mu, 
          Blank[]]] := {
         Tools`ToNumber`wc[Tools`ToNumber`t], 
         Tools`ToNumber`pd[Tools`ToNumber`t, Tools`ToNumber`i], 
         Tools`ToNumber`bond[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nombond[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`bondexcret[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`bondfw[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`bondfwspread[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`bondret[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`bondyield[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`excretc[Tools`ToNumber`t], 
         Tools`ToNumber`excret[Tools`ToNumber`t, Tools`ToNumber`i], 
         Tools`ToNumber`kappa0[Tools`ToNumber`mu], 
         Tools`ToNumber`kappa1[Tools`ToNumber`mu], 
         Tools`ToNumber`nombondexcret[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nombondfw[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nombondfwspread[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nombondret[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nombondyield[Tools`ToNumber`t, Tools`ToNumber`m], 
         Tools`ToNumber`nomrf[Tools`ToNumber`t], 
         Tools`ToNumber`nomsdf[Tools`ToNumber`t], 
         Tools`ToNumber`retc[Tools`ToNumber`t], 
         Tools`ToNumber`ret[Tools`ToNumber`t, Tools`ToNumber`i], 
         Tools`ToNumber`rf[Tools`ToNumber`t], 
         Tools`ToNumber`sdf[Tools`ToNumber`t], 
         Tools`ToNumber`pi[Tools`ToNumber`t], 
         Tools`ToNumber`dc[Tools`ToNumber`t], 
         Tools`ToNumber`growth[
         Tools`ToNumber`dc, Tools`ToNumber`t, "TimeAggregation" -> 2, 
          "numPeriods" -> 1], 
         Tools`ToNumber`growth[
         Tools`ToNumber`dd, Tools`ToNumber`t, 1, "TimeAggregation" -> 2], 
         Tools`ToNumber`AA Tools`ToNumber`dc[Tools`ToNumber`t + 1] 
         Tools`ToNumber`excret[Tools`ToNumber`t, 1], 
         Tools`ToNumber`AA Tools`ToNumber`excret[Tools`ToNumber`t, 1] + 
         Tools`ToNumber`BB Tools`ToNumber`nombondyield[Tools`ToNumber`t, 2]}; 
      Tools`ToNumber`ee = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr[
        Tools`ToNumber`t, 3, 1, 1]; 
      Tools`ToNumber`e1 = Part[Tools`ToNumber`ee, 
         Span[1, 3]]; Tools`ToNumber`e2 = Part[Tools`ToNumber`ee, 
         Span[1, 2]]; 
      Tools`ToNumber`optsList = {{}, {Tools`ToNumber`maxMaturity -> 6}, {
         "FindRootOptions" -> {MaxIterations -> 100}}, {
         MaxIterations -> 100}, {
         "initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>}, {
         "initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>, MaxIterations -> 
          100}, {"initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>, 
          "FindRootOptions" -> {MaxIterations -> 100}}, {
         Tools`ToNumber`maxMaturity -> 6, 
          "initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>, MaxIterations -> 
          100}, {"PrintResidualsNorm" -> True}, {
         "CheckResiduals" -> True, "Tol" -> 1}, {
         "CheckResiduals" -> True, "Tol" -> 10.^(-20)}, {
         "PrintResidualsNorm" -> True, Tools`ToNumber`maxMaturity -> 6, 
          "initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>, MaxIterations -> 
          100}, {"RecurrenceTableOptions" -> {
           "DependentVariables" -> Automatic}}, {
         DependentVariables -> Automatic}}; 
      FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`opts = 
       Part[Tools`ToNumber`optsList, 
         Span[1, 5]]; 
      FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters = {
        Tools`ToNumber`delta -> 0.99}; 
      FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution = \
{Tools`ToNumber`A[0] -> 4.6}; 
      Tools`ToNumber`optNewParam = {
        "initialGuess" -> <|"Ewc" -> {4}, "Epd" -> {{4}}|>, MaxIterations -> 
         100}; Tools`ToNumber`exprNewParam = Tools`ToNumber`uncondE[
         Tools`ToNumber`wc[Tools`ToNumber`t]]; 
      AbortProtect[
       Do[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 0; 
          Tools`ToNumber`stateVars = Map[#[
              Blank[]]& , 
             DeleteDuplicates[
              DeleteCases[
               Cases[
                Variables[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
                 "stateVars"][Tools`ToNumber`t]], 
                Pattern[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x, 
                  Blank[]][
                  Blank[]] :> 
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x], 0]]]; 
          Tools`ToNumber`numModel = Join[
             Thread[Tools`ToNumber`stateVars -> 1.], {
             FernandoDuarte`LongRunRisk`Model`Shocks`eps[
                Blank[]][
                Blank[]] -> 1, FernandoDuarte`LongRunRisk`Model`Shocks`eps[
                Blank[]][
                Blank[], 
                Blank[]] -> 1., Tools`ToNumber`mu -> 2., 
              Tools`ToNumber`AA -> -1., Tools`ToNumber`BB -> 3.}]; 
          Tools`ToNumber`toNum = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum; 
          Tools`ToNumber`toEquation = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation; 
          Tools`ToNumber`toExogenousVars = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`toExogenousVars; 
          Tools`ToNumber`toStateVars = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`toStateVars; 
          Tools`ToNumber`processNewParameters = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters; 
          Tools`ToNumber`uncondE = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE; 
          Tools`ToNumber`uncondVar = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondVar; 
          Tools`ToNumber`uncondCov = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCov; 
          Tools`ToNumber`uncondCorr = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCorr; 
          Tools`ToNumber`ev = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`ev; 
          Tools`ToNumber`var = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`var; 
          Tools`ToNumber`cov = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`cov; 
          Tools`ToNumber`corr = 
           FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`corr; 
          Tools`ToNumber`tn = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model]; 
          Tools`ToNumber`outTests[
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
             "shortname"]][
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
           Apply[And, 
             Flatten[{Head[Tools`ToNumber`tn] === Function, 
               Map[NumericQ, 
                Flatten[{
                  ReplaceRepeated[
                   Tools`ToNumber`tn[Tools`ToNumber`e1], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e1]], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e1]], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}]], Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}]], Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1]], Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1]], Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}]], Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}]], Tools`ToNumber`numModel]}]]}]]; 
          FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
          Tools`ToNumber`outTests[
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
             "shortname"]][
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
           Apply[And, 
             Flatten[{Head[Tools`ToNumber`tn] === Function, 
               Map[NumericQ, 
                Flatten[{
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                   Tools`ToNumber`e1, 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel], 
                  ReplaceRepeated[
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                   Tools`ToNumber`numModel]}]]}]]; 
          FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
          Tools`ToNumber`outTests[
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
             "shortname"]][
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
           Apply[And, 
             Flatten[{Head[Tools`ToNumber`tn] === Function, 
               Map[NumericQ, 
                ReplaceRepeated[
                 Flatten[{
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Tools`ToNumber`e1, 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e1], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e1, 
                    Reverse[Tools`ToNumber`e1]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                   ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e1, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e1, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel]}], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model]]]}]\
]; FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
          Do[Tools`ToNumber`tn = 
             FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
              FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
               Apply[Sequence, Tools`ToNumber`opt]]; Tools`ToNumber`outTests[
               FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
               "shortname"]][
              FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
             Apply[And, 
               Flatten[{Head[Tools`ToNumber`tn] === Function, 
                 Map[NumericQ, 
                  Flatten[{
                    ReplaceRepeated[
                    Tools`ToNumber`tn[Tools`ToNumber`e2], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e2]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e2]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}]], Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}]], Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2]], Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2]], Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}]], Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    Tools`ToNumber`tn[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}]], Tools`ToNumber`numModel]}]]}]]; 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
            Tools`ToNumber`outTests[
               FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
               "shortname"]][
              FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
             Apply[And, 
               Flatten[{Head[Tools`ToNumber`tn] === Function, 
                 Map[NumericQ, 
                  Flatten[{
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Tools`ToNumber`e2, 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]], 
                    Tools`ToNumber`numModel]}]]}]]; 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
            Tools`ToNumber`outTests[
               FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
               "shortname"]][
              FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
             Apply[And, 
               Flatten[{Head[Tools`ToNumber`tn] === Function, 
                 Map[NumericQ, 
                  ReplaceRepeated[
                   Flatten[{
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Tools`ToNumber`e2, 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[Tools`ToNumber`uncondE, Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`uncondCov[#, #2]& , {Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[Tools`ToNumber`uncondCorr[#, #2]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[
                    Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    Map[
                    Tools`ToNumber`var[#, Tools`ToNumber`t - 1]& , 
                    Tools`ToNumber`e2], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]& , {
                    Tools`ToNumber`e2, 
                    Reverse[Tools`ToNumber`e2]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel], 
                    ReplaceRepeated[
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                    MapThread[
                    Tools`ToNumber`corr[#, #2, Tools`ToNumber`t - 1]& , {
                    Part[Tools`ToNumber`e2, 
                    Span[1, 2]], 
                    Part[Tools`ToNumber`e2, 
                    Span[-2, -1]]}], 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                    Tools`ToNumber`numModel]}], 
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                   "Rules", 
                    FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                    Apply[Sequence, Tools`ToNumber`opt]]]]}]]; 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
            Null, {Tools`ToNumber`opt, 
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`opts}]; 
          Tools`ToNumber`outTests[
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
             "shortname"]][
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
           Apply[And, 
             Map[NumericQ, 
              Flatten[{
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  "UpdatePd" -> False], Tools`ToNumber`numModel][
                 Tools`ToNumber`pd[Tools`ToNumber`t, 1]], 
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                  Tools`ToNumber`pd[Tools`ToNumber`t, 1], 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  "UpdatePd" -> False], Tools`ToNumber`numModel], 
                ReplaceRepeated[
                 ReplaceRepeated[
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                   Tools`ToNumber`pd[Tools`ToNumber`t, 1], 
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                  "Rules", 
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                   "UpdatePd" -> False]], Tools`ToNumber`numModel], 
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  "UpdateBonds" -> False], Tools`ToNumber`numModel][{
                  Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], 
                  Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]}], 
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[{
                   Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], 
                   Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]}, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  "UpdateBonds" -> False], Tools`ToNumber`numModel], 
                ReplaceRepeated[
                 ReplaceRepeated[
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[{
                    Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], 
                    Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]}, 
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                  "Rules", 
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                   "UpdateBonds" -> False]], Tools`ToNumber`numModel]}]]]; 
          FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; 
          Tools`ToNumber`outTests[
             FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
             "shortname"]][
            FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = 
           Apply[And, 
             Map[NumericQ, {
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters], Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters]], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution], Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {},
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution]], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution], Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution]], Tools`ToNumber`numModel], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                  Apply[Sequence, Tools`ToNumber`optNewParam]]], 
                Tools`ToNumber`numModel], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {},
                   FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                  Apply[Sequence, Tools`ToNumber`optNewParam]]], 
                Tools`ToNumber`numModel], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam], 
               ReplaceRepeated[
                FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                Tools`ToNumber`exprNewParam, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                 Apply[Sequence, Tools`ToNumber`optNewParam]], 
                Tools`ToNumber`numModel], 
               ReplaceRepeated[
                ReplaceRepeated[
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[
                 Tools`ToNumber`exprNewParam, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model], 
                 FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[
                 "Rules", 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
newParameters, 
                  FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution, 
                  Apply[Sequence, Tools`ToNumber`optNewParam]]], 
                Tools`ToNumber`numModel]}]]; 
          FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = 
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1; Null, {
          FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
           Tools`ToNumber`mods}]; Null]; Tools`ToNumber`noMissingTest = {}; 
      Do[Tools`ToNumber`testNumber = Sort[
           Cases[
            Keys[
             SubValues[Tools`ToNumber`outTests]], Verbatim[HoldPattern][
              Tools`ToNumber`outTests[
               FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[
               "shortname"]][
               Pattern[Tools`ToNumber`i, 
                Blank[Integer]]]] :> Tools`ToNumber`i]]; 
        AppendTo[Tools`ToNumber`noMissingTest, Range[0, 
            Max[Tools`ToNumber`testNumber]] == Tools`ToNumber`testNumber]; 
        Null, {FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, 
         Tools`ToNumber`mods}]; Tools`ToNumber`out = Flatten[{
          Apply[And, Tools`ToNumber`noMissingTest], 
          Apply[And, 
           Values[
            SubValues[Tools`ToNumber`outTests]]]}]; On[
        MessageName[General, "stop"]]; Off[
        MessageName[FindRoot, "lstol"]]; Tools`ToNumber`out], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Off[General::stop];\\n\\tOff[FindRoot::lstol];\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\\\";\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\\\";\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`\\\";\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`Model`ExogenousEq`\\\";\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`Tools`TimeAggregation`\\\";\\n\\tNeeds @ \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\\\";\\n\\\
tGet @ Get @ FileNameJoin @ {\\\"FernandoDuarte/LongRunRisk\\\", \
\\\"Models.wl\\\"};\\n\\tTools`ToNumber`msp = \
FernandoDuarte`LongRunRisk`Models;\\n\\tTools`ToNumber`modBY = \
Tools`ToNumber`msp @ \\\"BY\\\";\\n\\tTools`ToNumber`modBKY = \
Tools`ToNumber`msp @ \\\"BKY\\\";\\n\\tTools`ToNumber`modNRC = \
Tools`ToNumber`msp @ \\\"NRC\\\";\\n\\tTools`ToNumber`modDES = \
Tools`ToNumber`msp @ \\\"DES\\\";\\n\\tTools`ToNumber`modNRCStochVol = \
Tools`ToNumber`msp @ \\\"NRCStochVol\\\";\\n\\tTools`ToNumber`mods = \
{Tools`ToNumber`modBY, Tools`ToNumber`modBKY, Tools`ToNumber`modNRC, \
Tools`ToNumber`modDES, \
Tools`ToNumber`modNRCStochVol};\\n\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`expr[Tools`ToNumber`t_, Tools`ToNumber`m_, \
Tools`ToNumber`i_, Tools`ToNumber`mu_] := {\\n\\t\\tTools`ToNumber`wc @ \
Tools`ToNumber`t, Tools`ToNumber`pd[Tools`ToNumber`t, \
Tools`ToNumber`i],\\n\\t\\tTools`ToNumber`bond[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nombond[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`bondexcret[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`bondfw[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`bondfwspread[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`bondret[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`bondyield[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`excretc @ Tools`ToNumber`t, \
Tools`ToNumber`excret[Tools`ToNumber`t, \
Tools`ToNumber`i],\\n\\t\\tTools`ToNumber`kappa0 @ Tools`ToNumber`mu, \
Tools`ToNumber`kappa1 @ Tools`ToNumber`mu, \
Tools`ToNumber`nombondexcret[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nombondfw[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nombondfwspread[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nombondret[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nombondyield[Tools`ToNumber`t, \
Tools`ToNumber`m],\\n\\t\\tTools`ToNumber`nomrf @ Tools`ToNumber`t, \
Tools`ToNumber`nomsdf @ Tools`ToNumber`t, Tools`ToNumber`retc @ \
Tools`ToNumber`t, Tools`ToNumber`ret[Tools`ToNumber`t, \
Tools`ToNumber`i],\\n\\t\\tTools`ToNumber`rf @ Tools`ToNumber`t, \
Tools`ToNumber`sdf @ Tools`ToNumber`t, Tools`ToNumber`pi @ Tools`ToNumber`t, \
Tools`ToNumber`dc @ Tools`ToNumber`t, \
Tools`ToNumber`growth[Tools`ToNumber`dc, Tools`ToNumber`t, \
\\\"TimeAggregation\\\" -> 2, \\\"numPeriods\\\" -> \
1],\\n\\t\\tTools`ToNumber`growth[Tools`ToNumber`dd, Tools`ToNumber`t, 1, \
\\\"TimeAggregation\\\" -> 2],\\n\\t\\tTools`ToNumber`AA * \
Tools`ToNumber`dc[Tools`ToNumber`t + 1] * \
Tools`ToNumber`excret[Tools`ToNumber`t, 1],\\n\\t\\t(Tools`ToNumber`AA * \
Tools`ToNumber`excret[Tools`ToNumber`t, 1]) + Tools`ToNumber`BB * \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, \
2]\\n\\t};\\n\\tTools`ToNumber`ee = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr[Tools`ToNumber`t, 3, \
1, 1];\\n\\tTools`ToNumber`e1 = \
Tools`ToNumber`ee[[1;;3]];\\n\\tTools`ToNumber`e2 = \
Tools`ToNumber`ee[[1;;2]];\\n\\tTools`ToNumber`optsList = {\\n\\t\\t{},\\n\\t\
\\t{Tools`ToNumber`maxMaturity -> 6},\\n\\t\\t{\\\"FindRootOptions\\\" -> \
{MaxIterations -> 100}},\\n\\t\\t{MaxIterations -> \
100},\\n\\t\\t{\\\"initialGuess\\\" -> <|\\\"Ewc\\\" -> {4}, \\\"Epd\\\" -> \
{{4}}|>},\\n\\t\\t{\\n\\t\\t\\t\\\"initialGuess\\\" -> <|\\\"Ewc\\\" -> {4}, \
\\\"Epd\\\" -> {{4}}|>,\\n\\t\\t\\tMaxIterations -> \
100\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\\\"initialGuess\\\" -> <|\\\"Ewc\\\" -> \
{4}, \\\"Epd\\\" -> {{4}}|>,\\n\\t\\t\\t\\\"FindRootOptions\\\" -> \
{MaxIterations -> \
100}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tTools`ToNumber`maxMaturity -> \
6,\\n\\t\\t\\t\\\"initialGuess\\\" -> <|\\\"Ewc\\\" -> {4}, \\\"Epd\\\" -> \
{{4}}|>,\\n\\t\\t\\tMaxIterations -> \
100\\n\\t\\t},\\n\\t\\t{\\\"PrintResidualsNorm\\\" -> \
True},\\n\\t\\t{\\\"CheckResiduals\\\" -> True, \\\"Tol\\\" -> \
1},\\n\\t\\t{\\\"CheckResiduals\\\" -> True, \\\"Tol\\\" -> (10. ^ \
-20)},\\n\\t\\t{\\n\\t\\t\\t\\\"PrintResidualsNorm\\\" -> True, \
Tools`ToNumber`maxMaturity -> 6, \\\"initialGuess\\\" -> <|\\\"Ewc\\\" -> \
{4}, \\\"Epd\\\" -> {{4}}|>,\\n\\t\\t\\tMaxIterations -> 100\\n\\t\\t},\\n\\t\
\\t{\\\"RecurrenceTableOptions\\\" -> {\\\"DependentVariables\\\" -> \
Automatic}},\\n\\t\\t{DependentVariables -> \
Automatic}\\n\\t};\\n\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
opts = Tools`ToNumber`optsList[[1;;5]];\\n\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`newParameters = {Tools`ToNumber`delta -> \
0.99};\\n\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
guessCoeffsSolution = {Tools`ToNumber`A[0] -> \
4.6};\\n\\tTools`ToNumber`optNewParam = {\\n\\t\\t\\\"initialGuess\\\" -> \
<|\\\"Ewc\\\" -> {4}, \\\"Epd\\\" -> {{4}}|>,\\n\\t\\tMaxIterations -> 100\\n\
\\t};\\n\\tTools`ToNumber`exprNewParam = Tools`ToNumber`uncondE @ \
Tools`ToNumber`wc @ Tools`ToNumber`t;\\n\\tAbortProtect[\\n\\t\\tDo[\\n\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
0;\\n\\t\\t\\tTools`ToNumber`stateVars = \
Map[\\n\\t\\t\\t\\tSlot[1][_]&,\\n\\t\\t\\t\\tDeleteDuplicates[\\n\\t\\t\\t\\\
t\\tDeleteCases[\\n\\t\\t\\t\\t\\t\\tCases[Variables @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[\\\"stateVars\\\"][\
Tools`ToNumber`t], \
Pattern[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x, _][_] :> \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`x],\\n\\t\\t\\t\\t\\t\\t0\\\
n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t]\\n\\t\\t\\t];\\n\\t\\t\\tTools`ToNumber`\
numModel = Join[\\n\\t\\t\\t\\tThread[Tools`ToNumber`stateVars -> \
1.],\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Model`Shocks`\
eps[_][_] -> \
1,\\n\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Model`Shocks`eps[_][_, _] -> \
1.,\\n\\t\\t\\t\\t\\tTools`ToNumber`mu -> 2., Tools`ToNumber`AA -> -1., \
Tools`ToNumber`BB -> \
3.\\n\\t\\t\\t\\t}\\n\\t\\t\\t];\\n\\t\\t\\tTools`ToNumber`toNum = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum;\\n\\t\\t\\tTools`ToNumber`\
toEquation = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation;\\n\\t\\t\\tTools`\
ToNumber`toExogenousVars = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toExogenousVars;\\n\\t\\t\\tTools`\
ToNumber`toStateVars = FernandoDuarte`LongRunRisk`Tools`ToNumber`toStateVars;\
\\n\\t\\t\\tTools`ToNumber`processNewParameters = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters;\\n\\t\\t\\\
tTools`ToNumber`uncondE = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondE;\\n\\t\\t\\tTools`ToNumber`uncondVar \
= FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondVar;\\n\\t\\t\\tTools`ToNumber`\
uncondCov = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCov;\\n\\t\\t\\tTools`ToNumber`\
uncondCorr = \
FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`uncondCorr;\\n\\t\\t\\tTools`ToNumber`ev = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
ev;\\n\\t\\t\\tTools`ToNumber`var = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
var;\\n\\t\\t\\tTools`ToNumber`cov = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
cov;\\n\\t\\t\\tTools`ToNumber`corr = \
FernandoDuarte`LongRunRisk`ComputationalEngine`ComputeConditionalExpectations`\
corr;\\n\\t\\t\\tTools`ToNumber`tn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model;\\n\\t\\t\\tTools`\
ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model[\\\"\
shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\\
t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\tMap[NumericQ,\\n\\t\\t\\t\\t\\t\\t\\tFlatten[\\\
n\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\
Tools`ToNumber`e1] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[Map[\
Tools`ToNumber`uncondE, Tools`ToNumber`e1]] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[Map[\
Tools`ToNumber`uncondVar, Tools`ToNumber`e1]] //. Tools`ToNumber`numModel,\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[MapThread[Tools`ToNumber`\
uncondCov[#, #2]&, {Tools`ToNumber`e1, Reverse[Tools`ToNumber`e1]}]] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`uncondCorr[#,\
 #2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[Map[Tools`\
ToNumber`ev[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e1]],\\n\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`tn[Map[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1]],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e1, Reverse @ \
Tools`ToNumber`e1}]\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`tn[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\tTools`ToNumber`corr[#, #2, Tools`ToNumber`t - \
1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\\
t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t]\\n\\t\
\\t\\t];\\n\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\\
t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\tMap[NumericQ,\\n\\t\\t\\t\\t\\t\\t\\tFlatten[\\\
n\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`e1, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondE, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondVar, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
MapThread[Tools`ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e1, Reverse @ \
Tools`ToNumber`e1}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
uncondCorr[#, \
#2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMap[\
Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tMap[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e1, Reverse @ Tools`ToNumber`e1}],\\n\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tTools`ToNumber`corr[#, #2, Tools`ToNumber`t - \
1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\\
t\\t}\\n\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t}\\n\\t\
\\t\\t\\t]\\n\\t\\t\\t];\\n\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
Private`ind = FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\\
t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\tMap[NumericQ,\\n\\t\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toEquation[Tools`ToNumber`e1, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`uncondE, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`uncondVar, \
Tools`ToNumber`e1], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
toEquation[MapThread[Tools`ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e1, \
Reverse @ Tools`ToNumber`e1}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`uncondCorr[#, \
#2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], \
Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tMap[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMap[Tools`ToNumber`var[#, \
Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e1],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, \
Tools`ToNumber`t - 1]&, {Tools`ToNumber`e1, Reverse @ Tools`ToNumber`e1}],\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`corr[#, #2, Tools`ToNumber`t - 1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\t\\t{Tools`ToNumber`e1[[1;;2]], Tools`ToNumber`e1[[-2;;-1]]}\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\\
t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model]\\n\\t\\t\\t\\t\\t\\t\
\\t]\\n\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t]\\n\\t\\t\\t];\\\
n\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\tDo[\\n\\t\\t\\t\\tTools`ToNumber`tn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt];\\n\\t\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t{\\\
n\\t\\t\\t\\t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\t\\tMap[\\n\\t\\t\\t\\t\\t\\t\\t\\tNumericQ,\\n\
\\t\\t\\t\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[Tools`ToNumber`e2] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\
Map[Tools`ToNumber`uncondE, Tools`ToNumber`e2]] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\
Map[Tools`ToNumber`uncondVar, Tools`ToNumber`e2]] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\
MapThread[Tools`ToNumber`uncondCov[#, #2]&, {Tools`ToNumber`e2, \
Reverse[Tools`ToNumber`e2]}]] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
uncondCorr[#, \
#2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\
Map[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2]],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[Map[\
Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2]],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`\
numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`tn[\\n\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, \
Tools`ToNumber`t - 1]&, {Tools`ToNumber`e2, Reverse @ \
Tools`ToNumber`e2}]\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\tTools`ToNumber`tn[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[\\n\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - \
1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\\
t}\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t{\\\
n\\t\\t\\t\\t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\t\\tMap[\\n\\t\\t\\t\\t\\t\\t\\t\\tNumericQ,\\n\
\\t\\t\\t\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`\
ToNumber`e2, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Apply[Sequence, Tools`ToNumber`opt]] //. Tools`ToNumber`numModel,\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Map[\
Tools`ToNumber`uncondE, Tools`ToNumber`e2], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[Map[Tools`ToNumber`uncondVar, \
Tools`ToNumber`e2], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Sequence @@ Tools`ToNumber`opt] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[Tools`ToNumber`\
uncondCov[#, #2]&, {Tools`ToNumber`e2, Reverse @ \
Tools`ToNumber`e2}],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`uncondCorr[#, \
#2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
Private`model, Sequence @@ \
Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tMap[Tools`ToNumber`ev[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tMap[Tools`ToNumber`var[#, Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - 1]&, \
{Tools`ToNumber`e2, Reverse @ Tools`ToNumber`e2}],\\n\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence \
@@ Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`corr[#, #2, Tools`ToNumber`t - 1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, Sequence @@ \
Tools`ToNumber`opt\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\\
t]\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`ind] = \
Apply[\\n\\t\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\t\\tFlatten[\\n\\t\\t\\t\\t\\t\\t{\\\
n\\t\\t\\t\\t\\t\\t\\tSameQ[Head @ Tools`ToNumber`tn, \
Function],\\n\\t\\t\\t\\t\\t\\t\\tMap[\\n\\t\\t\\t\\t\\t\\t\\t\\tNumericQ,\\n\
\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tFlatten[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`e2, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`uncondE, \
Tools`ToNumber`e2], FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] \
//. Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Map[Tools`ToNumber`\
uncondVar, Tools`ToNumber`e2], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toEquation[MapThread[Tools`ToNumber`uncondCov[#, #2]&, \
{Tools`ToNumber`e2, Reverse @ Tools`ToNumber`e2}], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\
\\t\\t\\t\\tTools`ToNumber`uncondCorr[#, \
#2]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\\
n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMap[Tools`ToNumber`ev[#, \
Tools`ToNumber`t - 1]&, \
Tools`ToNumber`e2],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMap[Tools`\
ToNumber`var[#, Tools`ToNumber`t - 1]&, Tools`ToNumber`e2],\\n\\t\\t\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\tMapThread[Tools`ToNumber`cov[#, #2, Tools`ToNumber`t - \
1]&, {Tools`ToNumber`e2, Reverse @ \
Tools`ToNumber`e2}],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\
t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\
\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\
\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toEquation[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMapThread[\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`corr[#, #2, \
Tools`ToNumber`t - \
1]&,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{Tools`ToNumber`e2[[1;;2]], \
Tools`ToNumber`e2[[-2;;-1]]}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\\
t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t],\\n\
\\t\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\
\"Rules\\\", FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Sequence @@ Tools`ToNumber`opt]\\n\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\
\\t\\t]\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t];\\n\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\\n\\t\\t\\t,\\n\\t\
\\t\\t\\t{Tools`ToNumber`opt, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`opts}\\n\\t\\t\\t];\\n\\t\\\
t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
ind] = Apply[\\n\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\tMap[NumericQ,\\n\\t\\t\\t\\t\\\
tFlatten[\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`Private`model, \\\"UpdatePd\\\" -> False], \
Tools`ToNumber`numModel][Tools`ToNumber`pd[Tools`ToNumber`t, 1]],\\n\\t\\t\\t\
\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`pd[\
Tools`ToNumber`t, 1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \\\"UpdatePd\\\" -> \
False] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\\
t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`\
ToNumber`pd[Tools`ToNumber`t, 1], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \\\"UpdatePd\\\" -> \
False],\\n\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\\
t\\t],\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[FernandoDuarte`LongRunRisk`\
Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
\\\"UpdateBonds\\\" -> False], \
Tools`ToNumber`numModel][{Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, \
3]}],\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\
t{Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]},\\n\\t\\t\\t\\t\\t\\t\\t\\t\
\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \\\"UpdateBonds\\\
\" -> False\\n\\t\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\t\\tTools`\
ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toEquation[{Tools`ToNumber`bondyield[Tools`ToNumber`t, 2], \
Tools`ToNumber`nombondyield[Tools`ToNumber`t, 3]}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \\\"UpdateBonds\\\" \
-> False],\\n\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\\
t\\t\\t]\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t]\\n\\t\\t\\t]\
;\\n\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + \
1;\\n\\t\\t\\tTools`ToNumber`outTests[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model[\\\"shortname\\\"]][FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`ind] = Apply[\\n\\t\\t\\t\\tAnd,\\n\\t\\t\\t\\tMap[NumericQ,\
\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tReplaceRepeated[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\\
t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters],\\n\\t\\t\\t\
\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution] //. \
Tools`ToNumber`numModel,\\n\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\\
t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\\n\\t\
\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\\
t\\t\\tReplaceRepeated[FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution], \
Tools`ToNumber`numModel][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\\n\\t\
\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\\
t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`\
Tools`ToNumber`toEquation[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model] //. \
FernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution],\\n\\t\
\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\\
t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`\
Tools`ToNumber`toNum[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam],\\n\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam],\\n\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\\
t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`\
Tools`ToNumber`toEquation[Tools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\\t\\t\\t\\t\\\
t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, Sequence @@ \
Tools`ToNumber`optNewParam]\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\
tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ \
Tools`ToNumber`optNewParam],\\n\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ \
Tools`ToNumber`optNewParam\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\
tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\\
t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\
\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\\"\
Rules\\\", FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, {}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ Tools`ToNumber`optNewParam]\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\
\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ \
Tools`ToNumber`optNewParam],\\n\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\\
n\\t\\t\\t\\t\\t\\t][Tools`ToNumber`exprNewParam],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`\
ToNumber`toNum[\\n\\t\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`exprNewParam, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ \
Tools`ToNumber`optNewParam\\n\\t\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\t\\\
tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t\\\
tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\t\\tReplaceRepeated[\\n\\t\\t\\t\\t\\t\\\
t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toEquation[Tools`ToNumber`\
exprNewParam, FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model],\\n\\t\
\\t\\t\\t\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`toNum[\\n\\t\\\
t\\t\\t\\t\\t\\t\\t\\t\\\"Rules\\\", \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`newParameters, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`guessCoeffsSolution, \
Sequence @@ \
Tools`ToNumber`optNewParam\\n\\t\\t\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t\\t\\\
t],\\n\\t\\t\\t\\t\\t\\t\\tTools`ToNumber`numModel\\n\\t\\t\\t\\t\\t\\t]\\n\\\
t\\t\\t\\t\\t}\\n\\t\\t\\t\\t]\\n\\t\\t\\t];\\n\\t\\t\\tFernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`ind = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`ind + 1;\\n\\t\\t,\\n\\t\\t\
\\t{FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`model, \
Tools`ToNumber`mods}\\n\\t\\t];\\n\\t];\\n\\tTools`ToNumber`noMissingTest = \
{};\\n\\tDo[\\n\\t\\tTools`ToNumber`testNumber = Sort[\\n\\t\\t\\tCases[Keys \
@ SubValues @ Tools`ToNumber`outTests,\\n\\t\\t\\t\\tRuleDelayed[\\n\\t\\t\\t\
\\t\\tVerbatim[HoldPattern][Tools`ToNumber`outTests[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`Private`model[\\\"shortname\\\"]][Tools`ToNumber`i_\
Integer]],\\n\\t\\t\\t\\t\\tTools`ToNumber`i\\n\\t\\t\\t\\t]\\n\\t\\t\\t]\\n\\\
t\\t];\\n\\t\\tAppendTo[Tools`ToNumber`noMissingTest, Equal[Range[0, Max @ \
Tools`ToNumber`testNumber], \
Tools`ToNumber`testNumber]];\\n\\t,\\n\\t\\t{FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`model, Tools`ToNumber`mods}\\n\\t];\\n\\tTools`ToNumber`out \
= Flatten[\\n\\t\\t{\\n\\t\\t\\tApply[And, \
Tools`ToNumber`noMissingTest],\\n\\t\\t\\tApply[And, Values @ SubValues @ \
Tools`ToNumber`outTests]\\n\\t\\t}\\n\\t];\\n\\tOn[General::stop];\\n\\tOff[\
FindRoot::lstol];\\n\\tTools`ToNumber`out\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"{True, True}\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9056867338549128`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"df79d32e-9031-4e05-ba27-e41b3b84a252"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Tools`ToNumber`processNewParameters", "=", 
     "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "returns", " ", "True", " ", "if", " ", "evaluation", " ", "of", " ", 
      "expr", " ", "returns", " ", "$Aborted"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"SetAttributes", "[", 
     RowBox[{"checkAbrt", ",", "HoldAll"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"checkAbrt", "[", "expr_", "]"}], ":=", 
     RowBox[{"TrueQ", "@", 
      RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
       RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
        RowBox[{"CheckAbort", "[", 
         RowBox[{"expr", ",", "True"}], "]"}], "\[IndentingNewLine]", "]"}], 
       "\[IndentingNewLine]", "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "returns", " ", "True", " ", "if", " ", "msg", " ", "issued", " ", 
      "when", " ", "expr", " ", "is", " ", "evaluated"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"SetAttributes", "[", 
     RowBox[{"checkMsg", ",", "HoldAll"}], "]"}], ";", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"checkMsg", "[", 
      RowBox[{"expr_", ",", "msg_"}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"CheckAbort", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"c", "=", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"expr", ";"}], ",", "True", ",", "msg"}], "]"}]}], 
            ";"}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]",
          "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"TrueQ", "@", "c"}]}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"TrueQ", "@", "c"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "old", " ", "and", " ", "new", " ", "parameters", " ", "are", " ", 
      "equal"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give",
         " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Sort", "@", "procP"}], "===", 
        RowBox[{"Sort", "@", "procPn"}], "===", 
        RowBox[{"Sort", "@", "procPn1"}], "===", 
        RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Sort", "@", 
          RowBox[{"Keys", "@", "procP"}]}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{"Sort", "@", 
          RowBox[{"Keys", "@", "newP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]",
       "}"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052065264110518`*^9, 3.9052065476889133`*^9}, {
   3.9052066574255877`*^9, 3.905206658715994*^9}, {3.905206741207562*^9, 
   3.905206779971458*^9}, {3.905206843480741*^9, 3.905206845213539*^9}, {
   3.905206932245037*^9, 3.905207128736129*^9}, {3.905207266985085*^9, 
   3.905207267387904*^9}, {3.905207320967823*^9, 3.905207321853704*^9}, {
   3.9052079618042088`*^9, 3.905208020358967*^9}, {3.9052080523865013`*^9, 
   3.905208069561117*^9}, {3.905210388717566*^9, 3.905210433263633*^9}, 
   3.9052110020297422`*^9, 3.90521133796375*^9, 3.905211602619338*^9, 
   3.9056520337251987`*^9, {3.9056523819042807`*^9, 3.905652382382869*^9}, {
   3.905652474125904*^9, 3.905652474480455*^9}, {3.905678052286256*^9, 
   3.905678076227583*^9}, {3.905678195061306*^9, 3.905678212773583*^9}, {
   3.9056785188856297`*^9, 3.905678521297852*^9}, {3.905679105004929*^9, 
   3.90567910513505*^9}, {3.905679670204042*^9, 3.905679736377569*^9}, 
   3.905680250751742*^9, {3.9056802884450693`*^9, 3.905680290489924*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"600683d8-da3b-4629-a7f0-b98b84722ac3"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`processNewParameters = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters;\n\t\
SetAttributes[Tools`ToNumber`checkAbrt, HoldAll];\n\t\
Tools`ToNumber`checkAbrt[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
expr_] := TrueQ[Quiet @ AbortProtect @ \
CheckAbort[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr, True]];\n\t\
SetAttributes[Tools`ToNumber`checkMsg, HoldAll];\n\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\
expr_, Tools`ToNumber`msg_] := CheckAbort[\n\t\tQuiet[\n\t\t\t\
AbortProtect[Tools`ToNumber`c = \
Check[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr;, True, \
Tools`ToNumber`msg];];\n\t\t];\n\t\tTrueQ[Tools`ToNumber`c],\n\t\t\
TrueQ[Tools`ToNumber`c]\n\t];\n\tTools`ToNumber`p = {\n\t\t\
Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, \
Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, \
Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\t\t\
Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, Tools`ToNumber`theta \
-> ((1 - Tools`ToNumber`gamma) / (1 - 1 / Tools`ToNumber`psi)),\n\t\t\
Tools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] -> 0.0015,\n\t\t\
Tools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] -> 3\n\t};\n\t\
Tools`ToNumber`newP = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`pn = KeyValueMap[Function[# -> (#2 /. \
Tools`ToNumber`p)], Association @ Tools`ToNumber`p];\n\tTools`ToNumber`newPn \
= KeyValueMap[Function[# -> (#2 /. Tools`ToNumber`newP)], Association @ \
Tools`ToNumber`newP];\n\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ Tools`ToNumber`procPn, \
Sort @ Tools`ToNumber`procPn1, Sort @ Tools`ToNumber`procPn2],\n\t\t\t\
Apply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\tSameQ[Sort @ \
Keys @ Tools`ToNumber`procP, Sort @ Keys @ Tools`ToNumber`newP],\n\t\t\t\
SubsetQ[Keys @ Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\n\t\t\t\
Equal[ReleaseHold @ Tools`ToNumber`msg, {{}, {}}],\n\t\t\t\
!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.002, "AbsoluteTiming" -> 0.002, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`processNewParameters = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters; 
      SetAttributes[Tools`ToNumber`checkAbrt, HoldAll]; 
      Tools`ToNumber`checkAbrt[
         Pattern[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr, 
          Blank[]]] := TrueQ[
         Quiet[
          AbortProtect[
           CheckAbort[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr, True]]]]; 
      SetAttributes[Tools`ToNumber`checkMsg, HoldAll]; Tools`ToNumber`checkMsg[
         Pattern[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr, 
          Blank[]], 
         Pattern[Tools`ToNumber`msg, 
          Blank[]]] := 
       CheckAbort[
        Quiet[AbortProtect[
            Tools`ToNumber`c = 
              Check[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr; 
                Null, True, Tools`ToNumber`msg]; Null]; Null]; 
         TrueQ[Tools`ToNumber`c], 
         TrueQ[Tools`ToNumber`c]]; 
      Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`pn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`p]& , <|
         Tools`ToNumber`p|>]; 
      Tools`ToNumber`newPn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`newP]& , <|
         Tools`ToNumber`newP|>]; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`procPn = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn1 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn2 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
        Sort[Tools`ToNumber`procP] === Sort[Tools`ToNumber`procPn] === 
         Sort[Tools`ToNumber`procPn1] === Sort[Tools`ToNumber`procPn2], 
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Keys[Tools`ToNumber`newP]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`processNewParameters = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters;\\n\\\
tSetAttributes[Tools`ToNumber`checkAbrt, \
HoldAll];\\n\\tTools`ToNumber`checkAbrt[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`expr_] := TrueQ[Quiet @ AbortProtect @ \
CheckAbort[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr, True]];\\n\
\\tSetAttributes[Tools`ToNumber`checkMsg, \
HoldAll];\\n\\tTools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`\
ToNumber`Private`expr_, Tools`ToNumber`msg_] := CheckAbort[\\n\\t\\tQuiet[\\n\
\\t\\t\\tAbortProtect[Tools`ToNumber`c = \
Check[FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`expr;, True, \
Tools`ToNumber`msg];];\\n\\t\\t];\\n\\t\\tTrueQ[Tools`ToNumber`c],\\n\\t\\\
tTrueQ[Tools`ToNumber`c]\\n\\t];\\n\\tTools`ToNumber`p = \
{\\n\\t\\tTools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, \
Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, \
Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{\\n\\t\\tTools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, \
Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, \
Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`pn = \
KeyValueMap[Function[# -> (#2 /. Tools`ToNumber`p)], Association @ \
Tools`ToNumber`p];\\n\\tTools`ToNumber`newPn = KeyValueMap[Function[# -> (#2 \
/. Tools`ToNumber`newP)], Association @ \
Tools`ToNumber`newP];\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ \
Tools`ToNumber`procPn, Sort @ Tools`ToNumber`procPn1, Sort @ \
Tools`ToNumber`procPn2],\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Keys @ Tools`ToNumber`newP],\\n\\t\\t\\tSubsetQ[Keys @ \
Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\\n\\t\\t\\tEqual[ReleaseHold \
@ Tools`ToNumber`msg, {{}, {}}],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734111546*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"26504e06-f810-4f3e-b269-5b6fd61dd771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "new", " ", "parameters", " ", "are", " ", "subset", " ", "of", " ", 
     "old", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give",
         " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Sort", "@", "procP"}], "===", 
        RowBox[{"Sort", "@", "procPn"}], "===", 
        RowBox[{"Sort", "@", "procPn1"}], "===", 
        RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]",
       "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208088377164*^9}, {3.905208130076997*^9, 
   3.9052081303221416`*^9}, 3.905210450716963*^9, {3.905652393950632*^9, 
   3.905652394405922*^9}, {3.905652480092654*^9, 3.905652480769579*^9}, {
   3.9056774004169292`*^9, 3.905677410275959*^9}, 3.90567819506283*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"f3d89f00-d236-4d9a-80b1-9eda10920c09"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`delta -> 0.9, \
Tools`ToNumber`Esx -> 1};\n\tTools`ToNumber`pn = KeyValueMap[Function[# -> \
(#2 /. Tools`ToNumber`p)], Association @ Tools`ToNumber`p];\n\t\
Tools`ToNumber`newPn = KeyValueMap[Function[# -> (#2 /. \
Tools`ToNumber`newP)], Association @ Tools`ToNumber`newP];\n\t\
Tools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ Tools`ToNumber`procPn, \
Sort @ Tools`ToNumber`procPn1, Sort @ Tools`ToNumber`procPn2],\n\t\t\t\
Apply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\tSameQ[Sort @ \
Keys @ Tools`ToNumber`procP, Sort @ Keys @ Tools`ToNumber`newP],\n\t\t\t\
SubsetQ[Keys @ Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\n\t\t\t\
Equal[ReleaseHold @ Tools`ToNumber`msg, {{}, {}}],\n\t\t\t\
!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1}; 
      Tools`ToNumber`pn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`p]& , <|
         Tools`ToNumber`p|>]; 
      Tools`ToNumber`newPn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`newP]& , <|
         Tools`ToNumber`newP|>]; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`procPn = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn1 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn2 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
        Sort[Tools`ToNumber`procP] === Sort[Tools`ToNumber`procPn] === 
         Sort[Tools`ToNumber`procPn1] === Sort[Tools`ToNumber`procPn2], 
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Keys[Tools`ToNumber`newP]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> \
1};\\n\\tTools`ToNumber`pn = KeyValueMap[Function[# -> (#2 /. \
Tools`ToNumber`p)], Association @ \
Tools`ToNumber`p];\\n\\tTools`ToNumber`newPn = KeyValueMap[Function[# -> (#2 \
/. Tools`ToNumber`newP)], Association @ \
Tools`ToNumber`newP];\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ \
Tools`ToNumber`procPn, Sort @ Tools`ToNumber`procPn1, Sort @ \
Tools`ToNumber`procPn2],\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Keys @ Tools`ToNumber`newP],\\n\\t\\t\\tSubsetQ[Keys @ \
Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\\n\\t\\t\\tEqual[ReleaseHold \
@ Tools`ToNumber`msg, {{}, {}}],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734164887*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"d0f72fce-2e8a-4633-8589-3f7ea72eb97d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"new", " ", "parameters", " ", "is", " ", "empty"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give",
         " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Sort", "@", "procP"}], "===", 
        RowBox[{"Sort", "@", "procPn"}], "===", 
        RowBox[{"Sort", "@", "procPn1"}], "===", 
        RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]",
       "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208109351399*^9}, 3.905210453621024*^9, {
   3.905652401695115*^9, 3.9056524019884233`*^9}, 3.905652487455925*^9, {
   3.905677414638064*^9, 3.905677428916429*^9}, 3.905678195065189*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"024bedbc-f6c4-4807-bc42-9f429783b564"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {};\n\tTools`ToNumber`pn = \
KeyValueMap[Function[# -> (#2 /. Tools`ToNumber`p)], Association @ \
Tools`ToNumber`p];\n\tTools`ToNumber`newPn = KeyValueMap[Function[# -> (#2 /. \
Tools`ToNumber`newP)], Association @ Tools`ToNumber`newP];\n\t\
Tools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\n\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ Tools`ToNumber`procPn, \
Sort @ Tools`ToNumber`procPn1, Sort @ Tools`ToNumber`procPn2],\n\t\t\t\
Apply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\tSameQ[Sort @ \
Keys @ Tools`ToNumber`procP, Sort @ Keys @ Tools`ToNumber`newP],\n\t\t\t\
SubsetQ[Keys @ Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\n\t\t\t\
Equal[ReleaseHold @ Tools`ToNumber`msg, {{}, {}}],\n\t\t\t\
!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; Tools`ToNumber`newP = {}; 
      Tools`ToNumber`pn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`p]& , <|
         Tools`ToNumber`p|>]; 
      Tools`ToNumber`newPn = 
       KeyValueMap[# -> ReplaceAll[#2, Tools`ToNumber`newP]& , <|
         Tools`ToNumber`newP|>]; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`procPn = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn1 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`pn]; 
      Tools`ToNumber`procPn2 = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newPn, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
        Sort[Tools`ToNumber`procP] === Sort[Tools`ToNumber`procPn] === 
         Sort[Tools`ToNumber`procPn1] === Sort[Tools`ToNumber`procPn2], 
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Keys[Tools`ToNumber`newP]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{};\\n\\tTools`ToNumber`pn = KeyValueMap[Function[# -> (#2 /. \
Tools`ToNumber`p)], Association @ \
Tools`ToNumber`p];\\n\\tTools`ToNumber`newPn = KeyValueMap[Function[# -> (#2 \
/. Tools`ToNumber`newP)], Association @ \
Tools`ToNumber`newP];\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`procPn = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn1 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`pn];\\n\\tTools`ToNumber`procPn2 = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newPn, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tSameQ[Sort @ Tools`ToNumber`procP, Sort @ \
Tools`ToNumber`procPn, Sort @ Tools`ToNumber`procPn1, Sort @ \
Tools`ToNumber`procPn2],\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Keys @ Tools`ToNumber`newP],\\n\\t\\t\\tSubsetQ[Keys @ \
Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\\n\\t\\t\\tEqual[ReleaseHold \
@ Tools`ToNumber`msg, {{}, {}}],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.90568673421189*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"1e859a7d-9c6d-4662-8312-acf7c804aebe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "new", " ", "parameters", " ", "are", " ", "not", " ", "a", " ", "subset",
      " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"phip", "->", "3"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"checkMsg", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], ",", 
         RowBox[{
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
           "subsetparam"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208151886853*^9}, {3.9052082086682796`*^9, 
   3.905208262198208*^9}, {3.90520834237298*^9, 3.9052083484324503`*^9}, {
   3.905208390443688*^9, 3.9052084299683857`*^9}, {3.905208466203511*^9, 
   3.9052084750808153`*^9}, {3.905208511003985*^9, 3.905208554260667*^9}, {
   3.9052086518826437`*^9, 3.905208679920556*^9}, {3.905210464996544*^9, 
   3.905210502949132*^9}, {3.90565240741442*^9, 3.9056524076520233`*^9}, 
   3.9056524912339087`*^9, {3.905677430585602*^9, 3.9056774331643877`*^9}, 
   3.905678195066947*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"fdc9853b-46b8-4572-babe-fff61448c610"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`delta -> 0.9, \
Tools`ToNumber`Esx -> 1, Tools`ToNumber`phip -> 3};\n\tApply[And,\n\t\t{\n\t\t\
\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters[Tools`ToNumber`newP, Tools`ToNumber`p],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::subsetparam\n\
\t\t\t]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.03, "AbsoluteTiming" -> 0.03, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, 
         Tools`ToNumber`phip -> 3}; Apply[And, {
         Tools`ToNumber`checkAbrt[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p]], 
         Tools`ToNumber`checkMsg[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p], 
          MessageName[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
           "subsetparam"]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, Tools`ToNumber`phip -> \
3};\\n\\tApply[And,\\n\\t\\t{\\n\\t\\t\\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tTools`ToNumber`checkMsg[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`newP, \
Tools`ToNumber`p],\\n\\t\\t\\t\\tFernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters::subsetparam\\n\\t\\t\\t]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$\
]; Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734283786*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"c3213263-c6aa-4a83-a983-e4f6a93a70ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"psi", "=", 
     RowBox[{"1", " ", "in", " ", "new", " ", "parameters", " ", "aborts"}]}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"psi", "->", "1"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"checkMsg", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], ",", 
         RowBox[{
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
           "psi"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.905210531451913*^9, 3.90521055828263*^9}, 
   3.9052105929669027`*^9, {3.905210702555273*^9, 3.905210704506366*^9}, {
   3.905652411228012*^9, 3.9056524115088577`*^9}, 3.905652495425008*^9, {
   3.90567743482664*^9, 3.905677438728773*^9}, 3.905678195069804*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"c11cd6e7-4445-4746-8716-6d521c7171a0"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`delta -> 0.9, \
Tools`ToNumber`Esx -> 1, Tools`ToNumber`psi -> 1};\n\tApply[And,\n\t\t{\n\t\t\
\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters[Tools`ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::psi]\n\t\t}\n\
\t]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, 
         Tools`ToNumber`psi -> 1}; Apply[And, {
         Tools`ToNumber`checkAbrt[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p]], 
         Tools`ToNumber`checkMsg[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p], 
          MessageName[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
           "psi"]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, Tools`ToNumber`psi -> \
1};\\n\\tApply[And,\\n\\t\\t{\\n\\t\\t\\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tTools`ToNumber`checkMsg[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`newP, \
Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::psi]\\n\\t\\t}\
\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$\
]; Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734327216*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"5f22422a-0da4-491b-a954-927961e8bd9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"psi", "=", 
     RowBox[{
     "1.", " ", "in", " ", "new", " ", "parameters", " ", "aborts"}]}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"psi", "->", "1."}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"checkMsg", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], ",", 
         RowBox[{
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
           "psi"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.905210589361936*^9, 3.905210697276291*^9, {3.9056524163837557`*^9, 
   3.905652416618991*^9}, 3.905652498983138*^9, {3.9056774401273527`*^9, 
   3.9056774430080137`*^9}, 3.905678195071539*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"a26a9c11-c323-4184-aa52-347f957fd2c7"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`delta -> 0.9, \
Tools`ToNumber`Esx -> 1, Tools`ToNumber`psi -> 1.};\n\tApply[And,\n\t\t{\n\t\t\
\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters[Tools`ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::psi]\n\t\t}\n\
\t]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, 
         Tools`ToNumber`psi -> 1.}; Apply[And, {
         Tools`ToNumber`checkAbrt[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p]], 
         Tools`ToNumber`checkMsg[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p], 
          MessageName[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
           "psi"]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, Tools`ToNumber`psi -> \
1.};\\n\\tApply[And,\\n\\t\\t{\\n\\t\\t\\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tTools`ToNumber`checkMsg[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`newP, \
Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::psi]\\n\\t\\t}\
\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$\
]; Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9056867343725367`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"a21356dd-fa8b-4ba5-b403-7f9a648b4018"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"gamma", ",", " ", "psi", ",", " ", 
     RowBox[{
      RowBox[{"theta", " ", "relate", " ", "by", " ", "theta"}], "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "gamma"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"when", " ", "gamma"}], ",", " ", "psi", ",", " ", 
     RowBox[{"theta", " ", "all", " ", "provided"}], ",", " ", 
     RowBox[{
     "ignore", " ", "theta", " ", "and", " ", "issue", " ", "message", " ", 
      "unless", " ", "theta", " ", "is", " ", "exactly", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "gamma"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"case", ":", " ", 
     RowBox[{"theta", " ", "is", " ", "exactly", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "gamma"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]",
       "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.905211692551268*^9}, {3.905652420800501*^9, 
   3.905652421044005*^9}, 3.905652503195445*^9, {3.905677444890457*^9, 
   3.9056774499091663`*^9}, 3.905678195073928*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"e2386487-dfcb-49d7-af2a-626e4fcc00ee"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {\n\t\tTools`ToNumber`gamma -> 10,\n\t\t\
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`psi -> 1.5\n\t};\n\t\
Tools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tApply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\t\
SameQ[Sort @ Keys @ Tools`ToNumber`procP, Sort @ Keys @ Tools`ToNumber`newP],\
\n\t\t\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\n\t\t\t\
Equal[ReleaseHold @ Tools`ToNumber`msg, {{}, {}}],\n\t\t\t\
!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`gamma -> 10, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`psi -> 1.5}; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Keys[Tools`ToNumber`newP]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{\\n\\t\\tTools`ToNumber`gamma -> 10,\\n\\t\\tTools`ToNumber`theta -> ((1 - \
Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`psi -> \
1.5\\n\\t};\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Keys @ Tools`ToNumber`newP],\\n\\t\\t\\tSubsetQ[Keys @ \
Tools`ToNumber`p, Keys @ Tools`ToNumber`procP],\\n\\t\\t\\tEqual[ReleaseHold \
@ Tools`ToNumber`msg, {{}, {}}],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734414639*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"60a1b02a-1398-4ace-a814-c5fc65d21c5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"case", ":", " ", 
     RowBox[{"theta", " ", "is", " ", "not", " ", "exactly", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "gamma"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"theta", "\[Rule]", "3.23`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"Quiet", "[", 
      RowBox[{
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], ",", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
         "param"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"checkMsg", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], ",", 
         RowBox[{
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
           "param"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"theta", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Chop", "@", 
         RowBox[{"RealAbs", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"theta", "/.", "procP"}], ")"}], "-", 
           RowBox[{"(", 
            RowBox[{"-", "27."}], ")"}]}], "]"}]}], "<", 
        "$MachineEpsilon"}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.905211783840501*^9}, {3.905211871032999*^9, 
   3.905211890826621*^9}, {3.905652425944497*^9, 3.9056524261794767`*^9}, 
   3.905652507969056*^9, {3.905677452498909*^9, 3.9056774540978317`*^9}, 
   3.9056781950758333`*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"4dbc64a6-f93f-4088-9406-c8c3b884bfda"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`gamma -> 10, \
Tools`ToNumber`theta -> 3.23, Tools`ToNumber`psi -> 1.5};\n\t\
Tools`ToNumber`procP = \
Quiet[FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`\
ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::param];\n\t\
Apply[And,\n\t\t{\n\t\t\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\n\t\t\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, Sort \
@ Keys @ Tools`ToNumber`newP],\n\t\t\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\n\t\t\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters[Tools`ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::param],\n\t\t\
\tLess[Chop[RealAbs[(Tools`ToNumber`theta /. Tools`ToNumber`procP) - -27.]], \
$MachineEpsilon]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`gamma -> 10, Tools`ToNumber`theta -> 3.23, 
         Tools`ToNumber`psi -> 1.5}; Tools`ToNumber`procP = Quiet[
         FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
         Tools`ToNumber`newP, Tools`ToNumber`p], 
         MessageName[
         FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
          "param"]]; Apply[And, {
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Keys[Tools`ToNumber`newP]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]], 
         Tools`ToNumber`checkMsg[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p], 
          MessageName[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
           "param"]], Chop[
           RealAbs[
           ReplaceAll[
             Tools`ToNumber`theta, 
              Tools`ToNumber`procP] - -27.]] < $MachineEpsilon}]], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`gamma -> 10, Tools`ToNumber`theta -> 3.23, Tools`ToNumber`psi \
-> 1.5};\\n\\tTools`ToNumber`procP = \
Quiet[FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`\
ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::param];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Keys @ Tools`ToNumber`newP],\\n\\t\\t\\tSubsetQ[Keys @ \
Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tTools`ToNumber`checkMsg[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`newP, \
Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::param],\\n\\t\
\\t\\tLess[Chop[RealAbs[(Tools`ToNumber`theta /. Tools`ToNumber`procP) - \
-27.]], $MachineEpsilon]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734459093*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"67d4442c-727f-4128-aa28-3a94065f8e0e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"when", " ", "2", " ", "of", " ", 
      RowBox[{"{", 
       RowBox[{"gamma", ",", " ", "psi", ",", " ", "theta"}], "}"}], " ", 
      "are", " ", "provided"}], ",", " ", 
     RowBox[{
     "solve", " ", "for", " ", "the", " ", "third", " ", "and", " ", "add", 
      " ", "to", " ", "newParameters"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"{", 
     RowBox[{"psi", ",", " ", "theta"}], "}"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"psi", "\[Rule]", "2"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        RowBox[{"-", "3.`"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", 
         " ", "with", " ", "added", " ", "gamma"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "gamma", "}"}], ",", 
           RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"gamma", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Chop", "@", 
         RowBox[{"RealAbs", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"gamma", "/.", "procP"}], ")"}], "-", 
           RowBox[{"(", "2.5", ")"}]}], "]"}]}], "<", "$MachineEpsilon"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
   3.905211948448038*^9}, {3.905212014113267*^9, 3.9052120480050707`*^9}, {
   3.905652430633032*^9, 3.905652430875578*^9}, 3.905652512464118*^9, {
   3.90567745646879*^9, 3.9056774651196957`*^9}, 3.905678195078395*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"d958e636-3050-4e5c-ae3e-60d8d1e3df41"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`psi -> 2, \
Tools`ToNumber`theta -> -3.};\n\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tApply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\t\
SameQ[Sort @ Keys @ Tools`ToNumber`procP, Sort @ Join[{Tools`ToNumber`gamma}, \
Keys @ Tools`ToNumber`newP]],\n\t\t\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\n\t\t\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\tEqual[ReleaseHold @ Tools`ToNumber`msg, {{}, \
{}}],\n\t\t\tLess[Chop[RealAbs[(Tools`ToNumber`gamma /. Tools`ToNumber`procP) \
- 2.5]], $MachineEpsilon]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`psi -> 2, Tools`ToNumber`theta -> -3.}; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Join[{Tools`ToNumber`gamma}, 
            Keys[Tools`ToNumber`newP]]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, Chop[
           RealAbs[
           ReplaceAll[Tools`ToNumber`gamma, Tools`ToNumber`procP] - 
            2.5]] < $MachineEpsilon}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`psi -> 2, Tools`ToNumber`theta -> \
-3.};\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Join[{Tools`ToNumber`gamma}, Keys @ \
Tools`ToNumber`newP]],\\n\\t\\t\\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tEqual[ReleaseHold @ Tools`ToNumber`msg, \
{{}, {}}],\\n\\t\\t\\tLess[Chop[RealAbs[(Tools`ToNumber`gamma /. \
Tools`ToNumber`procP) - 2.5]], $MachineEpsilon]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734510386*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"03ce0dbd-78d7-432e-a30c-82655eac0dc4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"{", 
     RowBox[{"gamma", ",", " ", "psi"}], "}"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"psi", "\[Rule]", "2"}], ",", 
       RowBox[{"gamma", "\[Rule]", "2.5"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", 
         " ", "with", " ", "added", " ", "theta"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "theta", "}"}], ",", 
           RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"theta", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"RealAbs", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"theta", "/.", "procP"}], ")"}], "-", 
          RowBox[{"(", 
           RowBox[{"-", "3"}], ")"}]}], "]"}], "<", "$MachineEpsilon"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
   3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
   3.905212034474784*^9, 3.905212062210293*^9}, {3.9056524353683453`*^9, 
   3.905652435587309*^9}, 3.9056525170873413`*^9, {3.905677468191098*^9, 
   3.9056774749783897`*^9}, 3.905678195080262*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"3bf40497-5e2b-4645-8f1d-e5f89a70c04c"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`psi -> 2, \
Tools`ToNumber`gamma -> 2.5};\n\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tApply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\t\
SameQ[Sort @ Keys @ Tools`ToNumber`procP, Sort @ Join[{Tools`ToNumber`theta}, \
Keys @ Tools`ToNumber`newP]],\n\t\t\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\n\t\t\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\tEqual[ReleaseHold @ Tools`ToNumber`msg, {{}, \
{}}],\n\t\t\tLess[RealAbs[(Tools`ToNumber`theta /. Tools`ToNumber`procP) - \
-3], $MachineEpsilon]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`psi -> 2, Tools`ToNumber`gamma -> 2.5}; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Join[{Tools`ToNumber`theta}, 
            Keys[Tools`ToNumber`newP]]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         RealAbs[ReplaceAll[
            Tools`ToNumber`theta, 
             Tools`ToNumber`procP] - -3] < $MachineEpsilon}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`psi -> 2, Tools`ToNumber`gamma -> \
2.5};\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Join[{Tools`ToNumber`theta}, Keys @ \
Tools`ToNumber`newP]],\\n\\t\\t\\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tEqual[ReleaseHold @ Tools`ToNumber`msg, \
{{}, {}}],\\n\\t\\t\\tLess[RealAbs[(Tools`ToNumber`theta /. \
Tools`ToNumber`procP) - -3], $MachineEpsilon]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734560383*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"c44778e6-3f68-49ed-9e1b-cca467527458"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"{", 
     RowBox[{"gamma", ",", " ", "theta"}], "}"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "2.5"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        RowBox[{"-", "3.`"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{"NumberQ", "/@", 
          RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", 
         " ", "with", " ", "added", " ", "psi"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"Keys", "@", "procP"}]}], "===", 
        RowBox[{"Sort", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "psi", "}"}], ",", 
           RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
         " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"SubsetQ", "[", 
        RowBox[{
         RowBox[{"Keys", "@", "p"}], ",", 
         RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"(*", 
        RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Not", "@", 
        RowBox[{"checkAbrt", "[", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ReleaseHold", "@", "msg"}], "==", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"psi", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"RealAbs", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"psi", "/.", "procP"}], ")"}], "-", 
          RowBox[{"(", "2", ")"}]}], "]"}], "<", "$MachineEpsilon"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
   3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
   3.905212034474784*^9, 3.905212069446944*^9}, {3.9056524391296864`*^9, 
   3.905652439355783*^9}, 3.9056525205854073`*^9, {3.90567747781993*^9, 
   3.905677485019302*^9}, 3.905678195082121*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"ebdc84f1-cdcd-4cf9-9b3c-2e18a0637ff0"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`gamma -> 2.5, \
Tools`ToNumber`theta -> -3.};\n\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\tReap[\n\t\t\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\n\t\t\t$MessageList\n\t\t]\n\t];\n\tApply[And,\n\t\
\t{\n\t\t\tApply[And, Map[NumberQ, Values @ Tools`ToNumber`procP]],\n\t\t\t\
SameQ[Sort @ Keys @ Tools`ToNumber`procP, Sort @ Join[{Tools`ToNumber`psi}, \
Keys @ Tools`ToNumber`newP]],\n\t\t\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\n\t\t\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\tEqual[ReleaseHold @ Tools`ToNumber`msg, {{}, \
{}}],\n\t\t\tLess[RealAbs[(Tools`ToNumber`psi /. Tools`ToNumber`procP) - 2], \
$MachineEpsilon]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.002, "AbsoluteTiming" -> 0.002, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`gamma -> 2.5, Tools`ToNumber`theta -> -3.}; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Tools`ToNumber`msg = 
       Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
         Reap[
         Module[{}, 
            FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
             Tools`ToNumber`newP, Tools`ToNumber`p]; Null]; $MessageList]]; 
      Apply[And, {
         Apply[And, 
          Map[NumberQ, 
           Values[Tools`ToNumber`procP]]], Sort[
           Keys[Tools`ToNumber`procP]] === Sort[
           Join[{Tools`ToNumber`psi}, 
            Keys[Tools`ToNumber`newP]]], 
         SubsetQ[
          Keys[Tools`ToNumber`p], 
          Keys[Tools`ToNumber`procP]], 
         Not[
          Tools`ToNumber`checkAbrt[
           FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
           Tools`ToNumber`newP, Tools`ToNumber`p]]], 
         ReleaseHold[Tools`ToNumber`msg] == {{}, {}}, 
         RealAbs[ReplaceAll[Tools`ToNumber`psi, Tools`ToNumber`procP] - 
           2] < $MachineEpsilon}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`gamma -> 2.5, Tools`ToNumber`theta -> \
-3.};\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tTools`ToNumber`msg = Block[{$MessagePrePrint = \
Sow, $MessageList = {}},\\n\\t\\tReap[\\n\\t\\t\\tModule[{}, \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];];\\n\\t\\t\\t$MessageList\\n\\t\\t]\\n\\t];\\n\\\
tApply[And,\\n\\t\\t{\\n\\t\\t\\tApply[And, Map[NumberQ, Values @ \
Tools`ToNumber`procP]],\\n\\t\\t\\tSameQ[Sort @ Keys @ Tools`ToNumber`procP, \
Sort @ Join[{Tools`ToNumber`psi}, Keys @ \
Tools`ToNumber`newP]],\\n\\t\\t\\tSubsetQ[Keys @ Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP],\\n\\t\\t\\t!Tools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tEqual[ReleaseHold @ Tools`ToNumber`msg, \
{{}, {}}],\\n\\t\\t\\tLess[RealAbs[(Tools`ToNumber`psi /. \
Tools`ToNumber`procP) - 2], $MachineEpsilon]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734608616*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"6155d22d-e6a5-44ec-a6e1-b863266aa3a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "if", " ", "theta", " ", "provided", " ", "without", " ", "gamma", " ", 
      "or", " ", "psi"}], ",", " ", "abort"}], "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"theta", "->", "1."}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"checkMsg", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{"newP", ",", "p"}], "]"}], ",", 
         RowBox[{
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
           "theta"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
   3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
   3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
   3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
   3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
   3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
   3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
   3.905212034474784*^9, 3.905212084845602*^9}, {3.9056524436400642`*^9, 
   3.905652443851685*^9}, 3.9056525233275213`*^9, 3.905677489257881*^9, 
   3.905678195083445*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"23acaab1-48d2-4f62-9a45-169a9d2b0a69"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\
\t\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx -> 0.987, Tools`ToNumber`mud[1] \
-> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> 4.5,\n\t\tTools`ToNumber`rhodx[1] \
-> 3\n\t};\n\tTools`ToNumber`newP = {Tools`ToNumber`delta -> 0.9, \
Tools`ToNumber`Esx -> 1, Tools`ToNumber`theta -> 1.};\n\tApply[And,\n\t\t{\n\t\
\t\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\n\t\t\t\
Tools`ToNumber`checkMsg[FernandoDuarte`LongRunRisk`Tools`ToNumber`\
processNewParameters[Tools`ToNumber`newP, Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::theta]\n\t\t}\
\n\t]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.049, "AbsoluteTiming" -> 0.049, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        Tools`ToNumber`delta -> 0.998, Tools`ToNumber`Esx -> 0.0078, 
         Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc -> 0.0015, 
         Tools`ToNumber`phisxs -> 2.3*^-6, Tools`ToNumber`phix -> 0.044, 
         Tools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, 
         Tools`ToNumber`theta -> 1.}; Apply[And, {
         Tools`ToNumber`checkAbrt[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p]], 
         Tools`ToNumber`checkMsg[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
          Tools`ToNumber`newP, Tools`ToNumber`p], 
          MessageName[
          FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters, 
           "theta"]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tTools`ToNumber`delta -> 0.998, \
Tools`ToNumber`Esx -> 0.0078, Tools`ToNumber`gamma -> 10, Tools`ToNumber`muc \
-> 0.0015, Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{Tools`ToNumber`delta -> 0.9, Tools`ToNumber`Esx -> 1, Tools`ToNumber`theta \
-> 1.};\\n\\tApply[And,\\n\\t\\t{\\n\\t\\t\\tTools`ToNumber`checkAbrt @ \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p],\\n\\t\\t\\tTools`ToNumber`checkMsg[FernandoDuarte`\
LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`newP, \
Tools`ToNumber`p], \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters::theta]\\n\\t\\\
t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$\
]; Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734693658*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"27ee376a-8de2-4b38-b796-243c54e73fdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "processNewParameters", " ", "preserves", " ", "contexts", " ", "of", " ",
      "old", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"context1`delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"context1`Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"foo`gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"context2`delta", "\[Rule]", "0.9"}], ",", " ", 
       RowBox[{"Esx", "->", "1"}], ",", " ", 
       RowBox[{"bar`gamma", "->", "2"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "contexts", " ", "of", " ", "newP", " ", "do", " ", "not", " ", 
        "match", " ", "those", " ", "in", " ", "old", " ", "parameters", " ", 
        "in", " ", "p"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"KeyTake", "[", 
         RowBox[{"p", ",", 
          RowBox[{"Keys", "@", "newP"}]}], "]"}], "===", 
        RowBox[{"<|", "|>"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "contexts", " ", "of", " ", "procP", " ", "match", " ", "those", " ", 
         "in", " ", "old", " ", "parameters", " ", "in", " ", "p"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Keys", "@", "procP"}]}], ")"}], "===", 
        RowBox[{"Context", "/@", 
         RowBox[{"(", 
          RowBox[{"Keys", "@", 
           RowBox[{"KeyTake", "[", 
            RowBox[{"p", ",", 
             RowBox[{"Keys", "@", "procP"}]}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9052203250147943`*^9, 3.905220561424608*^9}, {
   3.905220598853331*^9, 3.905220734209539*^9}, {3.9056524468482018`*^9, 
   3.905652447099391*^9}, 3.905652526910408*^9, {3.9056774916586323`*^9, 
   3.905677493559647*^9}, 3.9056781950851593`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"62e6f726-afe9-4291-addb-e739d32834d2"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`ToNumber`p = {\n\t\tcontext1`delta -> 0.998, context1`Esx -> 0.0078, \
foo`gamma -> 10, Tools`ToNumber`muc -> 0.0015, Tools`ToNumber`phisxs -> \
2.3*10^-6, Tools`ToNumber`phix -> 0.044,\n\t\tTools`ToNumber`psi -> 1.5, \
Tools`ToNumber`rhox -> 0.979, Tools`ToNumber`theta -> ((1 - \
Tools`ToNumber`gamma) / (1 - 1 / Tools`ToNumber`psi)),\n\t\tTools`ToNumber`vx \
-> 0.987, Tools`ToNumber`mud[1] -> 0.0015,\n\t\tTools`ToNumber`phidxd[1] -> \
4.5,\n\t\tTools`ToNumber`rhodx[1] -> 3\n\t};\n\tTools`ToNumber`newP = \
{context2`delta -> 0.9, Tools`ToNumber`Esx -> 1, bar`gamma -> 2};\n\t\
Tools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\n\tApply[And,\n\t\t{\n\t\t\t\
SameQ[KeyTake[Tools`ToNumber`p, Keys @ Tools`ToNumber`newP], <||>],\n\t\t\t\
SameQ[Map[Context, Keys @ Tools`ToNumber`procP],\n\t\t\t\tMap[Context, Keys @ \
KeyTake[Tools`ToNumber`p, Keys @ Tools`ToNumber`procP]]\n\t\t\t]\n\t\t}\n\t]",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
     Tools`ToNumber`p = {
        context1`delta -> 0.998, context1`Esx -> 0.0078, foo`gamma -> 10, 
         Tools`ToNumber`muc -> 0.0015, Tools`ToNumber`phisxs -> 2.3*^-6, 
         Tools`ToNumber`phix -> 0.044, Tools`ToNumber`psi -> 1.5, 
         Tools`ToNumber`rhox -> 0.979, 
         Tools`ToNumber`theta -> (1 - Tools`ToNumber`gamma)/(1 - 1/
          Tools`ToNumber`psi), Tools`ToNumber`vx -> 0.987, 
         Tools`ToNumber`mud[1] -> 0.0015, Tools`ToNumber`phidxd[1] -> 4.5, 
         Tools`ToNumber`rhodx[1] -> 3}; 
      Tools`ToNumber`newP = {
        context2`delta -> 0.9, Tools`ToNumber`Esx -> 1, bar`gamma -> 2}; 
      Tools`ToNumber`procP = 
       FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[
        Tools`ToNumber`newP, Tools`ToNumber`p]; 
      Apply[And, {KeyTake[Tools`ToNumber`p, 
           Keys[Tools`ToNumber`newP]] === <||>, Map[Context, 
           Keys[Tools`ToNumber`procP]] === Map[Context, 
           Keys[
            KeyTake[Tools`ToNumber`p, 
             Keys[Tools`ToNumber`procP]]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"Tools`ToNumber`p = {\\n\\t\\tcontext1`delta -> 0.998, context1`Esx \
-> 0.0078, foo`gamma -> 10, Tools`ToNumber`muc -> 0.0015, \
Tools`ToNumber`phisxs -> 2.3*10^-6, Tools`ToNumber`phix -> \
0.044,\\n\\t\\tTools`ToNumber`psi -> 1.5, Tools`ToNumber`rhox -> 0.979, \
Tools`ToNumber`theta -> ((1 - Tools`ToNumber`gamma) / (1 - 1 / \
Tools`ToNumber`psi)),\\n\\t\\tTools`ToNumber`vx -> 0.987, \
Tools`ToNumber`mud[1] -> 0.0015,\\n\\t\\tTools`ToNumber`phidxd[1] -> \
4.5,\\n\\t\\tTools`ToNumber`rhodx[1] -> 3\\n\\t};\\n\\tTools`ToNumber`newP = \
{context2`delta -> 0.9, Tools`ToNumber`Esx -> 1, bar`gamma -> \
2};\\n\\tTools`ToNumber`procP = \
FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters[Tools`ToNumber`\
newP, Tools`ToNumber`p];\\n\\tApply[And,\\n\\t\\t{\\n\\t\\t\\tSameQ[KeyTake[\
Tools`ToNumber`p, Keys @ Tools`ToNumber`newP], \
<||>],\\n\\t\\t\\tSameQ[Map[Context, Keys @ \
Tools`ToNumber`procP],\\n\\t\\t\\t\\tMap[Context, Keys @ \
KeyTake[Tools`ToNumber`p, Keys @ \
Tools`ToNumber`procP]]\\n\\t\\t\\t]\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Result: \"", "\"True\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905686734736086*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"ee54dd3b-6a64-4629-8ab2-070daab235f2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}, 
   3.905652196948172*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"add", " ", 
    RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
    RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "countLines", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
       "n"}]}], "\[IndentingNewLine]", "]"}]}], "\n", 
   RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"replaceNthRecord", "[", 
     RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"writeStream", "=", 
         RowBox[{"OpenWrite", "[", 
          RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
        "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"WriteLine", "[", 
          RowBox[{"writeStream", ",", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{
          RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", 
          "\"\< \\r\\n\>\"", "<>", "replaceWith"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"UnsameQ", "[", 
             RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WriteLine", "[", 
             RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", 
         RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], "]"}]}], 
   "\n", 
   RowBox[{"(*", 
    RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", "\[IndentingNewLine]", 
     "\"\<\nBegin[\\\"Tools`ToNumber`\\\"]\nNeeds @ \
\\\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\\\";\n$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\\\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\\\"];\n\>\""}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
   3.8911593195689373`*^9, 3.8911593372713346`*^9}, 3.8911596484786263`*^9, 
   3.905155805045021*^9, 3.905651764267702*^9, {3.905652234509516*^9, 
   3.905652245601224*^9}, {3.905652318041293*^9, 3.9056523228121147`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905686734780858*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"7998a1e2-1241-4a0c-be3e-24a813d3fc27"],

Cell[BoxData["17"], "Output",
 CellChangeTimes->{3.905686734782757*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"0f0a8b56-8896-4e48-875e-9efecd828547"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905686734783608*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"78615cc3-7501-45cf-beea-73e0f7c06a85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"ab382fa0-c0d9-4cc8-8ad6-26c3aab6ba85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ToNumber.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: ToNumber.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "0.000036`1.706817498599281", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: ToNumber.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6484793497108001606 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9056867349105716`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "15813b9c-667f-4594-a669-51eea9dc2fcf", "TestID" -> 
         "ToNumber_20231007-AGFTMU", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "EvaluationID" -> 
         "495a4376-c690-4b45-a9fe-1934e414b863", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`Tools`ToNumber`"]; $ContextPath = 
            DeleteDuplicates[
              
              Prepend[$ContextPath, 
               "FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`"]]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000036`1.706817498599281, "CPUTimeUsed" -> 0.00003800000001774606, 
         "MemoryUsed" -> 2792, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
         "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {6484793497108001606}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905686735088407*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"034cd29d-51f9-4d38-adad-08dda5fa8a4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.905677825188221*^9, 3.9056778260367403`*^9}, {
   3.905677859919135*^9, 3.905677873408413*^9}, 3.905677912737121*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"25d36302-a608-4f08-ad42-aca2ba6671d3"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partw", 
   "\"Part \\!\\(\\*RowBox[{\\\"2\\\"}]\\) of \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"TestObject\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\
\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"}\\\"}]\\) does not exist.\
\"", 2, 38, 1, 24970154978936705434, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905686735257633*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"4bea0182-2e12-458c-bd3c-fdedb6dd1b46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   InterpretationBox[
    RowBox[{
     TagBox["TestObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]],
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox["\"ToNumber_20231007-AGFTMU\"", HoldForm],
                     True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"ToNumber_20231007-AGFTMU\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["ToNumber_20231007-AGFTMU"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 BoxData[
                  FormBox[
                   PaneBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                    ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
               PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
               Axes -> False, AspectRatio -> 1, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], Frame -> True, FrameTicks -> None, 
               FrameStyle -> Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.55]]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Success\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    
                    PaneSelectorBox[{
                    False -> TagBox["\"ToNumber_20231007-AGFTMU\"", HoldForm],
                     True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox["\"ToNumber_20231007-AGFTMU\"", HoldForm], 
                    "\"Copy to clipboard.\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated["ToNumber_20231007-AGFTMU"]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Background -> GrayLevel[0.85], StripOnInput -> 
                    False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> RowBox[{
                    
                    RowBox[{"Needs", "[", 
                    "\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\"", "]"}], 
                    ";", 
                    RowBox[{"$ContextPath", "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Prepend", "[", 
                    
                    RowBox[{"$ContextPath", ",", 
                    "\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\""}]\
, "]"}], "]"}]}], ";"}], True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    RowBox[{
                    
                    RowBox[{"Needs", "[", 
                    "\"FernandoDuarte`LongRunRisk`Tools`ToNumber`\"", "]"}], 
                    ";", 
                    RowBox[{"$ContextPath", "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Prepend", "[", 
                    
                    RowBox[{"$ContextPath", ",", 
                    "\"FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\""}]\
, "]"}], "]"}]}], ";"}], "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[
                    Needs["FernandoDuarte`LongRunRisk`Tools`ToNumber`"]; \
$ContextPath = DeleteDuplicates[
                    
                    Prepend[$ContextPath, 
                    "FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`"]]; 
                    Null]], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], Background -> 
                    GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    PaneBox[
                    TagBox[
                    PaneSelectorBox[{False -> "Null", True -> StyleBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    "Null", "\"Copy to clipboard.\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Copy to clipboard.", "Tooltip"]& ], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    Unevaluated[Null]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    Background -> GrayLevel[0.85], StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TestObject[<|
     "MetaInformation" -> None, "AbsoluteTime" -> 3.9056867349105716`*^9, 
      "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
      "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
      DirectedInfinity[1], "CreationID" -> 
      "15813b9c-667f-4594-a669-51eea9dc2fcf", "TestID" -> 
      "ToNumber_20231007-AGFTMU", "TestFileName" -> 
      "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/ToNumber.wlt", "EvaluationID" -> 
      "495a4376-c690-4b45-a9fe-1934e414b863", "Input" -> 
      HoldForm[Needs[
         "FernandoDuarte`LongRunRisk`Tools`ToNumber`"]; $ContextPath = 
         DeleteDuplicates[
           
           Prepend[$ContextPath, 
            "FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`"]]; Null], 
      "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null], 
      "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
      0.000036`1.706817498599281, "CPUTimeUsed" -> 0.00003800000001774606, 
      "MemoryUsed" -> 2792, "ExpectedOutput" -> HoldForm[Null], "Outcome" -> 
      "Success"|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], "}"}], "\[LeftDoubleBracket]", "2", 
  "\[RightDoubleBracket]"}]], "Output",
 CellChangeTimes->{3.905686735264481*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"21d762ec-1020-4f1f-a6a7-c0d0771c294c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"TableForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
       RowBox[{"[", "\"\<ActualOutput\>\"", "]"}], "]"}], ",", 
      RowBox[{"ReleaseHold", "@", 
       RowBox[{
        RowBox[{
         RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
        RowBox[{"[", "\"\<ExpectedOutput\>\"", "]"}], "]"}]}]}], "}"}], "]"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"jj", ",", "1", ",", 
     RowBox[{"Length", "[", 
      RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.905677831062714*^9, 3.905677847479768*^9}, {
  3.905677889300424*^9, 3.905677920710471*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"a2f8fd69-5dda-453d-9b31-83ff1035b4ae"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TagBox[GridBox[{
      {
       TagBox["Null",
        HoldForm]},
      {"Null"}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column],
   Function[BoxForm`e$, 
    TableForm[BoxForm`e$]]], "}"}]], "Output",
 CellChangeTimes->{3.9056867352922983`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"d6ec6f06-e4b5-435c-9319-e1e03bb87a80"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"48305ff8-83b9-4d5a-8570-\
85b25d4a4a26"],

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Tools\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "@", 
   RowBox[{"Prepend", "[", 
    RowBox[{
    "$ContextPath", ",", 
     "\"\<FernandoDuarte`LongRunRisk`Tools`ToNumber`Private`\>\""}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.890825576987958*^9, {
   3.890987450098063*^9, 3.8909874502616673`*^9}, {3.891159388110983*^9, 
   3.891159388420541*^9}, {3.891159688056053*^9, 3.891159704172017*^9}, {
   3.891748927421254*^9, 3.8917489278823643`*^9}, {3.891749223961915*^9, 
   3.891749231277231*^9}, {3.891749519456523*^9, 3.891749519771348*^9}, {
   3.90515611186259*^9, 3.905156112130745*^9}, {3.90517426920163*^9, 
   3.905174278720889*^9}, {3.905177231954484*^9, 3.905177238052713*^9}, 
   3.905178173189879*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], "}"}],
      "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBKY", "=", 
   RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRCStochVol", "=", 
   RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{
    "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
     "modNRCStochVol"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.905156041870823*^9, 3.905156053614505*^9}, {
   3.905156126678938*^9, 3.90515613250208*^9}, 3.9051568191108217`*^9, {
   3.905650879468988*^9, 3.905650887083211*^9}, 3.9056579671674843`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"71bc6bd0-682a-416d-a9b9-326354ff7381"],

Cell[BoxData[
 RowBox[{"(*", "toNum", "*)"}]], "Input",
 CellChangeTimes->{3.905595629075601*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"4e8a4c8a-796b-4023-ac86-0e1fdd5932d6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeUnconditionalExpectations`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
  "Needs", "[", 
   "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\
ComputeConditionalExpectations`\>\"", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`TimeAggregation`\>\"", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "Needs", "[", 
    "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\>\"", 
    "]"}], ";"}], "\[IndentingNewLine]", "\n", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "expressions", " ", "to", " ", "test"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expr", "[", 
    RowBox[{"t_", ",", "m_", ",", "i_", ",", "mu_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"wc", "[", "t", "]"}], ",", 
     RowBox[{"pd", "[", 
      RowBox[{"t", ",", "i"}], "]"}], ",", 
     RowBox[{"bond", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nombond", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"bondexcret", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"bondfw", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"bondfwspread", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"bondret", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"bondyield", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"excretc", "[", "t", "]"}], ",", 
     RowBox[{"excret", "[", 
      RowBox[{"t", ",", "i"}], "]"}], ",", 
     RowBox[{"kappa0", "[", "mu", "]"}], ",", 
     RowBox[{"kappa1", "[", "mu", "]"}], ",", 
     RowBox[{"nombondexcret", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nombondfw", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nombondfwspread", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nombondret", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nombondyield", "[", 
      RowBox[{"t", ",", "m"}], "]"}], ",", 
     RowBox[{"nomrf", "[", "t", "]"}], ",", 
     RowBox[{"nomsdf", "[", "t", "]"}], ",", 
     RowBox[{"retc", "[", "t", "]"}], ",", 
     RowBox[{"ret", "[", 
      RowBox[{"t", ",", "i"}], "]"}], ",", 
     RowBox[{"rf", "[", "t", "]"}], ",", 
     RowBox[{"sdf", "[", "t", "]"}], ",", 
     RowBox[{"pi", "[", "t", "]"}], ",", 
     RowBox[{"dc", "[", "t", "]"}], ",", 
     RowBox[{"growth", "[", 
      RowBox[{"dc", ",", "t", ",", 
       RowBox[{"\"\<TimeAggregation\>\"", "->", "2"}], ",", 
       RowBox[{"\"\<numPeriods\>\"", "->", "1"}]}], "]"}], ",", 
     RowBox[{"growth", "[", 
      RowBox[{"dd", ",", "t", ",", "1", ",", 
       RowBox[{"\"\<TimeAggregation\>\"", "->", "2"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"AA", " ", 
      RowBox[{"dc", "[", 
       RowBox[{"t", "+", "1"}], "]"}], 
      RowBox[{"excret", "[", 
       RowBox[{"t", ",", "1"}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"AA", " ", 
       RowBox[{"excret", "[", 
        RowBox[{"t", ",", "1"}], "]"}]}], "+", 
      RowBox[{"BB", " ", 
       RowBox[{"nombondyield", "[", 
        RowBox[{"t", ",", "2"}], "]"}]}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ee", "=", 
   RowBox[{"expr", "[", 
    RowBox[{"t", ",", "3", ",", "1", ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"e1", "=", 
    RowBox[{"ee", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "3"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  
  RowBox[{"(*", 
   RowBox[{
   "define", " ", "expression", " ", "e2", " ", "and", " ", "list", " ", 
    "opts", " ", "to", " ", "test", " ", "options"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"e2", "=", 
   RowBox[{"ee", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"optsList", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"maxMaturity", "->", "6"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<FindRootOptions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"MaxIterations", "->", "100"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Ewc\>\"", "->", 
          RowBox[{"{", "4", "}"}]}], ",", 
         RowBox[{"\"\<Epd\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Ewc\>\"", "->", 
           RowBox[{"{", "4", "}"}]}], ",", 
          RowBox[{"\"\<Epd\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
       RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Ewc\>\"", "->", 
           RowBox[{"{", "4", "}"}]}], ",", 
          RowBox[{"\"\<Epd\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
       RowBox[{"\"\<FindRootOptions\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"MaxIterations", "->", "100"}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"maxMaturity", "->", "6"}], ",", 
       RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Ewc\>\"", "->", 
           RowBox[{"{", "4", "}"}]}], ",", 
          RowBox[{"\"\<Epd\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
       RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
       RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
       RowBox[{"\"\<Tol\>\"", "->", 
        RowBox[{"10.", "^", 
         RowBox[{"-", "20"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], ",", 
       RowBox[{"maxMaturity", "->", "6"}], ",", 
       RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Ewc\>\"", "->", 
           RowBox[{"{", "4", "}"}]}], ",", 
          RowBox[{"\"\<Epd\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
       RowBox[{"MaxIterations", "->", "100"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<RecurrenceTableOptions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<DependentVariables\>\"", "->", "Automatic"}], "}"}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"DependentVariables", "->", "Automatic"}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"opts", "=", 
    RowBox[{"optsList", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "5"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"define", " ", "list", " ", "of", " ", "parameters"}], ",", " ", 
    "guess", ",", " ", "options", ",", " ", "expr", ",", " ", 
    RowBox[{
    "to", " ", "test", " ", "passing", " ", "new", " ", "parameters"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newParameters", "=", 
   RowBox[{"{", 
    RowBox[{"delta", "->", "0.99"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"guessCoeffsSolution", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"optNewParam", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Ewc\>\"", "->", 
         RowBox[{"{", "4", "}"}]}], ",", 
        RowBox[{"\"\<Epd\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"{", "4", "}"}], "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"MaxIterations", "->", "100"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exprNewParam", " ", "=", " ", 
   RowBox[{"uncondE", "[", 
    RowBox[{"wc", "[", "t", "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9052210457193117`*^9, 3.905221047999649*^9}, {
   3.905595785602545*^9, 3.90559579805087*^9}, {3.9055964001662703`*^9, 
   3.905596406363723*^9}, {3.905648341848996*^9, 3.9056483517439127`*^9}, 
   3.90565057211031*^9, {3.905650667703216*^9, 3.905650726293214*^9}, 
   3.905651033999597*^9, 3.905651469221281*^9, 3.905651925951015*^9, {
   3.905651962916114*^9, 3.905651970624977*^9}, {3.905674874479257*^9, 
   3.905674884855*^9}, {3.905676366461906*^9, 3.905676413740609*^9}, {
   3.905676893939445*^9, 3.905676901171914*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"4bb0c59f-6c77-4088-8411-ec04e5f3035a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ind", "=", "0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "rules", " ", "to", " ", "evaluate", " ", "numerically", " ", "at", 
         " ", "arbitrarily", " ", "chosen", " ", "values"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"stateVars", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "_", "]"}], "&"}], "/@", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"Variables", "[", 
               RowBox[{
                RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                "]"}], " ", "]"}], ",", 
              RowBox[{
               RowBox[{"x_", "[", "_", "]"}], ":>", "x"}]}], "]"}], ",", 
            "0"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"numModel", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"stateVars", "->", "1."}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`Shocks`eps", "[", "_", "]"}], 
              "[", "_", "]"}], "->", "1"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`Shocks`eps", "[", "_", "]"}], 
              "[", 
              RowBox[{"_", ",", "_"}], "]"}], "->", "1."}], ",", 
            RowBox[{"mu", "->", "2."}], ",", 
            RowBox[{"AA", "->", 
             RowBox[{"-", "1."}]}], ",", 
            RowBox[{"BB", "->", "3."}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "toNum"}], "**********)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"toNum", "[", "model", "]"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"tn", "=", 
        RowBox[{"toNum", "[", "model", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"NumericQ", "/@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"e1", "//", "tn"}], ")"}], "//.", "numModel"}], 
                   ")"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondE", "/@", "e1"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondVar", "/@", "e1"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}]}], 
                 "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
               ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
          "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"toNum", "[", 
         RowBox[{"expression", ",", " ", "model"}], "]"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"NumericQ", "/@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{"e1", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                   ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                   ")"}]}], "\[IndentingNewLine]", "}"}]}], 
               "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"toNum", "[", 
         RowBox[{"\"\<Rules\>\"", ",", " ", "model"}], "]"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"NumericQ", "/@", 
              RowBox[{"(", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Flatten", "@", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{"e1", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e1"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                    ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e1"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e1", ",", 
                    RowBox[{"Reverse", "@", "e1"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e1", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}]}], "//.", 
                RowBox[{"toNum", "[", 
                 RowBox[{"\"\<Rules\>\"", ",", "model"}], "]"}]}], 
               "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "options", " ", "for", " ", 
         "toNum"}], "**********)"}], "\[IndentingNewLine]", 
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"toNum", "[", "model", "]"}], "*)"}], "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{
          RowBox[{"tn", "=", 
           RowBox[{"toNum", "[", 
            RowBox[{"model", ",", 
             RowBox[{"Sequence", "@@", "opt"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{"Flatten", "@", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"NumericQ", "/@", 
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"e2", "//", "tn"}], ")"}], "//.", "numModel"}], 
                    ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondE", "/@", "e2"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"uncondVar", "/@", "e2"}], ")"}], "//", "tn"}], 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ")"}], "//", "tn"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], "//", 
                    "tn"}], ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], "//",
                     "tn"}], ")"}], "//.", "numModel"}], ")"}]}], 
                    "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
                  ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
             "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"toNum", "[", 
            RowBox[{"expression", ",", " ", "model"}], "]"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{"Flatten", "@", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"NumericQ", "/@", 
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{"e2", ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e2"}], ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e2"}], ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], " ", 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], ")"}], " ", 
                    ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], ",", 
                    "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toNum", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}], " ", ")"}], "//.",
                     "numModel"}], ")"}]}], "\[IndentingNewLine]", "}"}]}], 
                  "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
               "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"toNum", "[", 
            RowBox[{"\"\<Rules\>\"", ",", " ", "model"}], "]"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{"Flatten", "@", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Head", "@", "tn"}], "===", "Function"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"NumericQ", "/@", 
                 RowBox[{"(", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Flatten", "@", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{"e2", ",", "model"}], "]"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondE", "/@", "e2"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"uncondVar", "/@", "e2"}], ",", "model"}], "]"}], 
                    ")"}], " ", ")"}], "//.", "numModel"}], ")"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCov", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], " ", 
                    ",", "model"}], "]"}], ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"uncondCorr", "[", 
                    RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}],
                     ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ev", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"var", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], "/@", "e2"}], 
                    ",", "model"}], "]"}], ")"}], " ", ")"}], "//.", 
                    "numModel"}], ")"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"cov", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"e2", ",", 
                    RowBox[{"Reverse", "@", "e2"}]}], "}"}]}], "]"}], ",", 
                    "model"}], "]"}], " ", ")"}], "//.", "numModel"}], ")"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"toEquation", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"corr", "[", 
                    RowBox[{"#1", ",", "#2", ",", 
                    RowBox[{"t", "-", "1"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"e2", "[", 
                    RowBox[{"[", 
                    RowBox[{
                    RowBox[{"-", "2"}], ";;", 
                    RowBox[{"-", "1"}]}], "]"}], "]"}]}], "}"}]}], "]"}], ",",
                     "model"}], "]"}], " ", ")"}], "//.", "numModel"}], 
                    ")"}]}], "\[IndentingNewLine]", "}"}]}], "//.", 
                   RowBox[{"toNum", "[", 
                    RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                    RowBox[{"Sequence", "@@", "opt"}]}], "]"}]}], 
                  "\[IndentingNewLine]", ")"}]}]}], "\[IndentingNewLine]", 
               "}"}]}], "\[IndentingNewLine]", ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"opt", ",", "opts"}], "}"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "\"\<UpdatePd\>\"", ",", " ", "\"\<UpdateBond\>\"", ",", " ", 
         "\"\<UpdateNomBond\>\"", ",", " ", 
         RowBox[{"\"\<UpdateBonds\>\"", " ", "are", " ", "ignored"}], ",", 
         " ", 
         RowBox[{
          RowBox[{
          "toNum", " ", "always", " ", "uses", " ", "\"\<UpdatePd\>\""}], "->",
           "True"}], ",", 
         RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{"NumericQ", "/@", 
           RowBox[{"(", "\[IndentingNewLine]", 
            RowBox[{"Flatten", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"pd", "[", 
                 RowBox[{"t", ",", "1"}], "]"}], "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}], "//.",
                  "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{
                  RowBox[{"pd", "[", 
                   RowBox[{"t", ",", "1"}], "]"}], ",", "model", ",", 
                  RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{
                   RowBox[{"pd", "[", 
                    RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                   RowBox[{"\"\<UpdatePd\>\"", "->", "False"}]}], "]"}]}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"bondyield", "[", 
                   RowBox[{"t", ",", "2"}], "]"}], ",", 
                  RowBox[{"nombondyield", "[", 
                   RowBox[{"t", ",", "3"}], "]"}]}], "}"}], "//", 
                RowBox[{
                 RowBox[{"toNum", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}], "//.",
                  "numModel"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"toNum", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"bondyield", "[", 
                    RowBox[{"t", ",", "2"}], "]"}], ",", 
                    RowBox[{"nombondyield", "[", 
                    RowBox[{"t", ",", "3"}], "]"}]}], "}"}], ",", "model", 
                  ",", 
                  RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}], "//.",
                 "numModel"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"toEquation", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bondyield", "[", 
                    RowBox[{"t", ",", "2"}], "]"}], ",", 
                    RowBox[{"nombondyield", "[", 
                    RowBox[{"t", ",", "3"}], "]"}]}], "}"}], ",", "model"}], 
                  "]"}], "//.", 
                 RowBox[{"toNum", "[", 
                  RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                   RowBox[{"\"\<UpdateBonds\>\"", "->", "False"}]}], "]"}]}], 
                "//.", "numModel"}]}], "\[IndentingNewLine]", "}"}]}], 
            "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", ")"}]}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"**", "**", "**", "**"}], "*", "new", " ", "parameters"}], 
         ",", " ", 
         RowBox[{"guess", " ", "for", " ", "toNum"}]}], "**********)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"(", "\[IndentingNewLine]", 
          RowBox[{"NumericQ", "/@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"pass", " ", "new", " ", "parameters"}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{"model", ",", "newParameters"}], "]"}], "//.", 
               "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{"exprNewParam", ",", "model", ",", "newParameters"}], 
               "]"}], "//.", "numModel"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{"\"\<Rules\>\"", ",", "model", ",", "newParameters"}],
                 "]"}]}], "//.", "numModel"}], ",", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{"pass", " ", "guess"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}], "//.",
                "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{"exprNewParam", ",", "model", ",", 
                RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}], "//.",
               "numModel"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                 RowBox[{"{", "}"}], ",", "guessCoeffsSolution"}], "]"}]}], "//.",
               "numModel"}], ",", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "pass", " ", "new", " ", "parameters", " ", "and", " ", 
               "guess"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", "guessCoeffsSolution"}], 
                "]"}], "//.", "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{
               "exprNewParam", ",", "model", ",", "newParameters", ",", 
                "guessCoeffsSolution"}], "]"}], "//.", "numModel"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{
                "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                 "guessCoeffsSolution"}], "]"}]}], "//.", "numModel"}], ",", 
             "\n", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"new", " ", "parameters"}], ",", " ", "guess", ",", 
               " ", 
               RowBox[{"and", " ", "options"}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{"model", ",", "newParameters", ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
               "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{
               "exprNewParam", ",", "model", ",", "newParameters", ",", 
                RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
              "numModel"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{
                "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.", 
              "numModel"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
               "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{"exprNewParam", ",", "model", ",", 
                RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
              "numModel"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{"\"\<Rules\>\"", ",", "model", ",", 
                 RowBox[{"{", "}"}], ",", "guessCoeffsSolution", ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.", 
              "numModel"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"exprNewParam", "//", 
              RowBox[{
               RowBox[{"toNum", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", "guessCoeffsSolution", 
                 ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
               "numModel"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toNum", "[", 
               RowBox[{
               "exprNewParam", ",", "model", ",", "newParameters", ",", 
                "guessCoeffsSolution", ",", 
                RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}], "//.", 
              "numModel"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"toEquation", "[", 
                RowBox[{"exprNewParam", ",", "model"}], "]"}], "//.", 
               RowBox[{"toNum", "[", 
                RowBox[{
                "\"\<Rules\>\"", ",", "model", ",", "newParameters", ",", 
                 "guessCoeffsSolution", ",", 
                 RowBox[{"Sequence", "@@", "optNewParam"}]}], "]"}]}], "//.", 
              "numModel"}]}], "\[IndentingNewLine]", "}"}]}], 
          "\[IndentingNewLine]", ")"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";"}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.905212313865467*^9, 3.905212325184925*^9}, 
   3.905212359867795*^9, {3.905212795217298*^9, 3.9052128737720337`*^9}, {
   3.905212983551852*^9, 3.905212995134842*^9}, {3.905213037353033*^9, 
   3.9052130416232862`*^9}, {3.9052151825321712`*^9, 3.905215183218441*^9}, {
   3.905219865402843*^9, 3.905219865551938*^9}, {3.905220153371327*^9, 
   3.905220164055006*^9}, 3.90522026953924*^9, 3.9052207482833567`*^9, {
   3.905220845004054*^9, 3.905220930271912*^9}, {3.905221061187875*^9, 
   3.90522106269077*^9}, {3.905221135086172*^9, 3.905221135143044*^9}, {
   3.905596348310378*^9, 3.905596359764402*^9}, {3.905644306729175*^9, 
   3.9056443712781763`*^9}, {3.90564443240147*^9, 3.9056444407745323`*^9}, 
   3.905644478775923*^9, {3.905644512176396*^9, 3.9056445205829363`*^9}, {
   3.9056445690177298`*^9, 3.905644572616569*^9}, {3.9056449095850077`*^9, 
   3.9056449111345387`*^9}, {3.9056505809035473`*^9, 
   3.9056506306788597`*^9}, {3.9056508278542624`*^9, 3.905650852614739*^9}, {
   3.9056509030875874`*^9, 3.90565098149644*^9}, 3.9056510639790373`*^9, {
   3.9056511830408373`*^9, 3.905651200218302*^9}, {3.905651234296702*^9, 
   3.905651234739759*^9}, {3.9056512691047707`*^9, 3.905651365749144*^9}, {
   3.905651433795464*^9, 3.905651600903537*^9}, {3.905673295038972*^9, 
   3.905673295284717*^9}, {3.9056735224124403`*^9, 3.905673556233472*^9}, {
   3.905674866122074*^9, 3.9056748698621483`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"94c9594d-ce66-436e-8c0e-ff1d64627ace"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"noMissingTest", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
      RowBox[{"Sort", "@", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Keys", "@", 
          RowBox[{"SubValues", "@", "outTests"}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"noMissingTest", ",", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
        "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"Values", "@", 
        RowBox[{"SubValues", "@", "outTests"}]}]}]}], "\[IndentingNewLine]", 
     "}"}]}], "\[IndentingNewLine]", ")"}]}]}], "Input",
 CellChangeTimes->{
  3.905651105702589*^9, {3.9056833437688427`*^9, 3.905683358148625*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"f19cc585-4a18-4560-afc4-29206e0373e0"],

Cell[BoxData[
 RowBox[{"(*", "processNewParameters", "*)"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"05bc8486-3f2a-4ef7-8b7d-6c07a6e0c103"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "True", " ", "if", " ", "evaluation", " ", "of", " ", 
    "expr", " ", "returns", " ", "$Aborted"}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{"ClearAll", "[", "checkAbrt", "]"}], "\[IndentingNewLine]", 
   RowBox[{"SetAttributes", "[", 
    RowBox[{"checkAbrt", ",", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"checkAbrt", "[", "expr_", "]"}], ":=", 
    RowBox[{"TrueQ", "@", 
     RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
      RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
       RowBox[{"CheckAbort", "[", 
        RowBox[{"expr", ",", "True"}], "]"}], "\[IndentingNewLine]", "]"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "returns", " ", "True", " ", "if", " ", "msg", " ", "issued", " ", "when",
      " ", "expr", " ", "is", " ", "evaluated"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"ClearAll", "[", "checkMsg", "]"}], "\[IndentingNewLine]", 
   RowBox[{"SetAttributes", "[", 
    RowBox[{"checkMsg", ",", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"checkMsg", "[", 
     RowBox[{"expr_", ",", "msg_"}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"CheckAbort", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"c", "=", 
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"expr", ";"}], ",", "True", ",", "msg"}], "]"}]}], 
           ";"}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"TrueQ", "@", "c"}]}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"TrueQ", "@", "c"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.905210318908334*^9, 3.9052103787186623`*^9}, {
  3.9052113324825163`*^9, 3.905211334455784*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"6dff2763-9306-45d1-b356-73adeb111f6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "old", " ", "and", " ", "new", " ", "parameters", " ", "are", " ", 
    "equal"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give", 
       " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Sort", "@", "procP"}], "===", 
       RowBox[{"Sort", "@", "procPn"}], "===", 
       RowBox[{"Sort", "@", "procPn1"}], "===", 
       RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052065264110518`*^9, 3.9052065476889133`*^9}, {
   3.9052066574255877`*^9, 3.905206658715994*^9}, {3.905206741207562*^9, 
   3.905206779971458*^9}, {3.905206843480741*^9, 3.905206845213539*^9}, {
   3.905206932245037*^9, 3.905207128736129*^9}, {3.905207266985085*^9, 
   3.905207267387904*^9}, {3.905207320967823*^9, 3.905207321853704*^9}, {
   3.9052079618042088`*^9, 3.905208020358967*^9}, {3.9052080523865013`*^9, 
   3.905208069561117*^9}, {3.905210388717566*^9, 3.905210433263633*^9}, 
   3.9052110020297422`*^9, 3.90521133796375*^9, 3.905211602619338*^9, 
   3.9056520337251987`*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"d3b1b9de-fe4f-4f3c-acdd-d0dc0b67ddbc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "new", " ", "parameters", " ", "are", " ", "subset", " ", "of", " ", "old",
     " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give", 
       " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Sort", "@", "procP"}], "===", 
       RowBox[{"Sort", "@", "procPn"}], "===", 
       RowBox[{"Sort", "@", "procPn1"}], "===", 
       RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208088377164*^9}, {3.905208130076997*^9, 
   3.9052081303221416`*^9}, 3.905210450716963*^9},
 CellLabel->"In[55]:=",ExpressionUUID->"f9050c15-bfb5-4cd8-bc77-121e9a4ae441"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"new", " ", "parameters", " ", "is", " ", "empty"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"evaluate", " ", "all", " ", "parameters", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"pn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "p"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "p"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newPn", "=", 
     RowBox[{"KeyValueMap", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#1", "->", 
          RowBox[{"(", 
           RowBox[{"#2", "/.", "newP"}], ")"}]}], ")"}], "&"}], ",", 
       RowBox[{"Association", "@", "newP"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"process", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn1", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "pn"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procPn2", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newPn", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "symbolic", " ", "and", " ", "numeric", " ", "parameters", " ", "give", 
       " ", "same", " ", "answer"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Sort", "@", "procP"}], "===", 
       RowBox[{"Sort", "@", "procPn"}], "===", 
       RowBox[{"Sort", "@", "procPn1"}], "===", 
       RowBox[{"Sort", "@", "procPn2"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208109351399*^9}, 3.905210453621024*^9, 
   3.9056800561579847`*^9, 
   3.905680110172385*^9},ExpressionUUID->"dca9b5f2-3606-441b-9a9e-\
df552eb556f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "new", " ", "parameters", " ", "are", " ", "not", " ", "a", " ", "subset", 
    " ", "of", " ", "old", " ", "parameters"}], "*)"}], "\[IndentingNewLine]",
   "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"phip", "->", "3"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkAbrt", "[", 
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"checkMsg", "[", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], ",", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
          "subsetparam"}]}], "]"}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052072937293797`*^9, 3.9052073262691727`*^9}, {
   3.905207366359581*^9, 3.905207440401265*^9}, {3.905207674868387*^9, 
   3.905207727994254*^9}, {3.905207841331642*^9, 3.90520787000637*^9}, {
   3.9052079005633173`*^9, 3.905207933706068*^9}, 3.9052080289359903`*^9, {
   3.9052080743919086`*^9, 3.905208151886853*^9}, {3.9052082086682796`*^9, 
   3.905208262198208*^9}, {3.90520834237298*^9, 3.9052083484324503`*^9}, {
   3.905208390443688*^9, 3.9052084299683857`*^9}, {3.905208466203511*^9, 
   3.9052084750808153`*^9}, {3.905208511003985*^9, 3.905208554260667*^9}, {
   3.9052086518826437`*^9, 3.905208679920556*^9}, {3.905210464996544*^9, 
   3.905210502949132*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"5356ff34-bf2c-4bb2-b919-23f7d6b78465"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"psi", "=", 
    RowBox[{"1", " ", "in", " ", "new", " ", "parameters", " ", "aborts"}]}], 
   "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"psi", "->", "1"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkAbrt", "[", 
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"checkMsg", "[", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], ",", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
          "psi"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.905210531451913*^9, 3.90521055828263*^9}, 
   3.9052105929669027`*^9, {3.905210702555273*^9, 3.905210704506366*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"207c3532-67bd-4f87-b04d-fbb73547f8f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"psi", "=", 
    RowBox[{"1.", " ", "in", " ", "new", " ", "parameters", " ", "aborts"}]}],
    "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "old", " ", "and", " ", "new", " ", "parameters"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"psi", "->", "1."}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkAbrt", "[", 
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"checkMsg", "[", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], ",", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
          "psi"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{3.905210589361936*^9, 3.905210697276291*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"d6bf2389-2fac-4553-a36d-789c5eac53bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"gamma", ",", " ", "psi", ",", " ", 
    RowBox[{
     RowBox[{"theta", " ", "relate", " ", "by", " ", "theta"}], "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "gamma"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"when", " ", "gamma"}], ",", " ", "psi", ",", " ", 
    RowBox[{"theta", " ", "all", " ", "provided"}], ",", " ", 
    RowBox[{
    "ignore", " ", "theta", " ", "and", " ", "issue", " ", "message", " ", 
     "unless", " ", "theta", " ", "is", " ", "exactly", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "gamma"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"case", ":", " ", 
    RowBox[{"theta", " ", "is", " ", "exactly", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "gamma"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.905211692551268*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"3c9ec22f-582d-4a2b-bffe-edec1aafc471"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"case", ":", " ", 
    RowBox[{"theta", " ", "is", " ", "not", " ", "exactly", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", "gamma"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"1", "/", "psi"}]}], ")"}]}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"theta", "\[Rule]", "3.23`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"Quiet", "[", 
      RowBox[{
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], ",", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
         "param"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "newP"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"checkMsg", "[", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], ",", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
          "param"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"theta", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Chop", "@", 
        RowBox[{"RealAbs", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"theta", "/.", "procP"}], ")"}], "-", 
          RowBox[{"(", 
           RowBox[{"-", "27."}], ")"}]}], "]"}]}], "<", "$MachineEpsilon"}]}],
      "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.905211783840501*^9}, {3.905211871032999*^9, 
  3.905211890826621*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"0c1a3426-7b5e-43b4-adaf-744f3b1c0eba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"when", " ", "2", " ", "of", " ", 
     RowBox[{"{", 
      RowBox[{"gamma", ",", " ", "psi", ",", " ", "theta"}], "}"}], " ", 
     "are", " ", "provided"}], ",", " ", 
    RowBox[{
    "solve", " ", "for", " ", "the", " ", "third", " ", "and", " ", "add", 
     " ", "to", " ", "newParameters"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{"psi", ",", " ", "theta"}], "}"}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"psi", "\[Rule]", "2"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        RowBox[{"-", "3.`"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", " ",
         "with", " ", "added", " ", "gamma"}], "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "gamma", "}"}], ",", 
          RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"gamma", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Chop", "@", 
        RowBox[{"RealAbs", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"gamma", "/.", "procP"}], ")"}], "-", 
          RowBox[{"(", "2.5", ")"}]}], "]"}]}], "<", "$MachineEpsilon"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
  3.905211948448038*^9}, {3.905212014113267*^9, 3.9052120480050707`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"5702dd1c-0683-4df5-9c18-bcb36776416f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{"gamma", ",", " ", "psi"}], "}"}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"psi", "\[Rule]", "2"}], ",", 
       RowBox[{"gamma", "\[Rule]", "2.5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", " ",
         "with", " ", "added", " ", "theta"}], "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "theta", "}"}], ",", 
          RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"theta", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"RealAbs", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"theta", "/.", "procP"}], ")"}], "-", 
         RowBox[{"(", 
          RowBox[{"-", "3"}], ")"}]}], "]"}], "<", "$MachineEpsilon"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
  3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
  3.905212034474784*^9, 3.905212062210293*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"095a0e5a-bee0-4ad3-a9ea-4f252a6df5b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{"gamma", ",", " ", "theta"}], "}"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gamma", "\[Rule]", "2.5"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        RowBox[{"-", "3.`"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"capture", " ", "messages"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"msg", "=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
         RowBox[{"$MessageList", "=", 
          RowBox[{"{", "}"}]}]}], "}"}], ",", 
       RowBox[{"Reap", "[", 
        RowBox[{
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{
            RowBox[{"processNewParameters", "[", 
             RowBox[{"newP", ",", "p"}], "]"}], ";"}]}], "]"}], ";", 
         "$MessageList"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"Values", "@", "procP"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "same", " ", "as", " ", "in", " ", "new", " ", "parameters", " ",
         "with", " ", "added", " ", "psi"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Sort", "@", 
        RowBox[{"Keys", "@", "procP"}]}], "===", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"{", "psi", "}"}], ",", 
          RowBox[{"Keys", "@", "newP"}]}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "parameters", " ", "in", " ", "processed", " ", "list", " ", "are", 
        " ", "subset", " ", "of", " ", "old", " ", "parameters"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SubsetQ", "[", 
       RowBox[{
        RowBox[{"Keys", "@", "p"}], ",", 
        RowBox[{"Keys", "@", "procP"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"not", " ", "aborted"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"checkAbrt", "[", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"no", " ", "message", " ", "issued"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ReleaseHold", "@", "msg"}], "==", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"psi", " ", "has", " ", "correct", " ", "value"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"RealAbs", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"psi", "/.", "procP"}], ")"}], "-", 
         RowBox[{"(", "2", ")"}]}], "]"}], "<", "$MachineEpsilon"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
  3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
  3.905212034474784*^9, 3.905212069446944*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"2363dce5-47c3-4833-8482-47777700caed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "if", " ", "theta", " ", "provided", " ", "without", " ", "gamma", " ", 
     "or", " ", "psi"}], ",", " ", "abort"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"delta", "\[Rule]", "0.9"}], ",", 
       RowBox[{"Esx", "\[Rule]", "1"}], ",", 
       RowBox[{"theta", "->", "1."}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", "aborts", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"checkAbrt", "[", 
       RowBox[{"processNewParameters", "[", 
        RowBox[{"newP", ",", "p"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", 
       RowBox[{"with", " ", "message", " ", "subsetparam"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"checkMsg", "[", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{"newP", ",", "p"}], "]"}], ",", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`ToNumber`processNewParameters", "::",
          "theta"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052107258404627`*^9, 3.9052108425395613`*^9}, {
  3.905210907537624*^9, 3.905210981638547*^9}, {3.905211023837717*^9, 
  3.905211103956017*^9}, {3.905211139614875*^9, 3.905211181398678*^9}, {
  3.905211213358252*^9, 3.905211304895089*^9}, {3.905211351077333*^9, 
  3.9052114098047*^9}, {3.9052114614239397`*^9, 3.905211562076316*^9}, {
  3.9052116200136547`*^9, 3.90521170746982*^9}, {3.905211898915916*^9, 
  3.90521191308664*^9}, {3.90521195726097*^9, 3.905212002051486*^9}, {
  3.905212034474784*^9, 3.905212084845602*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"976cebbe-e50e-4703-8d6a-3a557497c488"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "processNewParameters", " ", "preserves", " ", "contexts", " ", "of", " ", 
    "old", " ", "parameters"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"context1`delta", "\[Rule]", "0.998`"}], ",", 
       RowBox[{"context1`Esx", "\[Rule]", "0.0078`"}], ",", 
       RowBox[{"foo`gamma", "\[Rule]", "10"}], ",", 
       RowBox[{"muc", "\[Rule]", "0.0015`"}], ",", 
       RowBox[{"phisxs", "\[Rule]", "2.3`*^-6"}], ",", 
       RowBox[{"phix", "\[Rule]", "0.044`"}], ",", 
       RowBox[{"psi", "\[Rule]", "1.5`"}], ",", 
       RowBox[{"rhox", "\[Rule]", "0.979`"}], ",", 
       RowBox[{"theta", "\[Rule]", 
        FractionBox[
         RowBox[{"1", "-", "gamma"}], 
         RowBox[{"1", "-", 
          FractionBox["1", "psi"]}]]}], ",", 
       RowBox[{"vx", "\[Rule]", "0.987`"}], ",", 
       RowBox[{
        RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.0015`"}], ",", 
       RowBox[{
        RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", "4.5`"}], ",", 
       RowBox[{
        RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "3"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newP", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"context2`delta", "\[Rule]", "0.9"}], ",", " ", 
       RowBox[{"Esx", "->", "1"}], ",", " ", 
       RowBox[{"bar`gamma", "->", "2"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"procP", "=", 
     RowBox[{"processNewParameters", "[", 
      RowBox[{"newP", ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "contexts", " ", "of", " ", "newP", " ", "do", " ", "not", " ", "match",
        " ", "those", " ", "in", " ", "old", " ", "parameters", " ", "in", 
       " ", "p"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"KeyTake", "[", 
        RowBox[{"p", ",", 
         RowBox[{"Keys", "@", "newP"}]}], "]"}], "===", 
       RowBox[{"<|", "|>"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "contexts", " ", "of", " ", "procP", " ", "match", " ", "those", " ", 
        "in", " ", "old", " ", "parameters", " ", "in", " ", "p"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Context", "/@", 
         RowBox[{"Keys", "@", "procP"}]}], ")"}], "===", 
       RowBox[{"Context", "/@", 
        RowBox[{"(", 
         RowBox[{"Keys", "@", 
          RowBox[{"KeyTake", "[", 
           RowBox[{"p", ",", 
            RowBox[{"Keys", "@", "procP"}]}], "]"}]}], ")"}]}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9052203250147943`*^9, 3.905220561424608*^9}, {
  3.905220598853331*^9, 3.905220734209539*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"f70dfba2-b50f-46b8-ab10-88e3ee3150b9"]
}, Open  ]]
},
WindowSize->{1246, 815},
WindowMargins->{{Automatic, 287}, {62, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
AutoStyleOptions->{"SymbolContextStyles"->{
 "System`" -> {}, "Global`" -> {}, Automatic -> {}, 
  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`" -> {{Automatic}}}},
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b28033f9-a991-4047-91dd-a25a56a4e359"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 240, 5, 37, "Input",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],
Cell[CellGroupData[{
Cell[823, 29, 1930, 41, 142, "Input",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],
Cell[2756, 72, 259, 5, 42, "Output",ExpressionUUID->"47359d2e-3642-43eb-9345-85707f21d251"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3052, 82, 283, 5, 67, "Subsection",ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-5f3e6c853d88"],
Cell[3338, 89, 341, 9, 37, "Input",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],
Cell[CellGroupData[{
Cell[3704, 102, 1140, 19, 64, "Input",ExpressionUUID->"d1369107-4139-4dd1-97c7-29279f71e417"],
Cell[4847, 123, 199, 2, 42, "Output",ExpressionUUID->"ec815a1f-dff0-4c2c-b1c2-712b07762e3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5083, 130, 374, 5, 37, "Input",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],
Cell[5460, 137, 170, 2, 42, "Output",ExpressionUUID->"1f8c751e-757e-4147-b5b5-066a8407fb86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5667, 144, 849, 18, 116, "Input",ExpressionUUID->"7ec442b7-0a2a-4d3c-9490-867ae4f98643"],
Cell[CellGroupData[{
Cell[6541, 166, 371, 9, 29, "Print",ExpressionUUID->"3129b934-597a-420b-a7bc-7be0575fcf32"],
Cell[6915, 177, 265, 5, 29, "Print",ExpressionUUID->"ac86c6b8-878b-4914-9842-036771a9d994"]
}, Open  ]],
Cell[7195, 185, 5337, 98, 42, "Output",ExpressionUUID->"d93925db-d402-4fc4-9240-8d33bb041b48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12569, 288, 73590, 1664, 7890, "Input",ExpressionUUID->"cb235074-df95-44d7-a0ca-7e5ab21c0383"],
Cell[86162, 1954, 135556, 2209, 21295, "Output",ExpressionUUID->"df79d32e-9031-4e05-ba27-e41b3b84a252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221755, 4168, 10473, 243, 1739, "Input",ExpressionUUID->"600683d8-da3b-4629-a7f0-b98b84722ac3"],
Cell[232231, 4413, 16810, 312, 1743, "Output",ExpressionUUID->"26504e06-f810-4f3e-b269-5b6fd61dd771"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249078, 4730, 7012, 166, 1066, "Input",ExpressionUUID->"f3d89f00-d236-4d9a-80b1-9eda10920c09"],
Cell[256093, 4898, 12922, 246, 1171, "Output",ExpressionUUID->"d0f72fce-2e8a-4633-8589-3f7ea72eb97d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269052, 5149, 6751, 160, 1040, "Input",ExpressionUUID->"024bedbc-f6c4-4807-bc42-9f429783b564"],
Cell[275806, 5311, 12739, 242, 1171, "Output",ExpressionUUID->"1e859a7d-9c6d-4662-8312-acf7c804aebe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288582, 5558, 3524, 76, 468, "Input",ExpressionUUID->"fdc9853b-46b8-4572-babe-fff61448c610"],
Cell[292109, 5636, 9205, 181, 651, "Output",ExpressionUUID->"c3213263-c6aa-4a83-a983-e4f6a93a70ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301351, 5822, 2891, 66, 416, "Input",ExpressionUUID->"c11cd6e7-4445-4746-8716-6d521c7171a0"],
Cell[304245, 5890, 9130, 181, 599, "Output",ExpressionUUID->"5f22422a-0da4-491b-a954-927961e8bd9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[313412, 6076, 2832, 67, 416, "Input",ExpressionUUID->"a26a9c11-c323-4184-aa52-347f957fd2c7"],
Cell[316247, 6145, 9135, 181, 599, "Output",ExpressionUUID->"a21356dd-fa8b-4ba5-b403-7f9a648b4018"]
}, Open  ]],
Cell[CellGroupData[{
Cell[325419, 6331, 6178, 154, 767, "Input",ExpressionUUID->"e2386487-dfcb-49d7-af2a-626e4fcc00ee"],
Cell[331600, 6487, 10821, 211, 963, "Output",ExpressionUUID->"60a1b02a-1398-4ace-a814-c5fc65d21c5b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342458, 6703, 5263, 126, 676, "Input",ExpressionUUID->"4dbc64a6-f93f-4088-9406-c8c3b884bfda"],
Cell[347724, 6831, 10975, 217, 807, "Output",ExpressionUUID->"67d4442c-727f-4128-aa28-3a94065f8e0e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358736, 7053, 6057, 144, 780, "Input",ExpressionUUID->"d958e636-3050-4e5c-ae3e-60d8d1e3df41"],
Cell[364796, 7199, 10943, 213, 911, "Output",ExpressionUUID->"03ce0dbd-78d7-432e-a30c-82655eac0dc4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375776, 7417, 5694, 136, 754, "Input",ExpressionUUID->"3bf40497-5e2b-4645-8f1d-e5f89a70c04c"],
Cell[381473, 7555, 10911, 212, 911, "Output",ExpressionUUID->"c44778e6-3f68-49ed-9e1b-cca467527458"]
}, Open  ]],
Cell[CellGroupData[{
Cell[392421, 7772, 5685, 136, 754, "Input",ExpressionUUID->"ebdc84f1-cdcd-4cf9-9b3c-2e18a0637ff0"],
Cell[398109, 7910, 10893, 211, 911, "Output",ExpressionUUID->"6155d22d-e6a5-44ec-a6e1-b863266aa3a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[409039, 8126, 3206, 71, 416, "Input",ExpressionUUID->"23acaab1-48d2-4f62-9a45-169a9d2b0a69"],
Cell[412248, 8199, 9151, 181, 625, "Output",ExpressionUUID->"27ee376a-8de2-4b38-b796-243c54e73fdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421436, 8385, 3352, 78, 451, "Input",ExpressionUUID->"62e6f726-afe9-4291-addb-e739d32834d2"],
Cell[424791, 8465, 8997, 179, 625, "Output",ExpressionUUID->"ee54dd3b-6a64-4629-8ab2-070daab235f2"]
}, Open  ]],
Cell[433803, 8647, 239, 5, 37, "Input",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],
Cell[CellGroupData[{
Cell[434067, 8656, 5491, 125, 1390, "Input",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"],
Cell[439561, 8783, 387, 8, 69, "Output",ExpressionUUID->"7998a1e2-1241-4a0c-be3e-24a813d3fc27"],
Cell[439951, 8793, 150, 2, 42, "Output",ExpressionUUID->"0f0a8b56-8896-4e48-875e-9efecd828547"],
Cell[440104, 8797, 387, 8, 69, "Output",ExpressionUUID->"78615cc3-7501-45cf-beea-73e0f7c06a85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440528, 8810, 177, 3, 37, "Input",ExpressionUUID->"ab382fa0-c0d9-4cc8-8ad6-26c3aab6ba85"],
Cell[440708, 8815, 8757, 185, 76, "Output",ExpressionUUID->"034cd29d-51f9-4d38-adad-08dda5fa8a4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449502, 9005, 339, 6, 37, "Input",ExpressionUUID->"25d36302-a608-4f08-ad42-aca2ba6671d3"],
Cell[449844, 9013, 517, 11, 35, "Message",ExpressionUUID->"4bea0182-2e12-458c-bd3c-fdedb6dd1b46"],
Cell[450364, 9026, 14166, 288, 78, "Output",ExpressionUUID->"21d762ec-1020-4f1f-a6a7-c0d0771c294c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[464567, 9319, 1000, 27, 64, "Input",ExpressionUUID->"a2f8fd69-5dda-453d-9b31-83ff1035b4ae"],
Cell[465570, 9348, 656, 21, 63, "Output",ExpressionUUID->"d6ec6f06-e4b5-435c-9319-e1e03bb87a80"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[466275, 9375, 214, 4, 67, "Subsection",ExpressionUUID->"48305ff8-83b9-4d5a-8570-85b25d4a4a26"],
Cell[466492, 9381, 1649, 35, 142, "Input",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],
Cell[468144, 9418, 1439, 37, 220, "Input",ExpressionUUID->"71bc6bd0-682a-416d-a9b9-326354ff7381"],
Cell[469586, 9457, 176, 3, 37, "Input",ExpressionUUID->"4e8a4c8a-796b-4023-ac86-0e1fdd5932d6"],
Cell[469765, 9462, 10104, 272, 1104, "Input",ExpressionUUID->"4bb0c59f-6c77-4088-8411-ec04e5f3035a"],
Cell[479872, 9736, 56475, 1274, 5342, "Input",ExpressionUUID->"94c9594d-ce66-436e-8c0e-ff1d64627ace"],
Cell[536350, 11012, 1769, 45, 376, "Input",ExpressionUUID->"f19cc585-4a18-4560-afc4-29206e0373e0"],
Cell[538122, 11059, 149, 2, 37, "Input",ExpressionUUID->"05bc8486-3f2a-4ef7-8b7d-6c07a6e0c103"],
Cell[538274, 11063, 2286, 52, 636, "Input",ExpressionUUID->"6dff2763-9306-45d1-b356-73adeb111f6b"],
Cell[540563, 11117, 7560, 189, 1020, "Input",ExpressionUUID->"d3b1b9de-fe4f-4f3c-acdd-d0dc0b67ddbc"],
Cell[548126, 11308, 6616, 169, 971, "Input",ExpressionUUID->"f9050c15-bfb5-4cd8-bc77-121e9a4ae441"],
Cell[554745, 11479, 6431, 164, 971, "Input",ExpressionUUID->"dca9b5f2-3606-441b-9a9e-df552eb556f5"],
Cell[561179, 11645, 3180, 73, 425, "Input",ExpressionUUID->"5356ff34-bf2c-4bb2-b919-23f7d6b78465"],
Cell[564362, 11720, 2574, 63, 399, "Input",ExpressionUUID->"207c3532-67bd-4f87-b04d-fbb73547f8f4"],
Cell[566939, 11785, 2501, 62, 399, "Input",ExpressionUUID->"d6bf2389-2fac-4553-a36d-789c5eac53bb"],
Cell[569443, 11849, 5785, 151, 724, "Input",ExpressionUUID->"3c9ec22f-582d-4a2b-bffe-edec1aafc471"],
Cell[575231, 12002, 4863, 122, 633, "Input",ExpressionUUID->"0c1a3426-7b5e-43b4-adaf-744f3b1c0eba"],
Cell[580097, 12126, 5605, 142, 685, "Input",ExpressionUUID->"5702dd1c-0683-4df5-9c18-bcb36776416f"],
Cell[585705, 12270, 5244, 134, 659, "Input",ExpressionUUID->"095a0e5a-bee0-4ad3-a9ea-4f252a6df5b9"],
Cell[590952, 12406, 5233, 133, 659, "Input",ExpressionUUID->"2363dce5-47c3-4833-8482-47777700caed"],
Cell[596188, 12541, 2855, 67, 321, "Input",ExpressionUUID->"976cebbe-e50e-4703-8d6a-3a557497c488"],
Cell[599046, 12610, 3011, 77, 408, "Input",ExpressionUUID->"f70dfba2-b50f-46b8-ab10-88e3ee3150b9"]
}, Open  ]]
}
]
*)

