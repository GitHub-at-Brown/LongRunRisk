(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    363659,       7177]
NotebookOptionsPosition[    307991,       6164]
NotebookOutlinePosition[    354354,       7019]
CellTagsIndexPosition[    354311,       7016]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
      "\"\<.wlt\>\""}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pacletDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"testFileName", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testContextBase", "=", 
  RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891244075958187*^9, 3.891244079885818*^9}, 
   3.891274440015959*^9, 3.891913898993636*^9, {3.893083620043439*^9, 
   3.893083620908062*^9}, 3.893336453091833*^9, 3.8933472708044786`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Output",
 CellChangeTimes->{3.8954308446988173`*^9, 3.895430974234503*^9, 
  3.8955077901156816`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"105247e4-ffb9-42a5-90ef-ceecb5cc624c"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.8954308446988173`*^9, 3.895430974234503*^9, 
  3.8955077901173353`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"3dd52cc1-b131-4a9c-afaf-02fd19b65ee0"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.8954308446988173`*^9, 3.895430974234503*^9, 
  3.895507790161319*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"fe876e7b-fd15-44ad-82eb-1cfb4bab9def"],

Cell[BoxData["\<\"CreateEulerEq\"\>"], "Output",
 CellChangeTimes->{3.8954308446988173`*^9, 3.895430974234503*^9, 
  3.8955077901626987`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"771da473-e753-4ed7-a925-dca74dc65798"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HighlightingCompatibility`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8954308446988173`*^9, 3.895430974234503*^9, 
  3.895507790164062*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"615ee317-4ee6-4820-b92b-33ca6dd3d61d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"2157750c-ae6d-47e9-b5dd-\
9c68ad40141b"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
    RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
   RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
   "testContextBase", "<>", "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, 
   3.890710660724628*^9, 3.893104584960622*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.895430979395316*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"c72d9ec0-f3ae-41df-99d5-0bd09420b66c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.8907105705815163`*^9, {3.893104595723756*^9, 3.893104599289246*^9}, {
   3.89317491140371*^9, 3.893174915927305*^9}, {3.895422767076079*^9, 
   3.8954227717794027`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.895430979410696*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"d3efd4ba-9282-4846-8082-682200e09bfe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"mods", "=", 
     RowBox[{"{", 
      RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893175497420415*^9, 3.895391994582877*^9, 3.895392105630176*^9, {
   3.89539218281699*^9, 3.895392183152795*^9}, {3.895416814433571*^9, 
   3.8954168147165403`*^9}, 3.8954226795755463`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-GFA92E\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-GFA92E"],
  Editable->False]], "Print",
 CellChangeTimes->{3.8954309798541813`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"721ab47a-c4d1-49a5-ab86-234b604a34ad"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.8954309798830357`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"80dac066-dac6-4b22-9a4b-76a9d2a8afe5"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Get @ Get @ FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tGet @ Get @ FileNameJoin @ {pacletDir, \"Resources\", \
\"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.111, "AbsoluteTiming" -> 0.115, 
   "InputString" :> ToString[
     Unevaluated[Get[
        Get[
         FileNameJoin[{$CellContext`pacletDir, "Resources", "Models.wl"}]]]; 
      ComputationalEngine`CreateEulerEq`msp = 
       FernandoDuarte`LongRunRisk`Models; 
      ComputationalEngine`CreateEulerEq`modBY = 
       ComputationalEngine`CreateEulerEq`msp["BY"]; 
      ComputationalEngine`CreateEulerEq`modNRC = 
       ComputationalEngine`CreateEulerEq`msp["NRC"]; 
      ComputationalEngine`CreateEulerEq`modDES = 
       ComputationalEngine`CreateEulerEq`msp["DES"]; 
      ComputationalEngine`CreateEulerEq`mods = {
        ComputationalEngine`CreateEulerEq`modBY, 
         ComputationalEngine`CreateEulerEq`modNRC, 
         ComputationalEngine`CreateEulerEq`modDES}; Null], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]
         :> (
        If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895430979893202*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"5e4a411c-3811-4ab1-973a-0963001b00fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "define", " ", "functions", " ", "and", " ", "variables", " ", "needed", 
      " ", "for", " ", "tests", " ", "below"}], "*)"}], "\[IndentingNewLine]",
     "\t", 
    RowBox[{
     RowBox[{"ee", "[", "model_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"retc", "[", 
          RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], 
       ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"ret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"bondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"nomeulereq", "[", 
        RowBox[{
         RowBox[{"nombondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"eeAll", "=", 
     RowBox[{"ee", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffWcAll", "=", 
     RowBox[{"coeffWc", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffPdAll", "=", 
     RowBox[{"coeffPd", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffBondAll", "=", 
     RowBox[{"coeffBond", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    
    RowBox[{"coeffNomBondAll", "=", 
     RowBox[{"coeffNomBond", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899652151465197`*^9, 3.889965235350771*^9}, 
   3.8899652808817787`*^9, {3.889967731242805*^9, 3.8899677356636972`*^9}, {
   3.889967971867523*^9, 3.889967975146998*^9}, {3.889968339451161*^9, 
   3.88996834001075*^9}, 3.889968619774049*^9, {3.8899688826075077`*^9, 
   3.88996888992594*^9}, {3.88996899475625*^9, 3.8899690018858624`*^9}, {
   3.8899691256166267`*^9, 3.8899691257757883`*^9}, {3.889969207667478*^9, 
   3.8899692141700287`*^9}, {3.8899692798779783`*^9, 3.889969288274632*^9}, 
   3.889969387087708*^9, 3.889969585993528*^9, {3.8899702972149563`*^9, 
   3.889970314454108*^9}, {3.890603045806611*^9, 3.890603046578224*^9}, 
   3.890603139674321*^9, {3.890676572733183*^9, 3.890676585108572*^9}, {
   3.890679071059198*^9, 3.890679121055434*^9}, {3.89067917308251*^9, 
   3.890679177122958*^9}, 3.890679328121275*^9, {3.8906795122187853`*^9, 
   3.890679514391316*^9}, {3.890679606901452*^9, 3.8906796293121653`*^9}, {
   3.890679668768669*^9, 3.890679669902752*^9}, {3.8906797200186*^9, 
   3.890679786626452*^9}, {3.890679828108779*^9, 3.890679882954316*^9}, 
   3.890710569438944*^9, 3.8907106646373167`*^9, {3.8931046613250093`*^9, 
   3.893104665209495*^9}, 3.893175508527553*^9, 3.895391982460368*^9, {
   3.895422867494982*^9, 3.895422867812324*^9}, 3.895423123847262*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-EXYC8D\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-EXYC8D"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895430979992136*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"52345c8b-4cf0-4b8b-84be-818ee0610322"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.8954309799948053`*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"24cc4a5e-f83f-431b-af6f-94ec2fb0368d"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\
\n\tComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`\
model_] := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.053, "AbsoluteTiming" -> 0.053, 
   "InputString" :> ToString[
     Unevaluated[
     Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]; 
      ComputationalEngine`CreateEulerEq`ee[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := {
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`retc[
          ComputationalEngine`CreateEulerEq`t + 1], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`ret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`j], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`bondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`nomeulereq[
          ComputationalEngine`CreateEulerEq`nombondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model]}; 
      ComputationalEngine`CreateEulerEq`eeAll = 
       Map[ComputationalEngine`CreateEulerEq`ee, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffWc[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffPd[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffNomBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffWcAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffWc, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffPdAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffPd, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffBond, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
         ComputationalEngine`CreateEulerEq`mods]; Null], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.8954309800134907`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"dfb4e013-e849-4490-ba8d-b4e4d92c4c4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "uncondE", " ", "can", 
     " ", "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*eulereq\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, {3.890016004516365*^9, 3.890016008058874*^9}, {
   3.890679266281045*^9, 3.8906792665642843`*^9}, {3.89067933542416*^9, 
   3.890679337313949*^9}, {3.8907105841635733`*^9, 3.890710593701932*^9}, 
   3.893175541345852*^9, 3.895423124898571*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-D1JX8J\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-D1JX8J"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895430980075935*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"e3d8c19e-a4d2-4d5d-a60d-222cfe5e0e49"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.895430980078273*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"d2ea8521-96a6-4d48-86cf-d07e9cb921cb"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "!SameQ[Names @ \"*eulereq\", {}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.023, "AbsoluteTiming" -> 0.023, 
   "InputString" :> ToString[
     Unevaluated[
      Not[Names["*eulereq"] === {}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895430980097095*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"0b64c897-ad5c-440d-a279-15afd1fcfa36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
      "variables"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
       "}"}]}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8954169241746273`*^9, 3.8954169480165787`*^9}, {
   3.8954169866199512`*^9, 3.895417001851879*^9}, {3.895422894723716*^9, 
   3.895422895427703*^9}, 3.895423128112627*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-K9CXQS\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-K9CXQS"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895430980258588*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"b34e1baa-8b3b-4aa2-947c-2ecb7907f9d9"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.895430980260956*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"b79c4c47-1b72-4af5-b09c-da9fab415c69"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\
\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = False, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\
\t\t\tFunction[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\t\
Keys[\n\t\t\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\
\t\t\t\t\tDeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> False, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.124, "AbsoluteTiming" -> 0.124, 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modBY]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modNRC]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modDES]]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nEndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.8954309802811613`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"eecae2c2-bc91-4af2-b78e-d33b9078dc68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
     "coefficients"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffWcAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffPdAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffNomBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895416997644126*^9, 3.895416998220045*^9}, {
   3.8954229991635427`*^9, 3.895422999628498*^9}, 3.8954231298267527`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-VPAZX0\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-VPAZX0"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895430980474372*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"8dafb9dc-ca0b-46ad-aed9-fa57bbf7073b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.8954309804769297`*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"0d4b9fe4-defa-42a3-99a1-165637177e8c"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\
\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.003, "AbsoluteTiming" -> 0.003, 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 1], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffWcAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 2], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffPdAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 3], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 4], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], InputForm]|>,
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895430980498612*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"874d0a0d-b8ed-488b-8387-d72f857e9006"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
      "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state", 
      " ", "variables", " ", "plus", " ", "1", " ", 
      RowBox[{"(", 
       RowBox[{
       "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not", 
        " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                   "True"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
       "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.893081708234816*^9, 3.8930817475700893`*^9}, {
   3.893082619951611*^9, 3.893082620668397*^9}, {3.8930826743611507`*^9, 
   3.893082674969939*^9}, {3.89308271889793*^9, 3.893082764899756*^9}, {
   3.893083300110649*^9, 3.8930833295765333`*^9}, {3.893083371906817*^9, 
   3.893083397811235*^9}, {3.8930835396615067`*^9, 3.8930836030394173`*^9}, {
   3.893104803562705*^9, 3.893104804045452*^9}, 3.893104872008975*^9, 
   3.893174857369234*^9, {3.8931756795157223`*^9, 3.8931757087748537`*^9}, {
   3.895392444526318*^9, 3.895392484243939*^9}, {3.8954169653591022`*^9, 
   3.8954169785255527`*^9}, {3.895417160985211*^9, 3.8954171613491287`*^9}, {
   3.895423034578776*^9, 3.895423035028845*^9}, 
   3.8954310734670973`*^9},ExpressionUUID->"ca14d8f1-7a77-428b-8c74-\
a7eb0de7af1a"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-AVEZU6\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-AVEZU6"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895431065163702*^9},
 CellLabel->"",ExpressionUUID->"ed876dd4-63d0-45fd-90aa-57c9889cfad2"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.895431065166621*^9},
 CellLabel->"",ExpressionUUID->"62b5cdaa-9549-45aa-ad6e-c3695a6443f3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have",
      " ", "t"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
            "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893082237801841*^9, {3.893082288507763*^9, 3.893082397545843*^9}, {
   3.89308380447088*^9, 3.893083826885064*^9}, {3.893104792410515*^9, 
   3.893104792601891*^9}, 3.89310486870549*^9, 3.8931748513936157`*^9, 
   3.893175626999609*^9, 3.895392371633009*^9, 3.895417041759726*^9, 
   3.8954231371665907`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-CRU3E0\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-CRU3E0"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895431033506853*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"bc312fa5-ef69-4d2f-9abf-c299eecfb06e"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.89543103350948*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"174703fa-04d4-4a14-89b2-04dd186dd6f2"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
Map[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-CRU3E0\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 18.974, "AbsoluteTiming" -> 
   18.872, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`j], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #, True], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function \
@ FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-CRU3E0\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895431033530649*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"e85c268c-bd95-4e4e-b353-77e85f869e4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "equations", " ", "are", " ", "the", " ", "same", " ", "for", " ", "any", 
     " ", "time", " ", "period"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", 
              RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
            "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", " ",
              "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895417057136814*^9, 3.89541709937171*^9}, 
   3.895423139040351*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-2NVH3P\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-2NVH3P"],
  Editable->False]], "Print",
 CellChangeTimes->{3.89543106507598*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"98833299-c2d2-4dc5-b5d8-970bd94deef8"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.895431065078174*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"ad61a2b6-bd92-4e63-8f57-f7971f4fe603"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-2NVH3P\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 31.589000000000002`, 
   "AbsoluteTiming" -> 31.486, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
        Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t + 1], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`j], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`j], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`m], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #, True]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`m], #, True]& , 
           ComputationalEngine`CreateEulerEq`mods]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function \
@ FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-CRU3E0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-2NVH3P\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895431065094193*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"cd31cf77-1710-401f-b8dc-c897bb6d347e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", 
     " ", "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
     "}"}], "===", 
    RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", "mods"}],
             ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                   "]"}]}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
       "}"}]}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.8954171194635572`*^9, 3.8954231406478786`*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-GHU9ZO\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-GHU9ZO"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895431080909124*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"f5a2662d-62cb-40dc-88e9-01bb7bb532bc"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.895431080911501*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"8ac93904-fa60-4f5b-9bee-062eeac7f9f9"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-GHU9ZO\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {
    "Adding test: CreateEulerEq_20230610-AVEZU6", 
     "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"}, "Messages" -> {},
    "MessagesText" -> {}, "MessagesExpressions" -> {}, "Timing" -> 15.833, 
   "AbsoluteTiming" -> 15.757, "InputString" :> ToString[
     Unevaluated[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
      DeleteDuplicates[
        Flatten[{
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]]], 
              Span[1, All], 0]& , ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function \
@ FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-CRU3E0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-2NVH3P\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\
First @ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-AVEZU6\"\n]\n\n\nVerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-GHU9ZO\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895431080933045*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"d0ec3bc9-b18e-4781-851b-1579a450d986"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
     "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
         "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"e0", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e1", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"ret", "[", 
            RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"bondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"nombondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e0p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Normal", "@", 
             RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
            RowBox[{"Thread", "[", 
             RowBox[{
              RowBox[{"e0", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->",
              "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e1p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
              "[", "_", "]"}], "->", "4"}], ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[",
               "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"e0", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
          RowBox[{
           RowBox[{"e1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
          RowBox[{
           RowBox[{"e2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
          RowBox[{
           RowBox[{"e3", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"BooleanQ", "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "@", 
         RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.895417134264539*^9, 3.8954174370542917`*^9, 
  3.89542314301904*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230610-T9CC4Q\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230610-T9CC4Q"],
  Editable->False]], "Print",
 CellChangeTimes->{3.895431082386932*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"a051e978-6621-446a-9fdc-1e53fcabf2de"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.8954310823894157`*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"62398342-0a4f-4ab4-beae-26c4d274ae78"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-T9CC4Q\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.416, "AbsoluteTiming" -> 1.401, 
   "InputString" :> ToString[
     Unevaluated[ComputationalEngine`CreateEulerEq`checkBoolean[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := 
       Module[{ComputationalEngine`CreateEulerEq`e0, 
          ComputationalEngine`CreateEulerEq`e1, 
          ComputationalEngine`CreateEulerEq`e2, 
          ComputationalEngine`CreateEulerEq`e3, 
          ComputationalEngine`CreateEulerEq`e0p, 
          ComputationalEngine`CreateEulerEq`e1p, 
          ComputationalEngine`CreateEulerEq`e2p, 
          ComputationalEngine`CreateEulerEq`e3p}, 
         ComputationalEngine`CreateEulerEq`e0 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e1 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 1], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e2 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e3 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model, True]; 
         ComputationalEngine`CreateEulerEq`e0p = Flatten[{
             Normal[
              ComputationalEngine`CreateEulerEq`model["parameters"]], 
             Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4}]; 
         ComputationalEngine`CreateEulerEq`e1p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
               Blank[]] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
               Blank[]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e2p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e3p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; {
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e0, 1], 
            ComputationalEngine`CreateEulerEq`e0p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e1, 1], 
            ComputationalEngine`CreateEulerEq`e1p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e2, 1], 
            ComputationalEngine`CreateEulerEq`e2p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e3, 1], 
            ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
        Map[BooleanQ, 
         Flatten[
          ComputationalEngine`CreateEulerEq`checkBoolean[
          ComputationalEngine`CreateEulerEq`modBY]]]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {pacletDir, \"Resources\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-GFA92E\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-EXYC8D\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-D1JX8J\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-K9CXQS\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-VPAZX0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function \
@ FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-CRU3E0\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-2NVH3P\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\
First @ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-AVEZU6\"\n]\n\n\nVerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230610-GHU9ZO\"\n]\n\n\n\
VerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230610-T9CC4Q\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.895431082410083*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"75117ea8-16af-433e-8ead-6d9b3b9b3bd8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.895431082450046*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"3b0d5ae4-2255-4179-af43-db88782a3952"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"add", " ", 
   RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
   RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890681841946844*^9, 3.890681899849094*^9}, {
  3.890682055663522*^9, 3.890682084827585*^9}, {3.890683635625399*^9, 
  3.890683720295089*^9}, {3.890685425949465*^9, 3.890685434516119*^9}, {
  3.890686231117095*^9, 3.890686238212121*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8906824011137114`*^9, 3.890682405708049*^9}, {
   3.890683066049664*^9, 3.8906830825042677`*^9}, {3.89068319056032*^9, 
   3.890683191547068*^9}, {3.89068338518532*^9, 3.890683430044886*^9}, {
   3.890683477495555*^9, 3.89068350860789*^9}, {3.890683563263863*^9, 
   3.890683572999384*^9}, {3.8906837588959513`*^9, 3.890683769652152*^9}, 
   3.890683975431652*^9, 3.890684184728485*^9, {3.890684538464937*^9, 
   3.890684546403357*^9}, 3.8906847013731937`*^9, 3.890684736359234*^9, {
   3.890684917937912*^9, 3.890684918964259*^9}, {3.890685003978653*^9, 
   3.8906850058353167`*^9}, {3.890685081266893*^9, 3.890685086440845*^9}, {
   3.890685162742771*^9, 3.890685164959052*^9}, {3.890685207547077*^9, 
   3.890685210133041*^9}, {3.890685379823967*^9, 3.890685396833392*^9}, {
   3.89068547363831*^9, 3.890685483195992*^9}, {3.8906856724322433`*^9, 
   3.890685672699678*^9}, {3.890685793209527*^9, 3.890685826416944*^9}, 
   3.8906858923977957`*^9, {3.890685924003189*^9, 3.890685959055036*^9}, {
   3.890686016304421*^9, 3.890686073140353*^9}, {3.890686249638393*^9, 
   3.8906862512145*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", 
     "\"\<Begin[\\\"ComputationalEngine`CreateEulerEq`\\\"]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.890684439578331*^9, {3.8906861781312037`*^9, 3.890686181646003*^9}, {
   3.890686261099564*^9, 3.8906862940387907`*^9}, {3.890710614230303*^9, 
   3.8907106202002974`*^9}, 3.8931046283317003`*^9, 3.893174923361951*^9, 
   3.895422783189183*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.895431082518209*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"e673922f-a335-425d-ac11-52d58a691751"],

Cell[BoxData["410"], "Output",
 CellChangeTimes->{3.89543108253399*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"e81cc3f3-5414-45af-bc0d-158796a12ff2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.89543108254944*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"c813dd6e-7332-4c2d-bb05-54e0db425554"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"fc1d992d-4049-45c4-8e03-501b9a0475c2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests run: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with wrong results: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox[
                 "\"Failed with messages: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Failed with errors: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "77.745565`", "\"s\"", "seconds", "\"Seconds\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: CreateEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6600198960589760462 -> 
      TestResultObject[<|
        "TestKey" -> 6600198960589760462, "TestID" -> 
         "CreateEulerEq_20230610-GFA92E", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[Get[
             Get[
              
              FileNameJoin[{$CellContext`pacletDir, "Resources", 
                "Models.wl"}]]]; 
           ComputationalEngine`CreateEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`CreateEulerEq`modBY = 
            ComputationalEngine`CreateEulerEq`msp["BY"]; 
           ComputationalEngine`CreateEulerEq`modNRC = 
            ComputationalEngine`CreateEulerEq`msp["NRC"]; 
           ComputationalEngine`CreateEulerEq`modDES = 
            ComputationalEngine`CreateEulerEq`msp["DES"]; 
           ComputationalEngine`CreateEulerEq`mods = {
             ComputationalEngine`CreateEulerEq`modBY, 
              ComputationalEngine`CreateEulerEq`modNRC, 
              ComputationalEngine`CreateEulerEq`modDES}; Null], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.8954310825998907`*^9, "AbsoluteTimeUsed" -> 
         0.077975`5.042470381261175, "CPUTimeUsed" -> 0.08338899999999683, 
         "MemoryUsed" -> 6561936|>], 6049661819606404488 -> 
      TestResultObject[<|
        "TestKey" -> 6049661819606404488, "TestID" -> 
         "CreateEulerEq_20230610-EXYC8D", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
"]; ComputationalEngine`CreateEulerEq`ee[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := {
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`nomeulereq[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model]}; 
           ComputationalEngine`CreateEulerEq`eeAll = 
            Map[ComputationalEngine`CreateEulerEq`ee, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffWc[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffPd[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffNomBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffWcAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffWc, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffPdAll = 
            Map[
             ComputationalEngine`CreateEulerEq`coeffPd, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffBond, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
              ComputationalEngine`CreateEulerEq`mods]; Null], 
         "ExpectedOutput" -> HoldForm[Null], "ActualOutput" -> HoldForm[Null],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895431082680004*^9, "AbsoluteTimeUsed" -> 
         0.003427`3.685429102261861, "CPUTimeUsed" -> 0.0034279999999995425`, 
         "MemoryUsed" -> -6412808|>], 8966295597765298070 -> 
      TestResultObject[<|
        "TestKey" -> 8966295597765298070, "TestID" -> 
         "CreateEulerEq_20230610-D1JX8J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Not[Names["*eulereq"] === {}]], "ExpectedOutput" -> HoldForm[True],
          "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895431082683642*^9, "AbsoluteTimeUsed" -> 
         0.020066`4.452975805742374, "CPUTimeUsed" -> 0.02007199999999898, 
         "MemoryUsed" -> 2808|>], 3441919163044283775 -> 
      TestResultObject[<|
        "TestKey" -> 3441919163044283775, "TestID" -> 
         "CreateEulerEq_20230610-K9CXQS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modBY]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modNRC]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modDES]]}]]], 
         "ExpectedOutput" -> HoldForm[False], "ActualOutput" -> 
         HoldForm[False], "ExpectedMessages" -> HoldForm[{}], 
         "ActualMessages" -> {}, "AbsoluteTime" -> 3.895431082704076*^9, 
         "AbsoluteTimeUsed" -> 0.12011`5.230094164802125, "CPUTimeUsed" -> 
         0.12015799999998933`, "MemoryUsed" -> 7280|>], 4332890899948883151 -> 
      TestResultObject[<|
        "TestKey" -> 4332890899948883151, "TestID" -> 
         "CreateEulerEq_20230610-VPAZX0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffWcAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffPdAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895431082824577*^9, "AbsoluteTimeUsed" -> 
         0.002745`3.5890573466181044, "CPUTimeUsed" -> 0.0027449999999902275`,
          "MemoryUsed" -> 21992|>], 2070559969721020485 -> 
      TestResultObject[<|
        "TestKey" -> 2070559969721020485, "TestID" -> 
         "CreateEulerEq_20230610-CRU3E0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895431082827588*^9, "AbsoluteTimeUsed" -> 
         15.240353`7.3335100241647515, "CPUTimeUsed" -> 15.315173000000016`, 
         "MemoryUsed" -> 2344640|>], 8751300789800774302 -> 
      TestResultObject[<|
        "TestKey" -> 8751300789800774302, "TestID" -> 
         "CreateEulerEq_20230610-2NVH3P", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            
            Flatten[{
             Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895431098068449*^9, "AbsoluteTimeUsed" -> 
         30.732417`7.638111715214451, "CPUTimeUsed" -> 30.884028, 
         "MemoryUsed" -> 3792728|>], 9148955298407642730 -> 
      TestResultObject[<|
        "TestKey" -> 9148955298407642730, "TestID" -> 
         "CreateEulerEq_20230610-AVEZU6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.895431128801454*^9, "AbsoluteTimeUsed" -> 
         15.282803`7.334718012791017, "CPUTimeUsed" -> 15.356484999999992`, 
         "MemoryUsed" -> 1828904|>], 4048471927062055058 -> 
      TestResultObject[<|
        "TestKey" -> 4048471927062055058, "TestID" -> 
         "CreateEulerEq_20230610-GHU9ZO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> 
         HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
           DeleteDuplicates[
             Flatten[{
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                   Span[1, All], 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]]}]]], 
         "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True],
          "ExpectedMessages" -> HoldForm[{}], "ActualMessages" -> {}, 
         "AbsoluteTime" -> 3.895431144084802*^9, "AbsoluteTimeUsed" -> 
         15.316309`7.335669117301925, "CPUTimeUsed" -> 15.392291, 
         "MemoryUsed" -> 2105064|>], 7160430326202457974 -> 
      TestResultObject[<|
        "TestKey" -> 7160430326202457974, "TestID" -> 
         "CreateEulerEq_20230610-T9CC4Q", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "SameTest" -> 
         SameQ, "SameMessages" -> Testing`MessageMatchQ, "MemoryConstraint" -> 
         DirectedInfinity[1], "TimeConstraint" -> DirectedInfinity[1], 
         "Outcome" -> "Success", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := 
            Module[{ComputationalEngine`CreateEulerEq`e0, 
               ComputationalEngine`CreateEulerEq`e1, 
               ComputationalEngine`CreateEulerEq`e2, 
               ComputationalEngine`CreateEulerEq`e3, 
               ComputationalEngine`CreateEulerEq`e0p, 
               ComputationalEngine`CreateEulerEq`e1p, 
               ComputationalEngine`CreateEulerEq`e2p, 
               ComputationalEngine`CreateEulerEq`e3p}, 
              ComputationalEngine`CreateEulerEq`e0 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e1 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 1], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e2 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e3 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model, True]; 
              ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                  Normal[
                   ComputationalEngine`CreateEulerEq`model["parameters"]], 
                  Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                  4}]; ComputationalEngine`CreateEulerEq`e1p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                    Blank[]] -> 4, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    Blank[]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e2p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                   
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e3p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                 ComputationalEngine`CreateEulerEq`e0p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                 ComputationalEngine`CreateEulerEq`e1p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                 ComputationalEngine`CreateEulerEq`e2p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                 ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
             Map[BooleanQ, 
              Flatten[
               ComputationalEngine`CreateEulerEq`checkBoolean[
               ComputationalEngine`CreateEulerEq`modBY]]]]], "ExpectedOutput" -> 
         HoldForm[True], "ActualOutput" -> HoldForm[True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualMessages" -> {}, "AbsoluteTime" -> 
         3.8954311594016957`*^9, "AbsoluteTimeUsed" -> 
         0.94936`6.127945927189015, "CPUTimeUsed" -> 0.958172999999988, 
         "MemoryUsed" -> 604680|>]|>, 
    "TestsSucceededKeys" -> {6600198960589760462, 6049661819606404488, 
     8966295597765298070, 3441919163044283775, 4332890899948883151, 
     2070559969721020485, 8751300789800774302, 9148955298407642730, 
     4048471927062055058, 7160430326202457974}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.895431160563786*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"7a1ccfcb-95bd-4e6c-868d-cef84f60b7b6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"d03dfeba-2718-41c7-9b3f-\
19ce5bed64e2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], 
      "}"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.895400995806225*^9, 3.8954009959498043`*^9}, {
   3.895401333682231*^9, 3.8954013437477283`*^9}, {3.895415511062855*^9, 
   3.895415512534185*^9}, 3.895416761698543*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ee", "[", "model_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"retc", "[", 
       RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"ret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"bondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"nomeulereq", "[", 
     RowBox[{
      RowBox[{"nombondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eeAll", "=", 
   RowBox[{"ee", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", "i", 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffWcAll", "=", 
   RowBox[{"coeffWc", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffPdAll", "=", 
   RowBox[{"coeffPd", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffBondAll", "=", 
   RowBox[{"coeffBond", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffNomBondAll", "=", 
   RowBox[{"coeffNomBond", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], 
  "**)"}]], "Input",
 CellChangeTimes->{{3.8953896985566893`*^9, 3.895389733299385*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
    "variables"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                  "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.895430860112846*^9, 3.895507802778337*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"e857c17c-5223-4f48-86d8-1c9606f0f280"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
    "coefficients"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffWcAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffPdAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffNomBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8954308601329803`*^9, 3.895507802809013*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ccf57084-cf1d-4bc4-b13c-c8e6e854c2d2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}]], "Input",
 CellChangeTimes->{3.895389747518649*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
    "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state", 
    " ", "variables", " ", "plus", " ", "1", " ", 
    RowBox[{"(", 
     RowBox[{
     "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not", 
      " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"ret", "[", 
                  RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"bondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"nombondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                 "True"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394734669942*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.89543089392869*^9, 3.8955078360808687`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"a9a1aee3-bc71-4cd6-ae4d-4bc984d8f0f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have", 
    " ", "t"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394737802577*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.895430910461753*^9, 3.895507852266591*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"fd03d4c8-36e6-46ac-af84-92bd4dd67bad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "constants", " ", "for", " ", "wc", " ", "ratio", " ", "are", " ", 
    "independent", " ", "of", " ", "time", " ", "period"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", 
             RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", " ", 
            "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.8953947409558907`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.895430941825082*^9, 3.8955078828536577`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"c0e6da9a-b6d6-4024-88b1-59ef7ce5605a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", " ",
     "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
   "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
    "}"}], "===", 
   RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", "mods"}], 
           ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                  "]"}]}]}], ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8954309574409523`*^9, 3.895507898398039*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"7eb0f288-6036-4e11-814b-30bcfcc4fab1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
    "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
        "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"e0", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e1", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"ret", "[", 
           RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e2", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"bondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"nombondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e0p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Normal", "@", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"e0", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->", 
            "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e1p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
             "[", "_", "]"}], "->", "4"}], ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[", 
             "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e2p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"e0", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
         RowBox[{
          RowBox[{"e1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
         RowBox[{
          RowBox[{"e2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
         RowBox[{
          RowBox[{"e3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"BooleanQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "@", 
        RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], 
     ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8954309588646307`*^9, 3.895507899787277*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"0062f6f7-ba80-40f6-8403-7d7e53f34adb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{815, 828},
WindowMargins->{{158, Automatic}, {Automatic, 24}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aa263687-a9be-4f29-a043-b4b72fa56207"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 214, 4, 37, "Input",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],
Cell[CellGroupData[{
Cell[639, 21, 1958, 37, 220, "Input",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],
Cell[2600, 60, 295, 4, 69, "Output",ExpressionUUID->"105247e4-ffb9-42a5-90ef-ceecb5cc624c"],
Cell[2898, 66, 272, 4, 42, "Output",ExpressionUUID->"3dd52cc1-b131-4a9c-afaf-02fd19b65ee0"],
Cell[3173, 72, 292, 5, 42, "Output",ExpressionUUID->"fe876e7b-fd15-44ad-82eb-1cfb4bab9def"],
Cell[3468, 79, 219, 3, 42, "Output",ExpressionUUID->"771da473-e753-4ed7-a925-dca74dc65798"],
Cell[3690, 84, 317, 6, 42, "Output",ExpressionUUID->"615ee317-4ee6-4820-b92b-33ca6dd3d61d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4044, 95, 255, 4, 67, "Subsection",ExpressionUUID->"2157750c-ae6d-47e9-b5dd-9c68ad40141b"],
Cell[4302, 101, 316, 7, 37, "Input",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],
Cell[CellGroupData[{
Cell[4643, 112, 601, 11, 64, "Input",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],
Cell[5247, 125, 218, 3, 42, "Output",ExpressionUUID->"c72d9ec0-f3ae-41df-99d5-0bd09420b66c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5502, 133, 423, 7, 37, "Input",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],
Cell[5928, 142, 189, 2, 42, "Output",ExpressionUUID->"d3efd4ba-9282-4846-8082-682200e09bfe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6154, 149, 1417, 33, 220, "Input",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],
Cell[CellGroupData[{
Cell[7596, 186, 381, 9, 29, "Print",ExpressionUUID->"721ab47a-c4d1-49a5-ab86-234b604a34ad"],
Cell[7980, 197, 272, 5, 29, "Print",ExpressionUUID->"80dac066-dac6-4b22-9a4b-76a9d2a8afe5"]
}, Open  ]],
Cell[8267, 205, 7252, 135, 42, "Output",ExpressionUUID->"5e4a411c-3811-4ab1-973a-0963001b00fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15556, 345, 5487, 127, 584, "Input",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],
Cell[CellGroupData[{
Cell[21068, 476, 379, 9, 29, "Print",ExpressionUUID->"52345c8b-4cf0-4b8b-84be-818ee0610322"],
Cell[21450, 487, 272, 5, 29, "Print",ExpressionUUID->"24cc4a5e-f83f-431b-af6f-94ec2fb0368d"]
}, Open  ]],
Cell[21737, 495, 19187, 341, 42, "Output",ExpressionUUID->"dfb4e013-e849-4490-ba8d-b4e4d92c4c4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40961, 841, 990, 19, 116, "Input",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],
Cell[CellGroupData[{
Cell[41976, 864, 379, 9, 29, "Print",ExpressionUUID->"e3d8c19e-a4d2-4d5d-a60d-222cfe5e0e49"],
Cell[42358, 875, 270, 5, 29, "Print",ExpressionUUID->"d2ea8521-96a6-4d48-86cf-d07e9cb921cb"]
}, Open  ]],
Cell[42643, 883, 8914, 158, 42, "Output",ExpressionUUID->"0b64c897-ad5c-440d-a279-15afd1fcfa36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51594, 1046, 3282, 80, 344, "Input",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],
Cell[CellGroupData[{
Cell[54901, 1130, 379, 9, 29, "Print",ExpressionUUID->"b34e1baa-8b3b-4aa2-947c-2ecb7907f9d9"],
Cell[55283, 1141, 270, 5, 29, "Print",ExpressionUUID->"b79c4c47-1b72-4af5-b09c-da9fab415c69"]
}, Open  ]],
Cell[55568, 1149, 17501, 295, 42, "Output",ExpressionUUID->"eecae2c2-bc91-4af2-b78e-d33b9078dc68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73106, 1449, 3609, 93, 272, "Input",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],
Cell[CellGroupData[{
Cell[76740, 1546, 379, 9, 29, "Print",ExpressionUUID->"8dafb9dc-ca0b-46ad-aed9-fa57bbf7073b"],
Cell[77122, 1557, 272, 5, 29, "Print",ExpressionUUID->"0d4b9fe4-defa-42a3-99a1-165637177e8c"]
}, Open  ]],
Cell[77409, 1565, 19003, 327, 42, "Output",ExpressionUUID->"874d0a0d-b8ed-488b-8387-d72f857e9006"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96449, 1897, 5239, 126, 376, "Input",ExpressionUUID->"ca14d8f1-7a77-428b-8c74-a7eb0de7af1a"],
Cell[CellGroupData[{
Cell[101713, 2027, 345, 7, 29, "Print",ExpressionUUID->"ed876dd4-63d0-45fd-90aa-57c9889cfad2"],
Cell[102061, 2036, 236, 3, 29, "Print",ExpressionUUID->"62b5cdaa-9549-45aa-ad6e-c3695a6443f3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[102346, 2045, 2296, 56, 246, "Input",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],
Cell[CellGroupData[{
Cell[104667, 2105, 379, 9, 29, "Print",ExpressionUUID->"bc312fa5-ef69-4d2f-9abf-c299eecfb06e"],
Cell[105049, 2116, 269, 5, 29, "Print",ExpressionUUID->"174703fa-04d4-4a14-89b2-04dd186dd6f2"]
}, Open  ]],
Cell[105333, 2124, 19113, 327, 42, "Output",ExpressionUUID->"e85c268c-bd95-4e4e-b353-77e85f869e4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124483, 2456, 3246, 87, 272, "Input",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],
Cell[CellGroupData[{
Cell[127754, 2547, 378, 9, 29, "Print",ExpressionUUID->"98833299-c2d2-4dc5-b5d8-970bd94deef8"],
Cell[128135, 2558, 270, 5, 29, "Print",ExpressionUUID->"ad61a2b6-bd92-4e63-8f57-f7971f4fe603"]
}, Open  ]],
Cell[128420, 2566, 24245, 402, 42, "Output",ExpressionUUID->"cd31cf77-1710-401f-b8dc-c897bb6d347e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152702, 2973, 4154, 105, 272, "Input",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],
Cell[CellGroupData[{
Cell[156881, 3082, 379, 9, 29, "Print",ExpressionUUID->"f5a2662d-62cb-40dc-88e9-01bb7bb532bc"],
Cell[157263, 3093, 270, 5, 29, "Print",ExpressionUUID->"8ac93904-fa60-4f5b-9bee-062eeac7f9f9"]
}, Open  ]],
Cell[157548, 3101, 29177, 479, 42, "Output",ExpressionUUID->"d0ec3bc9-b18e-4781-851b-1579a450d986"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186762, 3585, 4413, 112, 454, "Input",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],
Cell[CellGroupData[{
Cell[191200, 3701, 379, 9, 29, "Print",ExpressionUUID->"a051e978-6621-446a-9fdc-1e53fcabf2de"],
Cell[191582, 3712, 272, 5, 29, "Print",ExpressionUUID->"62398342-0a4f-4ab4-beae-26c4d274ae78"]
}, Open  ]],
Cell[191869, 3720, 35341, 588, 42, "Output",ExpressionUUID->"75117ea8-16af-433e-8ead-6d9b3b9b3bd8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227247, 4313, 195, 3, 37, "Input",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],
Cell[227445, 4318, 190, 2, 42, "Output",ExpressionUUID->"3b0d5ae4-2255-4179-af43-db88782a3952"]
}, Open  ]],
Cell[227650, 4323, 356, 7, 37, "Input",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],
Cell[228009, 4332, 1502, 33, 402, "Input",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],
Cell[229514, 4367, 3288, 67, 558, "Input",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],
Cell[CellGroupData[{
Cell[232827, 4438, 1642, 39, 246, "Input",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],
Cell[234472, 4479, 397, 8, 69, "Output",ExpressionUUID->"e673922f-a335-425d-ac11-52d58a691751"],
Cell[234872, 4489, 150, 2, 42, "Output",ExpressionUUID->"e81cc3f3-5414-45af-bc0d-158796a12ff2"],
Cell[235025, 4493, 396, 8, 69, "Output",ExpressionUUID->"c813dd6e-7332-4c2d-bb05-54e0db425554"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235458, 4506, 177, 3, 37, "Input",ExpressionUUID->"fc1d992d-4049-45c4-8e03-501b9a0475c2"],
Cell[235638, 4511, 39776, 780, 76, "Output",ExpressionUUID->"7a1ccfcb-95bd-4e6c-868d-cef84f60b7b6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[275463, 5297, 214, 4, 46, "Subsection",ExpressionUUID->"d03dfeba-2718-41c7-9b3f-19ce5bed64e2"],
Cell[275680, 5303, 1084, 28, 168, "Input",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],
Cell[276767, 5333, 209, 4, 37, "Input",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],
Cell[276979, 5339, 1416, 36, 116, "Input",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],
Cell[278398, 5377, 2791, 75, 428, "Input",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],
Cell[281192, 5454, 277, 6, 37, "Input",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],
Cell[CellGroupData[{
Cell[281494, 5464, 3162, 76, 356, "Input",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],
Cell[284659, 5542, 174, 2, 42, "Output",ExpressionUUID->"e857c17c-5223-4f48-86d8-1c9606f0f280"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284870, 5549, 3714, 94, 298, "Input",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],
Cell[288587, 5645, 176, 2, 42, "Output",ExpressionUUID->"ccf57084-cf1d-4bc4-b13c-c8e6e854c2d2"]
}, Open  ]],
Cell[288778, 5650, 223, 4, 37, "Input",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],
Cell[CellGroupData[{
Cell[289026, 5658, 4402, 111, 454, "Input",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],
Cell[293431, 5771, 175, 2, 42, "Output",ExpressionUUID->"a9a1aee3-bc71-4cd6-ae4d-4bc984d8f0f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293643, 5778, 2190, 53, 194, "Input",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],
Cell[295836, 5833, 174, 2, 42, "Output",ExpressionUUID->"fd03d4c8-36e6-46ac-af84-92bd4dd67bad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296047, 5840, 3371, 89, 298, "Input",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],
Cell[299421, 5931, 176, 2, 42, "Output",ExpressionUUID->"c0e6da9a-b6d6-4024-88b1-59ef7ce5605a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299634, 5938, 3858, 102, 584, "Input",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],
Cell[303495, 6042, 176, 2, 42, "Output",ExpressionUUID->"7eb0f288-6036-4e11-814b-30bcfcc4fab1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[303708, 6049, 4076, 107, 766, "Input",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],
Cell[307787, 6158, 176, 2, 62, "Output",ExpressionUUID->"0062f6f7-ba80-40f6-8403-7d7e53f34adb"]
}, Open  ]]
}, Open  ]]
}
]
*)

