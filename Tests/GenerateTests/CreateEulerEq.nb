(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    393062,       7641]
NotebookOptionsPosition[    337296,       6627]
NotebookOutlinePosition[    383658,       7482]
CellTagsIndexPosition[    383615,       7479]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
      "\"\<.wlt\>\""}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pacletDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"testFileName", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testContextBase", "=", 
  RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891244075958187*^9, 3.891244079885818*^9}, 
   3.891274440015959*^9, 3.891913898993636*^9, {3.893083620043439*^9, 
   3.893083620908062*^9}, 3.893336453091833*^9, 3.8933472708044786`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Output",
 CellChangeTimes->{3.9015344196188726`*^9, 3.901548652585556*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"e5f51980-af68-41f0-b2e9-275a810eccc8"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.9015344196188726`*^9, 3.9015486525863533`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"d2e9cfe9-7d99-4d31-8d65-2eaf00386f93"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.9015344196188726`*^9, 3.901548652622882*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"7d44a2ba-8eb1-43d1-a0c2-8c2a91ebabe7"],

Cell[BoxData["\<\"CreateEulerEq\"\>"], "Output",
 CellChangeTimes->{3.9015344196188726`*^9, 3.901548652623603*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"45abb243-f63c-4079-ba3f-e2718ec13067"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9015344196188726`*^9, 3.9015486526241093`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"78c3c686-2325-46c8-ac82-94c97e82bd8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"2157750c-ae6d-47e9-b5dd-\
9c68ad40141b"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
    RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
   RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
   "testContextBase", "<>", "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, 
   3.890710660724628*^9, 3.893104584960622*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.901548704300213*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"298561ff-9dfd-458f-8576-795e0c4db25f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.8907105705815163`*^9, {3.893104595723756*^9, 3.893104599289246*^9}, {
   3.89317491140371*^9, 3.893174915927305*^9}, {3.895422767076079*^9, 
   3.8954227717794027`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.901548704303474*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"cfc2da5e-df57-4fa7-b1c2-abf2d7b33e02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"mods", "=", 
     RowBox[{"{", 
      RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893175497420415*^9, 3.895391994582877*^9, 3.895392105630176*^9, {
   3.89539218281699*^9, 3.895392183152795*^9}, {3.895416814433571*^9, 
   3.8954168147165403`*^9}, 3.8954226795755463`*^9, 3.901548696187284*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-UJLDBE\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-UJLDBE"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548704684141*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"db7b4d9a-8fd6-4d60-8a93-6c57607a7fc5"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548704700968*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c217689a-1cf5-4966-a0a2-f456d66c9cf8"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \
\"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tGet @ Get @ FileNameJoin @ \
{\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.168, "AbsoluteTiming" -> 0.176, 
   "InputString" :> ToString[
     Unevaluated[Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      ComputationalEngine`CreateEulerEq`msp = 
       FernandoDuarte`LongRunRisk`Models; 
      ComputationalEngine`CreateEulerEq`modBY = 
       ComputationalEngine`CreateEulerEq`msp["BY"]; 
      ComputationalEngine`CreateEulerEq`modNRC = 
       ComputationalEngine`CreateEulerEq`msp["NRC"]; 
      ComputationalEngine`CreateEulerEq`modDES = 
       ComputationalEngine`CreateEulerEq`msp["DES"]; 
      ComputationalEngine`CreateEulerEq`mods = {
        ComputationalEngine`CreateEulerEq`modBY, 
         ComputationalEngine`CreateEulerEq`modNRC, 
         ComputationalEngine`CreateEulerEq`modDES}; Null], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548704710239*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"58d69d61-3bce-4acf-b734-d5638b71f6b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "define", " ", "functions", " ", "and", " ", "variables", " ", "needed", 
      " ", "for", " ", "tests", " ", "below"}], "*)"}], "\[IndentingNewLine]",
     "\t", 
    RowBox[{
     RowBox[{"ee", "[", "model_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"retc", "[", 
          RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], 
       ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"ret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"bondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"nomeulereq", "[", 
        RowBox[{
         RowBox[{"nombondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"eeAll", "=", 
     RowBox[{"ee", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffWcAll", "=", 
     RowBox[{"coeffWc", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffPdAll", "=", 
     RowBox[{"coeffPd", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"coeffBondAll", "=", 
     RowBox[{"coeffBond", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    
    RowBox[{"coeffNomBondAll", "=", 
     RowBox[{"coeffNomBond", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899652151465197`*^9, 3.889965235350771*^9}, 
   3.8899652808817787`*^9, {3.889967731242805*^9, 3.8899677356636972`*^9}, {
   3.889967971867523*^9, 3.889967975146998*^9}, {3.889968339451161*^9, 
   3.88996834001075*^9}, 3.889968619774049*^9, {3.8899688826075077`*^9, 
   3.88996888992594*^9}, {3.88996899475625*^9, 3.8899690018858624`*^9}, {
   3.8899691256166267`*^9, 3.8899691257757883`*^9}, {3.889969207667478*^9, 
   3.8899692141700287`*^9}, {3.8899692798779783`*^9, 3.889969288274632*^9}, 
   3.889969387087708*^9, 3.889969585993528*^9, {3.8899702972149563`*^9, 
   3.889970314454108*^9}, {3.890603045806611*^9, 3.890603046578224*^9}, 
   3.890603139674321*^9, {3.890676572733183*^9, 3.890676585108572*^9}, {
   3.890679071059198*^9, 3.890679121055434*^9}, {3.89067917308251*^9, 
   3.890679177122958*^9}, 3.890679328121275*^9, {3.8906795122187853`*^9, 
   3.890679514391316*^9}, {3.890679606901452*^9, 3.8906796293121653`*^9}, {
   3.890679668768669*^9, 3.890679669902752*^9}, {3.8906797200186*^9, 
   3.890679786626452*^9}, {3.890679828108779*^9, 3.890679882954316*^9}, 
   3.890710569438944*^9, 3.8907106646373167`*^9, {3.8931046613250093`*^9, 
   3.893104665209495*^9}, 3.893175508527553*^9, 3.895391982460368*^9, {
   3.895422867494982*^9, 3.895422867812324*^9}, 3.895423123847262*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-XD2P9G\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-XD2P9G"],
  Editable->False]], "Print",
 CellChangeTimes->{3.90154870479427*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"2ff50437-47d2-47a8-9fe7-fbb09166bbba"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9015487047955027`*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"0956ff2f-f413-43a4-8d49-3c069ac85c5b"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\
\n\tComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`\
model_] := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = Null, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> Null, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.058, "AbsoluteTiming" -> 0.058, 
   "InputString" :> ToString[
     Unevaluated[
     Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]; 
      ComputationalEngine`CreateEulerEq`ee[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := {
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`retc[
          ComputationalEngine`CreateEulerEq`t + 1], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`ret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`j], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`bondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`nomeulereq[
          ComputationalEngine`CreateEulerEq`nombondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model]}; 
      ComputationalEngine`CreateEulerEq`eeAll = 
       Map[ComputationalEngine`CreateEulerEq`ee, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffWc[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffPd[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffNomBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffWcAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffWc, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffPdAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffPd, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffBond, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
         ComputationalEngine`CreateEulerEq`mods]; Null], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9015487048121157`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"8fa0b4ad-905d-4e78-8eec-482bf45293eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "uncondE", " ", "can", 
     " ", "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*eulereq\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, {3.890016004516365*^9, 3.890016008058874*^9}, {
   3.890679266281045*^9, 3.8906792665642843`*^9}, {3.89067933542416*^9, 
   3.890679337313949*^9}, {3.8907105841635733`*^9, 3.890710593701932*^9}, 
   3.893175541345852*^9, 3.895423124898571*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-13QTF7\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-13QTF7"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548704864751*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"08752e2a-b31b-4e17-b99c-98151e9cdff4"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548704880825*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"9ea1f85e-2949-4173-a953-3555614b2065"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "!SameQ[Names @ \"*eulereq\", {}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.029, "AbsoluteTiming" -> 0.029, 
   "InputString" :> ToString[
     Unevaluated[
      Not[Names["*eulereq"] === {}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548704891678*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"4a9c4379-5a7b-4fe1-ac01-0d4b6ac4120f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
      "variables"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "@", 
             RowBox[{"Keys", "@", 
              RowBox[{"CoefficientRules", "[", 
               RowBox[{"#", ",", 
                RowBox[{"DeleteDuplicates", "@", 
                 RowBox[{"Cases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                   SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                   "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
          "&"}], "/@", 
         RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
       "}"}]}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8954169241746273`*^9, 3.8954169480165787`*^9}, {
   3.8954169866199512`*^9, 3.895417001851879*^9}, {3.895422894723716*^9, 
   3.895422895427703*^9}, 3.895423128112627*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-0SCP5W\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-0SCP5W"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548705120863*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"2217c778-daa0-45b9-9529-b6b9b479368b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548705137368*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"1e371683-f410-4013-8e9b-97a5e58b17ac"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\
\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = False, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\
\t\t\tFunction[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\t\
Keys[\n\t\t\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\
\t\t\t\t\tDeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> False, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.20500000000000002`, 
   "AbsoluteTiming" -> 0.20500000000000002`, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modBY]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modNRC]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modDES]]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nEndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548705142476*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"0a60b5f8-55d3-464c-9f7e-62fdf314807f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
     "coefficients"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffWcAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffPdAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffNomBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895416997644126*^9, 3.895416998220045*^9}, {
   3.8954229991635427`*^9, 3.895422999628498*^9}, 3.8954231298267527`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-Q4Z5LO\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-Q4Z5LO"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9015487051977663`*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"1054bb19-1e99-469c-8739-1cb140be3622"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548705215433*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"88dec9dc-57c2-40c2-a69e-1f2b3db4f1dc"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\
\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.016, "AbsoluteTiming" -> 0.016, 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 1], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffWcAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 2], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffPdAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 3], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 4], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], InputForm]|>,
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548705218911*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"77fd54ff-117c-49bb-954d-33c33990a0a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
      "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state", 
      " ", "variables", " ", "plus", " ", "1", " ", 
      RowBox[{"(", 
       RowBox[{
       "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not", 
        " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
                
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Count", "[", 
             RowBox[{
              RowBox[{"Cases", "[", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                   "True"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
               "]"}], ",", "True"}], "]"}], "===", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{
               RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
              "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
       "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.893081708234816*^9, 3.8930817475700893`*^9}, {
   3.893082619951611*^9, 3.893082620668397*^9}, {3.8930826743611507`*^9, 
   3.893082674969939*^9}, {3.89308271889793*^9, 3.893082764899756*^9}, {
   3.893083300110649*^9, 3.8930833295765333`*^9}, {3.893083371906817*^9, 
   3.893083397811235*^9}, {3.8930835396615067`*^9, 3.8930836030394173`*^9}, {
   3.893104803562705*^9, 3.893104804045452*^9}, 3.893104872008975*^9, 
   3.893174857369234*^9, {3.8931756795157223`*^9, 3.8931757087748537`*^9}, {
   3.895392444526318*^9, 3.895392484243939*^9}, {3.8954169653591022`*^9, 
   3.8954169785255527`*^9}, {3.895417160985211*^9, 3.8954171613491287`*^9}, {
   3.895423034578776*^9, 3.895423035028845*^9}, 3.8954310734670973`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"ca14d8f1-7a77-428b-8c74-a7eb0de7af1a"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-JHMC1M\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-JHMC1M"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548739035277*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"e1a72497-f59a-4dbc-958b-a1ffd524e0ae"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548739040991*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"e5f542b0-e345-482f-879b-e8c8ced43cf1"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\
\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\
\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\
\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
Cases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 33.934, "AbsoluteTiming" -> 
   33.776, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[Count[
            Cases[
             First[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t], #]], 
             0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                BlankSequence[]] :> True], True] === Length[
             #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[Count[
            Cases[
             First[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`j], #]], 
             0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                BlankSequence[]] :> True], True] === Length[
             #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[Count[
            Cases[
             First[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #]], 
             0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                BlankSequence[]] :> True], True] === Length[
             #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[Count[
            Cases[
             First[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t, 
                ComputationalEngine`CreateEulerEq`m], #, True]], 
             0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                BlankSequence[]] :> True], True] === Length[
             #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
          ComputationalEngine`CreateEulerEq`mods]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\
\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\
\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548739061056*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"cf0da688-63a4-492d-87fd-6189ecd51e57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have",
      " ", "t"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
          "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
            "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893082237801841*^9, {3.893082288507763*^9, 3.893082397545843*^9}, {
   3.89308380447088*^9, 3.893083826885064*^9}, {3.893104792410515*^9, 
   3.893104792601891*^9}, 3.89310486870549*^9, 3.8931748513936157`*^9, 
   3.893175626999609*^9, 3.895392371633009*^9, 3.895417041759726*^9, 
   3.8954231371665907`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-JD404O\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-JD404O"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9015487558456507`*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"50c7077e-4fab-4c44-9dca-ce05d8681964"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.90154875585145*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"2391b5c0-f099-43d5-b3a2-e5f634abab13"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
Map[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-JD404O\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 16.773, "AbsoluteTiming" -> 
   16.688, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`j], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods], 
         Map[FreeQ[
           
           FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #, True], 
           ComputationalEngine`CreateEulerEq`t]& , 
          ComputationalEngine`CreateEulerEq`mods]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\
\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\
\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-JD404O\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9015487558691177`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"8755c036-8446-4dc9-888d-15da5e0c7415"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "equations", " ", "are", " ", "the", " ", "same", " ", "for", " ", "any", 
     " ", "time", " ", "period"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"retc", "[", 
              RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"ret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
          "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"bondret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], "]"}], 
           "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
            "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"findEulerEqConstants", "[", 
            RowBox[{
             RowBox[{"nombondret", "[", 
              RowBox[{
               RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", " ",
              "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895417057136814*^9, 3.89541709937171*^9}, 
   3.895423139040351*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-0UIR4J\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-0UIR4J"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548788212555*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"8e43417d-c38d-4ef6-a95e-da6759163266"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548788218419*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"e15d5a75-b36c-430b-a1a7-c7e8509cab68"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-0UIR4J\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 32.328, "AbsoluteTiming" -> 
   32.286, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
        Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t + 1], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`j], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`j], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`m], #]& , 
           ComputationalEngine`CreateEulerEq`mods], 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], #, True]& , 
           ComputationalEngine`CreateEulerEq`mods] === 
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t + 1, 
             ComputationalEngine`CreateEulerEq`m], #, True]& , 
           ComputationalEngine`CreateEulerEq`mods]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\
\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\
\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-JD404O\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-0UIR4J\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9015487882358828`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"3fa6ec9c-317c-46d9-a1ee-3ba5430cf1c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", 
     " ", "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
     "}"}], "===", 
    RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
     RowBox[{"Flatten", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", "mods"}],
             ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
                ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Context", "[", 
            RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"Rest", "@", 
                  RowBox[{"findEulerEqConstants", "[", 
                   RowBox[{
                    RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                   "]"}]}]}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
              "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
       "}"}]}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.8954171194635572`*^9, 3.8954231406478786`*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-PX7O15\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-PX7O15"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548804369748*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"2ecea28e-f332-41e7-8f08-e89fbb8261bd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.90154880439142*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"fa482a3c-1736-445d-af9f-627bb330c560"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-PX7O15\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 16.151, "AbsoluteTiming" -> 
   16.084, "InputString" :> ToString[
     Unevaluated[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
      DeleteDuplicates[
        Flatten[{
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]]], 
              Span[1, All], 0]& , ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]], 
          Map[Context[
            Evaluate[#]]& , 
           Flatten[
            Map[Part[
              Flatten[
               Rest[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]]], 
              Span[1, All], 0, 0]& , 
             ComputationalEngine`CreateEulerEq`mods]]]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\
\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\
\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-JD404O\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-0UIR4J\"\n]\n\n\nVerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-PX7O15\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.901548804403256*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"2570fc03-2841-4156-b829-5d624f4c9a47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
     "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
         "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"e0", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e1", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"ret", "[", 
            RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"bondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"nombondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e0p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Normal", "@", 
             RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
            RowBox[{"Thread", "[", 
             RowBox[{
              RowBox[{"e0", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->",
              "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e1p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
              "[", "_", "]"}], "->", "4"}], ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[",
               "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"e0", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
          RowBox[{
           RowBox[{"e1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
          RowBox[{
           RowBox[{"e2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
          RowBox[{
           RowBox[{"e3", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"BooleanQ", "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "@", 
         RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.895417134264539*^9, 3.8954174370542917`*^9, 
  3.89542314301904*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20230820-PF3P04\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20230820-PF3P04"],
  Editable->False]], "Print",
 CellChangeTimes->{3.901548805816531*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"185b09ae-4ef9-4d18-a351-46499e6e4b25"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.901548805823058*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"268eb09d-2f63-40c8-b3f3-8a39003e66ca"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-PF3P04\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.3820000000000001`, 
   "AbsoluteTiming" -> 1.367, "InputString" :> ToString[
     Unevaluated[ComputationalEngine`CreateEulerEq`checkBoolean[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := 
       Module[{ComputationalEngine`CreateEulerEq`e0, 
          ComputationalEngine`CreateEulerEq`e1, 
          ComputationalEngine`CreateEulerEq`e2, 
          ComputationalEngine`CreateEulerEq`e3, 
          ComputationalEngine`CreateEulerEq`e0p, 
          ComputationalEngine`CreateEulerEq`e1p, 
          ComputationalEngine`CreateEulerEq`e2p, 
          ComputationalEngine`CreateEulerEq`e3p}, 
         ComputationalEngine`CreateEulerEq`e0 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e1 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 1], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e2 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e3 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model, True]; 
         ComputationalEngine`CreateEulerEq`e0p = Flatten[{
             Normal[
              ComputationalEngine`CreateEulerEq`model["parameters"]], 
             Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4}]; 
         ComputationalEngine`CreateEulerEq`e1p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
               Blank[]] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
               Blank[]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e2p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e3p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; {
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e0, 1], 
            ComputationalEngine`CreateEulerEq`e0p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e1, 1], 
            ComputationalEngine`CreateEulerEq`e1p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e2, 1], 
            ComputationalEngine`CreateEulerEq`e2p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e3, 1], 
            ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
        Map[BooleanQ, 
         Flatten[
          ComputationalEngine`CreateEulerEq`checkBoolean[
          ComputationalEngine`CreateEulerEq`modBY]]]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\tGet @ Get @ \
FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-UJLDBE\"\n]\n\n\nVerificationTest[\n\tNeeds \
@ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t,\n\tNull\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-XD2P9G\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-13QTF7\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tFalse\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-0SCP5W\"\n]\n\n\
\nVerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\
\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-Q4Z5LO\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\
\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\tCases[\
\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\
],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t],\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\
Count[\n\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\
\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\
\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\
\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-JHMC1M\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-JD404O\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t],\n\t\t\t\tSameQ[\n\t\t\t\t\
\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
]\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-0UIR4J\"\n]\n\n\nVerificationTest[\n\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\
DeleteDuplicates[\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tFunction[\n\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
Flatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\
Part[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\
\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\t\t\
\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\
\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\
\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t]\n\
\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"CreateEulerEq_20230820-PX7O15\"\n]\n\n\n\
VerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20230820-PF3P04\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9015488058375187`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"3be76f2d-7e5b-4a96-817a-5024ea6bef0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.901548805868597*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"080d9bab-f253-4f16-a04d-4088084b2bfb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"add", " ", 
   RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
   RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890681841946844*^9, 3.890681899849094*^9}, {
  3.890682055663522*^9, 3.890682084827585*^9}, {3.890683635625399*^9, 
  3.890683720295089*^9}, {3.890685425949465*^9, 3.890685434516119*^9}, {
  3.890686231117095*^9, 3.890686238212121*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8906824011137114`*^9, 3.890682405708049*^9}, {
   3.890683066049664*^9, 3.8906830825042677`*^9}, {3.89068319056032*^9, 
   3.890683191547068*^9}, {3.89068338518532*^9, 3.890683430044886*^9}, {
   3.890683477495555*^9, 3.89068350860789*^9}, {3.890683563263863*^9, 
   3.890683572999384*^9}, {3.8906837588959513`*^9, 3.890683769652152*^9}, 
   3.890683975431652*^9, 3.890684184728485*^9, {3.890684538464937*^9, 
   3.890684546403357*^9}, 3.8906847013731937`*^9, 3.890684736359234*^9, {
   3.890684917937912*^9, 3.890684918964259*^9}, {3.890685003978653*^9, 
   3.8906850058353167`*^9}, {3.890685081266893*^9, 3.890685086440845*^9}, {
   3.890685162742771*^9, 3.890685164959052*^9}, {3.890685207547077*^9, 
   3.890685210133041*^9}, {3.890685379823967*^9, 3.890685396833392*^9}, {
   3.89068547363831*^9, 3.890685483195992*^9}, {3.8906856724322433`*^9, 
   3.890685672699678*^9}, {3.890685793209527*^9, 3.890685826416944*^9}, 
   3.8906858923977957`*^9, {3.890685924003189*^9, 3.890685959055036*^9}, {
   3.890686016304421*^9, 3.890686073140353*^9}, {3.890686249638393*^9, 
   3.8906862512145*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", 
     "\"\<Begin[\\\"ComputationalEngine`CreateEulerEq`\\\"]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.890684439578331*^9, {3.8906861781312037`*^9, 3.890686181646003*^9}, {
   3.890686261099564*^9, 3.8906862940387907`*^9}, {3.890710614230303*^9, 
   3.8907106202002974`*^9}, 3.8931046283317003`*^9, 3.893174923361951*^9, 
   3.895422783189183*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.901548805932522*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"804a1c55-ab82-4619-a292-ca8edb26cc50"],

Cell[BoxData["410"], "Output",
 CellChangeTimes->{3.901548805943481*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"f3c3adaf-a065-46b9-84aa-d7be992e0baf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.901548805958208*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"15ceb16e-fa1a-4ffb-9820-2906e0392e26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"fc1d992d-4049-45c4-8e03-501b9a0475c2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "81.7685389999999999999`7.0631012358934235", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: CreateEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     3649498793491948157 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9015488060273438`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "afeb492a-1490-41ae-9faf-4b0a90daa1dd", "TestID" -> 
         "CreateEulerEq_20230820-UJLDBE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "b0b0e568-c310-4c79-9d68-6e82a1851a40", "Input" -> HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`CreateEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`CreateEulerEq`modBY = 
            ComputationalEngine`CreateEulerEq`msp["BY"]; 
           ComputationalEngine`CreateEulerEq`modNRC = 
            ComputationalEngine`CreateEulerEq`msp["NRC"]; 
           ComputationalEngine`CreateEulerEq`modDES = 
            ComputationalEngine`CreateEulerEq`msp["DES"]; 
           ComputationalEngine`CreateEulerEq`mods = {
             ComputationalEngine`CreateEulerEq`modBY, 
              ComputationalEngine`CreateEulerEq`modNRC, 
              ComputationalEngine`CreateEulerEq`modDES}; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.154898`5.340560808137544, "CPUTimeUsed" -> 0.16061500000000706`, 
         "MemoryUsed" -> 11089536, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 6969215722831244956 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548806182796*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "aea83440-7a49-4dad-8625-a429c72ce2a6", "TestID" -> 
         "CreateEulerEq_20230820-XD2P9G", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "9bfaecb2-ce82-482c-a581-071129dd565b", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
"]; ComputationalEngine`CreateEulerEq`ee[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := {
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`nomeulereq[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model]}; 
           ComputationalEngine`CreateEulerEq`eeAll = 
            Map[ComputationalEngine`CreateEulerEq`ee, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffWc[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffPd[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffNomBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffWcAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffWc, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffPdAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffPd, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffBond, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
              ComputationalEngine`CreateEulerEq`mods]; Null], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[Null],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000173`2.388561100960789, "CPUTimeUsed" -> 0.000171000000008803, 
         "MemoryUsed" -> -14880, "ExpectedOutput" -> HoldForm[Null], 
         "Outcome" -> "Success"|>], 5338373382218127237 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9015488061832347`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2c0c2779-87fe-47f8-9151-16efa52a95cb", "TestID" -> 
         "CreateEulerEq_20230820-13QTF7", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "2691a12d-6464-479c-b47b-be8a08dc91c4", "Input" -> HoldForm[
           Not[Names["*eulereq"] === {}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.024207`4.534455968018202, "CPUTimeUsed" -> 
         0.02424699999998836, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 4876371338542595742 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548806207831*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b99793d6-2943-4fdd-a302-aa70d650869b", "TestID" -> 
         "CreateEulerEq_20230820-0SCP5W", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "1a09b850-b06b-4e82-a81d-b5e33a5a961e", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modBY]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modNRC]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modDES]]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[False], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.202054`5.455982450288128, "CPUTimeUsed" -> 0.20213599999999587`, 
         "MemoryUsed" -> 7664, "ExpectedOutput" -> HoldForm[False], "Outcome" -> 
         "Success"|>], 8910304391402629994 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548806410359*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "293e17fe-79dc-4364-b47a-e91a8c2feaae", "TestID" -> 
         "CreateEulerEq_20230820-Q4Z5LO", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "375d337d-4720-42f4-ac2b-b0a5a1fee501", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffWcAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffPdAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.015454`4.339555905741004, "CPUTimeUsed" -> 0.015450999999998771`, 
         "MemoryUsed" -> 21576, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3277747818854829997 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548806426252*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "0040093f-a4ec-42fc-9238-d02009894e26", "TestID" -> 
         "CreateEulerEq_20230820-JHMC1M", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "7daba720-1e98-4af8-9935-d456046aa06a", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[Count[
                 Cases[
                  First[
                   
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                  0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                  #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         15.755433`7.347945341040304, "CPUTimeUsed" -> 15.765370000000004`, 
         "MemoryUsed" -> 2327472, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 1034453787756344402 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548822182208*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "92f0906e-0ee8-4b10-a475-f62c111b548a", "TestID" -> 
         "CreateEulerEq_20230820-JD404O", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "9e2fc295-bfb3-498b-887c-95fcbc438e10", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods], 
              Map[FreeQ[
                
                FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True], 
                ComputationalEngine`CreateEulerEq`t]& , 
               ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         15.846517`7.350448818713512, "CPUTimeUsed" -> 15.922230000000013`, 
         "MemoryUsed" -> 570560, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 2056131499073109139 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548838029411*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "f3ae1867-83ce-4b19-b3a0-4e40319a6314", "TestID" -> 
         "CreateEulerEq_20230820-0UIR4J", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "b8f89326-543b-49cf-a87e-5bb5a6fa883d", "Input" -> HoldForm[
           Apply[And, 
            
            Flatten[{
             Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`j], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #]& , 
                ComputationalEngine`CreateEulerEq`mods], 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods] === 
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t + 1, 
                  ComputationalEngine`CreateEulerEq`m], #, True]& , 
                ComputationalEngine`CreateEulerEq`mods]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         32.575029`7.663399808848523, "CPUTimeUsed" -> 32.737437, 
         "MemoryUsed" -> 408576, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 4149493385216746358 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.901548870605014*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "854c1e7a-bee3-4a1a-9378-485567322b0c", "TestID" -> 
         "CreateEulerEq_20230820-PX7O15", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "5ab5ef80-722c-4028-9cce-7bd9b031e8de", "Input" -> 
         HoldForm[{"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
           DeleteDuplicates[
             Flatten[{
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                   Span[1, All], 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]], 
               Map[Context[
                 Evaluate[#]]& , 
                Flatten[
                 Map[Part[
                   Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                   Span[1, All], 0, 0]& , 
                  ComputationalEngine`CreateEulerEq`mods]]]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         16.261521`7.3616761621536115, "CPUTimeUsed" -> 16.340581999999984`, 
         "MemoryUsed" -> 233600, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 6870792565439788772 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90154888686717*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "58ee713b-f222-4ba6-b7b3-317bcd0d74f9", "TestID" -> 
         "CreateEulerEq_20230820-PF3P04", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "1427d64b-b78c-43ae-8876-048c080c04e7", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := 
            Module[{ComputationalEngine`CreateEulerEq`e0, 
               ComputationalEngine`CreateEulerEq`e1, 
               ComputationalEngine`CreateEulerEq`e2, 
               ComputationalEngine`CreateEulerEq`e3, 
               ComputationalEngine`CreateEulerEq`e0p, 
               ComputationalEngine`CreateEulerEq`e1p, 
               ComputationalEngine`CreateEulerEq`e2p, 
               ComputationalEngine`CreateEulerEq`e3p}, 
              ComputationalEngine`CreateEulerEq`e0 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e1 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 1], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e2 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e3 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model, True]; 
              ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                  Normal[
                   ComputationalEngine`CreateEulerEq`model["parameters"]], 
                  Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                  4}]; ComputationalEngine`CreateEulerEq`e1p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                    Blank[]] -> 4, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    Blank[]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e2p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                   
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e3p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                 ComputationalEngine`CreateEulerEq`e0p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                 ComputationalEngine`CreateEulerEq`e1p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                 ComputationalEngine`CreateEulerEq`e2p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                 ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
             Map[BooleanQ, 
              Flatten[
               ComputationalEngine`CreateEulerEq`checkBoolean[
               ComputationalEngine`CreateEulerEq`modBY]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.933253`6.12051439249929, "CPUTimeUsed" -> 0.9429409999999905, 
         "MemoryUsed" -> -714192, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {3649498793491948157, 6969215722831244956, 
     5338373382218127237, 4876371338542595742, 8910304391402629994, 
     3277747818854829997, 1034453787756344402, 2056131499073109139, 
     4149493385216746358, 6870792565439788772}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.901548887989668*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"853f7cb8-6852-46ee-b15e-539e9da4e495"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"d03dfeba-2718-41c7-9b3f-\
19ce5bed64e2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], 
      "}"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.895400995806225*^9, 3.8954009959498043`*^9}, {
   3.895401333682231*^9, 3.8954013437477283`*^9}, {3.895415511062855*^9, 
   3.895415512534185*^9}, 3.895416761698543*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ee", "[", "model_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"retc", "[", 
       RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"ret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"bondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"nomeulereq", "[", 
     RowBox[{
      RowBox[{"nombondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eeAll", "=", 
   RowBox[{"ee", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", "i", 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffWcAll", "=", 
   RowBox[{"coeffWc", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffPdAll", "=", 
   RowBox[{"coeffPd", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffBondAll", "=", 
   RowBox[{"coeffBond", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffNomBondAll", "=", 
   RowBox[{"coeffNomBond", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], 
  "**)"}]], "Input",
 CellChangeTimes->{{3.8953896985566893`*^9, 3.895389733299385*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
    "variables"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                  "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9015344326071587`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"706f0a88-1009-4e5e-ac69-6f4ac2a25cf5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
    "coefficients"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffWcAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffPdAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffNomBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9015344326234217`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"0be031c3-452f-4e9b-b984-6e779f478b25"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}]], "Input",
 CellChangeTimes->{3.895389747518649*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
    "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state", 
    " ", "variables", " ", "plus", " ", "1", " ", 
    RowBox[{"(", 
     RowBox[{
     "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not", 
      " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"ret", "[", 
                  RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"bondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"nombondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                 "True"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394734669942*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9015344667787943`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"788e8b71-26b9-40ce-9875-1bcc7a53eba5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have", 
    " ", "t"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394737802577*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9015344845019417`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"f95b8213-7dfe-4d47-a91b-169027c9fa1c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "constants", " ", "for", " ", "wc", " ", "ratio", " ", "are", " ", 
    "independent", " ", "of", " ", "time", " ", "period"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", 
             RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", " ", 
            "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.8953947409558907`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9015345179316597`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"966d3add-45cb-4519-8666-ce8d1266dff8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", " ",
     "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
   "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
    "}"}], "===", 
   RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", "mods"}], 
           ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                  "]"}]}]}], ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.901534535465733*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"ceaca685-34b8-4e5c-8c69-8c1c116ca8a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
    "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
        "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"e0", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e1", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"ret", "[", 
           RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e2", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"bondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"nombondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e0p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Normal", "@", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"e0", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->", 
            "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e1p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
             "[", "_", "]"}], "->", "4"}], ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[", 
             "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e2p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"e0", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
         RowBox[{
          RowBox[{"e1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
         RowBox[{
          RowBox[{"e2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
         RowBox[{
          RowBox[{"e3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"BooleanQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "@", 
        RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], 
     ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.901534536853282*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"8b59040b-c48d-4abb-9205-9cc9bcc9d9c1"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1331, 828},
WindowMargins->{{-1553, Automatic}, {7, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aa263687-a9be-4f29-a043-b4b72fa56207"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 215, 4, 37, "Input",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],
Cell[CellGroupData[{
Cell[640, 21, 1958, 37, 142, "Input",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],
Cell[2601, 60, 268, 3, 42, "Output",ExpressionUUID->"e5f51980-af68-41f0-b2e9-275a810eccc8"],
Cell[2872, 65, 247, 3, 42, "Output",ExpressionUUID->"d2e9cfe9-7d99-4d31-8d65-2eaf00386f93"],
Cell[3122, 70, 267, 4, 42, "Output",ExpressionUUID->"7d44a2ba-8eb1-43d1-a0c2-8c2a91ebabe7"],
Cell[3392, 76, 192, 2, 42, "Output",ExpressionUUID->"45abb243-f63c-4079-ba3f-e2718ec13067"],
Cell[3587, 80, 285, 5, 42, "Output",ExpressionUUID->"78c3c686-2325-46c8-ac82-94c97e82bd8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3909, 90, 255, 4, 67, "Subsection",ExpressionUUID->"2157750c-ae6d-47e9-b5dd-9c68ad40141b"],
Cell[4167, 96, 316, 7, 37, "Input",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],
Cell[CellGroupData[{
Cell[4508, 107, 601, 11, 64, "Input",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],
Cell[5112, 120, 218, 3, 42, "Output",ExpressionUUID->"298561ff-9dfd-458f-8576-795e0c4db25f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5367, 128, 423, 7, 37, "Input",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],
Cell[5793, 137, 189, 2, 42, "Output",ExpressionUUID->"cfc2da5e-df57-4fa7-b1c2-abf2d7b33e02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6019, 144, 1438, 33, 220, "Input",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],
Cell[CellGroupData[{
Cell[7482, 181, 379, 9, 29, "Print",ExpressionUUID->"db7b4d9a-8fd6-4d60-8a93-6c57607a7fc5"],
Cell[7864, 192, 270, 5, 29, "Print",ExpressionUUID->"c217689a-1cf5-4966-a0a2-f456d66c9cf8"]
}, Open  ]],
Cell[8149, 200, 7249, 135, 42, "Output",ExpressionUUID->"58d69d61-3bce-4acf-b734-d5638b71f6b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15435, 340, 5487, 127, 584, "Input",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],
Cell[CellGroupData[{
Cell[20947, 471, 378, 9, 29, "Print",ExpressionUUID->"2ff50437-47d2-47a8-9fe7-fbb09166bbba"],
Cell[21328, 482, 272, 5, 29, "Print",ExpressionUUID->"0956ff2f-f413-43a4-8d49-3c069ac85c5b"]
}, Open  ]],
Cell[21615, 490, 19193, 341, 42, "Output",ExpressionUUID->"8fa0b4ad-905d-4e78-8eec-482bf45293eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40845, 836, 990, 19, 116, "Input",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],
Cell[CellGroupData[{
Cell[41860, 859, 379, 9, 29, "Print",ExpressionUUID->"08752e2a-b31b-4e17-b99c-98151e9cdff4"],
Cell[42242, 870, 270, 5, 29, "Print",ExpressionUUID->"9ea1f85e-2949-4173-a953-3555614b2065"]
}, Open  ]],
Cell[42527, 878, 8920, 158, 42, "Output",ExpressionUUID->"4a9c4379-5a7b-4fe1-ac01-0d4b6ac4120f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51484, 1041, 3282, 80, 344, "Input",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],
Cell[CellGroupData[{
Cell[54791, 1125, 379, 9, 29, "Print",ExpressionUUID->"2217c778-daa0-45b9-9529-b6b9b479368b"],
Cell[55173, 1136, 270, 5, 29, "Print",ExpressionUUID->"1e371683-f410-4013-8e9b-97a5e58b17ac"]
}, Open  ]],
Cell[55458, 1144, 17535, 295, 42, "Output",ExpressionUUID->"0a60b5f8-55d3-464c-9f7e-62fdf314807f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73030, 1444, 3609, 93, 272, "Input",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],
Cell[CellGroupData[{
Cell[76664, 1541, 381, 9, 29, "Print",ExpressionUUID->"1054bb19-1e99-469c-8739-1cb140be3622"],
Cell[77048, 1552, 270, 5, 29, "Print",ExpressionUUID->"88dec9dc-57c2-40c2-a69e-1f2b3db4f1dc"]
}, Open  ]],
Cell[77333, 1560, 19009, 327, 42, "Output",ExpressionUUID->"77fd54ff-117c-49bb-954d-33c33990a0a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96379, 1892, 5257, 125, 376, "Input",ExpressionUUID->"ca14d8f1-7a77-428b-8c74-a7eb0de7af1a"],
Cell[CellGroupData[{
Cell[101661, 2021, 379, 9, 29, "Print",ExpressionUUID->"e1a72497-f59a-4dbc-958b-a1ffd524e0ae"],
Cell[102043, 2032, 270, 5, 29, "Print",ExpressionUUID->"e5f542b0-e345-482f-879b-e8c8ced43cf1"]
}, Open  ]],
Cell[102328, 2040, 23663, 387, 42, "Output",ExpressionUUID->"cf0da688-63a4-492d-87fd-6189ecd51e57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126028, 2432, 2296, 56, 246, "Input",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],
Cell[CellGroupData[{
Cell[128349, 2492, 381, 9, 29, "Print",ExpressionUUID->"50c7077e-4fab-4c44-9dca-ce05d8681964"],
Cell[128733, 2503, 269, 5, 29, "Print",ExpressionUUID->"2391b5c0-f099-43d5-b3a2-e5f634abab13"]
}, Open  ]],
Cell[129017, 2511, 21874, 366, 42, "Output",ExpressionUUID->"8755c036-8446-4dc9-888d-15da5e0c7415"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150928, 2882, 3246, 87, 272, "Input",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],
Cell[CellGroupData[{
Cell[154199, 2973, 379, 9, 29, "Print",ExpressionUUID->"8e43417d-c38d-4ef6-a95e-da6759163266"],
Cell[154581, 2984, 270, 5, 29, "Print",ExpressionUUID->"e15d5a75-b36c-430b-a1a7-c7e8509cab68"]
}, Open  ]],
Cell[154866, 2992, 26993, 441, 42, "Output",ExpressionUUID->"3fa6ec9c-317c-46d9-a1ee-3ba5430cf1c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181896, 3438, 4154, 105, 272, "Input",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],
Cell[CellGroupData[{
Cell[186075, 3547, 379, 9, 29, "Print",ExpressionUUID->"2ecea28e-f332-41e7-8f08-e89fbb8261bd"],
Cell[186457, 3558, 269, 5, 29, "Print",ExpressionUUID->"fa482a3c-1736-445d-af9f-627bb330c560"]
}, Open  ]],
Cell[186741, 3566, 29047, 478, 42, "Output",ExpressionUUID->"2570fc03-2841-4156-b829-5d624f4c9a47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215825, 4049, 4413, 112, 454, "Input",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],
Cell[CellGroupData[{
Cell[220263, 4165, 379, 9, 29, "Print",ExpressionUUID->"185b09ae-4ef9-4d18-a351-46499e6e4b25"],
Cell[220645, 4176, 270, 5, 29, "Print",ExpressionUUID->"268eb09d-2f63-40c8-b3f3-8a39003e66ca"]
}, Open  ]],
Cell[220930, 4184, 35365, 589, 42, "Output",ExpressionUUID->"3be76f2d-7e5b-4a96-817a-5024ea6bef0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256332, 4778, 195, 3, 37, "Input",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],
Cell[256530, 4783, 190, 2, 42, "Output",ExpressionUUID->"080d9bab-f253-4f16-a04d-4088084b2bfb"]
}, Open  ]],
Cell[256735, 4788, 356, 7, 37, "Input",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],
Cell[257094, 4797, 1502, 33, 402, "Input",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],
Cell[258599, 4832, 3288, 67, 558, "Input",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],
Cell[CellGroupData[{
Cell[261912, 4903, 1642, 39, 246, "Input",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],
Cell[263557, 4944, 397, 8, 69, "Output",ExpressionUUID->"804a1c55-ab82-4619-a292-ca8edb26cc50"],
Cell[263957, 4954, 151, 2, 42, "Output",ExpressionUUID->"f3c3adaf-a065-46b9-84aa-d7be992e0baf"],
Cell[264111, 4958, 397, 8, 69, "Output",ExpressionUUID->"15ceb16e-fa1a-4ffb-9820-2906e0392e26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264545, 4971, 177, 3, 37, "Input",ExpressionUUID->"fc1d992d-4049-45c4-8e03-501b9a0475c2"],
Cell[264725, 4976, 40147, 778, 76, "Output",ExpressionUUID->"853f7cb8-6852-46ee-b15e-539e9da4e495"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[304921, 5760, 214, 4, 46, "Subsection",ExpressionUUID->"d03dfeba-2718-41c7-9b3f-19ce5bed64e2"],
Cell[305138, 5766, 1084, 28, 168, "Input",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],
Cell[306225, 5796, 209, 4, 37, "Input",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],
Cell[306437, 5802, 1416, 36, 90, "Input",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],
Cell[307856, 5840, 2791, 75, 324, "Input",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],
Cell[310650, 5917, 277, 6, 37, "Input",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],
Cell[CellGroupData[{
Cell[310952, 5927, 3162, 76, 260, "Input",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],
Cell[314117, 6005, 154, 2, 42, "Output",ExpressionUUID->"706f0a88-1009-4e5e-ac69-6f4ac2a25cf5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314308, 6012, 3714, 94, 194, "Input",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],
Cell[318025, 6108, 154, 2, 42, "Output",ExpressionUUID->"0be031c3-452f-4e9b-b984-6e779f478b25"]
}, Open  ]],
Cell[318194, 6113, 223, 4, 37, "Input",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],
Cell[CellGroupData[{
Cell[318442, 6121, 4402, 111, 298, "Input",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],
Cell[322847, 6234, 154, 2, 42, "Output",ExpressionUUID->"788e8b71-26b9-40ce-9875-1bcc7a53eba5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323038, 6241, 2190, 53, 194, "Input",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],
Cell[325231, 6296, 154, 2, 42, "Output",ExpressionUUID->"f95b8213-7dfe-4d47-a91b-169027c9fa1c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[325422, 6303, 3371, 89, 220, "Input",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],
Cell[328796, 6394, 154, 2, 42, "Output",ExpressionUUID->"966d3add-45cb-4519-8666-ce8d1266dff8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[328987, 6401, 3858, 102, 220, "Input",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],
Cell[332848, 6505, 152, 2, 42, "Output",ExpressionUUID->"ceaca685-34b8-4e5c-8c69-8c1c116ca8a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333037, 6512, 4076, 107, 402, "Input",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],
Cell[337116, 6621, 152, 2, 42, "Output",ExpressionUUID->"8b59040b-c48d-4abb-9205-9cc9bcc9d9c1"]
}, Open  ]]
}, Open  ]]
}
]
*)

