(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    423911,       8186]
NotebookOptionsPosition[    367351,       7159]
NotebookOutlinePosition[    413715,       8014]
CellTagsIndexPosition[    413672,       8011]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
      "\"\<.wlt\>\""}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pacletDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"testFileName", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testContextBase", "=", 
  RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891244075958187*^9, 3.891244079885818*^9}, 
   3.891274440015959*^9, 3.891913898993636*^9, {3.893083620043439*^9, 
   3.893083620908062*^9}, 3.893336453091833*^9, 3.8933472708044786`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Output",
 CellChangeTimes->{
  3.90576784535126*^9, 3.905768828463294*^9, 3.905873411840774*^9, 
   3.9058742076927757`*^9, 3.905874383738501*^9, {3.905874469696918*^9, 
   3.90587449417271*^9}},
 CellLabel->"Out[1]=",ExpressionUUID->"17c5bef9-dd72-411d-a614-f924f259d158"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{
  3.90576784535126*^9, 3.905768828463294*^9, 3.905873411840774*^9, 
   3.9058742076927757`*^9, 3.905874383738501*^9, {3.905874469696918*^9, 
   3.905874494173583*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"e81a51ca-1ed5-408e-be92-a2c1e12ac1f2"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{
  3.90576784535126*^9, 3.905768828463294*^9, 3.905873411840774*^9, 
   3.9058742076927757`*^9, 3.905874383738501*^9, {3.905874469696918*^9, 
   3.9058744942346077`*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"321de8ea-b75f-46e8-97ce-643a016a43b1"],

Cell[BoxData["\<\"CreateEulerEq\"\>"], "Output",
 CellChangeTimes->{
  3.90576784535126*^9, 3.905768828463294*^9, 3.905873411840774*^9, 
   3.9058742076927757`*^9, 3.905874383738501*^9, {3.905874469696918*^9, 
   3.905874494235427*^9}},
 CellLabel->"Out[4]=",ExpressionUUID->"20217ff7-99c6-433a-b015-8c68be5d4fee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.90576784535126*^9, 3.905768828463294*^9, 3.905873411840774*^9, 
   3.9058742076927757`*^9, 3.905874383738501*^9, {3.905874469696918*^9, 
   3.905874494236047*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"88715669-8df5-496f-bc27-08734091b1e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"2157750c-ae6d-47e9-b5dd-\
9c68ad40141b"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
    RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
   RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
   "testContextBase", "<>", "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, 
   3.890710660724628*^9, 3.893104584960622*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.905767848978764*^9, 3.905873414319933*^9, 
  3.9058742109902277`*^9, 3.905874386690262*^9, 3.905874497656527*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"66b39b14-44a5-422f-a246-ddc5e8ed395d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.8907105705815163`*^9, {3.893104595723756*^9, 3.893104599289246*^9}, {
   3.89317491140371*^9, 3.893174915927305*^9}, {3.895422767076079*^9, 
   3.8954227717794027`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.905767848982203*^9, 3.905873414336997*^9, 
  3.90587421099317*^9, 3.905874386695736*^9, 3.905874497670136*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"4505fd21-036c-49df-b13e-70d8cc39c019"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"longTest", " ", "=", " ", "False"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"fast", " ", "and", " ", "partial", " ", "coverage", " ", 
      RowBox[{"(", "False", ")"}], " ", "or", " ", "slow", " ", "and", " ", 
      "full", " ", "coverage", " ", 
      RowBox[{"(", "True", ")"}]}], "*)"}], "\[IndentingNewLine]", "True"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9058729546338253`*^9, 3.9058729616258383`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"6c32551b-0987-4d3b-8da1-f0b17567452d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-JS9Q9P\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-JS9Q9P"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905873414636869*^9, 3.905874211307069*^9, 
  3.905874387001502*^9, 3.905874497954091*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"10b50030-dd88-4a6f-9104-95e631e4ac8d"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905873414636869*^9, 3.905874211307069*^9, 
  3.905874387001502*^9, 3.905874497989224*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f88fda29-84ba-464a-8307-466d803ade26"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tComputationalEngine`CreateEulerEq`longTest = False;\n\
\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[ComputationalEngine`CreateEulerEq`longTest = False; True], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905873414672578*^9, 3.905874211340304*^9, 
  3.905874387036933*^9, 3.905874498008749*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"2ffd9017-9358-49a1-9e58-9c44279e96c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"mods", "=", 
     RowBox[{"{", 
      RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";", 
    "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893175497420415*^9, 3.895391994582877*^9, 3.895392105630176*^9, {
   3.89539218281699*^9, 3.895392183152795*^9}, {3.895416814433571*^9, 
   3.8954168147165403`*^9}, 3.8954226795755463`*^9, 3.901548696187284*^9, {
   3.9057015386412563`*^9, 3.905701561509761*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-E61KRF\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-E61KRF"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767849498952*^9, 3.905873415834153*^9, 
  3.905874212500759*^9, 3.905874388171955*^9, 3.905874499160007*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"bd7b4f25-a568-4b82-a992-6963f48d11a2"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767849498952*^9, 3.905873415834153*^9, 
  3.905874212500759*^9, 3.905874388171955*^9, 3.905874499161428*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"5d54b180-0497-45b5-912b-f15151fcc226"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \
\"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tGet @ Get @ FileNameJoin @ \
{\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
ComputationalEngine`CreateEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\t\
ComputationalEngine`CreateEulerEq`modBY = \
ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.114, "AbsoluteTiming" -> 1.106, 
   "InputString" :> ToString[
     Unevaluated[Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      ComputationalEngine`CreateEulerEq`msp = 
       FernandoDuarte`LongRunRisk`Models; 
      ComputationalEngine`CreateEulerEq`modBY = 
       ComputationalEngine`CreateEulerEq`msp["BY"]; 
      ComputationalEngine`CreateEulerEq`modNRC = 
       ComputationalEngine`CreateEulerEq`msp["NRC"]; 
      ComputationalEngine`CreateEulerEq`modDES = 
       ComputationalEngine`CreateEulerEq`msp["DES"]; 
      ComputationalEngine`CreateEulerEq`mods = {
        ComputationalEngine`CreateEulerEq`modBY, 
         ComputationalEngine`CreateEulerEq`modNRC, 
         ComputationalEngine`CreateEulerEq`modDES}; True], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9057678495258007`*^9, 3.9058734158616867`*^9, 
  3.905874212528277*^9, 3.905874388199774*^9, 3.905874499188653*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"0a961e5d-e701-430c-87b3-d6fecbeba300"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "eulereq", "=", 
     "FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq"}],
     ";", "\[IndentingNewLine]", 
    RowBox[{
    "nomeulereq", "=", 
     "FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
nomeulereq"}], ";", "\[IndentingNewLine]", 
    RowBox[{
    "findEulerEqConstants", "=", 
     "FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "define", " ", "functions", " ", "and", " ", "variables", " ", "needed", 
      " ", "for", " ", "tests", " ", "below"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ee", "[", "model_", "]"}], ":=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"retc", "[", 
          RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], 
       ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"ret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"eulereq", "[", 
        RowBox[{
         RowBox[{"bondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}], ",", 
       RowBox[{"nomeulereq", "[", 
        RowBox[{
         RowBox[{"nombondret", "[", 
          RowBox[{
           RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", 
         "model"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"eeAll", "=", 
     RowBox[{"ee", "/@", "mods"}]}], ";", "\[IndentingNewLine]", "\t", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", 
        "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
          "]"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"coeffWcAll", "=", 
     RowBox[{"coeffWc", "/@", "mods"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"coeffPdAll", "=", 
     RowBox[{"coeffPd", "/@", "mods"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"coeffBondAll", "=", 
     RowBox[{"coeffBond", "/@", "mods"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"coeffNomBondAll", "=", 
     RowBox[{"coeffNomBond", "/@", "mods"}]}], ";", "\[IndentingNewLine]", 
    "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899652151465197`*^9, 3.889965235350771*^9}, 
   3.8899652808817787`*^9, {3.889967731242805*^9, 3.8899677356636972`*^9}, {
   3.889967971867523*^9, 3.889967975146998*^9}, {3.889968339451161*^9, 
   3.88996834001075*^9}, 3.889968619774049*^9, {3.8899688826075077`*^9, 
   3.88996888992594*^9}, {3.88996899475625*^9, 3.8899690018858624`*^9}, {
   3.8899691256166267`*^9, 3.8899691257757883`*^9}, {3.889969207667478*^9, 
   3.8899692141700287`*^9}, {3.8899692798779783`*^9, 3.889969288274632*^9}, 
   3.889969387087708*^9, 3.889969585993528*^9, {3.8899702972149563`*^9, 
   3.889970314454108*^9}, {3.890603045806611*^9, 3.890603046578224*^9}, 
   3.890603139674321*^9, {3.890676572733183*^9, 3.890676585108572*^9}, {
   3.890679071059198*^9, 3.890679121055434*^9}, {3.89067917308251*^9, 
   3.890679177122958*^9}, 3.890679328121275*^9, {3.8906795122187853`*^9, 
   3.890679514391316*^9}, {3.890679606901452*^9, 3.8906796293121653`*^9}, {
   3.890679668768669*^9, 3.890679669902752*^9}, {3.8906797200186*^9, 
   3.890679786626452*^9}, {3.890679828108779*^9, 3.890679882954316*^9}, 
   3.890710569438944*^9, 3.8907106646373167`*^9, {3.8931046613250093`*^9, 
   3.893104665209495*^9}, 3.893175508527553*^9, 3.895391982460368*^9, {
   3.895422867494982*^9, 3.895422867812324*^9}, 3.895423123847262*^9, {
   3.9057015719096813`*^9, 3.905701583048235*^9}, {3.905765915103426*^9, 
   3.905765927650209*^9}, {3.905767014730523*^9, 3.9057670272684317`*^9}, {
   3.9057671665940742`*^9, 3.905767222443017*^9}, {3.905767333703598*^9, 
   3.905767335770507*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-P3UDOV\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-P3UDOV"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767854221242*^9, 3.90587342096942*^9, 
  3.9058742176363277`*^9, 3.9058743933093157`*^9, 3.90587450434827*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"76898d73-dd22-4d21-bf34-8eacbf08622a"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767854221242*^9, 3.90587342096942*^9, 
  3.9058742176363277`*^9, 3.9058743933093157`*^9, 3.905874504349436*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"0db77bf6-57a0-466a-a4f5-08ec69f25189"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\
\n\tComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 5.066, "AbsoluteTiming" -> 4.98, 
   "InputString" :> ToString[
     Unevaluated[
     Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`"]; 
      ComputationalEngine`CreateEulerEq`eulereq = 
       FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq; 
      ComputationalEngine`CreateEulerEq`nomeulereq = 
       FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
nomeulereq; 
      ComputationalEngine`CreateEulerEq`findEulerEqConstants = 
       FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants; ComputationalEngine`CreateEulerEq`ee[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := {
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`retc[
          ComputationalEngine`CreateEulerEq`t + 1], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`ret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`j], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`eulereq[
          ComputationalEngine`CreateEulerEq`bondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model], 
         ComputationalEngine`CreateEulerEq`nomeulereq[
          ComputationalEngine`CreateEulerEq`nombondret[
          ComputationalEngine`CreateEulerEq`t + 1, 
           ComputationalEngine`CreateEulerEq`m], 
          ComputationalEngine`CreateEulerEq`t, 
          ComputationalEngine`CreateEulerEq`model]}; 
      ComputationalEngine`CreateEulerEq`eeAll = 
       Map[ComputationalEngine`CreateEulerEq`ee, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffWc[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffPd[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffNomBond[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := Table[
         FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
         ComputationalEngine`CreateEulerEq`i], {
         ComputationalEngine`CreateEulerEq`i, 
          Length[
           ComputationalEngine`CreateEulerEq`model["stateVars"][
           ComputationalEngine`CreateEulerEq`t]]}]; 
      ComputationalEngine`CreateEulerEq`coeffWcAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffWc, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffPdAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffPd, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffBond, 
         ComputationalEngine`CreateEulerEq`mods]; 
      ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
       Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
         ComputationalEngine`CreateEulerEq`mods]; True], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nEndTestSection[]\n"}, "\
\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9057678542397137`*^9, 3.905873420996311*^9, 
  3.9058742176703787`*^9, 3.90587439331738*^9, 3.905874504384582*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"9f0446ed-97c4-4858-96d9-00f894a30a2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "uncondE", " ", "can", 
     " ", "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*eulereq\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, {3.890016004516365*^9, 3.890016008058874*^9}, {
   3.890679266281045*^9, 3.8906792665642843`*^9}, {3.89067933542416*^9, 
   3.890679337313949*^9}, {3.8907105841635733`*^9, 3.890710593701932*^9}, 
   3.893175541345852*^9, 3.895423124898571*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-ZCEAB1\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-ZCEAB1"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767854354227*^9, 3.9058734212001038`*^9, 
  3.9058742178870707`*^9, 3.9058743935269012`*^9, 3.9058745045968847`*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"a8d564b9-0989-4abd-b699-99ed344db480"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767854354227*^9, 3.9058734212001038`*^9, 
  3.9058742178870707`*^9, 3.9058743935269012`*^9, 3.905874504598002*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"e02760dd-294f-4155-914d-42929c616fdf"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "!SameQ[Names @ \"*eulereq\", {}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t\
{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.022, "AbsoluteTiming" -> 0.022, 
   "InputString" :> ToString[
     Unevaluated[
      Not[Names["*eulereq"] === {}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767854371134*^9, 3.905873421207767*^9, 
  3.9058742178962097`*^9, 3.905874393535028*^9, 3.905874504606991*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"9d1f824d-74c7-426f-8394-909588acca6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
      "variables"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"(", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Max", "@", 
              RowBox[{"Keys", "@", 
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"DeleteDuplicates", "@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                    SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                    "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
           "&"}], "/@", 
          RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Max", "@", 
              RowBox[{"Keys", "@", 
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"DeleteDuplicates", "@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                    SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                    "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
           "&"}], "/@", 
          RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Max", "@", 
              RowBox[{"Keys", "@", 
               RowBox[{"CoefficientRules", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"DeleteDuplicates", "@", 
                  RowBox[{"Cases", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", 
                    "t", "]"}], ",", 
                    SuperscriptBox[
                    RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                    "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
           "&"}], "/@", 
          RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
        "}"}]}], "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8954169241746273`*^9, 3.8954169480165787`*^9}, {
   3.8954169866199512`*^9, 3.895417001851879*^9}, {3.895422894723716*^9, 
   3.895422895427703*^9}, 3.895423128112627*^9, {3.905701907455331*^9, 
   3.905701915013116*^9}, {3.905761849875432*^9, 3.9057618508697777`*^9}, {
   3.905765959422261*^9, 3.9057659733927813`*^9}, {3.905767248893244*^9, 
   3.905767249382162*^9}, {3.9057678100841084`*^9, 3.905767815811591*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-W710HJ\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-W710HJ"],
  Editable->False]], "Print",
 CellChangeTimes->{3.90576785914916*^9, 3.9058734262297573`*^9, 
  3.905874222949031*^9, 3.905874398559771*^9, 3.905874509634603*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"e60d8c3a-da90-4a98-a336-114b140cfd76"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.90576785914916*^9, 3.9058734262297573`*^9, 
  3.905874222949031*^9, 3.905874398559771*^9, 3.905874509635825*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"4ec0c8d3-cfc4-4372-8009-5ab3d549dfb7"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\
\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\
\t\t\tFunction[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\t\
Keys[\n\t\t\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\
\t\t\t\t\tDeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 5.0760000000000005`, 
   "AbsoluteTiming" -> 4.99, "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modBY]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modNRC]], 
         Map[Max[
            Keys[
             CoefficientRules[#, 
              DeleteDuplicates[
               Cases[
                ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                ComputationalEngine`CreateEulerEq`t], 
                Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^Optional[
                  Pattern[ComputationalEngine`CreateEulerEq`p, 
                   Blank[]]], Infinity]]]]] == 1& , 
          ComputationalEngine`CreateEulerEq`ee[
          ComputationalEngine`CreateEulerEq`modDES]]}]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767859168692*^9, 3.905873426272216*^9, 
  3.90587422298097*^9, 3.9058743985674477`*^9, 3.9058745096617813`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"158ce240-bba6-4421-8186-8f1d39153025"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
     "coefficients"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffWcAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffPdAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Not", "@", 
             RowBox[{"FreeQ", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"eeAll", "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
                RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
           RowBox[{"coeffNomBondAll", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", 
           RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895416997644126*^9, 3.895416998220045*^9}, {
   3.8954229991635427`*^9, 3.895422999628498*^9}, 3.8954231298267527`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-7O5MG6\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-7O5MG6"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767859227174*^9, 3.9058734263342752`*^9, 
  3.905874223047844*^9, 3.905874398644726*^9, 3.905874509735422*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"34a4a349-016b-479d-a319-fcc0d79a96c0"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767859227174*^9, 3.9058734263342752`*^9, 
  3.905874223047844*^9, 3.905874398644726*^9, 3.905874509736444*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"88c39717-98b7-4794-bf7c-229922461aef"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\
\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, 
       Flatten[{
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 1], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffWcAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 2], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffPdAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 3], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}], 
         Table[
          Map[Not[
            FreeQ[
             Part[
              Part[ComputationalEngine`CreateEulerEq`eeAll, 
               Span[1, All], 4], ComputationalEngine`CreateEulerEq`n], #]]& , 
           
           Part[
           ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
            ComputationalEngine`CreateEulerEq`n]], {
          ComputationalEngine`CreateEulerEq`n, 1, 
           Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], InputForm]|>,
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767859248068*^9, 3.9058734263662863`*^9, 
  3.9058742230657463`*^9, 3.9058743986588287`*^9, 3.9058745097429733`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"605eec88-1eb1-485f-bd05-c244ccfc5a9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{"longTest", ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
        "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state",
         " ", "variables", " ", "plus", " ", "1", " ", 
        RowBox[{"(", 
         RowBox[{
         "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not",
           " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"Flatten", "@", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"First", "@", 
                   RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
                 "]"}], ",", "True"}], "]"}], "===", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                 "]"}], "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"First", "@", 
                   RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
                  
                  RowBox[{
                   RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
                 "]"}], ",", "True"}], "]"}], "===", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                 "]"}], "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"First", "@", 
                   RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
                  
                  RowBox[{
                   RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
                 "]"}], ",", "True"}], "]"}], "===", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                 "]"}], "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Count", "[", 
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{
                  RowBox[{"First", "@", 
                   RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                    "True"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], 
                 "]"}], ",", "True"}], "]"}], "===", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{
                 RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                 "]"}], "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.893081708234816*^9, 3.8930817475700893`*^9}, {
   3.893082619951611*^9, 3.893082620668397*^9}, {3.8930826743611507`*^9, 
   3.893082674969939*^9}, {3.89308271889793*^9, 3.893082764899756*^9}, {
   3.893083300110649*^9, 3.8930833295765333`*^9}, {3.893083371906817*^9, 
   3.893083397811235*^9}, {3.8930835396615067`*^9, 3.8930836030394173`*^9}, {
   3.893104803562705*^9, 3.893104804045452*^9}, 3.893104872008975*^9, 
   3.893174857369234*^9, {3.8931756795157223`*^9, 3.8931757087748537`*^9}, {
   3.895392444526318*^9, 3.895392484243939*^9}, {3.8954169653591022`*^9, 
   3.8954169785255527`*^9}, {3.895417160985211*^9, 3.8954171613491287`*^9}, {
   3.895423034578776*^9, 3.895423035028845*^9}, 3.8954310734670973`*^9, {
   3.9058734456841927`*^9, 3.905873456124489*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"ca14d8f1-7a77-428b-8c74-a7eb0de7af1a"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-PUV4QV\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-PUV4QV"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767892690411*^9, 3.905873462247383*^9, 
  3.9058742231202297`*^9, 3.905874398702979*^9, 3.905874509788291*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"74841cb1-d59f-42b9-890f-0464826f4575"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767892690411*^9, 3.905873462247383*^9, 
  3.9058742231202297`*^9, 3.905874398702979*^9, 3.905874509805118*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"c99a3adf-a250-44dc-9054-7c0b60f6c0ae"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
SameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\
First @ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      If[ComputationalEngine`CreateEulerEq`longTest, 
       Apply[And, 
        Flatten[{
          Map[Count[
             Cases[
              First[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                ComputationalEngine`CreateEulerEq`retc[
                ComputationalEngine`CreateEulerEq`t], #]], 
              0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                 BlankSequence[]] :> True], True] === Length[
              #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[Count[
             Cases[
              First[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                ComputationalEngine`CreateEulerEq`ret[
                ComputationalEngine`CreateEulerEq`t, 
                 ComputationalEngine`CreateEulerEq`j], #]], 
              0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                 BlankSequence[]] :> True], True] === Length[
              #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[Count[
             Cases[
              First[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                ComputationalEngine`CreateEulerEq`bondret[
                ComputationalEngine`CreateEulerEq`t, 
                 ComputationalEngine`CreateEulerEq`m], #]], 
              0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                 BlankSequence[]] :> True], True] === Length[
              #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[Count[
             Cases[
              First[
               
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                ComputationalEngine`CreateEulerEq`nombondret[
                ComputationalEngine`CreateEulerEq`t, 
                 ComputationalEngine`CreateEulerEq`m], #, True]], 
              0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                 BlankSequence[]] :> True], True] === Length[
              #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& , 
           ComputationalEngine`CreateEulerEq`mods]}]], True]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; 
        Print["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9057678927108603`*^9, 3.9058734622856207`*^9, 
  3.905874223139288*^9, 3.905874398727872*^9, 3.9058745098143682`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"00783aed-5f48-4dbf-972f-da86a874672c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have",
      " ", "t"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"longTest", ",", "\[IndentingNewLine]", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}],
             "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"ret", "[", 
                RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}],
             "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"bondret", "[", 
                RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}],
             "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"nombondret", "[", 
                RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
              "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
        "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893082237801841*^9, {3.893082288507763*^9, 3.893082397545843*^9}, {
   3.89308380447088*^9, 3.893083826885064*^9}, {3.893104792410515*^9, 
   3.893104792601891*^9}, 3.89310486870549*^9, 3.8931748513936157`*^9, 
   3.893175626999609*^9, 3.895392371633009*^9, 3.895417041759726*^9, 
   3.8954231371665907`*^9, {3.905874340709735*^9, 3.905874367344043*^9}, {
   3.90587446297968*^9, 3.905874465384511*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-QFPCG1\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-QFPCG1"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905767909296452*^9, 3.9058734805727043`*^9, 
  3.905874258855748*^9, 3.905874373502936*^9, 3.905874414823657*^9, 
  3.9058745098530283`*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"694685cf-1012-4797-9cc7-41114f6f9fc5"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905767909296452*^9, 3.9058734805727043`*^9, 
  3.905874258855748*^9, 3.905874373502936*^9, 3.905874414823657*^9, 
  3.905874509861123*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"3da10ece-9ed8-4c78-95c0-aadece4c6609"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-QFPCG1\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      If[ComputationalEngine`CreateEulerEq`longTest, 
       Apply[And, 
        Flatten[{
          Map[FreeQ[
            
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`retc[
             ComputationalEngine`CreateEulerEq`t], #], 
            ComputationalEngine`CreateEulerEq`t]& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[FreeQ[
            
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`ret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`j], #], 
            ComputationalEngine`CreateEulerEq`t]& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[FreeQ[
            
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`bondret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`m], #], 
            ComputationalEngine`CreateEulerEq`t]& , 
           ComputationalEngine`CreateEulerEq`mods], 
          Map[FreeQ[
            
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`nombondret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`m], #, True], 
            ComputationalEngine`CreateEulerEq`t]& , 
           ComputationalEngine`CreateEulerEq`mods]}]], True]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-QFPCG1\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767909318516*^9, 3.905873480606512*^9, 
  3.905874258883792*^9, 3.905874373528306*^9, 3.905874414855019*^9, 
  3.905874509873073*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"468bc1c8-5b7d-4549-8aec-bd986d0eb580"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"longTest", ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "equations", " ", "are", " ", "the", " ", "same", " ", "for", " ", 
       "any", " ", "time", " ", "period"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"And", "@@", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@",
             "mods"}], ")"}], "===", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"retc", "[", 
                RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@",
             "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"ret", "[", 
                RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@",
             "mods"}], ")"}], "===", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"ret", "[", 
                RowBox[{
                 RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], 
              "]"}], "&"}], "/@", "mods"}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"bondret", "[", 
                RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@",
             "mods"}], ")"}], "===", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"bondret", "[", 
                RowBox[{
                 RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], 
              "]"}], "&"}], "/@", "mods"}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"nombondret", "[", 
                RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
              "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"findEulerEqConstants", "[", 
              RowBox[{
               RowBox[{"nombondret", "[", 
                RowBox[{
                 RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", 
               " ", "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
        "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.895417057136814*^9, 3.89541709937171*^9}, 
   3.895423139040351*^9, {3.9058734915327673`*^9, 3.905873499443643*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-8B03L0\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-8B03L0"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9057679409192133`*^9, 3.905873516003091*^9, 
  3.905874258991742*^9, 3.905874414972756*^9, 3.905874509915539*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"24733442-035b-4065-b828-1b5a7e544485"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9057679409192133`*^9, 3.905873516003091*^9, 
  3.905874258991742*^9, 3.905874414972756*^9, 3.905874509921871*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"5f32ea78-2f78-4869-9932-c324575ea7fc"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\tFunction[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t]\n\t\t],\n\t\tTrue\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\tFunction[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t]\n\t\t],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-8B03L0\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      If[ComputationalEngine`CreateEulerEq`longTest, 
       Apply[And, 
        Flatten[{
         Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`retc[
             ComputationalEngine`CreateEulerEq`t], #]& , 
            ComputationalEngine`CreateEulerEq`mods] === 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`retc[
             ComputationalEngine`CreateEulerEq`t + 1], #]& , 
            ComputationalEngine`CreateEulerEq`mods], 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`ret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`j], #]& , 
            ComputationalEngine`CreateEulerEq`mods] === 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`ret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`j], #]& , 
            ComputationalEngine`CreateEulerEq`mods], 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`bondret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`m], #]& , 
            ComputationalEngine`CreateEulerEq`mods] === 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`bondret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`m], #]& , 
            ComputationalEngine`CreateEulerEq`mods], 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`nombondret[
             ComputationalEngine`CreateEulerEq`t, 
              ComputationalEngine`CreateEulerEq`m], #, True]& , 
            ComputationalEngine`CreateEulerEq`mods] === 
          Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
             ComputationalEngine`CreateEulerEq`nombondret[
             ComputationalEngine`CreateEulerEq`t + 1, 
              ComputationalEngine`CreateEulerEq`m], #, True]& , 
            ComputationalEngine`CreateEulerEq`mods]}]], True]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-QFPCG1\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\tFunction[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t]\n\t\t],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-8B03L0\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9057679409394493`*^9, 3.9058735160495367`*^9, 
  3.905874259014557*^9, 3.905874414996385*^9, 3.905874509935687*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"31cd1638-a5e6-44fa-9160-2f44d4ac56c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{"longTest", ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", 
       " ", "context", " ", 
       "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
       "}"}], "===", 
      RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Context", "[", 
              RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"Rest", "@", 
                    RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
                  ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
               "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Context", "[", 
              RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"Rest", "@", 
                    RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
                  ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
                "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Context", "[", 
              RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"Rest", "@", 
                    RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
                  ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
                "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Context", "[", 
              RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Flatten", "@", 
                   RowBox[{"Rest", "@", 
                    RowBox[{"findEulerEqConstants", "[", 
                    RowBox[{
                    RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                    "]"}]}]}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@",
                "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
         "}"}]}]}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
     "True"}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.8954171194635572`*^9, 3.8954231406478786`*^9, {3.905873359877748*^9, 
   3.9058733670140142`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-A7HZBV\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-A7HZBV"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9057679568848543`*^9, 3.9058735161150208`*^9, 
  3.9058742590745792`*^9, 3.905874415057501*^9, 3.9058745099841127`*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"ad815a39-1f1a-4426-9f88-fa5686355e8a"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9057679568848543`*^9, 3.9058735161150208`*^9, 
  3.9058742590745792`*^9, 3.905874415057501*^9, 3.905874510000705*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"12fe3408-eff2-4bf3-870b-1ce66a05e015"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "If[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\t\
DeleteDuplicates[\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\
\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\
\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ \
Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\t\
DeleteDuplicates[\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\
\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\
\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ \
Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-A7HZBV\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      If[ComputationalEngine`CreateEulerEq`longTest, {
        "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
       DeleteDuplicates[
         Flatten[{
           Map[Context[
             Evaluate[#]]& , 
            Flatten[
             Map[Part[
               Flatten[
                Rest[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t], #]]], 
               Span[1, All], 0]& , ComputationalEngine`CreateEulerEq`mods]]], 
           
           Map[Context[
             Evaluate[#]]& , 
            Flatten[
             Map[Part[
               Flatten[
                Rest[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`j], #]]], 
               Span[1, All], 0, 0]& , 
              ComputationalEngine`CreateEulerEq`mods]]], 
           Map[Context[
             Evaluate[#]]& , 
            Flatten[
             Map[Part[
               Flatten[
                Rest[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #]]], 
               Span[1, All], 0, 0]& , 
              ComputationalEngine`CreateEulerEq`mods]]], 
           Map[Context[
             Evaluate[#]]& , 
            Flatten[
             Map[Part[
               Flatten[
                Rest[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #, True]]], 
               Span[1, All], 0, 0]& , 
              ComputationalEngine`CreateEulerEq`mods]]]}]], True]], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-QFPCG1\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\tFunction[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t]\n\t\t],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-8B03L0\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\t\
DeleteDuplicates[\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\
\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\
\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ \
Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-A7HZBV\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767956905634*^9, 3.905873516138723*^9, 
  3.905874259096384*^9, 3.90587441508119*^9, 3.905874510006041*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"943ab4b1-40ec-44e0-86ea-b62a1a7eb42e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
     "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
         "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"e0", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e1", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"ret", "[", 
            RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"bondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3", "=", 
         RowBox[{"findEulerEqConstants", "[", 
          RowBox[{
           RowBox[{"nombondret", "[", 
            RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e0p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Normal", "@", 
             RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
            RowBox[{"Thread", "[", 
             RowBox[{
              RowBox[{"e0", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->",
              "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"e1p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
              "[", "_", "]"}], "->", "4"}], ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[",
               "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e2p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"e3p", "=", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{"e0p", ",", 
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
              "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"e0", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
          RowBox[{
           RowBox[{"e1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
          RowBox[{
           RowBox[{"e2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
          RowBox[{
           RowBox[{"e3", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{"BooleanQ", "/@", 
       RowBox[{"(", 
        RowBox[{"Flatten", "@", 
         RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.895417134264539*^9, 3.8954174370542917`*^9, 
  3.89542314301904*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"CreateEulerEq_20231009-DUWLJS\"\>"}],
  SequenceForm["Adding test: ", "CreateEulerEq_20231009-DUWLJS"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9057679583035183`*^9, 3.9058735176330557`*^9, 
  3.905874260672349*^9, 3.9058744171022053`*^9, 3.905874512038456*^9},
 CellLabel->
  "During evaluation of \
In[20]:=",ExpressionUUID->"562aa01f-cf45-4272-b744-454e8e69adf7"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9057679583035183`*^9, 3.9058735176330557`*^9, 
  3.905874260672349*^9, 3.9058744171022053`*^9, 3.9058745120398197`*^9},
 CellLabel->
  "During evaluation of \
In[20]:=",ExpressionUUID->"d26e4c9a-bcba-42f5-b329-6625a8a08679"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-DUWLJS\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.997, "AbsoluteTiming" -> 1.971, 
   "InputString" :> ToString[
     Unevaluated[ComputationalEngine`CreateEulerEq`checkBoolean[
         Pattern[ComputationalEngine`CreateEulerEq`model, 
          Blank[]]] := 
       Module[{ComputationalEngine`CreateEulerEq`e0, 
          ComputationalEngine`CreateEulerEq`e1, 
          ComputationalEngine`CreateEulerEq`e2, 
          ComputationalEngine`CreateEulerEq`e3, 
          ComputationalEngine`CreateEulerEq`e0p, 
          ComputationalEngine`CreateEulerEq`e1p, 
          ComputationalEngine`CreateEulerEq`e2p, 
          ComputationalEngine`CreateEulerEq`e3p}, 
         ComputationalEngine`CreateEulerEq`e0 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`retc[
            ComputationalEngine`CreateEulerEq`t], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e1 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`ret[
            ComputationalEngine`CreateEulerEq`t, 1], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e2 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`bondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model]; 
         ComputationalEngine`CreateEulerEq`e3 = 
          FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
            ComputationalEngine`CreateEulerEq`nombondret[
            ComputationalEngine`CreateEulerEq`t, 
             ComputationalEngine`CreateEulerEq`m], 
            ComputationalEngine`CreateEulerEq`model, True]; 
         ComputationalEngine`CreateEulerEq`e0p = Flatten[{
             Normal[
              ComputationalEngine`CreateEulerEq`model["parameters"]], 
             Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4}]; 
         ComputationalEngine`CreateEulerEq`e1p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
               Blank[]] -> 4, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
               Blank[]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e2p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; 
         ComputationalEngine`CreateEulerEq`e3p = 
          Flatten[{
            ComputationalEngine`CreateEulerEq`e0p, 
             FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
               Pattern[ComputationalEngine`CreateEulerEq`m, 
                Blank[]]] -> 4}]; {
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e0, 1], 
            ComputationalEngine`CreateEulerEq`e0p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e1, 1], 
            ComputationalEngine`CreateEulerEq`e1p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e2, 1], 
            ComputationalEngine`CreateEulerEq`e2p], 
           ReplaceAll[
            Part[ComputationalEngine`CreateEulerEq`e3, 1], 
            ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
        Map[BooleanQ, 
         Flatten[
          ComputationalEngine`CreateEulerEq`checkBoolean[
          ComputationalEngine`CreateEulerEq`modBY]]]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"CreateEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-JS9Q9P\"\n]\n\n\n\
VerificationTest[\n\tGet @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\
\", \"Models.wl\"};\n\tComputationalEngine`CreateEulerEq`msp = \
FernandoDuarte`LongRunRisk`Models;\n\tComputationalEngine`CreateEulerEq`modBY \
= ComputationalEngine`CreateEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`CreateEulerEq`modNRC = \
ComputationalEngine`CreateEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`CreateEulerEq`modDES = \
ComputationalEngine`CreateEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`CreateEulerEq`mods = \
{ComputationalEngine`CreateEulerEq`modBY, \
ComputationalEngine`CreateEulerEq`modNRC, \
ComputationalEngine`CreateEulerEq`modDES};\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t\
,\n\tTestID->\"CreateEulerEq_20231009-E61KRF\"\n]\n\n\nVerificationTest[\n\t\
Needs @ \"FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\";\n\t\
ComputationalEngine`CreateEulerEq`eulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`eulereq;\n\t\
ComputationalEngine`CreateEulerEq`nomeulereq = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`nomeulereq;\n\t\
ComputationalEngine`CreateEulerEq`findEulerEqConstants = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants;\n\t\
ComputationalEngine`CreateEulerEq`ee[ComputationalEngine`CreateEulerEq`model_]\
 := {\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
retc[ComputationalEngine`CreateEulerEq`t + 1], \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
ret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`eulereq[ComputationalEngine`CreateEulerEq`\
bondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model],\n\t\t\
ComputationalEngine`CreateEulerEq`nomeulereq[ComputationalEngine`\
CreateEulerEq`nombondret[ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model]\n\t};\n\t\
ComputationalEngine`CreateEulerEq`eeAll = \
Map[ComputationalEngine`CreateEulerEq`ee, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffWc[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffPd[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffBond[ComputationalEngine`CreateEulerEq`\
model_] := Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb \
@ ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBond[ComputationalEngine`\
CreateEulerEq`model_] := \
Table[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ \
ComputationalEngine`CreateEulerEq`i, {ComputationalEngine`CreateEulerEq`i, \
Length @ ComputationalEngine`CreateEulerEq`model[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t]}];\n\t\
ComputationalEngine`CreateEulerEq`coeffWcAll = \
Map[ComputationalEngine`CreateEulerEq`coeffWc, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffPdAll = \
Map[ComputationalEngine`CreateEulerEq`coeffPd, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffBond, \
ComputationalEngine`CreateEulerEq`mods];\n\t\
ComputationalEngine`CreateEulerEq`coeffNomBondAll = \
Map[ComputationalEngine`CreateEulerEq`coeffNomBond, \
ComputationalEngine`CreateEulerEq`mods];\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\
\n\tTestID->\"CreateEulerEq_20231009-P3UDOV\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*eulereq\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-ZCEAB1\"\n]\n\n\nVerificationTest[\n\t\
Apply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\
\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\t\t\t\t\t\t\t\
CoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\t\
Cases[ComputationalEngine`CreateEulerEq`modBY[\"stateVars\"][\
ComputationalEngine`CreateEulerEq`t], \
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_], Infinity]\n\t\t\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
1\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modBY\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modNRC[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modNRC\n\t\t\t\t],\n\t\t\t\tMap[\n\t\t\t\t\t\
Function[\n\t\t\t\t\t\tEqual[\n\t\t\t\t\t\t\tMax[\n\t\t\t\t\t\t\t\tKeys[\n\t\t\
\t\t\t\t\t\t\tCoefficientRules[\n\t\t\t\t\t\t\t\t\t\t#,\n\t\t\t\t\t\t\t\t\t\t\
DeleteDuplicates[\n\t\t\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`modDES[\"stateVars\"][ComputationalEngine`\
CreateEulerEq`t],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Blank[Symbol][ComputationalEngine`CreateEulerEq`t] ^ \
Optional[ComputationalEngine`CreateEulerEq`p_],\n\t\t\t\t\t\t\t\t\t\t\t\t\
Infinity\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\
\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t]\n\t\t\t\
\t\t],\n\t\t\t\t\tComputationalEngine`CreateEulerEq`ee @ \
ComputationalEngine`CreateEulerEq`modDES\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\
\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-W710HJ\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\tFlatten[\n\t\t\t{\n\t\t\t\tTable[\n\t\t\t\
\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 1]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffWcAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 2]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffPdAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 3]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffBondAll[[ComputationalEngine`\
CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t],\n\t\t\t\tTable[\n\t\t\t\t\
\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tNot[\n\t\t\t\t\t\t\t\t\
FreeQ[Part[ComputationalEngine`CreateEulerEq`eeAll[[1;;, 4]], \
ComputationalEngine`CreateEulerEq`n], #]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\
\t\t\t\t\tComputationalEngine`CreateEulerEq`coeffNomBondAll[[\
ComputationalEngine`CreateEulerEq`n]]\n\t\t\t\t\t],\n\t\t\t\t\t\
{ComputationalEngine`CreateEulerEq`n, 1, Length @ \
ComputationalEngine`CreateEulerEq`mods}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t]\n\t,\n\
\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"CreateEulerEq_20231009-7O5MG6\"\n]\n\n\n\
VerificationTest[\n\tIf[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
Apply[And,\n\t\t\tFlatten[\n\t\t\t\t{\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\
\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #],\n\t\t\t\t\t\t\t\t\t\tEqual[0, \
ComputationalEngine`CreateEulerEq`x__] :> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\
Length[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\
\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] :> \
True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + 1\n\
\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction[\n\t\t\t\t\t\t\tSameQ[\n\t\t\t\t\t\t\t\tCount[\n\t\t\t\t\t\t\t\t\
\tCases[\n\t\t\t\t\t\t\t\t\t\tFirst @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\tEqual[0, ComputationalEngine`CreateEulerEq`x__] \
:> True\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t\t\t],\n\t\
\t\t\t\t\t\t\tLength[#[\"stateVars\"][ComputationalEngine`CreateEulerEq`t]] + \
1\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-PUV4QV\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\tMap[Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], \
ComputationalEngine`CreateEulerEq`t], \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\tMap[\n\t\t\t\t\t\t\
Function @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t],\n\t\t\t\t\tMap[\n\t\t\t\t\
\t\tFunction @ \
FreeQ[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True], ComputationalEngine`CreateEulerEq`t],\n\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-QFPCG1\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\tApply[And,\n\t\t\t\
Flatten[\n\t\t\t\t{\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t], #]&, \
ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc[\
ComputationalEngine`CreateEulerEq`t + 1], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`j], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\t\
SameQ[Map[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\t\
Map[Function[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #]], \
ComputationalEngine`CreateEulerEq`mods]\n\t\t\t\t\t],\n\t\t\t\t\tSameQ[\n\t\t\
\t\t\t\tMap[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True]&, ComputationalEngine`CreateEulerEq`mods],\n\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\tFunction[FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t + 1, \
ComputationalEngine`CreateEulerEq`m], #, True]],\n\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t]\n\t\t],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-8B03L0\"\n]\n\n\nVerificationTest[\n\t\
If[ComputationalEngine`CreateEulerEq`longTest,\n\t\t\
SameQ[{\"FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\"},\n\t\t\t\
DeleteDuplicates[\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\tMap[Function @ \
Context @ Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\
\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, #], 1;;, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\
\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\
\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\
\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\
\t\t\t\t\t\t\t\t\t\tPart[Flatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`j], \
#], 1;;, 0, 0]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\
\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ Evaluate @ #,\n\t\t\t\t\t\t\
\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
#],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\
\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMap[Function @ Context @ \
Evaluate @ #,\n\t\t\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
\tFunction[\n\t\t\t\t\t\t\t\t\t\tPart[\n\t\t\t\t\t\t\t\t\t\t\tFlatten @ Rest \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], #, \
True],\n\t\t\t\t\t\t\t\t\t\t\t1;;, 0, 0\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\
\t\t],\n\t\t\t\t\t\t\t\t\tComputationalEngine`CreateEulerEq`mods\n\t\t\t\t\t\t\
\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t\
],\n\t\tTrue\n\t]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-A7HZBV\"\n]\n\n\nVerificationTest[\n\t\
ComputationalEngine`CreateEulerEq`checkBoolean[ComputationalEngine`\
CreateEulerEq`model_] := Module[\n\t\t{ComputationalEngine`CreateEulerEq`e0, \
ComputationalEngine`CreateEulerEq`e1, ComputationalEngine`CreateEulerEq`e2, \
ComputationalEngine`CreateEulerEq`e3, ComputationalEngine`CreateEulerEq`e0p, \
ComputationalEngine`CreateEulerEq`e1p, ComputationalEngine`CreateEulerEq`e2p, \
ComputationalEngine`CreateEulerEq`e3p},\n\t\t\
ComputationalEngine`CreateEulerEq`e0 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`retc @ \
ComputationalEngine`CreateEulerEq`t, \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e1 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`ret[\
ComputationalEngine`CreateEulerEq`t, 1], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e2 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`bondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model];\n\t\t\
ComputationalEngine`CreateEulerEq`e3 = \
FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[ComputationalEngine`CreateEulerEq`nombondret[\
ComputationalEngine`CreateEulerEq`t, ComputationalEngine`CreateEulerEq`m], \
ComputationalEngine`CreateEulerEq`model, True];\n\t\t\
ComputationalEngine`CreateEulerEq`e0p = Flatten[\n\t\t\t{\n\t\t\t\tNormal @ \
ComputationalEngine`CreateEulerEq`model @ \"parameters\",\n\t\t\t\t\
Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 4\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`CreateEulerEq`e1p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[_] -> 4, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e2p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t\
ComputationalEngine`CreateEulerEq`e3p = \
Flatten[{ComputationalEngine`CreateEulerEq`e0p, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[\
ComputationalEngine`CreateEulerEq`m_] -> 4}];\n\t\t{\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e0, 1] /. \
ComputationalEngine`CreateEulerEq`e0p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e1, 1] /. \
ComputationalEngine`CreateEulerEq`e1p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e2, 1] /. \
ComputationalEngine`CreateEulerEq`e2p,\n\t\t\t\
Part[ComputationalEngine`CreateEulerEq`e3, 1] /. \
ComputationalEngine`CreateEulerEq`e3p\n\t\t}\n\t];\n\tApply[And, \
Map[BooleanQ, Flatten @ ComputationalEngine`CreateEulerEq`checkBoolean @ \
ComputationalEngine`CreateEulerEq`modBY]]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"CreateEulerEq_20231009-DUWLJS\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905767958325234*^9, 3.905873517640957*^9, 
  3.905874260700676*^9, 3.9058744171286173`*^9, 3.905874512047851*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"2575b8cb-1c9f-4725-89a1-82b7d39c5394"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],

Cell[BoxData["\<\"ComputationalEngine`CreateEulerEq`\"\>"], "Output",
 CellChangeTimes->{3.905767958352282*^9, 3.9058735176736526`*^9, 
  3.905874260749316*^9, 3.905874417162759*^9, 3.905874512075553*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"af154a07-dc36-445e-8480-43a798d3495e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"add", " ", 
   RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
   RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890681841946844*^9, 3.890681899849094*^9}, {
  3.890682055663522*^9, 3.890682084827585*^9}, {3.890683635625399*^9, 
  3.890683720295089*^9}, {3.890685425949465*^9, 3.890685434516119*^9}, {
  3.890686231117095*^9, 3.890686238212121*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8906824011137114`*^9, 3.890682405708049*^9}, {
   3.890683066049664*^9, 3.8906830825042677`*^9}, {3.89068319056032*^9, 
   3.890683191547068*^9}, {3.89068338518532*^9, 3.890683430044886*^9}, {
   3.890683477495555*^9, 3.89068350860789*^9}, {3.890683563263863*^9, 
   3.890683572999384*^9}, {3.8906837588959513`*^9, 3.890683769652152*^9}, 
   3.890683975431652*^9, 3.890684184728485*^9, {3.890684538464937*^9, 
   3.890684546403357*^9}, 3.8906847013731937`*^9, 3.890684736359234*^9, {
   3.890684917937912*^9, 3.890684918964259*^9}, {3.890685003978653*^9, 
   3.8906850058353167`*^9}, {3.890685081266893*^9, 3.890685086440845*^9}, {
   3.890685162742771*^9, 3.890685164959052*^9}, {3.890685207547077*^9, 
   3.890685210133041*^9}, {3.890685379823967*^9, 3.890685396833392*^9}, {
   3.89068547363831*^9, 3.890685483195992*^9}, {3.8906856724322433`*^9, 
   3.890685672699678*^9}, {3.890685793209527*^9, 3.890685826416944*^9}, 
   3.8906858923977957`*^9, {3.890685924003189*^9, 3.890685959055036*^9}, {
   3.890686016304421*^9, 3.890686073140353*^9}, {3.890686249638393*^9, 
   3.8906862512145*^9}, {3.9057014917019167`*^9, 3.905701491948079*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", 
     "\"\<Begin[\\\"ComputationalEngine`CreateEulerEq`\\\"]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.890684439578331*^9, {3.8906861781312037`*^9, 3.890686181646003*^9}, {
   3.890686261099564*^9, 3.8906862940387907`*^9}, {3.890710614230303*^9, 
   3.8907106202002974`*^9}, 3.8931046283317003`*^9, 3.893174923361951*^9, 
   3.895422783189183*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905767958406063*^9, 3.905873517759943*^9, 
  3.905874260822091*^9, 3.9058744172422867`*^9, 3.9058745122069893`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"a0edd55e-dbca-42dc-ab35-36c28513e142"],

Cell[BoxData["438"], "Output",
 CellChangeTimes->{3.905767958406063*^9, 3.905873517759943*^9, 
  3.905874260822091*^9, 3.9058744172422867`*^9, 3.905874512227714*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"30393692-549d-447b-a7b8-fcc563ca11ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905767958406063*^9, 3.905873517759943*^9, 
  3.905874260822091*^9, 3.9058744172422867`*^9, 3.905874512236847*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"ca733c62-d7a6-4e13-8631-68a7ce84474e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "see", " ", "a", " ", "green", " ", "check", " ", "mark", 
    " ", "if", " ", "all", " ", "tests", " ", "pass"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"tr", "=", 
   RowBox[{"TestReport", "[", "testFileName", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.905698643389641*^9, 3.905698643744013*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"05b32453-87ea-4960-9817-c9076e25c5d2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["11", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"Test Report: CreateEulerEq.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["11", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["11", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "12.715565`6.213457974938597", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: CreateEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6772234996532112638 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9058745123054414`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "6647c4bc-9882-47ea-b165-1edfe49e5bcf", "TestID" -> 
         "CreateEulerEq_20231009-JS9Q9P", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "f74fbab4-adf6-49ad-a17f-f8558f5ec233", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`longTest = False; True], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00003`1.6276362525516566, "CPUTimeUsed" -> 
         0.000028999999997836312`, "MemoryUsed" -> 2760, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 4617097985156598303 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9058745123057733`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "8864b530-5b6d-42a9-9ec5-4e1b1afc5b43", "TestID" -> 
         "CreateEulerEq_20231009-E61KRF", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "847fc5ab-6028-4e6e-870b-ab6e20380f9a", "Input" -> HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`CreateEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`CreateEulerEq`modBY = 
            ComputationalEngine`CreateEulerEq`msp["BY"]; 
           ComputationalEngine`CreateEulerEq`modNRC = 
            ComputationalEngine`CreateEulerEq`msp["NRC"]; 
           ComputationalEngine`CreateEulerEq`modDES = 
            ComputationalEngine`CreateEulerEq`msp["DES"]; 
           ComputationalEngine`CreateEulerEq`mods = {
             ComputationalEngine`CreateEulerEq`modBY, 
              ComputationalEngine`CreateEulerEq`modNRC, 
              ComputationalEngine`CreateEulerEq`modDES}; True], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.99762`6.149480145001125, "CPUTimeUsed" -> 1.0044769999999978`, 
         "MemoryUsed" -> 11247480, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 7777573196758804553 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874513303948*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "f8709925-87dd-4020-89ba-bacd9c478c7f", "TestID" -> 
         "CreateEulerEq_20231009-P3UDOV", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "50f777ed-a190-4fe3-8f37-0417b609e976", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
"]; ComputationalEngine`CreateEulerEq`eulereq = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
eulereq; ComputationalEngine`CreateEulerEq`nomeulereq = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
nomeulereq; 
           ComputationalEngine`CreateEulerEq`findEulerEqConstants = 
            FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants; ComputationalEngine`CreateEulerEq`ee[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := {
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`retc[
               ComputationalEngine`CreateEulerEq`t + 1], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`ret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`j], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`eulereq[
               ComputationalEngine`CreateEulerEq`bondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model], 
              ComputationalEngine`CreateEulerEq`nomeulereq[
               ComputationalEngine`CreateEulerEq`nombondret[
               ComputationalEngine`CreateEulerEq`t + 1, 
                ComputationalEngine`CreateEulerEq`m], 
               ComputationalEngine`CreateEulerEq`t, 
               ComputationalEngine`CreateEulerEq`model]}; 
           ComputationalEngine`CreateEulerEq`eeAll = 
            Map[ComputationalEngine`CreateEulerEq`ee, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffWc[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffPd[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffNomBond[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := Table[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
              ComputationalEngine`CreateEulerEq`i], {
              ComputationalEngine`CreateEulerEq`i, 
               Length[
                ComputationalEngine`CreateEulerEq`model["stateVars"][
                ComputationalEngine`CreateEulerEq`t]]}]; 
           ComputationalEngine`CreateEulerEq`coeffWcAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffWc, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffPdAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffPd, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffBond, 
              ComputationalEngine`CreateEulerEq`mods]; 
           ComputationalEngine`CreateEulerEq`coeffNomBondAll = 
            Map[ComputationalEngine`CreateEulerEq`coeffNomBond, 
              ComputationalEngine`CreateEulerEq`mods]; True], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         4.855631`6.836760673272981, "CPUTimeUsed" -> 4.929998000000001, 
         "MemoryUsed" -> 325704, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 8837305553842069990 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9058745181600003`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "d8bff121-6e28-45b1-bf18-00b51f743594", "TestID" -> 
         "CreateEulerEq_20231009-ZCEAB1", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "5a81f500-2a2b-403d-ab3a-1bb42c6d849b", "Input" -> HoldForm[
           Not[Names["*eulereq"] === {}]], "ExpectedMessages" -> HoldForm[{}],
          "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.026948`4.581041536512631, "CPUTimeUsed" -> 
         0.026963999999999544`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2862100196335819450 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874518187437*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "c6553ab2-8841-4314-bf37-fd256e24100b", "TestID" -> 
         "CreateEulerEq_20231009-W710HJ", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "c4215b04-355e-4009-b981-9628d87915ff", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modBY["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modBY]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modNRC["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modNRC]], 
              Map[Max[
                 Keys[
                  CoefficientRules[#, 
                   DeleteDuplicates[
                    Cases[
                    ComputationalEngine`CreateEulerEq`modDES["stateVars"][
                    ComputationalEngine`CreateEulerEq`t], 
                    Blank[Symbol][ComputationalEngine`CreateEulerEq`t]^
                    Optional[
                    Pattern[ComputationalEngine`CreateEulerEq`p, 
                    Blank[]]], Infinity]]]]] == 1& , 
               ComputationalEngine`CreateEulerEq`ee[
               ComputationalEngine`CreateEulerEq`modDES]]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         4.953217`6.845402352634187, "CPUTimeUsed" -> 5.036407000000004, 
         "MemoryUsed" -> 281168, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 638369451043523993 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874523141218*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "2673f682-d84e-486c-a441-297cb21e3a9b", "TestID" -> 
         "CreateEulerEq_20231009-7O5MG6", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "284eb374-beb2-4cca-9ff3-e055a2678d05", "Input" -> HoldForm[
           Apply[And, 
            Flatten[{
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 1], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffWcAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 2], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffPdAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 3], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}], 
              Table[
               Map[Not[
                 FreeQ[
                  Part[
                   Part[ComputationalEngine`CreateEulerEq`eeAll, 
                    Span[1, All], 4], 
                   ComputationalEngine`CreateEulerEq`n], #]]& , 
                Part[
                ComputationalEngine`CreateEulerEq`coeffNomBondAll, 
                 ComputationalEngine`CreateEulerEq`n]], {
               ComputationalEngine`CreateEulerEq`n, 1, 
                Length[ComputationalEngine`CreateEulerEq`mods]}]}]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.001082`3.1847422586025407, "CPUTimeUsed" -> 0.0010830000000012774`,
          "MemoryUsed" -> 23688, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 4893733848874339532 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874523142754*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "ac6664eb-ecf6-4eeb-b7c7-3c224c4decff", "TestID" -> 
         "CreateEulerEq_20231009-PUV4QV", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "1bc4f024-93c1-4262-9e60-44b64da97cb0", "Input" -> HoldForm[
           If[ComputationalEngine`CreateEulerEq`longTest, 
            Apply[And, 
             Flatten[{
               Map[Count[
                  Cases[
                   First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]], 
                   0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                   #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& ,
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[Count[
                  Cases[
                   First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]], 
                   0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                   #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& ,
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[Count[
                  Cases[
                   First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]], 
                   0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                   #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& ,
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[Count[
                  Cases[
                   First[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]], 
                   0 == Pattern[ComputationalEngine`CreateEulerEq`x, 
                    BlankSequence[]] :> True], True] === Length[
                   #["stateVars"][ComputationalEngine`CreateEulerEq`t]] + 1& ,
                 ComputationalEngine`CreateEulerEq`mods]}]], True]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000023`1.5122428338495828, "CPUTimeUsed" -> 
         0.000023000000002326715`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2688942676169613258 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.90587452314307*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "3288e324-723c-4906-8cb1-9202b1814697", "TestID" -> 
         "CreateEulerEq_20231009-QFPCG1", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "43cb83e7-6b35-400f-885b-692323c679c1", "Input" -> HoldForm[
           If[ComputationalEngine`CreateEulerEq`longTest, 
            Apply[And, 
             Flatten[{
               Map[FreeQ[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t], #], 
                 ComputationalEngine`CreateEulerEq`t]& , 
                ComputationalEngine`CreateEulerEq`mods], 
               Map[FreeQ[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`j], #], 
                 ComputationalEngine`CreateEulerEq`t]& , 
                ComputationalEngine`CreateEulerEq`mods], 
               Map[FreeQ[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #], 
                 ComputationalEngine`CreateEulerEq`t]& , 
                ComputationalEngine`CreateEulerEq`mods], 
               Map[FreeQ[
                 
                 FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #, True], 
                 ComputationalEngine`CreateEulerEq`t]& , 
                ComputationalEngine`CreateEulerEq`mods]}]], True]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000019`1.4292685987848202, "CPUTimeUsed" -> 
         0.000019999999995690132`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2625870488685075354 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874523143391*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "23d0adeb-75d3-4f16-9e45-06fef3e836aa", "TestID" -> 
         "CreateEulerEq_20231009-8B03L0", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "cbf96bdf-f1ba-4163-b363-2848a5592945", "Input" -> HoldForm[
           If[ComputationalEngine`CreateEulerEq`longTest, 
            Apply[And, 
             
             Flatten[{
              Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t], #]& , 
                 ComputationalEngine`CreateEulerEq`mods] === 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`retc[
                  ComputationalEngine`CreateEulerEq`t + 1], #]& , 
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`j], #]& , 
                 ComputationalEngine`CreateEulerEq`mods] === 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`ret[
                  ComputationalEngine`CreateEulerEq`t + 1, 
                   ComputationalEngine`CreateEulerEq`j], #]& , 
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #]& , 
                 ComputationalEngine`CreateEulerEq`mods] === 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`bondret[
                  ComputationalEngine`CreateEulerEq`t + 1, 
                   ComputationalEngine`CreateEulerEq`m], #]& , 
                 ComputationalEngine`CreateEulerEq`mods], 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t, 
                   ComputationalEngine`CreateEulerEq`m], #, True]& , 
                 ComputationalEngine`CreateEulerEq`mods] === 
               Map[FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                  ComputationalEngine`CreateEulerEq`nombondret[
                  ComputationalEngine`CreateEulerEq`t + 1, 
                   ComputationalEngine`CreateEulerEq`m], #, True]& , 
                 ComputationalEngine`CreateEulerEq`mods]}]], True]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000021`1.4727342925659115, "CPUTimeUsed" -> 
         0.000021000000000270802`, "MemoryUsed" -> 2528, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 6682924942923656523 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874523143761*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "26bc801a-02b9-4dce-b4b0-765d5a5f7623", "TestID" -> 
         "CreateEulerEq_20231009-A7HZBV", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "8912077f-96e0-4e20-8e01-1cf612eaf0e2", "Input" -> HoldForm[
           If[
           ComputationalEngine`CreateEulerEq`longTest, {
             "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`"} === 
            DeleteDuplicates[
              Flatten[{
                Map[Context[
                  Evaluate[#]]& , 
                 Flatten[
                  Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`retc[
                    ComputationalEngine`CreateEulerEq`t], #]]], 
                    Span[1, All], 0]& , 
                   ComputationalEngine`CreateEulerEq`mods]]], 
                Map[Context[
                  Evaluate[#]]& , 
                 Flatten[
                  Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`ret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`j], #]]], 
                    Span[1, All], 0, 0]& , 
                   ComputationalEngine`CreateEulerEq`mods]]], 
                Map[Context[
                  Evaluate[#]]& , 
                 Flatten[
                  Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`bondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #]]], 
                    Span[1, All], 0, 0]& , 
                   ComputationalEngine`CreateEulerEq`mods]]], 
                Map[Context[
                  Evaluate[#]]& , 
                 Flatten[
                  Map[Part[
                    Flatten[
                    Rest[
                    
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
CreateEulerEq`findEulerEqConstants[
                    ComputationalEngine`CreateEulerEq`nombondret[
                    ComputationalEngine`CreateEulerEq`t, 
                    ComputationalEngine`CreateEulerEq`m], #, True]]], 
                    Span[1, All], 0, 0]& , 
                   ComputationalEngine`CreateEulerEq`mods]]]}]], True]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000031`1.6418766916662644, "CPUTimeUsed" -> 0.00002999999999886427,
          "MemoryUsed" -> 2528, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 4645348494589988273 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905874523144219*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "b292f4f8-796c-4203-9596-4a5ae6c5c2d8", "TestID" -> 
         "CreateEulerEq_20231009-DUWLJS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/CreateEulerEq.wlt", "EvaluationID" -> 
         "038459eb-bcfe-4044-8eed-1cd808cff000", "Input" -> 
         HoldForm[ComputationalEngine`CreateEulerEq`checkBoolean[
              Pattern[ComputationalEngine`CreateEulerEq`model, 
               Blank[]]] := 
            Module[{ComputationalEngine`CreateEulerEq`e0, 
               ComputationalEngine`CreateEulerEq`e1, 
               ComputationalEngine`CreateEulerEq`e2, 
               ComputationalEngine`CreateEulerEq`e3, 
               ComputationalEngine`CreateEulerEq`e0p, 
               ComputationalEngine`CreateEulerEq`e1p, 
               ComputationalEngine`CreateEulerEq`e2p, 
               ComputationalEngine`CreateEulerEq`e3p}, 
              ComputationalEngine`CreateEulerEq`e0 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`retc[
                 ComputationalEngine`CreateEulerEq`t], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e1 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`ret[
                 ComputationalEngine`CreateEulerEq`t, 1], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e2 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`bondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model]; 
              ComputationalEngine`CreateEulerEq`e3 = 
               FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\
findEulerEqConstants[
                 ComputationalEngine`CreateEulerEq`nombondret[
                 ComputationalEngine`CreateEulerEq`t, 
                  ComputationalEngine`CreateEulerEq`m], 
                 ComputationalEngine`CreateEulerEq`model, True]; 
              ComputationalEngine`CreateEulerEq`e0p = Flatten[{
                  Normal[
                   ComputationalEngine`CreateEulerEq`model["parameters"]], 
                  Thread[Part[ComputationalEngine`CreateEulerEq`e0, 2] -> 4], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc -> 
                  4}]; ComputationalEngine`CreateEulerEq`e1p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                    Blank[]] -> 4, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd[
                    Blank[]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e2p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                   
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; 
              ComputationalEngine`CreateEulerEq`e3p = 
               Flatten[{
                 ComputationalEngine`CreateEulerEq`e0p, 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                    Pattern[ComputationalEngine`CreateEulerEq`m, 
                    Blank[]]] -> 4}]; {
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e0, 1], 
                 ComputationalEngine`CreateEulerEq`e0p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e1, 1], 
                 ComputationalEngine`CreateEulerEq`e1p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e2, 1], 
                 ComputationalEngine`CreateEulerEq`e2p], 
                ReplaceAll[
                 Part[ComputationalEngine`CreateEulerEq`e3, 1], 
                 ComputationalEngine`CreateEulerEq`e3p]}]; Apply[And, 
             Map[BooleanQ, 
              Flatten[
               ComputationalEngine`CreateEulerEq`checkBoolean[
               ComputationalEngine`CreateEulerEq`modBY]]]]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         1.880943`6.4248906327441215, "CPUTimeUsed" -> 1.9024459999999976`, 
         "MemoryUsed" -> 1338480, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {6772234996532112638, 4617097985156598303, 
     7777573196758804553, 8837305553842069990, 2862100196335819450, 
     638369451043523993, 4893733848874339532, 2688942676169613258, 
     2625870488685075354, 6682924942923656523, 4645348494589988273}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905768070742182*^9, 3.905873625178413*^9, 
  3.905874311291346*^9, 3.905874446984923*^9, 3.905874525221608*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"f9af4da1-9f2b-4ebd-bd36-7fa478709738"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"actual", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", 
      RowBox[{"{", 
       RowBox[{"(", 
        RowBox[{"ReleaseHold", "@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
           RowBox[{"[", "\"\<ActualOutput\>\"", "]"}], "]"}], ")"}]}], ")"}], 
       "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"jj", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expected", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"(", 
         RowBox[{"ReleaseHold", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
            RowBox[{"[", "\"\<ExpectedOutput\>\"", "]"}], "]"}], ")"}]}], 
         ")"}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"jj", ",", "1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "value", " ", "of", " ", "next", " ", "two", " ", "lines", " ", "should", 
    " ", "be", " ", "true"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "actual"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "expected"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"numEntries", "=", 
     RowBox[{
      RowBox[{"Dimensions", "[", "actual", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"numCol", "=", "5"}], ";", "\[IndentingNewLine]", 
    RowBox[{"numRows", "=", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"numEntries", "/", "numCol"}], "]"}], "+", "1"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ArrayReshape", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"TableForm", "[", 
              RowBox[{"{", 
               RowBox[{"#1", ",", "#2"}], "}"}], "]"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"actual", ",", "\[IndentingNewLine]", "expected"}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "}"}], "\[Transpose]"}], ",", 
        RowBox[{"{", 
         RowBox[{"numRows", ",", "numCol"}], "}"}], ",", "\"\<--\>\""}], 
       "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"TableDepth", "\[Rule]", "1"}]}], " ", "]"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.905694462163437*^9, 3.905694478942039*^9}, {
   3.905697309999281*^9, 3.905697352099519*^9}, {3.905698637086853*^9, 
   3.905698637247707*^9}, {3.9056993097841167`*^9, 3.905699372508963*^9}, {
   3.905701884187395*^9, 3.905701885054824*^9}, {3.905767492744175*^9, 
   3.9057674935249777`*^9}, 3.9057678324661016`*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"1649f033-3a19-4807-b75b-585c48550f2f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057680708282137`*^9, 3.905873625365497*^9, 
  3.90587431147578*^9, 3.9058744471634817`*^9, 3.90587452539774*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"234bc191-bb07-4dc4-9faf-77a4903ec5d6"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057680708282137`*^9, 3.905873625365497*^9, 
  3.90587431147578*^9, 3.9058744471634817`*^9, 3.905874525398597*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"470babf9-477d-479d-9dfa-955760cb7fdd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"d03dfeba-2718-41c7-9b3f-\
19ce5bed64e2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], 
      "}"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{"modBY", ",", "modNRC", ",", "modDES"}], "}"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.895400995806225*^9, 3.8954009959498043`*^9}, {
   3.895401333682231*^9, 3.8954013437477283`*^9}, {3.895415511062855*^9, 
   3.895415512534185*^9}, 3.895416761698543*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`CreateEulerEq`\>\"", 
  "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ee", "[", "model_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"retc", "[", 
       RowBox[{"t", "+", "1"}], "]"}], ",", "t", ",", "model"}], "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"ret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"eulereq", "[", 
     RowBox[{
      RowBox[{"bondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}], ",", 
    RowBox[{"nomeulereq", "[", 
     RowBox[{
      RowBox[{"nombondret", "[", 
       RowBox[{
        RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "t", ",", "model"}], 
     "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eeAll", "=", 
   RowBox[{"ee", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"coeffWc", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffPd", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", "[", "i", 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coeffNomBond", "[", "model_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", "[", "i",
       "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", 
        RowBox[{
         RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
        "]"}]}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffWcAll", "=", 
   RowBox[{"coeffWc", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffPdAll", "=", 
   RowBox[{"coeffPd", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffBondAll", "=", 
   RowBox[{"coeffBond", "/@", "mods"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coeffNomBondAll", "=", 
   RowBox[{"coeffNomBond", "/@", "mods"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8953865605128613`*^9, 3.895386622896431*^9}, {
   3.895387204728034*^9, 3.895387224501824*^9}, {3.895387517392034*^9, 
   3.895387525954526*^9}, {3.895388030754921*^9, 3.895388033416654*^9}, {
   3.895388249874099*^9, 3.89538826152811*^9}, {3.8953886938107567`*^9, 
   3.895388694343625*^9}, 3.895388735643899*^9, {3.895389727495597*^9, 
   3.895389727709811*^9}, 3.8953948635559893`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"*", "test", " ", "eulereq"}], ",", " ", "nomeulereq"}], 
  "**)"}]], "Input",
 CellChangeTimes->{{3.8953896985566893`*^9, 3.895389733299385*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "linear", " ", "in", " ", "state", " ", 
    "variables"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modBY", "[", "\"\<stateVars\>\"", "]"}], "[", "t", 
                  "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modBY", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modNRC", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modNRC", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"Keys", "@", 
            RowBox[{"CoefficientRules", "[", 
             RowBox[{"#", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"modDES", "[", "\"\<stateVars\>\"", "]"}], "[", "t",
                   "]"}], ",", 
                 SuperscriptBox[
                  RowBox[{"_Symbol", "[", "t", "]"}], "p_."], ",", 
                 "Infinity"}], "]"}]}]}], "]"}]}]}], "==", "1"}], ")"}], 
        "&"}], "/@", 
       RowBox[{"ee", "[", "modDES", "]"}]}]}], "\[IndentingNewLine]", 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905768844230714*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"3f6f71b6-72af-4e74-9762-cc75d8952768"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "euler", " ", "eq", " ", "has", " ", "all", " ", "wc", " ", 
    "coefficients"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffWcAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "2"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffPdAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "3"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Not", "@", 
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"eeAll", "[", 
                RowBox[{"[", 
                 RowBox[{";;", ",", "4"}], "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], ",", "#"}], "]"}]}], "&"}], "/@", 
          RowBox[{"coeffNomBondAll", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ")"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "mods", "]"}]}], "}"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895385311831744*^9, 3.895385481494638*^9}, {
   3.895385672619301*^9, 3.895385717739428*^9}, {3.8953859145684547`*^9, 
   3.895385964555834*^9}, {3.8953862837960443`*^9, 3.895386295909346*^9}, {
   3.895386989764208*^9, 3.895387006333869*^9}, {3.895388061592813*^9, 
   3.8953880660972147`*^9}, 3.895388147209415*^9, {3.895388202226654*^9, 
   3.8953882082150087`*^9}, {3.89538826632761*^9, 3.895388273833865*^9}, 
   3.895388382755307*^9, {3.895388720275887*^9, 3.8953887290016813`*^9}, {
   3.8953899769186487`*^9, 3.895390048007641*^9}, 3.895394725800404*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905768847347488*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"3def71cf-33aa-4bc1-9b10-0068581b3573"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"*", "test", " ", "findEulerEqConstants"}], "**)"}]], "Input",
 CellChangeTimes->{3.895389747518649*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "number", " ", "of", " ", "equations", " ", "for", " ", "the", " ", 
    "coefficients", " ", "equals", " ", "number", " ", "of", " ", "state", 
    " ", "variables", " ", "plus", " ", "1", " ", 
    RowBox[{"(", 
     RowBox[{
     "for", " ", "the", " ", "term", " ", "that", " ", "does", " ", "not", 
      " ", "multiply", " ", "any", " ", "state", " ", "var"}], ")"}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"ret", "[", 
                  RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"bondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{"findEulerEqConstants", "[", 
                RowBox[{
                 RowBox[{"nombondret", "[", 
                  RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", 
                 "True"}], "]"}]}], ",", 
              RowBox[{
               RowBox[{"0", "==", "x__"}], " ", ":>", " ", "True"}]}], "]"}], 
            ",", "True"}], "]"}], "===", 
          RowBox[{
           RowBox[{"Length", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
            "]"}], "+", "1"}]}], ")"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394734669942*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905768880845347*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"7a615ff6-4d5e-4594-8855-b0b496d8d10e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "eq", " ", "for", " ", "coefficients", " ", "do", " ", "not", " ", "have", 
    " ", "t"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], ",", "t"}], 
         "]"}], "&"}], "/@", "mods"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"FreeQ", "[", 
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], ",", "t"}], "]"}], "&"}], "/@", "mods"}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.895394737802577*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.90576889753688*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"409437cf-6f8e-41a0-a6b2-ce4fe5265321"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "constants", " ", "for", " ", "wc", " ", "ratio", " ", "are", " ", 
    "independent", " ", "of", " ", "time", " ", "period"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"retc", "[", 
             RowBox[{"t", "+", "1"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"ret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "j"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
         "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"bondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#"}], "]"}], 
          "&"}], "/@", "mods"}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", " ", "True"}], 
           "]"}], "&"}], "/@", "mods"}], ")"}], "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"findEulerEqConstants", "[", 
           RowBox[{
            RowBox[{"nombondret", "[", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", "m"}], "]"}], ",", "#", ",", " ", 
            "True"}], "]"}], "&"}], "/@", "mods"}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.895388860815771*^9, 3.8953889743856173`*^9}, {
   3.8953890079692087`*^9, 3.8953891898696423`*^9}, {3.895389236315548*^9, 
   3.895389237140854*^9}, {3.8953896036751204`*^9, 3.8953896049656277`*^9}, {
   3.895389645228754*^9, 3.8953896519199467`*^9}, {3.8953901187330217`*^9, 
   3.895390119142971*^9}, 3.895391684154141*^9, {3.8953922455415573`*^9, 
   3.895392355602806*^9}, {3.8953925147579393`*^9, 3.895392515041278*^9}, {
   3.895394715263129*^9, 3.8953947409558907`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057689290164413`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"5dfca66b-a438-4f8e-91cf-5caf187bd3e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "unknowns", " ", "in", " ", "Euler", " ", "eq", " ", "are", " ", "in", " ",
     "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\""}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
   "{", "\"\<FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\>\"", 
    "}"}], "===", 
   RowBox[{"DeleteDuplicates", "@", "\[IndentingNewLine]", 
    RowBox[{"Flatten", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"retc", "[", "t", "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0"}], "]"}], "]"}], "&"}], "/@", "mods"}], 
           ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"ret", "[", 
                    RowBox[{"t", ",", "j"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"bondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#"}], "]"}]}]}], 
               ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Context", "[", 
           RowBox[{"Evaluate", "[", "#", "]"}], "]"}], "&"}], ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Rest", "@", 
                 RowBox[{"findEulerEqConstants", "[", 
                  RowBox[{
                   RowBox[{"nombondret", "[", 
                    RowBox[{"t", ",", "m"}], "]"}], ",", "#", ",", "True"}], 
                  "]"}]}]}], ")"}], "[", 
              RowBox[{"[", 
               RowBox[{";;", ",", "0", ",", "0"}], "]"}], "]"}], "&"}], "/@", 
            "mods"}], ")"}]}]}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057689449366617`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"81ee1118-cd31-480b-824d-8615b2ef8562"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "each", " ", "equation", " ", "evaluates", " ", "to", " ", "True", " ", 
    "or", " ", "False", " ", "when", " ", "evaluated", " ", "numerically"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"checkBoolean", "[", "model_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "e0", ",", "e1", ",", "e2", ",", "e3", ",", "e0p", ",", "e1p", ",", 
        "e2p", ",", "e3p"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"e0", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"retc", "[", "t", "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e1", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"ret", "[", 
           RowBox[{"t", ",", "1"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e2", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"bondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3", "=", 
        RowBox[{"findEulerEqConstants", "[", 
         RowBox[{
          RowBox[{"nombondret", "[", 
           RowBox[{"t", ",", "m"}], "]"}], ",", "model", ",", " ", "True"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e0p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Normal", "@", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], ",", 
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"e0", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "->", "4"}], "]"}], ",", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Ewc", "->", 
            "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e1p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", 
             "[", "_", "]"}], "->", "4"}], ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`Epd", "[", 
             "_", "]"}], "->", "4"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"e2p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"e3p", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"e0p", ",", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
             "[", "m_", "]"}], "->", "4"}]}], "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"e0", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e0p"}], ",", 
         RowBox[{
          RowBox[{"e1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e1p"}], ",", 
         RowBox[{
          RowBox[{"e2", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e2p"}], ",", 
         RowBox[{
          RowBox[{"e3", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "/.", "e3p"}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"BooleanQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Flatten", "@", 
        RowBox[{"checkBoolean", "[", "modBY", "]"}]}], ")"}]}], 
     ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8953947088712397`*^9, 3.895394709442305*^9}, 
   3.895394744666971*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905768946291864*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"f4155b2b-6787-42e4-bbc7-12b4fed2ef2d"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1331, 828},
WindowMargins->{{-1513, Automatic}, {-30, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"aa263687-a9be-4f29-a043-b4b72fa56207"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 214, 4, 37, "Input",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],
Cell[CellGroupData[{
Cell[639, 21, 1958, 37, 142, "Input",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],
Cell[2600, 60, 389, 6, 42, "Output",ExpressionUUID->"17c5bef9-dd72-411d-a614-f924f259d158"],
Cell[2992, 68, 367, 6, 42, "Output",ExpressionUUID->"e81a51ca-1ed5-408e-be92-a2c1e12ac1f2"],
Cell[3362, 76, 391, 7, 42, "Output",ExpressionUUID->"321de8ea-b75f-46e8-97ce-643a016a43b1"],
Cell[3756, 85, 314, 5, 42, "Output",ExpressionUUID->"20217ff7-99c6-433a-b015-8c68be5d4fee"],
Cell[4073, 92, 405, 8, 42, "Output",ExpressionUUID->"88715669-8df5-496f-bc27-08734091b1e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4515, 105, 255, 4, 67, "Subsection",ExpressionUUID->"2157750c-ae6d-47e9-b5dd-9c68ad40141b"],
Cell[4773, 111, 316, 7, 37, "Input",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],
Cell[CellGroupData[{
Cell[5114, 122, 601, 11, 64, "Input",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],
Cell[5718, 135, 311, 4, 42, "Output",ExpressionUUID->"66b39b14-44a5-422f-a246-ddc5e8ed395d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6066, 144, 423, 7, 37, "Input",ExpressionUUID->"2f82b75d-42a0-4b76-b3ff-7172db85f4de"],
Cell[6492, 153, 279, 3, 42, "Output",ExpressionUUID->"4505fd21-036c-49df-b13e-70d8cc39c019"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6808, 161, 770, 15, 116, "Input",ExpressionUUID->"6c32551b-0987-4d3b-8da1-f0b17567452d"],
Cell[CellGroupData[{
Cell[7603, 180, 448, 10, 29, "Print",ExpressionUUID->"10b50030-dd88-4a6f-9104-95e631e4ac8d"],
Cell[8054, 192, 339, 6, 29, "Print",ExpressionUUID->"f88fda29-84ba-464a-8307-466d803ade26"]
}, Open  ]],
Cell[8408, 201, 4968, 90, 42, "Output",ExpressionUUID->"2ffd9017-9358-49a1-9e58-9c44279e96c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13413, 296, 1471, 31, 246, "Input",ExpressionUUID->"eccf8930-58b0-4acf-8ec2-cc24c39a0278"],
Cell[CellGroupData[{
Cell[14909, 331, 470, 10, 29, "Print",ExpressionUUID->"bd7b4f25-a568-4b82-a992-6963f48d11a2"],
Cell[15382, 343, 361, 6, 29, "Print",ExpressionUUID->"5d54b180-0497-45b5-912b-f15151fcc226"]
}, Open  ]],
Cell[15758, 352, 7528, 138, 42, "Output",ExpressionUUID->"0a961e5d-e701-430c-87b3-d6fecbeba300"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23323, 495, 6168, 141, 688, "Input",ExpressionUUID->"0f0d628d-d6b9-4205-8e24-5e38623917fa"],
Cell[CellGroupData[{
Cell[29516, 640, 472, 10, 29, "Print",ExpressionUUID->"76898d73-dd22-4d21-bf34-8eacbf08622a"],
Cell[29991, 652, 364, 6, 29, "Print",ExpressionUUID->"0db77bf6-57a0-466a-a4f5-08ec69f25189"]
}, Open  ]],
Cell[30370, 661, 21090, 372, 42, "Output",ExpressionUUID->"9f0446ed-97c4-4858-96d9-00f894a30a2e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51497, 1038, 990, 19, 116, "Input",ExpressionUUID->"8845796e-7665-4c7d-8872-0aad8272ffea"],
Cell[CellGroupData[{
Cell[52512, 1061, 478, 10, 29, "Print",ExpressionUUID->"a8d564b9-0989-4abd-b699-99ed344db480"],
Cell[52993, 1073, 367, 6, 29, "Print",ExpressionUUID->"e02760dd-294f-4155-914d-42929c616fdf"]
}, Open  ]],
Cell[53375, 1082, 9583, 167, 42, "Output",ExpressionUUID->"9d1f824d-74c7-426f-8394-909588acca6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62995, 1254, 3654, 84, 402, "Input",ExpressionUUID->"5f14f312-6a58-4995-9f99-c90fffb7702e"],
Cell[CellGroupData[{
Cell[66674, 1342, 471, 10, 29, "Print",ExpressionUUID->"e60d8c3a-da90-4a98-a336-114b140cfd76"],
Cell[67148, 1354, 362, 6, 29, "Print",ExpressionUUID->"4ec0c8d3-cfc4-4372-8009-5ab3d549dfb7"]
}, Open  ]],
Cell[67525, 1363, 18189, 305, 42, "Output",ExpressionUUID->"158ce240-bba6-4421-8186-8f1d39153025"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85751, 1673, 3609, 93, 272, "Input",ExpressionUUID->"6b8161f3-f0ae-4e4b-86b2-a9950c303b70"],
Cell[CellGroupData[{
Cell[89385, 1770, 472, 10, 29, "Print",ExpressionUUID->"34a4a349-016b-479d-a319-fcc0d79a96c0"],
Cell[89860, 1782, 363, 6, 29, "Print",ExpressionUUID->"88c39717-98b7-4794-bf7c-229922461aef"]
}, Open  ]],
Cell[90238, 1791, 19687, 337, 42, "Output",ExpressionUUID->"605eec88-1eb1-485f-bd05-c244ccfc5a9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109962, 2133, 5674, 129, 480, "Input",ExpressionUUID->"ca14d8f1-7a77-428b-8c74-a7eb0de7af1a"],
Cell[CellGroupData[{
Cell[115661, 2266, 472, 10, 29, "Print",ExpressionUUID->"74841cb1-d59f-42b9-890f-0464826f4575"],
Cell[116136, 2278, 363, 6, 29, "Print",ExpressionUUID->"c99a3adf-a250-44dc-9054-7c0b60f6c0ae"]
}, Open  ]],
Cell[116514, 2287, 25056, 409, 42, "Output",ExpressionUUID->"00783aed-5f48-4dbf-972f-da86a874672c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141607, 2701, 2648, 61, 350, "Input",ExpressionUUID->"10534701-86cc-4812-b9d1-583f080b6be2"],
Cell[CellGroupData[{
Cell[144280, 2766, 499, 11, 29, "Print",ExpressionUUID->"694685cf-1012-4797-9cc7-41114f6f9fc5"],
Cell[144782, 2779, 388, 7, 29, "Print",ExpressionUUID->"3da10ece-9ed8-4c78-95c0-aadece4c6609"]
}, Open  ]],
Cell[145185, 2789, 23223, 390, 42, "Output",ExpressionUUID->"468bc1c8-5b7d-4549-8aec-bd986d0eb580"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168445, 3184, 3651, 93, 376, "Input",ExpressionUUID->"ee1337d5-0f3d-49eb-bbbe-5245cda1f6a9"],
Cell[CellGroupData[{
Cell[172121, 3281, 472, 10, 29, "Print",ExpressionUUID->"24733442-035b-4065-b828-1b5a7e544485"],
Cell[172596, 3293, 363, 6, 29, "Print",ExpressionUUID->"5f32ea78-2f78-4869-9932-c324575ea7fc"]
}, Open  ]],
Cell[172974, 3302, 28425, 463, 42, "Output",ExpressionUUID->"31cd1638-a5e6-44fa-9160-2f44d4ac56c0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201436, 3770, 4537, 110, 350, "Input",ExpressionUUID->"52893134-e9af-4ce7-a13c-6142dbb2be0e"],
Cell[CellGroupData[{
Cell[205998, 3884, 478, 10, 29, "Print",ExpressionUUID->"ad815a39-1f1a-4426-9f88-fa5686355e8a"],
Cell[206479, 3896, 367, 6, 29, "Print",ExpressionUUID->"12fe3408-eff2-4bf3-870b-1ce66a05e015"]
}, Open  ]],
Cell[206861, 3905, 30810, 504, 42, "Output",ExpressionUUID->"943ab4b1-40ec-44e0-86ea-b62a1a7eb42e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237708, 4414, 4413, 112, 454, "Input",ExpressionUUID->"1720f7ae-66fa-40eb-88fe-12a3d25a6bb4"],
Cell[CellGroupData[{
Cell[242146, 4530, 476, 10, 29, "Print",ExpressionUUID->"562aa01f-cf45-4272-b744-454e8e69adf7"],
Cell[242625, 4542, 369, 6, 29, "Print",ExpressionUUID->"d26e4c9a-bcba-42f5-b329-6625a8a08679"]
}, Open  ]],
Cell[243009, 4551, 36637, 608, 42, "Output",ExpressionUUID->"2575b8cb-1c9f-4725-89a1-82b7d39c5394"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279683, 5164, 195, 3, 37, "Input",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],
Cell[279881, 5169, 283, 3, 42, "Output",ExpressionUUID->"af154a07-dc36-445e-8480-43a798d3495e"]
}, Open  ]],
Cell[280179, 5175, 356, 7, 37, "Input",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],
Cell[280538, 5184, 1502, 33, 402, "Input",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],
Cell[282043, 5219, 3257, 66, 532, "Input",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],
Cell[CellGroupData[{
Cell[285325, 5289, 1642, 39, 246, "Input",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],
Cell[286970, 5330, 492, 9, 69, "Output",ExpressionUUID->"a0edd55e-dbca-42dc-ab35-36c28513e142"],
Cell[287465, 5341, 244, 3, 42, "Output",ExpressionUUID->"30393692-549d-447b-a7b8-fcc563ca11ba"],
Cell[287712, 5346, 490, 9, 69, "Output",ExpressionUUID->"ca733c62-d7a6-4e13-8631-68a7ce84474e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288239, 5360, 454, 10, 64, "Input",ExpressionUUID->"05b32453-87ea-4960-9817-c9076e25c5d2"],
Cell[288696, 5372, 42127, 807, 76, "Output",ExpressionUUID->"f9af4da1-9f2b-4ebd-bd36-7fa478709738"]
}, Open  ]],
Cell[CellGroupData[{
Cell[330860, 6184, 3577, 92, 480, "Input",ExpressionUUID->"1649f033-3a19-4807-b75b-585c48550f2f"],
Cell[334440, 6278, 245, 3, 42, "Output",ExpressionUUID->"234bc191-bb07-4dc4-9faf-77a4903ec5d6"],
Cell[334688, 6283, 246, 3, 62, "Output",ExpressionUUID->"470babf9-477d-479d-9dfa-955760cb7fdd"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[334983, 6292, 214, 4, 46, "Subsection",ExpressionUUID->"d03dfeba-2718-41c7-9b3f-19ce5bed64e2"],
Cell[335200, 6298, 1084, 28, 168, "Input",ExpressionUUID->"095b63f1-fbc1-44ae-86fe-ddcb73be2d11"],
Cell[336287, 6328, 209, 4, 37, "Input",ExpressionUUID->"89f99144-f1e3-48fd-a4d3-9f079d006be7"],
Cell[336499, 6334, 1416, 36, 90, "Input",ExpressionUUID->"6c44f3a6-c84d-4629-8b8e-fbe680284498"],
Cell[337918, 6372, 2791, 75, 324, "Input",ExpressionUUID->"90c42b22-0729-4071-8a87-80bfc7acfa05"],
Cell[340712, 6449, 277, 6, 37, "Input",ExpressionUUID->"3a69e638-17e7-4dc8-983d-9a2bb95dbc44"],
Cell[CellGroupData[{
Cell[341014, 6459, 3162, 76, 260, "Input",ExpressionUUID->"f065eeba-7e2a-4191-b21e-6d5f29dc37ee"],
Cell[344179, 6537, 152, 2, 42, "Output",ExpressionUUID->"3f6f71b6-72af-4e74-9762-cc75d8952768"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344368, 6544, 3714, 94, 194, "Input",ExpressionUUID->"450d026c-b18a-43e7-a1f7-1fbd64889a02"],
Cell[348085, 6640, 152, 2, 42, "Output",ExpressionUUID->"3def71cf-33aa-4bc1-9b10-0068581b3573"]
}, Open  ]],
Cell[348252, 6645, 223, 4, 37, "Input",ExpressionUUID->"d89511c1-61a6-4d82-a574-abba10bb836f"],
Cell[CellGroupData[{
Cell[348500, 6653, 4402, 111, 298, "Input",ExpressionUUID->"b469d433-9a13-454a-9c41-8fcf8f6ada95"],
Cell[352905, 6766, 152, 2, 42, "Output",ExpressionUUID->"7a615ff6-4d5e-4594-8855-b0b496d8d10e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353094, 6773, 2190, 53, 194, "Input",ExpressionUUID->"a14f8e57-f2d4-4fb0-adf4-2ed265fddaa5"],
Cell[355287, 6828, 151, 2, 42, "Output",ExpressionUUID->"409437cf-6f8e-41a0-a6b2-ce4fe5265321"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355475, 6835, 3371, 89, 220, "Input",ExpressionUUID->"bb33459f-1e17-444a-8cb1-59734faa64d8"],
Cell[358849, 6926, 154, 2, 42, "Output",ExpressionUUID->"5dfca66b-a438-4f8e-91cf-5caf187bd3e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[359040, 6933, 3858, 102, 220, "Input",ExpressionUUID->"40a7a3fe-b29a-43ad-8bf9-968a4a819d71"],
Cell[362901, 7037, 154, 2, 42, "Output",ExpressionUUID->"81ee1118-cd31-480b-824d-8615b2ef8562"]
}, Open  ]],
Cell[CellGroupData[{
Cell[363092, 7044, 4076, 107, 402, "Input",ExpressionUUID->"15096dd1-9781-426a-add3-5d1e6c4880bf"],
Cell[367171, 7153, 152, 2, 42, "Output",ExpressionUUID->"f4155b2b-6787-42e4-bbc7-12b4fed2ef2d"]
}, Open  ]]
}, Closed]]
}
]
*)

