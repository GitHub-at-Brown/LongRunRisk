(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[   1041812,      23971]
NotebookOptionsPosition[   1013426,      23634]
NotebookOutlinePosition[   1013914,      23653]
CellTagsIndexPosition[   1013871,      23650]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
      "\"\<.wlt\>\""}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pacletDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"testFileName", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testContextBase", "=", 
  RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891244075958187*^9, 3.891244079885818*^9}, 
   3.891274440015959*^9, 3.891913898993636*^9, {3.893083620043439*^9, 
   3.893083620908062*^9}, 3.893336453091833*^9, 3.8933472708044786`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>"], "Output",
 CellChangeTimes->{3.90509656481248*^9, 3.905097047827882*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"51fae73d-b600-4844-8572-bb7d973df86a"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.90509656481248*^9, 3.905097047829565*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"451a7a23-6ce5-4998-b5aa-377ef952002b"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.90509656481248*^9, 3.905097047866674*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"de9b8b32-9c4f-4a5e-988b-446a7d67a3f5"],

Cell[BoxData["\<\"SolveEulerEq\"\>"], "Output",
 CellChangeTimes->{3.90509656481248*^9, 3.905097047868062*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"5d70e76b-5d54-45d2-bb19-c8d8d97e21e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.90509656481248*^9, 3.9050970478689737`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"f0142bf3-adc8-43b1-acec-df82a33f5f80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"2157750c-ae6d-47e9-b5dd-\
9c68ad40141b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellChangeTimes->{3.9050704645551*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
   "testContextBase", "<>", "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, 
   3.890710660724628*^9, 3.893104584960622*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
\"\>"], "Output",
 CellChangeTimes->{3.9050965671536407`*^9, 3.905097050348454*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"6dedbfe7-921c-4974-ad27-543d6dd8319b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<ComputationalEngine`SolveEulerEq`\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{3.905096520818309*^9, 3.905096556613597*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"ed50da44-63c4-4c2d-93eb-f54b1777aa81"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"$ContextPath", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Prepend", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`\>\""}], "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modBKY", "=", 
     RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRCStochVol", "=", 
     RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"mods", "=", 
     RowBox[{"{", 
      RowBox[{
      "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
       "modNRCStochVol"}], "}"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"testing", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "returns", " ", "True", " ", "if", " ", "coefficients", " ", "have", " ",
       "expected", " ", "form"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffsQ", "[", 
      RowBox[{"sol_", ",", "coeffName_", ",", "numStateVars_", ",", 
       RowBox[{"numAssets_", ":", "0"}], ",", 
       RowBox[{"bond_", ":", "0"}]}], "]"}], ":=", 
     RowBox[{"And", "@@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"numAssets", "==", "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"wc", " ", 
             RowBox[{"ratio", ":", " ", 
              RowBox[{
              "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
               "0"}]}]}], ",", " ", "1", ",", " ", 
            RowBox[{"2", "..."}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Keys", "/@", "sol"}], ",", 
               RowBox[{
                RowBox[{"coeffName", "[", "i_Integer", "]"}], ":>", "i"}]}], 
              "]"}]}], ")"}], "===", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}], ")"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"pd", " ", "ratio", " ", "or", " ", "bond", " ", 
             RowBox[{"prices", ":", " ", 
              RowBox[{
              "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
               "two", " ", "integers"}]}]}], ",", " ", 
            RowBox[{
            "first", " ", "one", " ", "indexes", " ", "stock", " ", "number", 
             " ", "or", " ", "maturity", " ", "of", " ", "bond"}], ",", " ", 
            RowBox[{
            "second", " ", "one", " ", "indexes", " ", "state", " ", 
             "variables"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Tuples", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Range", "[", "numAssets", "]"}], "-", "bond"}], ",",
                 "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ")"}], "==", 
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Keys", "/@", "sol"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"coeffName", "[", "i_Integer", "]"}], "[", 
                 "j_Integer", "]"}], ":>", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}]}]}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"names", " ", "match", " ", "coeffName"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", "coeffName"}], "]"}], "&"}], "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", 
               "]"}], ":>", "var"}]}], "]"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "context", " ", "is", " ", "same", " ", "as", " ", "context", " ", 
          "of", " ", "coeffName"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{"StringDrop", "[", 
               RowBox[{
                RowBox[{"ToString", "[", "coeffName", "]"}], ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", 
               "]"}], ":>", 
              RowBox[{"Context", "[", "var", "]"}]}]}], "]"}]}], ")"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{"NumberQ", "/@", 
           RowBox[{"(", 
            RowBox[{"Values", "/@", "sol"}], ")"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"list", " ", "with", " ", "different", " ", "options"}], "*)"}], 
    "\n", 
    RowBox[{"opts", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"single", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "4.6", "}"}]}], ",", 
           RowBox[{"\"\<Epd\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", " ", 
       
       RowBox[{"(*", 
        RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
       " ", 
       RowBox[{"{", 
        RowBox[{"\"\<FindRootOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], "}"}], ",", 
       " ", 
       RowBox[{"(*", 
        RowBox[{
        "FindRoot", " ", "option", " ", "via", " ", "updateCoeffsSol", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"more", " ", "than", " ", "one", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}]}], "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "same", " ", "FindRootOptions", " ", "and", " ", "options", " ", "to", 
      " ", "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"optsRepeated", " ", "=", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], "}"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}]}], "}"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}], ",", 
          RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
         "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"optsMany", "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"opts", "[", 
        RowBox[{"[", 
         RowBox[{"5", ";;", 
          RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "optsRepeated"}], "]"}]}], 
    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"**", "**", "**", "**"}], "*", "set", " ", "up", " ", "useful",
        " ", "variables", " ", "used", " ", "throughout", " ", "loop"}], 
      "**********)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ind", "=", "0"}], ";", 
       RowBox[{"(*", 
        RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "convenience", " ", "functions", " ", "for", " ", "different", " ", 
         "coefficients"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"numStateVars", "=", 
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"numStocks", "=", 
        RowBox[{"model", "[", "\"\<numStocks\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQWc", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{
         "sol", ",", 
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", ",",
           "numStateVars"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQPd", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd"}], 
          ",", "numStateVars", ",", "numStocks"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQNomBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "testing", " ", "starts", " ",
          "here"}], "**********)"}], "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffs", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsSol", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsWc", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsPd", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsBond", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "passing", " ", "arguments", " ", "works", " ", "as", " ", 
          "intended"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parse", " ", "positional", " ", "arguments", " ", "correctly"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newParameters", "=", 
        RowBox[{"{", 
         RowBox[{"delta", "->", "0.99"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"guessCoeffsSolution", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"updateCoeffs", "[", "model", "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters"}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution", 
              ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "separates", " ", "positional", " ", "arguments", " ", "and", " ", 
         "optional", " ", "arguments", " ", "correctly"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
         RowBox[{"And", "@@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Most", "@", "#"}], "]"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", 
                RowBox[{"opts", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "different", " ", "ways", " ", "to", " ", "pass", " ", "more", 
               " ", "than", " ", "one", " ", "option", " ", "are", " ", 
               "equivalent"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Rest", "@", "#"}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"Last", "@", "#"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"First", "@", "#"}]}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsMany"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "wealth", " ", "consumption", " ", "ratio", " ", "coefficients"}], 
        "**********)"}], "\[IndentingNewLine]", 
       RowBox[{"optsWc", "=", 
        RowBox[{"{", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "optsWc"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wrapper", " ", "functions", " ", "updateCoeffsSol", " ", "and", " ",
           "updateCoeffs", " ", "give", " ", "same", " ", "answer", " ", "as",
           " ", "updateCoeffsWc"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"solWc", "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "options"}], " ", "work", " ", "as", " ", 
         "intended"}], "*******)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"one", " ", "iteration", " ", 
          RowBox[{"doesn", "'"}], "t", " ", "get", " ", "far", " ", "from", 
          " ", "initial", " ", "guess"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"MaxIterations", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "updateCoeffsSol", " ",
           "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "updateCoeffsSol", 
          " ", "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "when", " ", "passing", " ", "same", " ", "FindRoot", " ", "and", 
           " ", "updateCoeffsSol", " ", "options"}]}], ",", " ", 
         RowBox[{"FindRoot", " ", "option", " ", "is", " ", "used"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"First", "@", "m2"}], "==", 
          RowBox[{"{", 
           RowBox[{"HoldForm", "@", 
            RowBox[{"(", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], ")"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
              ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"ReturnPd", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Ewc0", "=", "4.6"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "return", " ", "pd", " ", "coefficients"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", 
         RowBox[{"updateCoeffs", "[", 
          RowBox[{"model", ",", 
           RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ind", "=", "ind"}], ";", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"return", " ", "pd", " ", "coefficients"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"coeffsWcPd", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<UpdatePd\>\"", "->", "True"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<Ewc\>\"", "->", 
              RowBox[{"{", "Ewc0", "}"}]}], ",", 
             RowBox[{"\"\<Epd\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "separate", " ", "wc", " ", "and", " ", "pd", " ", 
          "coefficients"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coeffsWc", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"coeffsPd", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "check", " ", "coefficients", " ", "have", " ", "expected", " ", 
          "form"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", "coeffsWc", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQPd", "[", "coeffsPd", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wc", " ", "coefficients", " ", "are", " ", "the", " ", "same", " ", 
          "when", " ", "pd", " ", "coefficients", " ", "are", " ", "or", " ", 
          "are", " ", "not", " ", "returned"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "Ewc0", "}"}]}], ",", 
               RowBox[{"\"\<Epd\>\"", "->", 
                RowBox[{"{", 
                 RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "updateCoeff", " ", "inherits", " ", "options", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "checks"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{
             "Options", "[", 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{
             "Options", "[", 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "pass", " ", "initial", " ", "guess", " ", "in", " ", 
          "updateCoeffs"}], ",", " ", "updateCoeffsSol", ",", " ", 
         "updateCoeffsWc"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsSol", "=", 
        RowBox[{
        "Options", "[", 
         "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsWc", "=", 
        RowBox[{
        "Options", "[", 
         "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ig", "=", "1"}], ";", 
       RowBox[{"(*", 
        RowBox[{"new", " ", "initial", " ", "guess"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"initial", " ", "guess", " ", "as", " ", "argument"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          "\[IndentingNewLine]", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", "->", "ig"}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "initial", " ", "guess", " ", "as", " ", "default", " ", "in", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffs"}]}], 
        "*)"}], 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffs", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", "model", "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", "oldOptions"}], 
       ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsSol"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "Options", "[", 
         "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol", "]"}], "=", "oldOptionsSol"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsWc"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc", ",", 
         RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "Options", "[", 
         "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc", "]"}], "=", "oldOptionsWc"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "use", " ", "defaults", " ", "for", " ", "updateCoeffs", " ", "for",
            " ", "any", " ", "options", " ", "inherited", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "check"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"optsUpdateCoeff", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "4.6", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "4.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
          RowBox[{"(*", 
           RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
          "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"out", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", "}"}], 
             "&"}], "/@", "optsUpdateCoeff"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
          RowBox[{"can", "'"}], "t", " ", "set", " ", "defaults", " ", "for", 
          " ", "updateCoeffs", " ", "for", " ", "FindRoot", " ", "options", 
          " ", "since", " ", "they", " ", "are", " ", "not", " ", 
          "inherited"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsBad", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", " ", 
          RowBox[{"(*", 
           RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]",
           " ", 
          RowBox[{"{", 
           RowBox[{"PrecisionGoal", "\[Rule]", "$MachinePrecision"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"m", "=", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
                    RowBox[{"$MessageList", "=", 
                    RowBox[{"{", "}"}]}]}], "}"}], ",", 
                  RowBox[{"Reap", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Module", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{"updateCoeffs", ",", "#"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "$MessageList"}], "\[IndentingNewLine]", "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"First", "@", "m"}]}], "==", 
                RowBox[{"HoldForm", "@", 
                 RowBox[{"SetOptions", "::", "optnf"}]}]}]}], 
              "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsBad"}], 
           ")"}]}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "option", " ", "\"\<FindRootOptions\>\"", " ", "inherited", " ", 
         "from", " ", "updateCoeffsSol"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsFindRoot", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"MaxIterations", "->", "1"}], "}"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
           "has", " ", "a", " ", "default", " ", "in", " ", 
            "\"\<FindRootOptions\>\""}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"AccuracyGoal", "\[Rule]", "2"}], "}"}]}]}], 
         RowBox[{"(*", 
          RowBox[{
          "does", " ", "not", " ", "have", " ", "a", " ", "default", " ", 
           "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
         "\[IndentingNewLine]", "}"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "default", " ", "options", " ", "from", " ", "FindRoot", " ", "only",
          " ", "for", " ", "options", " ", "without", " ", "a", " ", 
         "default", " ", "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"oldFindRootOpts", " ", "=", " ", 
        RowBox[{"Options", "[", "FindRoot", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "at", " ", 
         "the", " ", "end"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "find", " ", "options", " ", "with", " ", "a", " ", "default", " ", 
         "value", " ", "in", " ", "\"\<FindRootOptions\>\"", " ", "option", 
         " ", "in", " ", "updateCoeffs"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"withFindRootOptionDefault", "=", 
        RowBox[{"Keys", "@", 
         RowBox[{"(", 
          RowBox[{"\"\<FindRootOptions\>\"", "/.", 
           RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{"test", ":", " ", 
                 RowBox[{
                 "change", " ", "default", " ", "option", " ", 
                  "\"\<FindRootOptions\>\"", " ", "in", " ", 
                  "updateCoeffs"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out1", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Unprotect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"SetOptions", "[", 
                RowBox[{"FindRoot", ",", 
                 RowBox[{"Last", "@", "#"}]}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{
                "change", " ", "default", " ", "option", " ", "in", " ", 
                 "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"test", ":", " ", 
                  RowBox[{
                  "if", " ", "option", " ", "has", " ", "a", " ", "default", 
                   " ", "in", " ", "\"\<FindRootOptions\>\""}]}], ",", " ", 
                 RowBox[{
                 "FindRoot", " ", "option", " ", "does", " ", "not", " ", 
                  "override", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"withFindRootOptionDefault", ",", 
                    RowBox[{"First", "@", 
                    RowBox[{"First", "@", 
                    RowBox[{"Last", "@", "#"}]}]}]}], "]"}], ",", 
                  RowBox[{"Not", "@", 
                   RowBox[{"TrueQ", "@", "out2"}]}], ",", "out2"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "FindRoot", "]"}], "=", 
                "oldFindRootOpts"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Protect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"out1", ",", "out2"}], "}"}]}], "\[IndentingNewLine]",
               "}"}], "&"}], "/@", "optsFindRoot"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "pass", " ", "interval", " ", "as", " ", "initial", " ", "guess", 
             " ", "works"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"test", ":", " ", 
             RowBox[{
             "pass", " ", "interval", " ", "interval", " ", "and", " ", 
              "initial", " ", "guess", " ", "works"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
             "]"}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "approximate", " ", "or", " ", "exact", " ", 
          "numbers"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4.", "}"}]}], "|>"}]}]}], "]"}], "]"}], "==", 
            
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1.", ",", "8."}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4.", ",", "1.", ",", "8."}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "bond", " ", "coefficients"}], "**********)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffsBond", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "12"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "newParameters", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newBondParams", "=", 
        RowBox[{"{", 
         RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "0.1", "+", "FernandoDuarte`LongRunRisk`Model`Parameters`psi"}], "/.", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}]}], ")"}]}], "}"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"solWcNewBondParams", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "newBondParams", ",", "optsWc"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"solBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solBond", "===", "solBondNew"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solNomBond", "===", "solNomBondNew"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "maxMaturity", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldMaxMaturity", "=", "maxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"save", " ", "to", " ", "restore", " ", "later"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solNomBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "oldMaxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "original", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "options", " ", "for", " ", "RecurrenceTable"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffs", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"updateCoeffs", " ", "matches", " ", "updateCoeffsBond"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<bond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateNomBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<nombond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
             "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
                "[", "_", "]"}], "|", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb",
                 "[", "_", "]"}]}]}], "]"}]}], "===", 
           RowBox[{"Sort", "@", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<bond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}],
               ",", 
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<nombond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
               "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"ReleaseHold", "@", 
            RowBox[{"First", "@", "m2"}]}], ",", 
           StyleBox[
            RowBox[{
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], "MessageName"]}], 
          StyleBox[" ", "MessageName"], 
          StyleBox["]", "MessageName"]}], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
              ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";", 
    RowBox[{"(*", "Do", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    
    RowBox[{"noMissingTest", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
        RowBox[{"Sort", "@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "@", 
            RowBox[{"SubValues", "@", "outTests"}]}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"noMissingTest", ",", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", 
            RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
          "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"out", "=", 
     RowBox[{"And", "@@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"Values", "@", 
          RowBox[{"SubValues", "@", "outTests"}]}]}]}], "\[IndentingNewLine]",
        "}"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Echo", "[", 
       RowBox[{"out", ",", "\"\<out\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Unprotect", "[", "$MessageList", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$MessageList", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Protect", "[", "$MessageList", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Echo", "[", 
       RowBox[{"$MessageList", ",", "\"\<message list\>\""}], "]"}], ";"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"On", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.893175497420415*^9, {3.905064965796405*^9, 3.905064972933811*^9}, {
   3.90506500917981*^9, 3.905065019806591*^9}, {3.905065058967902*^9, 
   3.905065064928623*^9}, {3.905065115629972*^9, 3.905065179323022*^9}, {
   3.905066928137994*^9, 3.905066936880246*^9}, {3.9050669814503736`*^9, 
   3.9050669959776278`*^9}, {3.9050670378268633`*^9, 3.905067046111577*^9}, {
   3.905067156013421*^9, 3.905067168867992*^9}, {3.905067223299613*^9, 
   3.905067282907559*^9}, {3.9050677650990868`*^9, 3.905067774700183*^9}, {
   3.9050685122861633`*^9, 3.905068591060135*^9}, {3.9050687844222107`*^9, 
   3.905068786082623*^9}, {3.9050688509455*^9, 3.905068851455679*^9}, {
   3.905069173014428*^9, 3.905069233326126*^9}, {3.90506931915333*^9, 
   3.905069345720421*^9}, {3.905069387810457*^9, 3.9050694232860737`*^9}, {
   3.905069630330922*^9, 3.905069665149935*^9}, {3.905069768091342*^9, 
   3.905069769130316*^9}, 3.905070098085723*^9, {3.90507453003374*^9, 
   3.9050745480678387`*^9}, {3.9050745979036016`*^9, 3.905074620548455*^9}, {
   3.905074870933104*^9, 3.905074958926791*^9}, {3.905074993102131*^9, 
   3.905075044671555*^9}, {3.905075076766088*^9, 3.905075172273251*^9}, 
   3.9050752881686773`*^9, {3.905075586304927*^9, 3.905075598837223*^9}, {
   3.905075696548112*^9, 3.905075697495349*^9}, {3.905075853427477*^9, 
   3.9050758545188293`*^9}, {3.905075895023199*^9, 3.905075897104611*^9}, {
   3.90507598082213*^9, 3.905075981760796*^9}, {3.905076115923216*^9, 
   3.905076124758299*^9}, {3.905076181618115*^9, 3.90507618257285*^9}, {
   3.905076217877694*^9, 3.905076223465703*^9}, {3.905076284617469*^9, 
   3.9050762911256638`*^9}, {3.905076434720276*^9, 3.905076445162734*^9}, {
   3.90507651858289*^9, 3.905076569165306*^9}, {3.90507694443674*^9, 
   3.905077029200659*^9}, {3.9050771023176947`*^9, 3.905077102777562*^9}, {
   3.9050772934841433`*^9, 3.9050773076712914`*^9}, {3.9050773934528847`*^9, 
   3.905077393939683*^9}, {3.905077522608235*^9, 3.905077546174322*^9}, {
   3.905077706306137*^9, 3.9050777068822308`*^9}, {3.905079817460314*^9, 
   3.905079828400318*^9}, {3.9050799639147787`*^9, 3.9050799660635242`*^9}, {
   3.905080062293583*^9, 3.9050800777398577`*^9}, 3.905080149484006*^9, {
   3.9050806759695063`*^9, 3.905080711679976*^9}, {3.905081775480446*^9, 
   3.905081833401041*^9}, 3.905082005785323*^9, {3.905096014798903*^9, 
   3.905096030063353*^9}, {3.9050962477225924`*^9, 3.905096264689839*^9}, {
   3.90509631425896*^9, 3.905096365677239*^9}, {3.905096405385466*^9, 
   3.90509641321699*^9}, {3.905096449846875*^9, 3.905096463431314*^9}, 
   3.905096501960783*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"06ab1b38-cea5-4ae6-b2d5-544ea578d153"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 1, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051371867*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"eb11da08-df80-4c06-a661-2738b231ce38"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 2, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051407373*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"52c4befb-a309-4607-9491-c678aea8463c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 3, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051443624*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4ea38346-77e1-4b30-8acf-44bf4c3d266e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 4, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051479162*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c411becd-0e6e-4b6e-88c8-5c414f147e92"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 5, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970515143223`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b81fe4b0-ee00-467a-85c9-840c46c723a1"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 6, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051549473*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2ec6803b-0964-4491-84e8-c7f469b37ca7"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 7, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051584708*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"db927d9d-68c9-45ef-a7ef-bdafea760236"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 8, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970516198673`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3e62d301-ee73-41a9-b64c-6c9bc27ee1c6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 9, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970516555862`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"39451ede-9294-4d40-ac78-d13a3809ae6f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 10, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051691866*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"51f0dc8b-638f-4945-8fc6-603785baff58"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 11, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051727696*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c6487026-ce13-4b03-baeb-e0592c5b5eab"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 12, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051763453*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"6df664fe-f30e-4fd7-95c1-50715f54769f"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 10, 13, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051801037*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9f0305a9-c3b8-4e9f-a6fa-4a2d865c4f93"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 14,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970518392*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"092d84e0-cb5a-43a5-af9d-4eccf249f444"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 15, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970518746033`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"de78cfe1-2516-4a3f-be69-3feafccdbdd7"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 16,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097051909923*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5e67602f-8960-4b60-97af-90e254717d5b"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 17, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970519764423`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"60b9aad1-bb44-475f-a77c-ed9baaab1094"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 18, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052011153*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8f177ba7-d969-4389-8658-1412a6df517d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 19, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052032804*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"75ca5957-8729-4f28-b36b-0da95c3fa7e7"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 20, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052068089*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"0239fafa-206a-4a1e-bdc6-3c360c82e5f0"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 10, 21, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052107971*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b3af5dae-afe7-4b6f-be37-d836c0b8e350"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 10, 22, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052142825*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b677c746-91ab-4e17-8d77-9de7a9167faa"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 23, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052172855*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cc3cb8f6-1473-4e87-bb38-8ff2d230b931"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 24, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970521894493`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"acf63161-6f1d-42a9-920b-3b36fa3db1b5"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 25, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052216803*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5ab927f1-0c89-4475-964d-90d270bf9002"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 26, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052251927*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"e622a66e-b1ed-493d-b361-128f424970c0"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 27, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970522871*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"02bfb879-1984-477b-b35e-8efc75d191d0"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 10, 28, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052395731*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"795b183c-d74b-4bf0-88c0-a8e81820849b"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.5569089476209456`*^-13\\\"}]\\)\"", 2, 10, 29, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052453142*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"15a6ace9-1058-4478-bf6e-fb6815d834e0"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 10, 30, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052491272*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ae09b6a3-ad7c-4621-af7c-79ca19c37c6a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 31,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052530817*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a8051d23-3d87-49e3-ad13-a580710d384f"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 32, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052566959*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"abf2c9a5-5474-4337-91a3-ff313e03bc11"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.5569089476209456`*^-13\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 33, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509705262639*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c7dfd065-adb6-4aef-bfa3-d27e19faa6f9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 34, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052665683*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"e3830cb2-002e-4195-b791-9ffe83bd9b08"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 35,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097052701132*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"449056c2-f7bb-4573-b939-d7a6cd4384e6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 36, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053100115*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a378c6bf-45da-4c39-82b7-424ff7b7c084"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 37, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053135395*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"602f4d02-4cd4-45de-bf90-313ffd41eb4a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 38, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509705317139*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"904c7ea9-8978-4a38-bcec-75074f927e7c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 39, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053207314*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d4908b94-8a5d-48e0-a72b-83eeaea816b6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 40, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053243039*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"588f383a-d0bf-4b94-bd34-b72912fb22ab"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 41, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053279045*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d7aabade-404e-4d3a-aa8f-809294b68be4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 42, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053315422*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"0209bc56-c5c4-42db-b84d-eaeaf08228b6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 43, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970533515053`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"7e67c30d-d2a5-4471-ba24-f97a7c53c701"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 44, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053387576*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"76c82d6f-b33b-4892-8160-b14817bbd2a4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 45, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970534235477`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"e37e54c2-756f-4022-8451-68e48e8bd0ff"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 46, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970534594*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4f2a8c9e-405f-4c84-82ec-826fc59cf72b"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 47, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970534964943`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"65ac1e23-e523-4dc4-b1c4-9d8037f54b4b"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 10, 48, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053535371*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"54fa806b-0014-452e-a73a-119c4f716e89"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 49,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053574234*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"0d225fb9-6d6d-4a24-a12f-892133c9bbdb"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 50, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053610331*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"53a63c6e-cb50-44b8-9184-1ec0c210a855"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 51,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053646649*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"20d99db8-fddc-4afa-8b59-46eb71788471"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 52, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053715722*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"71d5c480-23fb-434c-9e94-56a22a6f9352"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 53, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053751347*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a6c8a63b-93de-4cd9-9f15-223955ee5888"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 54, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053773755*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2506cb94-bec3-46b4-b589-a0ab19238fb8"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 55, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053810451*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"264fd653-8ecc-411a-ab73-a9b46178efb1"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 10, 56, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053851589*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"31e1b298-2d78-4dca-8861-3fb457e3a159"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 10, 57, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053888069*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c65f06c0-d1e4-45aa-9134-4c20b9054565"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 58, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970538996964`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2aea6de3-7d8b-4a05-8031-d4901e5f313f"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 59, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970539151077`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"087fa073-06ef-4d54-bd57-6ff8e83fd7b8"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 60, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053943336*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b3b5917e-d02a-419a-b3ee-b2bb61e54f05"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 61, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097053979954*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"17fe2c77-1f89-435e-9e15-13ce03583dfa"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 62, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054016272*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5c106730-3849-496d-8276-c92f64104866"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 10, 63, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054127846*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9521eaf3-65d9-4e39-9fce-e1ad8866455d"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.4890825068561554`*^-13\\\"}]\\)\"", 2, 10, 64, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054187331*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"632358fb-4178-4562-9936-7bdd52b41e43"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 10, 65, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970542268267`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"17550b8f-1b9d-4ea3-ba99-0dd3436c8390"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 66,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054267836*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2425d304-0d8c-4fc8-969b-183b2a1af004"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 67, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054303776*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b62e2b72-468d-42d8-991d-38fcc7fe7820"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.4890825068561554`*^-13\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 68, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970543638287`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"42a088c4-39aa-4af5-b891-db96f531797f"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 69, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509705440355*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"dcf2b015-da8f-49f2-b351-750901853a21"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 70,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097054439764*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ee7e336a-9c09-4435-aebf-374cad021bf2"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 71, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970578397207`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"379216d4-2a7c-40ba-8512-965f1d4c7e5a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 72, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097058058021*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"7915f9b9-6a1c-4fc5-8166-0cdb3261fa9c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 73, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097058273171*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9aab2b35-401c-4836-a4b2-67a14b5ff537"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 74, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097058488851*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2aa58009-9594-4a66-8395-ef7b4b3c67c9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 75, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970587037907`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d8fa15e3-3cd6-44ab-a9df-cebd83b90159"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 76, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097058918735*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a7ac879b-5dc7-4eb2-87ca-7741b9f8503d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 77, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097059133614*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cdc0cfd7-ce77-429c-871c-6ecbd473da7d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 78, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970593484707`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"694fbc94-014c-4189-979c-d4d221bbcc3f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 79, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509705956354*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9aeb2b42-6a06-4eaf-aacd-607872c2addd"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 80, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097059779861*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f63c9372-d57d-4be8-ab7b-c2debd576e49"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 81, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097059996977*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"72116f74-a107-4f83-a0a0-8f183a23e8c3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 82, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097060212595*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"bda66598-d6ac-45e0-9d38-b38db2163df4"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 10, 83, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097060450902*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5e9270ec-dd29-4fbc-a761-7be6b159030e"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 84,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097060687763*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ea677468-0885-4a40-9fde-bb2010898271"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 85, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097060902364*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"1229e23a-7929-454d-ab41-fa264e036426"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 86,
    24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970611169767`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"eb394eec-1606-45fa-8142-62bf506d59f7"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 10, 87, 24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970617327433`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d9772463-c2a2-41d9-ada4-4e9977fbc178"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 88, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097062213338*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8f9034a5-c77b-4087-88b9-6ae59fb714d1"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 89, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097062429636*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"90824941-1c80-460f-834a-2ad243c12f1b"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 90, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097062555757*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c22c3801-8094-41d6-9abc-1aa8cca45005"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 91, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097062770946*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"dc0e1d5e-912a-4bc4-90e5-e4679d36f1f0"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 10, 92, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509706303069*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ec0268ef-a83f-4b71-9e1c-2c50b6f900a6"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 10, 93, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970632450323`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"bd4aa731-e9ca-4a22-9ff7-37c990e9772f"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 94, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097063257498*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3590ef71-fe49-4c72-9220-40996906dac6"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 95, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097063269474*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"04a0ec50-45fe-41c4-9b9b-0b15e353d574"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 96, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970634798393`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"492bef9b-3a03-40d8-add8-b8b47590168f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 97, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097063695632*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"1ef38237-fc10-4daa-a4c3-5152ddb1acdd"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 98, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970639109907`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ed08f63d-82ca-4619-a9df-e3c731ef1730"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 10, 99, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097064869183*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"45a242ae-75f9-4ab3-bc7b-bf91bc2be1fc"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.1898485160071426`*^-13\\\"}]\\)\"", 2, 10, 100, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970652263317`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d00b72d6-f7df-479c-a83e-66cff59a0f86"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 10, 101, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097065450055*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2aabedc1-95b9-4d85-8876-6e18e932aba9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 
   102, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097065705412*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"50abd655-7d22-4324-92e5-1c0a5dbab072"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 103, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097065920701*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"629218a0-96e3-4003-a4fe-e42d745096d8"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.1898485160071426`*^-13\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 104, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097066277418*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"61737719-b572-4fc4-9863-f3fccdf2dd08"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 105, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097066501712*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"02c1e401-f5ae-4f17-86cd-5943445a3310"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 
   106, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970667170057`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"16a9e230-0600-42a2-ba13-c03436332995"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 107, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509706768221*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"344b8ed9-b81b-49e8-8c4e-2aa0acc02ef3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 108, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970678881207`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"66fc4b79-ce91-4bba-8386-7bac96d039d5"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 109, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970680936832`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"38530f85-3753-4217-9227-19d8e3d006c0"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 110, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097068301861*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"01def0cf-7ea0-4512-bd98-ecc63a7775a3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 111, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970685074577`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5f7f678f-bf0d-4c57-a9e9-1315f009165d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 112, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970687132463`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2f2bd9bb-433f-4990-a409-ac720644469a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 113, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097068918569*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ebbada10-38a1-4b5e-87a3-22bf125b141a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 114, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970691249638`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5af1fbe1-39a1-4751-b7d8-27910576bad1"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 115, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097069330699*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"65ede040-466d-4c04-a716-90d06e04d245"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 116, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970695358353`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"29c21b7b-fb14-4b40-b34e-a320f81fa7a9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 117, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097069741208*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f0f43b93-833b-4c7c-b309-4d0a5b675060"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 118, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970699470787`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5fc03070-b1c8-42bb-87cc-448edf8cd8cf"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 10, 119, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970701609087`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"013d4336-c2ff-404d-9af0-82359f52f86d"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 
   120, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509707037705*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ead92b11-0123-47fc-8e31-fa071020be24"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 121, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970705844088`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"6ce6401f-13e1-42f0-942e-32a231b4ff51"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 
   122, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970707915697`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a42d1f00-f355-4609-9d93-442e31bf8e4a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 123, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097071032867*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9cbd2731-94d7-4dd4-8ca7-723f964133ad"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 124, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097071222921*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f0dc7254-41bb-4094-8765-4839219454e4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 125, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970712408447`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4137511f-b1d4-4b89-8954-a1bc1b0a03f6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 126, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970714495173`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b4d3a2f8-df3c-43c9-8371-a6fe4fb7a412"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 127, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097071656842*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3f091377-95b2-4782-a30a-e28a2b6a593a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 128, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970718482113`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4a34d121-67a2-4800-9751-0230d6543bc7"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 129, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097072039405*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9f0d3704-6fb3-4403-8799-c109f7d22d4f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 130, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970722470903`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cf426065-b59a-4710-bda3-422d9bdd3d6c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 131, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097072440242*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"b69d6684-4915-47f6-a544-f2d0a07f7c71"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 132, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097072645508*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"0e2b946c-0550-406c-b548-7eb3b6b582f7"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 133, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097072663802*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3613434c-c340-4ffd-ade0-3b53b322d592"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 134, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970726815968`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"836c9e5d-2f0f-433c-aeeb-3b76568127d8"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 135, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509707288934*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"62e22c9c-2d87-4b77-a27e-a80005490e2f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 136, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970729067373`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f23b1d6c-be73-4504-a476-d540034745b3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 137, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073112632*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"725da978-274e-440d-8c23-25fde93b2917"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 10, 138, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970733311243`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ebbe048b-efe7-45e0-af15-6c548d12d51d"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 10, 139, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073539445*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8b306365-4017-40ee-9d3b-94ccae632e5c"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 140, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073551263*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8f81da5d-5cd3-462b-82e6-47b34440f17d"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 141, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073565609*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2706a088-3db1-4694-9a1c-2b2ae4afe1b5"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 142, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073764718*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cbdabaef-11b3-4d61-b0c8-33926b9006f0"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 143, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097073970829*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8f9d0503-e02f-414e-829f-cca17e0eac9b"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 144, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097074176567*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"48779899-76a2-44ae-9e13-e61fb1910afc"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 145, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097074412566*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"7166f034-870b-4711-896f-4e389e55b552"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 146, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970746374693`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"1d375234-3922-4475-9471-5e2fe29e668f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 10, 147, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097074844132*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d1cdf713-2e82-4553-83cb-310c3a44dd6a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 10, 148, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097075274012*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"923d8dcb-c2c6-4bd5-8d39-c8c53317b7d3"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.8764093488563845`*^-12\\\"}]\\)\"", 2, 10, 149, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509707565419*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c680e605-a86b-43cc-ad76-a5570fddd14a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 10, 150, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097075887534*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a88e688f-945f-41eb-9ba4-44838b209520"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 
   151, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097076110654*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f1b226e2-6b81-41a8-8df7-f645104bf4a5"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 152, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970763172626`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"508c52ec-f610-4eb9-91fe-32ba83f46541"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.8764093488563845`*^-12\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 153, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097076699915*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"64da5ba7-3028-4618-9fad-6ef8a37dff40"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 154, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097076934268*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"06900801-5800-4768-a469-7ea474a89518"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 
   155, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097077141706*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"182d08ac-121a-4ae4-964e-6cb1c9ecc73d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 156, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097078336565*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5750eda1-5c1e-49ee-bd0f-02ac26628f7d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 157, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509707846484*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"05d5a1ce-26f0-4159-9a77-4cd033556a22"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 158, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097078595408*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cc48066a-cb0a-4301-8161-dae0911d4774"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 159, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970787240973`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"05f774de-81c4-4143-b16f-060dc3e4d5c5"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 160, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970788525667`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"e0d89331-73c8-4331-837e-51326738f3ff"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 161, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097078981394*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"d6f0aa3c-55f8-480e-9dc1-a1f4be43f270"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 162, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970791103897`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"03b6a457-ace5-4e11-8f2e-de5203f68fd3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 163, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097079238179*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f7fd8909-b81b-4e4b-8a3c-8aa36cd42183"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 164, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097079367045*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"e212920a-342c-4cfe-859d-c7f29796f8c4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 10, 165, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970794961147`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3ab5e07f-5afc-45d9-97d0-adf265b28ef8"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 166, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509707962461*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"c18e706f-b852-4be5-8e0c-9437b0feacaa"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 167, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970797535667`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"476a91a8-8736-45c9-bfdb-cd2f3f524cb0"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 10, 168, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097079891098*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"561698d8-a26b-4797-958e-20f407a6445b"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 
   169, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080028603*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2618fd97-4cf1-4589-8115-58702c186114"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 170, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080158759*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3db50885-b13a-40af-9ace-c9c4c958033c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 
   171, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080288968*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2030e5f2-c321-4ad2-a4b0-5a7ffc7b53d3"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 10, 172, 24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080467127*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"089784a8-71a2-4711-9048-b0dc10331ccb"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 10, 173, 24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080595221*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8ca3f159-cece-4547-b9f3-4d4d8aa369b9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 10, 174, 24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509708072467*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"199d634b-f3b3-45e9-adbe-6db5e63773f2"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 175, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097080921398*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"003bad91-aa5a-4a5f-b04e-682484d781f2"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 176, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081049638*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"1b2aa5a7-4afb-4f2f-92fe-d6ac217df10a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 177, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081100109*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3854c2dc-8bed-45e5-bfaa-db1ec3523487"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 178, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970812279654`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f77bed14-c9d2-473e-814c-d4734551f3d1"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 10, 179, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081374617*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9251859c-3fb7-4841-b549-f1539fe3ba98"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 10, 180, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081504395*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"0948bdeb-b6d7-45ec-9f43-f40d61109dbd"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 181, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081516851*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ae14c1b4-f1f4-460a-b764-9f9e91c214c9"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 10, 182, 
   24966292190088580245, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.9050970815246153`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"326e0c05-88da-4b33-a92f-0271741724c4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 183, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081652684*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cc9aaf50-6589-4508-9805-47e6e263cbbb"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 184, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081781685*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"5cbf2caa-faea-41f5-a7be-805514088064"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 10, 185, 24966292190088580245, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097081913952*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"f89239ea-4f2a-46e5-bb23-1db9b97156d4"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 10, 186, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097082432549*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a3c7504a-00b1-4c7c-8ea5-543e9dc0803f"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.6632349341506793`*^-14\\\"}]\\)\"", 2, 10, 187, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.90509708276803*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4d676fd0-5a92-4117-82af-b9a014d6ca2a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 10, 188, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097082902342*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"20767b55-810b-4257-a9d2-30cbd3c3178e"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 10, 
   189, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097083054844*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"cc9105eb-2f58-45a2-b0ba-424d12f00992"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 190, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097083185585*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"3aac5c95-27ac-422b-bfb7-2566f877a3d8"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.6632349341506793`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 191, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097083516087*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"742654ba-5c11-4f69-8311-424332f3c040"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 10, 192, 
   24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097083650816*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4a025f8c-f5a3-4843-9fe7-229dc3abb81c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 10, 
   193, 24966292190088580245, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905096568155838*^9, 3.905097083780861*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"4333ee55-4179-4045-a6f6-bb362e910308"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"SolveEulerEq_20230930-OSUXTN\"\>"}],
  SequenceForm["Adding test: ", "SolveEulerEq_20230930-OSUXTN"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905096600899728*^9, 3.90509708379944*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"de40b787-725b-431f-815f-9a1a0269145f"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.905096600899728*^9, 3.905097083824381*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"8d310a30-76b4-4e40-944c-431d74b593cc"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Off[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol};\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[\n\t\tAnd,\n\
\t\t{\n\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\
\tSameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\tComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t]\n\t\t\t}\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\
Apply[And,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t}\n\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`opts[[1;;4]]\
\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{2}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
{2}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\
\n\t\tComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint \
= Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m4 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model, \"UpdatePd\" -> True, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = Options \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\
\tSetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t{\"initialGuess\" \
-> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t{\"PrintResidualsNorm\" \
-> True}\n\t\t};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\tReap[\n\t\t\t\t\
\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t$MessageList\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`optsBad\n\
\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\"FindRootOptions\" \
-> {MaxIterations -> 1},\n\t\t\t\"FindRootOptions\" -> {AccuracyGoal -> 2}\n\t\
\t};\n\t\tComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ \
FindRoot;\n\t\tComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\
],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t]\n\
\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
]\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 12;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t],\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond[\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\
SameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\
],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tSort[\n\t\t\t\t\t\tFilterRules[\n\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[\n\t\tAnd,\n\t\t{\n\t\t\t\
Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, \
Values @ SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\
\tOn[General::stop];\n\tComputationalEngine`SolveEulerEq`out", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tOff[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol};\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[\n\t\tAnd,\n\
\t\t{\n\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\
\tSameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\tComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t]\n\t\t\t}\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\
Apply[And,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t}\n\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`opts[[1;;4]]\
\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{2}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
{2}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\
\n\t\tComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint \
= Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m4 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model, \"UpdatePd\" -> True, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = Options \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\
\tSetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t{\"initialGuess\" \
-> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t{\"PrintResidualsNorm\" \
-> True}\n\t\t};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\tReap[\n\t\t\t\t\
\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t$MessageList\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`optsBad\n\
\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\"FindRootOptions\" \
-> {MaxIterations -> 1},\n\t\t\t\"FindRootOptions\" -> {AccuracyGoal -> 2}\n\t\
\t};\n\t\tComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ \
FindRoot;\n\t\tComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\
],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t]\n\
\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
]\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 12;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t],\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond[\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\
SameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\
],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tSort[\n\t\t\t\t\t\tFilterRules[\n\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[\n\t\tAnd,\n\t\t{\n\t\t\t\
Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, \
Values @ SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\
\tOn[General::stop];\n\tComputationalEngine`SolveEulerEq`out\n\t,\n\tTrue\n\t\
,\n\t{HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 2.5569089476209456*^-13]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.5569089476209456*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 2.4890825068561554*^-13]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.4890825068561554*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.1898485160071426*^-13]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.1898485160071426*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 3.8764093488563845*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 3.8764093488563845*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.6632349341506793*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.6632349341506793*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]]}\n\t,\n\
\tTestID->\"SolveEulerEq_20230930-OSUXTN\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> False, "FailureType" -> "MessageFailure", 
   "OutputLog" -> {}, "Messages" -> {
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "`1` is not a known option for `2`.", 
     "`1` is not a known option for `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "`1` is not a known option for `2`.", 
     "`1` is not a known option for `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than `1` digits of working \
precision to meet these tolerances.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "`1` is not a known option for `2`.", 
     "`1` is not a known option for `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "`1` is not a known option for `2`.", 
     "`1` is not a known option for `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than `1` digits of working \
precision to meet these tolerances.", 
     "The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than `1` digits of working \
precision to meet these tolerances.", 
     "The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than `1` digits of working \
precision to meet these tolerances.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "`1` is not a known option for `2`.", 
     "`1` is not a known option for `2`.", 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     MessageName[FindRoot, "cvmit"], 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`."}, 
   "MessagesText" -> {
    "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                              -14\n\
checks::norm : The norm of the residuals (errors) is 3.1135 10", 
     "                                                                    -14 \
                                                   -16\nchecks::largeresid : \
The norm of the residuals (errors) is 3.1135 10   , which is larger than the \
specified tolerance 1. 10   .", 
     "                                                                    -14\
\nchecks::smallresid : The norm of the residuals (errors) is 3.1135 10   , \
which is smaller than the specified tolerance 1.", 
     "                                                                    -14 \
                                                   -20\nchecks::largeresid : \
The norm of the residuals (errors) is 3.1135 10   , which is larger than the \
specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                              -14\n\
checks::norm : The norm of the residuals (errors) is 3.1135 10", 
     "                                                              -14\n\
checks::norm : The norm of the residuals (errors) is 3.1135 10", 
     "SetOptions::optnf : MaxIterations is not a known option for \
updateCoeffs.", 
     "SetOptions::optnf : PrecisionGoal is not a known option for \
updateCoeffs.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                              -14\n\
checks::norm : The norm of the residuals (errors) is 3.1135 10", 
     "                                                               -13\n\
checks::norm : The norm of the residuals (errors) is 2.55691 10", 
     "                                                              -14\n\
checks::norm : The norm of the residuals (errors) is 3.1135 10", 
     "                                                                    -14 \
                                                   -16\nchecks::largeresid : \
The norm of the residuals (errors) is 3.1135 10   , which is larger than the \
specified tolerance 1. 10   .", 
     "                                                                    -14\
\nchecks::smallresid : The norm of the residuals (errors) is 3.1135 10   , \
which is smaller than the specified tolerance 1.", 
     "                                                                     \
-13\nchecks::smallresid : The norm of the residuals (errors) is 2.55691 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                    -14\
\nchecks::smallresid : The norm of the residuals (errors) is 3.1135 10   , \
which is smaller than the specified tolerance 1.", 
     "                                                                    -14 \
                                                   -20\nchecks::largeresid : \
The norm of the residuals (errors) is 3.1135 10   , which is larger than the \
specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 4.38391 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "SetOptions::optnf : MaxIterations is not a known option for \
updateCoeffs.", 
     "SetOptions::optnf : PrecisionGoal is not a known option for \
updateCoeffs.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "                                                               -13\n\
checks::norm : The norm of the residuals (errors) is 2.48908 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 4.38391 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-13\nchecks::smallresid : The norm of the residuals (errors) is 2.48908 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 4.38391 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.31514 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 2.31514 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.31514 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 2.31514 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::lstol : The line search decreased the step size to within \
tolerance specified by AccuracyGoal and PrecisionGoal but was unable to find \
a sufficient decrease in the merit function. You may need more than \
MachinePrecision digits of working precision to meet these tolerances.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.31514 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.31514 10", 
     "SetOptions::optnf : MaxIterations is not a known option for \
updateCoeffs.", 
     "SetOptions::optnf : PrecisionGoal is not a known option for \
updateCoeffs.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.31514 10", 
     "                                                               -13\n\
checks::norm : The norm of the residuals (errors) is 2.18985 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.31514 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 2.31514 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.31514 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-13\nchecks::smallresid : The norm of the residuals (errors) is 2.18985 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.31514 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 2.31514 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "                                                                     \
-12                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-12\nchecks::smallresid : The norm of the residuals (errors) is 1.13832 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-12                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "SetOptions::optnf : MaxIterations is not a known option for \
updateCoeffs.", 
     "SetOptions::optnf : PrecisionGoal is not a known option for \
updateCoeffs.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations.", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 3.87641 10", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "                                                                     \
-12                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-12\nchecks::smallresid : The norm of the residuals (errors) is 1.13832 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-12\nchecks::smallresid : The norm of the residuals (errors) is 3.87641 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-12\nchecks::smallresid : The norm of the residuals (errors) is 1.13832 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-12                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 3 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.79918 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 2.79918 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.79918 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 2.79918 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::lstol : The line search decreased the step size to within \
tolerance specified by AccuracyGoal and PrecisionGoal but was unable to find \
a sufficient decrease in the merit function. You may need more than \
MachinePrecision digits of working precision to meet these tolerances.", 
     "FindRoot::lstol : The line search decreased the step size to within \
tolerance specified by AccuracyGoal and PrecisionGoal but was unable to find \
a sufficient decrease in the merit function. You may need more than \
MachinePrecision digits of working precision to meet these tolerances.", 
     "FindRoot::lstol : The line search decreased the step size to within \
tolerance specified by AccuracyGoal and PrecisionGoal but was unable to find \
a sufficient decrease in the merit function. You may need more than \
MachinePrecision digits of working precision to meet these tolerances.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.79918 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.79918 10", 
     "SetOptions::optnf : MaxIterations is not a known option for \
updateCoeffs.", 
     "SetOptions::optnf : PrecisionGoal is not a known option for \
updateCoeffs.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 1 iterations.", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.79918 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.66323 10", 
     "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 2.79918 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 2.79918 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.79918 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.66323 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 2.79918 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 2.79918 10   , \
which is larger than the specified tolerance 1. 10   ."}, 
   "MessagesExpressions" -> {
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[MaxIterations], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[PrecisionGoal], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.5569089476209456`*^-13]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[MaxIterations], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[PrecisionGoal], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.4890825068561554`*^-13]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "lstol"], 
       HoldForm[MachinePrecision]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[MaxIterations], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[PrecisionGoal], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.1898485160071426`*^-13]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[MaxIterations], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[PrecisionGoal], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.8764093488563845`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[3]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "lstol"], 
       HoldForm[MachinePrecision]]], 
     Hold[
      Message[
       MessageName[FindRoot, "lstol"], 
       HoldForm[MachinePrecision]]], 
     Hold[
      Message[
       MessageName[FindRoot, "lstol"], 
       HoldForm[MachinePrecision]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[MaxIterations], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[SetOptions, "optnf"], 
       HoldForm[PrecisionGoal], 
       HoldForm[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[1]]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.6632349341506793`*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}, "Timing" -> 33.073,
    "AbsoluteTiming" -> 33.053, "InputString" :> ToString[
     Unevaluated[Off[
        MessageName[General, "stop"]]; 
      Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`"]; \
$ContextPath = DeleteDuplicates[
         Prepend[$ContextPath, 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`"]]; Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      ComputationalEngine`SolveEulerEq`msp = 
       FernandoDuarte`LongRunRisk`Models; 
      ComputationalEngine`SolveEulerEq`modBY = 
       ComputationalEngine`SolveEulerEq`msp["BY"]; 
      ComputationalEngine`SolveEulerEq`modBKY = 
       ComputationalEngine`SolveEulerEq`msp["BKY"]; 
      ComputationalEngine`SolveEulerEq`modNRC = 
       ComputationalEngine`SolveEulerEq`msp["NRC"]; 
      ComputationalEngine`SolveEulerEq`modDES = 
       ComputationalEngine`SolveEulerEq`msp["DES"]; 
      ComputationalEngine`SolveEulerEq`modNRCStochVol = 
       ComputationalEngine`SolveEulerEq`msp["NRCStochVol"]; 
      ComputationalEngine`SolveEulerEq`mods = {
        ComputationalEngine`SolveEulerEq`modBY, 
         ComputationalEngine`SolveEulerEq`modBKY, 
         ComputationalEngine`SolveEulerEq`modNRC, 
         ComputationalEngine`SolveEulerEq`modDES, 
         ComputationalEngine`SolveEulerEq`modNRCStochVol}; 
      ComputationalEngine`SolveEulerEq`coeffsQ[
         Pattern[ComputationalEngine`SolveEulerEq`sol, 
          Blank[]], 
         Pattern[ComputationalEngine`SolveEulerEq`coeffName, 
          Blank[]], 
         Pattern[ComputationalEngine`SolveEulerEq`numStateVars, 
          Blank[]], 
         Optional[
          Pattern[ComputationalEngine`SolveEulerEq`numAssets, 
           Blank[]], 0], 
         Optional[
          Pattern[ComputationalEngine`SolveEulerEq`bond, 
           Blank[]], 0]] := Apply[And, {
          If[ComputationalEngine`SolveEulerEq`numAssets == 0, Sort[
             Cases[
              Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
              ComputationalEngine`SolveEulerEq`coeffName[
                Pattern[ComputationalEngine`SolveEulerEq`i, 
                 Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`i]] === 
           Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1, 
           Sort[
             
             Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - 
               ComputationalEngine`SolveEulerEq`bond, 
               Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 
               1}]] == Sort[
             Cases[
              Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
              ComputationalEngine`SolveEulerEq`coeffName[
                Pattern[ComputationalEngine`SolveEulerEq`i, 
                 Blank[Integer]]][
                Pattern[ComputationalEngine`SolveEulerEq`j, 
                 Blank[Integer]]] :> {
               ComputationalEngine`SolveEulerEq`i, 
                ComputationalEngine`SolveEulerEq`j}]]], 
          Apply[And, 
           Map[MatchQ[#, ComputationalEngine`SolveEulerEq`coeffName]& , 
            Cases[
             Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
             Pattern[ComputationalEngine`SolveEulerEq`var, 
               Blank[]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]][
               Pattern[ComputationalEngine`SolveEulerEq`j, 
                Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`var]]], 
          Apply[And, 
           Map[MatchQ[#, 
             StringDrop[
              ToString[ComputationalEngine`SolveEulerEq`coeffName], -1]]& , 
            Cases[
             Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
             Pattern[ComputationalEngine`SolveEulerEq`var, 
               Blank[]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]][
               Pattern[ComputationalEngine`SolveEulerEq`j, 
                Blank[Integer]]] :> 
             Context[ComputationalEngine`SolveEulerEq`var]]]], 
          Apply[And, 
           Map[NumberQ, 
            Map[Values, ComputationalEngine`SolveEulerEq`sol]]]}]; 
      ComputationalEngine`SolveEulerEq`opts = {{
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>}, {
         "PrintResidualsNorm" -> False}, {"MaxIterations" -> 1}, {
         "FindRootOptions" -> {"MaxIterations" -> 1}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}}; 
      ComputationalEngine`SolveEulerEq`optsRepeated = {{
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {"MaxIterations" -> 5}}, {
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
           "FindRootOptions" -> {
            "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision}}; {
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
           "FindRootOptions" -> {
            "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision}, 
           WorkingPrecision -> $MachinePrecision}}; 
      ComputationalEngine`SolveEulerEq`optsMany = Join[
         Part[ComputationalEngine`SolveEulerEq`opts, 
          Span[5, -1]], ComputationalEngine`SolveEulerEq`optsRepeated]; 
      Do[ComputationalEngine`SolveEulerEq`ind = 0; 
        ComputationalEngine`SolveEulerEq`numStateVars = Length[
           ComputationalEngine`SolveEulerEq`model["stateVars"][
           ComputationalEngine`SolveEulerEq`t]]; 
        ComputationalEngine`SolveEulerEq`numStocks = 
         ComputationalEngine`SolveEulerEq`model["numStocks"]; 
        ComputationalEngine`SolveEulerEq`coeffsQWc[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, 
           ComputationalEngine`SolveEulerEq`numStateVars]; 
        ComputationalEngine`SolveEulerEq`coeffsQPd[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd],
            ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`numStocks]; 
        ComputationalEngine`SolveEulerEq`coeffsQBond[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]], 
           Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb], 
           ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
        ComputationalEngine`SolveEulerEq`coeffsQNomBond[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]], 
           Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb],
            ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
        ComputationalEngine`SolveEulerEq`updateCoeffs = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs; 
        ComputationalEngine`SolveEulerEq`updateCoeffsSol = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol; 
        ComputationalEngine`SolveEulerEq`updateCoeffsWc = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc; 
        ComputationalEngine`SolveEulerEq`updateCoeffsPd = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd; 
        ComputationalEngine`SolveEulerEq`updateCoeffsBond = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond; 
        ComputationalEngine`SolveEulerEq`newParameters = {
          ComputationalEngine`SolveEulerEq`delta -> 0.99}; 
        ComputationalEngine`SolveEulerEq`guessCoeffsSolution = {
          ComputationalEngine`SolveEulerEq`A[0] -> 4.6}; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, {}, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, {}, {}, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, {}, {}], 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, {}, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, {}], 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, 
              ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, 
              ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, 
              ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`newParameters, 
              ComputationalEngine`SolveEulerEq`guessCoeffsSolution]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Quiet[
           Apply[And, 
            Flatten[{
              Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
               Map[{
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                 ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, {}, {}, 
                  Sequence[#]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, {}, {}, 
                  Apply[Sequence, #]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, {}, #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Sequence[{}], #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Apply[Sequence, {}], #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Sequence[#]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Apply[Sequence, #]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Most[#], 
                  Last[#]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Sequence[
                   Most[#]], 
                  Last[#]]}& , 
                Part[ComputationalEngine`SolveEulerEq`opts, 
                 Span[1, 4]]], {2}], 
              Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
               Map[{
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                 ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  First[#], 
                  Rest[#]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  First[#], 
                  Sequence[
                   Rest[#]]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Sequence[
                   First[#], 
                   Rest[#]]], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  Most[#], {
                   Last[#]}], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, {
                   First[#]}, 
                  Rest[#]]}& , ComputationalEngine`SolveEulerEq`optsMany], {
               2}]}]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`optsWc = {"MaxIterations" -> 100}; 
        ComputationalEngine`SolveEulerEq`solWc = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`solWc == 
          ComputationalEngine`SolveEulerEq`updateCoeffsSol[
           ComputationalEngine`SolveEulerEq`model, {}, {}, 
            ComputationalEngine`SolveEulerEq`optsWc] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsWc[
            ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
            ComputationalEngine`SolveEulerEq`model["params"], {}, 
            ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`solWc1 = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
           "initialGuess" -> <|"Ewc" -> {3}|>]; 
        ComputationalEngine`SolveEulerEq`solWc2 = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
           "initialGuess" -> <|"Ewc" -> {1}|>]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
            ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
            ComputationalEngine`SolveEulerEq`solWc2]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`solWc1 = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           "FindRootOptions" -> {"MaxIterations" -> 1}, 
           "initialGuess" -> <|"Ewc" -> {3}|>]; 
        ComputationalEngine`SolveEulerEq`solWc2 = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           "FindRootOptions" -> {"MaxIterations" -> 1}, 
           "initialGuess" -> <|"Ewc" -> {1}|>]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
            ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
            FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
            ComputationalEngine`SolveEulerEq`solWc2]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`m1 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m2 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 3, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m3 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m4 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 3}, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m1]] == {{1}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m4]] == {{3}}}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`m1 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 3, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m2 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, "MaxIterations" -> 
                3, "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m3 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "FindRootOptions" -> {"MaxIterations" -> 3}, 
                "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m4 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 3}, "MaxIterations" -> 
                1, "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m1]] == {{3}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, ReleaseHold[
              Last[ComputationalEngine`SolveEulerEq`m4]] == {{1}}}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`m1 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "PrintResidualsNorm" -> 
                False]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m2 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "PrintResidualsNorm" -> 
                True]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         First[ComputationalEngine`SolveEulerEq`m2] == {
            HoldForm[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]}; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = NumberQ[
           ReleaseHold[
            First[
             Flatten[
              Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
               False], 
              Abort[], 
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
              True], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
               True, "Tol" -> 1], 
              Abort[], 
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> True,
               "Tol" -> 10.^(-20)], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`Ewc0 = 4.6; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQWc[
           ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
              "Epd" -> {{5.5}}|>]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`coeffsWcPd = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> True, 
           "initialGuess" -> <|
            "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
             "Epd" -> {{5.5}}|>]; 
        ComputationalEngine`SolveEulerEq`coeffsWc = 
         FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
            Blank[Integer]]]; 
        ComputationalEngine`SolveEulerEq`coeffsPd = 
         FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
            Blank[Integer]]]; ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQWc[
          ComputationalEngine`SolveEulerEq`coeffsWc]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQPd[
          ComputationalEngine`SolveEulerEq`coeffsPd]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}|>] == 
          ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
              "Epd" -> {{5.5}}|>]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            SubsetQ[
             Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
             Options[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]], 
            SubsetQ[
             Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
             Options[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`oldOptions = 
         Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
        ComputationalEngine`SolveEulerEq`oldOptionsSol = 
         Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]; 
        ComputationalEngine`SolveEulerEq`oldOptionsWc = 
         Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc]; ComputationalEngine`SolveEulerEq`ig = 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsSol[
           ComputationalEngine`SolveEulerEq`model, {}, {}, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsWc[
            ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
            ComputationalEngine`SolveEulerEq`model["parameters"], {}, "Ewc0" -> 
            ComputationalEngine`SolveEulerEq`ig]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        SetOptions[
         ComputationalEngine`SolveEulerEq`updateCoeffs, 
          "initialGuess" -> <|
           "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
          ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
         ComputationalEngine`SolveEulerEq`oldOptions; 
        SetOptions[
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol, 
          "initialGuess" -> <|
           "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`updateCoeffsSol[
           ComputationalEngine`SolveEulerEq`model, {}, {}] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsSol[
           ComputationalEngine`SolveEulerEq`model, {}, {}, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
          ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Not[
           TrueQ[
           ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, {}, {}, MaxIterations -> 
              1] == ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, MaxIterations -> 1]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol; 
        SetOptions[
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc, "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`updateCoeffsWc[
            ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
            ComputationalEngine`SolveEulerEq`model["parameters"], {}] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsWc[
            ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
            ComputationalEngine`SolveEulerEq`model["parameters"], {}, "Ewc0" -> 
            ComputationalEngine`SolveEulerEq`ig] == 
          ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Not[
           TrueQ[ComputationalEngine`SolveEulerEq`updateCoeffsWc[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
              
              ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
              MaxIterations -> 1] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, MaxIterations -> 1]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc; 
        ComputationalEngine`SolveEulerEq`oldOptions = 
         Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
        ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {{
           "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{4.6}}|>}, {
           "PrintResidualsNorm" -> True}}; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
           Flatten[
            
            Map[{SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
              ComputationalEngine`SolveEulerEq`out = 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, #] == 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model]; 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
               ComputationalEngine`SolveEulerEq`oldOptions; 
              ComputationalEngine`SolveEulerEq`out}& , 
             ComputationalEngine`SolveEulerEq`optsUpdateCoeff]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, {
           PrecisionGoal -> $MachinePrecision}}; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
           Flatten[
            
            Map[{ComputationalEngine`SolveEulerEq`m = 
               Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                 Reap[Module[{}, 
                    SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]]; \
$MessageList]]; 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
               ComputationalEngine`SolveEulerEq`oldOptions; First[
                 First[ComputationalEngine`SolveEulerEq`m]] == HoldForm[
                 MessageName[SetOptions, "optnf"]]}& , 
             ComputationalEngine`SolveEulerEq`optsBad]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`optsFindRoot = {
          "FindRootOptions" -> {MaxIterations -> 1}, 
           "FindRootOptions" -> {AccuracyGoal -> 2}}; 
        ComputationalEngine`SolveEulerEq`oldFindRootOpts = Options[FindRoot]; 
        ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = Keys[
           ReplaceAll["FindRootOptions", 
            Options[ComputationalEngine`SolveEulerEq`updateCoeffs]]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
           Flatten[
            
            Map[{SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
              ComputationalEngine`SolveEulerEq`out1 = 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, #] == 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model]; 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
               ComputationalEngine`SolveEulerEq`oldOptions; 
              Unprotect[FindRoot]; SetOptions[FindRoot, 
                Last[#]]; 
              ComputationalEngine`SolveEulerEq`out2 = 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, #] == 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model]; 
              ComputationalEngine`SolveEulerEq`out2 = If[
                 MemberQ[
                 ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, 
                  First[
                   First[
                    Last[#]]]], 
                 Not[
                  TrueQ[ComputationalEngine`SolveEulerEq`out2]], 
                 ComputationalEngine`SolveEulerEq`out2]; 
              Options[FindRoot] = 
               ComputationalEngine`SolveEulerEq`oldFindRootOpts; 
              Protect[FindRoot]; {
               ComputationalEngine`SolveEulerEq`out1, 
                ComputationalEngine`SolveEulerEq`out2}}& , 
             ComputationalEngine`SolveEulerEq`optsFindRoot]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQWc[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {4.}|>]] == 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {4}|>]], 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {1., 8.}|>]] == 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {4., 1., 8.}|>]] == 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, 
               "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 12; 
        ComputationalEngine`SolveEulerEq`solBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`solNomBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`newBondParams = {
          FernandoDuarte`LongRunRisk`Model`Parameters`psi -> 
           ReplaceAll[0.1 + FernandoDuarte`LongRunRisk`Model`Parameters`psi, 
             ComputationalEngine`SolveEulerEq`model["params"]]}; 
        ComputationalEngine`SolveEulerEq`solWcNewBondParams = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`solBondNew = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
        ComputationalEngine`SolveEulerEq`solNomBondNew = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBondNew, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBondNew, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            Not[
            ComputationalEngine`SolveEulerEq`solBond === 
             ComputationalEngine`SolveEulerEq`solBondNew], 
            Not[
            ComputationalEngine`SolveEulerEq`solNomBond === 
             ComputationalEngine`SolveEulerEq`solNomBondNew]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`oldMaxMaturity = 
         ComputationalEngine`SolveEulerEq`maxMaturity; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 2; 
        ComputationalEngine`SolveEulerEq`solBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`solNomBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == Sort[
              DeleteDuplicates[
               Cases[
                Keys[ComputationalEngine`SolveEulerEq`solBond], 
                Pattern[ComputationalEngine`SolveEulerEq`x, 
                  Blank[]][
                  Pattern[ComputationalEngine`SolveEulerEq`i, 
                   Blank[]]][
                  Pattern[ComputationalEngine`SolveEulerEq`j, 
                   Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]], 
            Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == Sort[
              DeleteDuplicates[
               Cases[
                Keys[ComputationalEngine`SolveEulerEq`solNomBond], 
                Pattern[ComputationalEngine`SolveEulerEq`x, 
                  Blank[]][
                  Pattern[ComputationalEngine`SolveEulerEq`i, 
                   Blank[]]][
                  Pattern[ComputationalEngine`SolveEulerEq`j, 
                   Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 
         ComputationalEngine`SolveEulerEq`oldMaxMaturity; 
        ComputationalEngine`SolveEulerEq`solBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic, 
           "Precision" -> 1]; 
        ComputationalEngine`SolveEulerEq`solNomBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic, 
           "Precision" -> 1]; ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {FilterRules[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
               "MaxMaturity" -> ComputationalEngine`SolveEulerEq`maxMaturity], 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
               Blank[]]] === ComputationalEngine`SolveEulerEq`updateCoeffsBond[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
              "bond"], 
              ComputationalEngine`SolveEulerEq`model["params"], {}, 
              ComputationalEngine`SolveEulerEq`maxMaturity, 
              ComputationalEngine`SolveEulerEq`solWc], FilterRules[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "UpdateNomBond" -> True,
                "MaxMaturity" -> 
               ComputationalEngine`SolveEulerEq`maxMaturity], 
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
               Blank[]]] === ComputationalEngine`SolveEulerEq`updateCoeffsBond[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
              "nombond"], 
              ComputationalEngine`SolveEulerEq`model["params"], {}, 
              ComputationalEngine`SolveEulerEq`maxMaturity, 
              ComputationalEngine`SolveEulerEq`solWc]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {Sort[
              FilterRules[
               ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdateBonds" -> True, 
                "MaxMaturity" -> 
                ComputationalEngine`SolveEulerEq`maxMaturity], 
               Alternatives[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                 Blank[]], 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                 Blank[]]]]] === Sort[
              Join[
               ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc], 
               ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`m1 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                "PrintResidualsNorm" -> False]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m2 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                "PrintResidualsNorm" -> True]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = MemberQ[
           ReleaseHold[
            First[ComputationalEngine`SolveEulerEq`m2]], 
           MessageName[
           FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = NumberQ[
           ReleaseHold[
            First[
             Flatten[
              Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
               "CheckResiduals" -> False], 
              Abort[], 
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
              "CheckResiduals" -> True], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
               "CheckResiduals" -> True, "Tol" -> 1], 
              Abort[], 
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
              "CheckResiduals" -> True, "Tol" -> 10.^(-20)], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; Null, {
        ComputationalEngine`SolveEulerEq`model, 
         ComputationalEngine`SolveEulerEq`mods}]; 
      ComputationalEngine`SolveEulerEq`noMissingTest = {}; 
      Do[ComputationalEngine`SolveEulerEq`testNumber = Sort[
           Cases[
            Keys[
             SubValues[ComputationalEngine`SolveEulerEq`outTests]], 
            Verbatim[HoldPattern][
              ComputationalEngine`SolveEulerEq`outTests[
               ComputationalEngine`SolveEulerEq`model["shortname"]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]]] :> ComputationalEngine`SolveEulerEq`i]]; 
        AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Range[0, 
            Max[ComputationalEngine`SolveEulerEq`testNumber]] == 
          ComputationalEngine`SolveEulerEq`testNumber]; Null, {
        ComputationalEngine`SolveEulerEq`model, 
         ComputationalEngine`SolveEulerEq`mods}]; 
      ComputationalEngine`SolveEulerEq`out = Apply[And, {
          Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest], 
          Apply[And, 
           Values[
            SubValues[ComputationalEngine`SolveEulerEq`outTests]]]}]; On[
        MessageName[General, "stop"]]; ComputationalEngine`SolveEulerEq`out], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[MaxIterations], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[PrecisionGoal], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.5569089476209456`*^-13]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.113502648927882*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.113502648927882*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[MaxIterations], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[PrecisionGoal], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.4890825068561554`*^-13]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "lstol"], 
     HoldForm[MachinePrecision]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[MaxIterations], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[PrecisionGoal], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.1898485160071426`*^-13]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.315142795448291*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.315142795448291*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[MaxIterations], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[PrecisionGoal], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 3.8764093488563845`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[3]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "lstol"], 
     HoldForm[MachinePrecision]]], 
   Hold[
    Message[
     MessageName[FindRoot, "lstol"], 
     HoldForm[MachinePrecision]]], 
   Hold[
    Message[
     MessageName[FindRoot, "lstol"], 
     HoldForm[MachinePrecision]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[MaxIterations], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[SetOptions, "optnf"], 
     HoldForm[PrecisionGoal], 
     HoldForm[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs]\
]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[1]]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.6632349341506793`*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 2.799177515852174*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 2.799177515852174*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = 
  "{HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 2.5569089476209456*^-13]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.5569089476209456*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 2.4890825068561554*^-13]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.4890825068561554*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.1898485160071426*^-13]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.1898485160071426*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 3.8764093488563845*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 3.8764093488563845*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.6632349341506793*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.6632349341506793*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]]}", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"SolveEulerEq\"]\n\n\nVerificationTest[\n\t\
Off[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol};\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[\n\t\tAnd,\n\
\t\t{\n\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\
\tSameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\tComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t],\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t]\n\t\t\t}\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\
Apply[And,\n\t\t\t\tFlatten[\n\t\t\t\t\t{\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t}\n\t\t\
\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`opts[[1;;4]]\
\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t{2}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
Map[ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
{2}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\
\n\t\tComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint \
= Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\
\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
1},\n\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t\
$MessageList\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m4 = \
Block[\n\t\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\
\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" -> \
3},\n\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {4}|>\n\t\t\t\t\t];\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\
\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\t\
\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model, \"UpdatePd\" -> True, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = Options \
@ FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\
\tSetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Not[\n\t\t\tTrueQ[\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t{\"initialGuess\" \
-> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t{\"PrintResidualsNorm\" \
-> True}\n\t\t};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\tReap[\n\t\t\t\t\
\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t$MessageList\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`optsBad\n\
\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\"FindRootOptions\" \
-> {MaxIterations -> 1},\n\t\t\t\"FindRootOptions\" -> {AccuracyGoal -> 2}\n\t\
\t};\n\t\tComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ \
FindRoot;\n\t\tComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\tFlatten[\n\t\t\t\tMap[\n\t\t\t\t\tFunction[\n\t\t\t\t\t\t{\n\t\t\t\
\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #];\n\t\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\
\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\
],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t]\n\
\t\t\t\t],\n\t\t\t\tEqual[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
]\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 12;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t],\
\n\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond[\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t\
SameQ[\n\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\
],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t\
];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\
And,\n\t\t\t{\n\t\t\t\tSameQ[\n\t\t\t\t\tSort[\n\t\t\t\t\t\tFilterRules[\n\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
]\n\t\t\t\t\t],\n\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{},\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t];\n\t\t\t\t$MessageList\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[\n\t\tAnd,\n\t\t{\n\t\t\t\
Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, \
Values @ SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\
\tOn[General::stop];\n\tComputationalEngine`SolveEulerEq`out\n\t,\n\tTrue\n\t\
,\n\t{HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::norm, 2.5569089476209456*^-13]], \n \
HoldForm[Message[checks::norm, 3.113502648927882*^-14]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.5569089476209456*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 3.113502648927882*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 3.113502648927882*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::norm, 2.4890825068561554*^-13]], \n \
HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.4890825068561554*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::norm, 2.1898485160071426*^-13]], \n \
HoldForm[Message[checks::norm, 2.315142795448291*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.1898485160071426*^-13, 1]], \n \
HoldForm[Message[checks::smallresid, 2.315142795448291*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.315142795448291*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::norm, 3.8764093488563845*^-12]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 3.8764093488563845*^-12, 1]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[3]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::lstol, HoldForm[MachinePrecision]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[SetOptions::optnf, HoldForm[MaxIterations], \n   \
HoldForm[updateCoeffs]]], HoldForm[Message[SetOptions::optnf, \n   \
HoldForm[PrecisionGoal], HoldForm[updateCoeffs]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[1]]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::norm, 2.6632349341506793*^-14]], \n \
HoldForm[Message[checks::norm, 2.799177515852174*^-14]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.6632349341506793*^-14, 1]], \n \
HoldForm[Message[checks::smallresid, 2.799177515852174*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 2.799177515852174*^-14, 1.*^-20]]}\n\t,\n\
\tTestID->\"SolveEulerEq_20230930-OSUXTN\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.90509660093927*^9, 3.905097083843892*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"07525fae-2084-45fa-aa65-ecf464028405"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}, 
   3.9050963544542847`*^9, {3.9050965128864*^9, 3.905096515712666*^9}, 
   3.905096546156603*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"add", " ", 
   RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
   RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890681841946844*^9, 3.890681899849094*^9}, {
  3.890682055663522*^9, 3.890682084827585*^9}, {3.890683635625399*^9, 
  3.890683720295089*^9}, {3.890685425949465*^9, 3.890685434516119*^9}, {
  3.890686231117095*^9, 3.890686238212121*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8906824011137114`*^9, 3.890682405708049*^9}, {
   3.890683066049664*^9, 3.8906830825042677`*^9}, {3.89068319056032*^9, 
   3.890683191547068*^9}, {3.89068338518532*^9, 3.890683430044886*^9}, {
   3.890683477495555*^9, 3.89068350860789*^9}, {3.890683563263863*^9, 
   3.890683572999384*^9}, {3.8906837588959513`*^9, 3.890683769652152*^9}, 
   3.890683975431652*^9, 3.890684184728485*^9, {3.890684538464937*^9, 
   3.890684546403357*^9}, 3.8906847013731937`*^9, 3.890684736359234*^9, {
   3.890684917937912*^9, 3.890684918964259*^9}, {3.890685003978653*^9, 
   3.8906850058353167`*^9}, {3.890685081266893*^9, 3.890685086440845*^9}, {
   3.890685162742771*^9, 3.890685164959052*^9}, {3.890685207547077*^9, 
   3.890685210133041*^9}, {3.890685379823967*^9, 3.890685396833392*^9}, {
   3.89068547363831*^9, 3.890685483195992*^9}, {3.8906856724322433`*^9, 
   3.890685672699678*^9}, {3.890685793209527*^9, 3.890685826416944*^9}, 
   3.8906858923977957`*^9, {3.890685924003189*^9, 3.890685959055036*^9}, {
   3.890686016304421*^9, 3.890686073140353*^9}, {3.890686249638393*^9, 
   3.8906862512145*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", "\[IndentingNewLine]", 
     "\"\<\nBegin[\\\"ComputationalEngine`SolveEulerEq`\\\"]\nNeeds @ \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\\\";\n\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\\\"];\
\n\>\""}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.890684439578331*^9, {3.8906861781312037`*^9, 3.890686181646003*^9}, {
   3.890686261099564*^9, 3.8906862940387907`*^9}, {3.890710614230303*^9, 
   3.8907106202002974`*^9}, 3.8931046283317003`*^9, 3.893174923361951*^9, 
   3.905067432105736*^9, {3.905097012154454*^9, 3.90509702645646*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905096601113305*^9, 3.905097084009109*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"0712a9cb-27ea-47b0-bc7f-24c2720dc224"],

Cell[BoxData["1023"], "Output",
 CellChangeTimes->{3.905096601113305*^9, 3.905097084035482*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"10a6f6f6-0fe8-4bcb-bf31-d99c5118257f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905096601113305*^9, 3.905097084080962*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"ca199c5c-0132-40cc-8410-475a636e0c7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"a15849b6-9342-44ea-9c59-e4d715ba1a7a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "11.260572`7.202075449638101", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: SolveEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     870746948845137025 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9050970841527452`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "aefbdeaa-b8bd-4192-b96b-c69f66640d25", "TestID" -> 
         "SolveEulerEq_20230930-OSUXTN", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "EvaluationID" -> 
         "2668e934-5b10-4f91-be52-36c6154733a8", "Input" -> HoldForm[Off[
             MessageName[General, "stop"]]; 
           Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
"]; $ContextPath = DeleteDuplicates[
              
              Prepend[$ContextPath, 
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`"]]; Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`SolveEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`SolveEulerEq`modBY = 
            ComputationalEngine`SolveEulerEq`msp["BY"]; 
           ComputationalEngine`SolveEulerEq`modBKY = 
            ComputationalEngine`SolveEulerEq`msp["BKY"]; 
           ComputationalEngine`SolveEulerEq`modNRC = 
            ComputationalEngine`SolveEulerEq`msp["NRC"]; 
           ComputationalEngine`SolveEulerEq`modDES = 
            ComputationalEngine`SolveEulerEq`msp["DES"]; 
           ComputationalEngine`SolveEulerEq`modNRCStochVol = 
            ComputationalEngine`SolveEulerEq`msp["NRCStochVol"]; 
           ComputationalEngine`SolveEulerEq`mods = {
             ComputationalEngine`SolveEulerEq`modBY, 
              ComputationalEngine`SolveEulerEq`modBKY, 
              ComputationalEngine`SolveEulerEq`modNRC, 
              ComputationalEngine`SolveEulerEq`modDES, 
              ComputationalEngine`SolveEulerEq`modNRCStochVol}; 
           ComputationalEngine`SolveEulerEq`coeffsQ[
              Pattern[ComputationalEngine`SolveEulerEq`sol, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`coeffName, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`numStateVars, 
               Blank[]], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`numAssets, 
                Blank[]], 0], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`bond, 
                Blank[]], 0]] := Apply[And, {
               If[ComputationalEngine`SolveEulerEq`numAssets == 0, Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`i]] === 
                Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1, 
                Sort[
                  
                  Tuples[{
                   Range[ComputationalEngine`SolveEulerEq`numAssets] - 
                    ComputationalEngine`SolveEulerEq`bond, 
                    Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 
                    1}]] == Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> {
                    ComputationalEngine`SolveEulerEq`i, 
                    ComputationalEngine`SolveEulerEq`j}]]], 
               Apply[And, 
                Map[MatchQ[#, ComputationalEngine`SolveEulerEq`coeffName]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  ComputationalEngine`SolveEulerEq`var]]], 
               Apply[And, 
                Map[MatchQ[#, 
                  StringDrop[
                   ToString[
                   ComputationalEngine`SolveEulerEq`coeffName], -1]]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  Context[ComputationalEngine`SolveEulerEq`var]]]], 
               Apply[And, 
                Map[NumberQ, 
                 Map[Values, ComputationalEngine`SolveEulerEq`sol]]]}]; 
           ComputationalEngine`SolveEulerEq`opts = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>}, {
              "PrintResidualsNorm" -> False}, {"MaxIterations" -> 1}, {
              "FindRootOptions" -> {"MaxIterations" -> 1}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}}; 
           ComputationalEngine`SolveEulerEq`optsRepeated = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {"MaxIterations" -> 5}}, {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, 
                  WorkingPrecision -> $MachinePrecision}}; {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision},
                 WorkingPrecision -> $MachinePrecision}}; 
           ComputationalEngine`SolveEulerEq`optsMany = Join[
              Part[ComputationalEngine`SolveEulerEq`opts, 
               Span[5, -1]], ComputationalEngine`SolveEulerEq`optsRepeated]; 
           Do[ComputationalEngine`SolveEulerEq`ind = 0; 
             ComputationalEngine`SolveEulerEq`numStateVars = Length[
                ComputationalEngine`SolveEulerEq`model["stateVars"][
                ComputationalEngine`SolveEulerEq`t]]; 
             ComputationalEngine`SolveEulerEq`numStocks = 
              ComputationalEngine`SolveEulerEq`model["numStocks"]; 
             ComputationalEngine`SolveEulerEq`coeffsQWc[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, 
                ComputationalEngine`SolveEulerEq`numStateVars]; 
             ComputationalEngine`SolveEulerEq`coeffsQPd[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`numStocks]; 
             ComputationalEngine`SolveEulerEq`coeffsQBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb], 
                ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`updateCoeffs = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs; 
             ComputationalEngine`SolveEulerEq`updateCoeffsSol = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol; 
             ComputationalEngine`SolveEulerEq`updateCoeffsWc = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc; 
             ComputationalEngine`SolveEulerEq`updateCoeffsPd = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsPd; 
             ComputationalEngine`SolveEulerEq`updateCoeffsBond = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsBond; 
             ComputationalEngine`SolveEulerEq`newParameters = {
               ComputationalEngine`SolveEulerEq`delta -> 0.99}; 
             ComputationalEngine`SolveEulerEq`guessCoeffsSolution = {
               ComputationalEngine`SolveEulerEq`A[0] -> 4.6}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, {}], 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, \
{}] == ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, 
                   ComputationalEngine`SolveEulerEq`newParameters, 
                   ComputationalEngine`SolveEulerEq`guessCoeffsSolution]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Quiet[
                Apply[And, 
                 Flatten[{
                   Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[{}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, {}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], 
                    Last[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    Most[#]], 
                    Last[#]]}& , 
                    Part[ComputationalEngine`SolveEulerEq`opts, 
                    Span[1, 4]]], {2}], 
                   Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Rest[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Sequence[
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    First[#], 
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], {
                    Last[#]}], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {
                    First[#]}, 
                    Rest[#]]}& , ComputationalEngine`SolveEulerEq`optsMany], {
                    2}]}]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsWc = {
               "MaxIterations" -> 100}; 
             ComputationalEngine`SolveEulerEq`solWc = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`solWc == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 ComputationalEngine`SolveEulerEq`optsWc] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["params"], {}, 
                 ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`solWc1 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "initialGuess" -> <|"Ewc" -> {3}|>]; 
             ComputationalEngine`SolveEulerEq`solWc2 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
                "initialGuess" -> <|"Ewc" -> {1}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc2]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`solWc1 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {3}|>]; 
             ComputationalEngine`SolveEulerEq`solWc2 = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                "FindRootOptions" -> {"MaxIterations" -> 1}, 
                "initialGuess" -> <|"Ewc" -> {1}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                 FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
                 ComputationalEngine`SolveEulerEq`solWc2]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m3 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m4 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m1]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m4]] == {{3}}}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "MaxIterations" -> 3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m3 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m4 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "MaxIterations" -> 1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m1]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                 ReleaseHold[
                   Last[ComputationalEngine`SolveEulerEq`m4]] == {{1}}}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> False]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> True]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              First[ComputationalEngine`SolveEulerEq`m2] == {
                 HoldForm[
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                ReleaseHold[
                 First[
                  Flatten[
                   Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    False], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    True, "Tol" -> 1], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True, "Tol" -> 10.^(-20)], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`Ewc0 = 4.6; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                   "Epd" -> {{5.5}}|>]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`coeffsWcPd = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> True, 
                "initialGuess" -> <|
                 "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                  "Epd" -> {{5.5}}|>]; 
             ComputationalEngine`SolveEulerEq`coeffsWc = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
                 Blank[Integer]]]; 
             ComputationalEngine`SolveEulerEq`coeffsPd = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                 Blank[Integer]]]; ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
               ComputationalEngine`SolveEulerEq`coeffsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQPd[
               ComputationalEngine`SolveEulerEq`coeffsPd]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                   "Epd" -> {{5.5}}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 SubsetQ[
                  Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                  Options[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]], 
                 SubsetQ[
                  Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                  Options[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`oldOptions = 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
             ComputationalEngine`SolveEulerEq`oldOptionsSol = 
              Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol]; 
             ComputationalEngine`SolveEulerEq`oldOptionsWc = 
              Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsWc]; ComputationalEngine`SolveEulerEq`ig = 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                 "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             SetOptions[
              ComputationalEngine`SolveEulerEq`updateCoeffs, 
               "initialGuess" -> <|
                "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
              ComputationalEngine`SolveEulerEq`oldOptions; 
             SetOptions[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, 
               "initialGuess" -> <|
                "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Not[
                TrueQ[
                ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, 
                   MaxIterations -> 1] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                   1]]]; ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol] = 
              ComputationalEngine`SolveEulerEq`oldOptionsSol; 
             SetOptions[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                 "Ewc0" -> ComputationalEngine`SolveEulerEq`ig] == 
               ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Not[
                TrueQ[ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "wc"], 
                   ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                   MaxIterations -> 1] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                   1]]]; ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsWc] = 
              ComputationalEngine`SolveEulerEq`oldOptionsWc; 
             ComputationalEngine`SolveEulerEq`oldOptions = 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
             ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {{
                "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{4.6}}|>}, {
                "PrintResidualsNorm" -> True}}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                   ComputationalEngine`SolveEulerEq`out = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                   ComputationalEngine`SolveEulerEq`out}& , 
                  ComputationalEngine`SolveEulerEq`optsUpdateCoeff]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsBad = {{
                MaxIterations -> 100}, {PrecisionGoal -> $MachinePrecision}}; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{ComputationalEngine`SolveEulerEq`m = 
                    Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                    Reap[Module[{}, 
                    SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]]; \
$MessageList]]; Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; First[
                    First[ComputationalEngine`SolveEulerEq`m]] == HoldForm[
                    MessageName[SetOptions, "optnf"]]}& , 
                  ComputationalEngine`SolveEulerEq`optsBad]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`optsFindRoot = {
               "FindRootOptions" -> {MaxIterations -> 1}, 
                "FindRootOptions" -> {AccuracyGoal -> 2}}; 
             ComputationalEngine`SolveEulerEq`oldFindRootOpts = 
              Options[FindRoot]; 
             ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = Keys[
                ReplaceAll["FindRootOptions", 
                 Options[ComputationalEngine`SolveEulerEq`updateCoeffs]]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                Flatten[
                 
                 Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                   ComputationalEngine`SolveEulerEq`out1 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                   Unprotect[FindRoot]; SetOptions[FindRoot, 
                    Last[#]]; 
                   ComputationalEngine`SolveEulerEq`out2 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                   ComputationalEngine`SolveEulerEq`out2 = If[
                    MemberQ[
                    ComputationalEngine`SolveEulerEq`\
withFindRootOptionDefault, 
                    First[
                    First[
                    Last[#]]]], 
                    Not[
                    TrueQ[ComputationalEngine`SolveEulerEq`out2]], 
                    ComputationalEngine`SolveEulerEq`out2]; 
                   Options[FindRoot] = 
                    ComputationalEngine`SolveEulerEq`oldFindRootOpts; 
                   Protect[FindRoot]; {
                    ComputationalEngine`SolveEulerEq`out1, 
                    ComputationalEngine`SolveEulerEq`out2}}& , 
                  ComputationalEngine`SolveEulerEq`optsFindRoot]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1., 8.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4., 1., 8.}|>]] == 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 12; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`newBondParams = {
               FernandoDuarte`LongRunRisk`Model`Parameters`psi -> 
                ReplaceAll[
                 0.1 + FernandoDuarte`LongRunRisk`Model`Parameters`psi, 
                  ComputationalEngine`SolveEulerEq`model["params"]]}; 
             ComputationalEngine`SolveEulerEq`solWcNewBondParams = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`solBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`solNomBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solBond === 
                  ComputationalEngine`SolveEulerEq`solBondNew], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solNomBond === 
                  ComputationalEngine`SolveEulerEq`solNomBondNew]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`oldMaxMaturity = 
              ComputationalEngine`SolveEulerEq`maxMaturity; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 2; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solNomBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 
              ComputationalEngine`SolveEulerEq`oldMaxMaturity; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic,
                 "Precision" -> 1]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic,
                 "Precision" -> 1]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {FilterRules[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                    Blank[]]] === 
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "bond"], 
                   ComputationalEngine`SolveEulerEq`model["params"], {}, 
                   ComputationalEngine`SolveEulerEq`maxMaturity, 
                   ComputationalEngine`SolveEulerEq`solWc], FilterRules[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateNomBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                   
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]] === 
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "nombond"], 
                   ComputationalEngine`SolveEulerEq`model["params"], {}, 
                   ComputationalEngine`SolveEulerEq`maxMaturity, 
                   ComputationalEngine`SolveEulerEq`solWc]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {Sort[
                   FilterRules[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBonds" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                    Alternatives[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Blank[]], 
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]]]] === Sort[
                   Join[
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "bond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc], 
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "nombond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc]]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> False]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> True]; 
                   Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = MemberQ[
                ReleaseHold[
                 First[ComputationalEngine`SolveEulerEq`m2]], 
                MessageName[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                ReleaseHold[
                 First[
                  Flatten[
                   Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> False], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                   True, "CheckResiduals" -> True], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> True, "Tol" -> 1], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                   True, "CheckResiduals" -> True, "Tol" -> 10.^(-20)], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`noMissingTest = {}; 
           Do[ComputationalEngine`SolveEulerEq`testNumber = Sort[
                Cases[
                 Keys[
                  SubValues[ComputationalEngine`SolveEulerEq`outTests]], 
                 Verbatim[HoldPattern][
                   ComputationalEngine`SolveEulerEq`outTests[
                    ComputationalEngine`SolveEulerEq`model["shortname"]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]]] :> ComputationalEngine`SolveEulerEq`i]]; 
             AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Range[0, 
                 Max[ComputationalEngine`SolveEulerEq`testNumber]] == 
               ComputationalEngine`SolveEulerEq`testNumber]; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`out = Apply[And, {
               Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest], 
               Apply[And, 
                Values[
                 SubValues[ComputationalEngine`SolveEulerEq`outTests]]]}]; 
           On[
             MessageName[General, "stop"]]; 
           ComputationalEngine`SolveEulerEq`out], "ExpectedMessages" -> 
         HoldForm[{
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.5569089476209456`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.4890825068561554`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.1898485160071426`*^-13]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.8764093488563845`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[3]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "lstol"], 
              HoldForm[MachinePrecision]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[MaxIterations], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[SetOptions, "optnf"], 
              HoldForm[PrecisionGoal], 
              HoldForm[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[1]]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.6632349341506793`*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.5569089476209456`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.113502648927882*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.5569089476209456`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.113502648927882*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 3.113502648927882*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.4890825068561554`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.4890825068561554`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.1898485160071426`*^-13]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.315142795448291*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.1898485160071426`*^-13, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.315142795448291*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.315142795448291*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 3.8764093488563845`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 3.8764093488563845`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[3]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "lstol"], 
             HoldForm[MachinePrecision]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[MaxIterations], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[SetOptions, "optnf"], 
             HoldForm[PrecisionGoal], 
             HoldForm[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[1]]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.6632349341506793`*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 2.799177515852174*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.6632349341506793`*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 2.799177515852174*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 2.799177515852174*^-14, 1.*^-20]]}, 
         "AbsoluteTimeUsed" -> 11.260572`7.202075449638101, "CPUTimeUsed" -> 
         11.265231999999997`, "MemoryUsed" -> 447432, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>]|>, 
    "FailureResults" -> <||>, "TestsNotEvaluatedKeys" -> {}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {870746948845137025}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905096612754507*^9, 3.905097095597579*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"79208cbc-2b30-4886-b8ab-503be8d59762"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "[", 
     RowBox[{"[", "\"\<ActualMessages\>\"", "]"}], "]"}], ",", 
    RowBox[{"ReleaseHold", "@", 
     RowBox[{
      RowBox[{
       RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}], "[", 
      RowBox[{"[", "\"\<ExpectedMessages\>\"", "]"}], "]"}]}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.905081538496028*^9, 3.905081599313065*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"5dbb8d6d-e638-4bc7-a9fa-0aaf305bcf77"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.5569089476209456`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.5569089476209456`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.4890825068561554`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.4890825068561554`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.1898485160071426`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.1898485160071426`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.8764093488563845`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.8764093488563845`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.6632349341506793`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.6632349341506793`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm]},
    {
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.5569089476209456`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.113502648927882`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.5569089476209456`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "3.113502648927882`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.4890825068561554`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "4.383905086044507`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.4890825068561554`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "4.383905086044507`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.1898485160071426`*^-13"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.315142795448291`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.1898485160071426`*^-13", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.315142795448291`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["100",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "3.8764093488563845`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "3.8764093488563845`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "1.1383179045888502`*^-12", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["3",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "lstol"}], "MessageName"], ",", 
        TagBox["MachinePrecision",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["MaxIterations",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"SetOptions", "::", "optnf"}], "MessageName"], ",", 
        TagBox["PrecisionGoal",
         HoldForm], ",", 
        TagBox["updateCoeffs",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"FindRoot", "::", "cvmit"}], "MessageName"], ",", 
        TagBox["1",
         HoldForm]}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.6632349341506793`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "norm"}], "MessageName"], ",", 
        "2.799177515852174`*^-14"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-16"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.6632349341506793`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "smallresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1"}], "]"}],
      HoldForm], 
     TagBox[
      RowBox[{"Message", "[", 
       RowBox[{
        StyleBox[
         RowBox[{"checks", "::", "largeresid"}], "MessageName"], ",", 
        "2.799177515852174`*^-14", ",", "1.`*^-20"}], "]"}],
      HoldForm]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.90509661284776*^9, 3.9050970956879177`*^9},
 CellLabel->
  "Out[24]//TableForm=",ExpressionUUID->"baaaf42e-6139-448e-b23c-\
c7f4437ef319"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"d03dfeba-2718-41c7-9b3f-\
19ce5bed64e2"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"TO", " ", 
   RowBox[{"DO", ":", " ", 
    RowBox[{
    "issue", " ", "error", " ", "when", " ", "solving", " ", "for", " ", "wc",
      " ", "coefficients", " ", "if", " ", "state", " ", "variables", " ", 
     "are", " ", "wrong", " ", "ones"}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8921674359031553`*^9, 3.892167445076851*^9}, {
  3.893044067776495*^9, 3.8930440884643297`*^9}, {3.893104375295664*^9, 
  3.89310437553871*^9}, {3.893164312078672*^9, 3.8931643524516697`*^9}, {
  3.9026749378914022`*^9, 3.902674938459015*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"899fc20c-f2e8-4595-aa23-0ac007c8899b"],

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
    "pacletDir", ",", "\"\<Kernel\>\"", ",", "\"\<ComputationalEngine\>\"", 
     ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "@", 
   RowBox[{"Prepend", "[", 
    RowBox[{
    "$ContextPath", ",", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
\>\""}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.8907107328284597`*^9, 
   3.890716596142606*^9, 3.8912441409010677`*^9, {3.891284064139113*^9, 
   3.891284078157*^9}, {3.89128451819068*^9, 3.8912845185051107`*^9}, {
   3.8913176074268427`*^9, 3.891317626509036*^9}, {3.8919141921795597`*^9, 
   3.891914193888651*^9}, 3.9026747447148247`*^9, {3.902674827715456*^9, 
   3.9026748330094213`*^9}, {3.9050647938688803`*^9, 3.905064824740706*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"f9c3d613-11be-45c4-8516-78bfd45d9265"],

Cell[BoxData[{
 RowBox[{"Get", "@", 
  RowBox[{"Get", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
     "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], "}"}],
     "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBKY", "=", 
   RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRCStochVol", "=", 
   RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{
    "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
     "modNRCStochVol"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.895400995806225*^9, 3.8954009959498043`*^9}, {
   3.895401333682231*^9, 3.8954013437477283`*^9}, {3.895415511062855*^9, 
   3.895415512534185*^9}, 3.895416761698543*^9, {3.901549307710441*^9, 
   3.901549339660038*^9}, {3.902674438484131*^9, 3.902674458952189*^9}, 
   3.902674851272751*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"2111868b-759b-4735-b152-31f93e8c9c9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"testing", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "True", " ", "if", " ", "coefficients", " ", "have", " ", 
    "expected", " ", "form"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"coeffsQ", "[", 
    RowBox[{"sol_", ",", "coeffName_", ",", "numStateVars_", ",", 
     RowBox[{"numAssets_", ":", "0"}], ",", 
     RowBox[{"bond_", ":", "0"}]}], "]"}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numAssets", "==", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"wc", " ", 
           RowBox[{"ratio", ":", " ", 
            RowBox[{
            "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
             "0"}]}]}], ",", " ", "1", ",", " ", 
          RowBox[{"2", "..."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{"coeffName", "[", "i_Integer", "]"}], ":>", "i"}]}], 
            "]"}]}], ")"}], "===", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}], ")"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"pd", " ", "ratio", " ", "or", " ", "bond", " ", 
           RowBox[{"prices", ":", " ", 
            RowBox[{
            "coefficients", " ", "are", " ", "indexed", " ", "by", " ", "two",
              " ", "integers"}]}]}], ",", " ", 
          RowBox[{
          "first", " ", "one", " ", "indexes", " ", "stock", " ", "number", 
           " ", "or", " ", "maturity", " ", "of", " ", "bond"}], ",", " ", 
          RowBox[{
          "second", " ", "one", " ", "indexes", " ", "state", " ", 
           "variables"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Tuples", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Range", "[", "numAssets", "]"}], "-", "bond"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ")"}], "==", 
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"coeffName", "[", "i_Integer", "]"}], "[", "j_Integer",
                "]"}], ":>", 
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}]}]}], "]"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"names", " ", "match", " ", "coeffName"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "coeffName"}], "]"}], "&"}], "/@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "/@", "sol"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", "]"}],
             ":>", "var"}]}], "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "context", " ", "is", " ", "same", " ", "as", " ", "context", " ", 
        "of", " ", "coeffName"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", 
            RowBox[{"StringDrop", "[", 
             RowBox[{
              RowBox[{"ToString", "[", "coeffName", "]"}], ",", 
              RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "/@", "sol"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", "]"}],
             ":>", 
            RowBox[{"Context", "[", "var", "]"}]}]}], "]"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"(", 
          RowBox[{"Values", "/@", "sol"}], ")"}]}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9027365623102837`*^9, 3.9027366445619097`*^9}, {
  3.903265465097476*^9, 3.9032655020979843`*^9}, {3.9032655495193453`*^9, 
  3.903265607471015*^9}, {3.9032659990151377`*^9, 3.9032660752460747`*^9}, {
  3.903266159881975*^9, 3.903266190007286*^9}, {3.903266274351212*^9, 
  3.903266276067524*^9}, {3.903266396787388*^9, 3.903266538320751*^9}, {
  3.903266574486245*^9, 3.903266643569592*^9}, {3.903266923803172*^9, 
  3.903266926933984*^9}, {3.9032670145986757`*^9, 3.903267017206147*^9}, {
  3.903267067928321*^9, 3.903267078865045*^9}, {3.903267522029098*^9, 
  3.903267522178343*^9}, {3.903948521740769*^9, 3.903948522931101*^9}, {
  3.903954048980898*^9, 3.903954066819949*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"11cfe1fe-9482-4b69-90bb-d338a02414fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"list", " ", "with", " ", "different", " ", "options"}], "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"opts", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"single", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "4.6", "}"}]}], ",", 
           RowBox[{"\"\<Epd\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", " ", 
       
       RowBox[{"(*", 
        RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
       " ", 
       RowBox[{"{", 
        RowBox[{"\"\<FindRootOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], "}"}], ",", 
       " ", 
       RowBox[{"(*", 
        RowBox[{
        "FindRoot", " ", "option", " ", "via", " ", "updateCoeffsSol", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"more", " ", "than", " ", "one", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "same", " ", "FindRootOptions", " ", "and", " ", "options", " ", "to", 
     " ", "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"optsRepeated", " ", "=", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], "}"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}]}], "}"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}], ",", 
          RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
         "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"optsMany", "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"opts", "[", 
        RowBox[{"[", 
         RowBox[{"5", ";;", 
          RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "optsRepeated"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895921969082823*^9, 3.89592197127921*^9}, {
   3.9026749456842937`*^9, 3.902674952678933*^9}, {3.9027368458961143`*^9, 
   3.902736853530096*^9}, 3.90273688667575*^9, {3.90273704798573*^9, 
   3.902737150598179*^9}, {3.902737221721982*^9, 3.902737302926468*^9}, {
   3.902737476508258*^9, 3.902737476696528*^9}, {3.9027375809018993`*^9, 
   3.902737590739389*^9}, {3.9027376357545033`*^9, 3.902737637201068*^9}, 
   3.902738079418811*^9, {3.9027382952627068`*^9, 3.902738331378592*^9}, {
   3.9027563693519897`*^9, 3.902756377669726*^9}, {3.902756930249604*^9, 
   3.902756930273058*^9}, {3.903370206783245*^9, 3.903370230812236*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"1f7b8c98-ad1c-4f61-a982-2422f735aa83"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"**", "**", "**", "**"}], "*", "set", " ", "up", " ", "useful",
        " ", "variables", " ", "used", " ", "throughout", " ", "loop"}], 
      "**********)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ind", "=", "0"}], ";", 
       RowBox[{"(*", 
        RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "convenience", " ", "functions", " ", "for", " ", "different", " ", 
         "coefficients"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"numStateVars", "=", 
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"numStocks", "=", 
        RowBox[{"model", "[", "\"\<numStocks\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQWc", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{
         "sol", ",", 
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", ",",
           "numStateVars"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQPd", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd"}], 
          ",", "numStateVars", ",", "numStocks"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQNomBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "testing", " ", "starts", " ",
          "here"}], "**********)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "passing", " ", "arguments", " ", "works", " ", "as", " ", 
          "intended"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parse", " ", "positional", " ", "arguments", " ", "correctly"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newParameters", "=", 
        RowBox[{"{", 
         RowBox[{"delta", "->", "0.99"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"guessCoeffsSolution", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"updateCoeffs", "[", "model", "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters"}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution", 
              ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "separates", " ", "positional", " ", "arguments", " ", "and", " ", 
         "optional", " ", "arguments", " ", "correctly"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
         RowBox[{"And", "@@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Most", "@", "#"}], "]"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", 
                RowBox[{"opts", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "different", " ", "ways", " ", "to", " ", "pass", " ", "more", 
               " ", "than", " ", "one", " ", "option", " ", "are", " ", 
               "equivalent"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Rest", "@", "#"}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"Last", "@", "#"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"First", "@", "#"}]}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsMany"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "wealth", " ", "consumption", " ", "ratio", " ", "coefficients"}], 
        "**********)"}], "\[IndentingNewLine]", 
       RowBox[{"optsWc", "=", 
        RowBox[{"{", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "optsWc"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wrapper", " ", "functions", " ", "updateCoeffsSol", " ", "and", " ",
           "updateCoeffs", " ", "give", " ", "same", " ", "answer", " ", "as",
           " ", "updateCoeffsWc"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"solWc", "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "options"}], " ", "work", " ", "as", " ", 
         "intended"}], "*******)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"one", " ", "iteration", " ", 
          RowBox[{"doesn", "'"}], "t", " ", "get", " ", "far", " ", "from", 
          " ", "initial", " ", "guess"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"MaxIterations", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "updateCoeffsSol", " ",
           "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "updateCoeffsSol", 
          " ", "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "when", " ", "passing", " ", "same", " ", "FindRoot", " ", "and", 
           " ", "updateCoeffsSol", " ", "options"}]}], ",", " ", 
         RowBox[{"FindRoot", " ", "option", " ", "is", " ", "used"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"First", "@", "m2"}], "==", 
          RowBox[{"{", 
           RowBox[{"HoldForm", "@", 
            RowBox[{"(", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], ")"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
             ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",",
              "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", "$Failed", 
             ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"ReturnPd", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Ewc0", "=", "4.6"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "return", " ", "pd", " ", "coefficients"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", 
         RowBox[{"updateCoeffs", "[", 
          RowBox[{"model", ",", 
           RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"return", " ", "pd", " ", "coefficients"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"coeffsWcPd", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<UpdatePd\>\"", "->", "True"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<Ewc\>\"", "->", 
              RowBox[{"{", "Ewc0", "}"}]}], ",", 
             RowBox[{"\"\<Epd\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "separate", " ", "wc", " ", "and", " ", "pd", " ", 
          "coefficients"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coeffsWc", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"coeffsPd", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "check", " ", "coefficients", " ", "have", " ", "expected", " ", 
          "form"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", "coeffsWc", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQPd", "[", "coeffsPd", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wc", " ", "coefficients", " ", "are", " ", "the", " ", "same", " ", 
          "when", " ", "pd", " ", "coefficients", " ", "are", " ", "or", " ", 
          "are", " ", "not", " ", "returned"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "Ewc0", "}"}]}], ",", 
               RowBox[{"\"\<Epd\>\"", "->", 
                RowBox[{"{", 
                 RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "updateCoeff", " ", "inherits", " ", "options", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "checks"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{"Options", "[", "updateCoeffsSol", "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{
             "Options", "[", 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "pass", " ", "initial", " ", "guess", " ", "in", " ", 
          "updateCoeffs"}], ",", " ", "updateCoeffsSol", ",", " ", 
         "updateCoeffsWc"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsSol", "=", 
        RowBox[{"Options", "[", "updateCoeffsSol", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsWc", "=", 
        RowBox[{"Options", "[", "updateCoeffsWc", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ig", "=", "1"}], ";", 
       RowBox[{"(*", 
        RowBox[{"new", " ", "initial", " ", "guess"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"initial", " ", "guess", " ", "as", " ", "argument"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          "\[IndentingNewLine]", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", "->", "ig"}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "initial", " ", "guess", " ", "as", " ", "default", " ", "in", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffs"}]}], 
        "*)"}], 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffs", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", "model", "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", "oldOptions"}], 
       ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsSol"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffsSol", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffsSol", "]"}], "=", 
        "oldOptionsSol"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsWc"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffsWc", ",", 
         RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffsWc", "]"}], "=", 
        "oldOptionsWc"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "use", " ", "defaults", " ", "for", " ", "updateCoeffs", " ", "for",
            " ", "any", " ", "options", " ", "inherited", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "check"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"optsUpdateCoeff", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "4.6", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "4.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
          RowBox[{"(*", 
           RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
          "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"out", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", "}"}], 
             "&"}], "/@", "optsUpdateCoeff"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
          RowBox[{"can", "'"}], "t", " ", "set", " ", "defaults", " ", "for", 
          " ", "updateCoeffs", " ", "for", " ", "FindRoot", " ", "options", 
          " ", "since", " ", "they", " ", "are", " ", "not", " ", 
          "inherited"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsBad", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", " ", 
          RowBox[{"(*", 
           RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]",
           " ", 
          RowBox[{"{", 
           RowBox[{"PrecisionGoal", "\[Rule]", "$MachinePrecision"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"m", "=", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
                    RowBox[{"$MessageList", "=", 
                    RowBox[{"{", "}"}]}]}], "}"}], ",", 
                  RowBox[{"Reap", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Module", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{"updateCoeffs", ",", "#"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "$MessageList"}], "\[IndentingNewLine]", "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"First", "@", "m"}]}], "==", 
                RowBox[{"HoldForm", "@", 
                 RowBox[{"SetOptions", "::", "optnf"}]}]}]}], 
              "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsBad"}], 
           ")"}]}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "option", " ", "\"\<FindRootOptions\>\"", " ", "inherited", " ", 
         "from", " ", "updateCoeffsSol"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsFindRoot", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"MaxIterations", "->", "1"}], "}"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
           "has", " ", "a", " ", "default", " ", "in", " ", 
            "\"\<FindRootOptions\>\""}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"AccuracyGoal", "\[Rule]", "2"}], "}"}]}]}], 
         RowBox[{"(*", 
          RowBox[{
          "does", " ", "not", " ", "have", " ", "a", " ", "default", " ", 
           "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
         "\[IndentingNewLine]", "}"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "default", " ", "options", " ", "from", " ", "FindRoot", " ", "only",
          " ", "for", " ", "options", " ", "without", " ", "a", " ", 
         "default", " ", "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"oldFindRootOpts", " ", "=", " ", 
        RowBox[{"Options", "[", "FindRoot", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "at", " ", 
         "the", " ", "end"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "find", " ", "options", " ", "with", " ", "a", " ", "default", " ", 
         "value", " ", "in", " ", "\"\<FindRootOptions\>\"", " ", "option", 
         " ", "in", " ", "updateCoeffs"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"withFindRootOptionDefault", "=", 
        RowBox[{"Keys", "@", 
         RowBox[{"(", 
          RowBox[{"\"\<FindRootOptions\>\"", "/.", 
           RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{"test", ":", " ", 
                 RowBox[{
                 "change", " ", "default", " ", "option", " ", 
                  "\"\<FindRootOptions\>\"", " ", "in", " ", 
                  "updateCoeffs"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out1", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Unprotect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"SetOptions", "[", 
                RowBox[{"FindRoot", ",", 
                 RowBox[{"Last", "@", "#"}]}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{
                "change", " ", "default", " ", "option", " ", "in", " ", 
                 "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"test", ":", " ", 
                  RowBox[{
                  "if", " ", "option", " ", "has", " ", "a", " ", "default", 
                   " ", "in", " ", "\"\<FindRootOptions\>\""}]}], ",", " ", 
                 RowBox[{
                 "FindRoot", " ", "option", " ", "does", " ", "not", " ", 
                  "override", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"withFindRootOptionDefault", ",", 
                    RowBox[{"First", "@", 
                    RowBox[{"First", "@", 
                    RowBox[{"Last", "@", "#"}]}]}]}], "]"}], ",", 
                  RowBox[{"Not", "@", 
                   RowBox[{"TrueQ", "@", "out2"}]}], ",", "out2"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "FindRoot", "]"}], "=", 
                "oldFindRootOpts"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Protect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"out1", ",", "out2"}], "}"}]}], "\[IndentingNewLine]",
               "}"}], "&"}], "/@", "optsFindRoot"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "pass", " ", "interval", " ", "as", " ", "initial", " ", "guess", 
             " ", "works"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"test", ":", " ", 
             RowBox[{
             "pass", " ", "interval", " ", "interval", " ", "and", " ", 
              "initial", " ", "guess", " ", "works"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
             "]"}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "approximate", " ", "or", " ", "exact", " ", 
          "numbers"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4.", "}"}]}], "|>"}]}]}], "]"}], "]"}], "==", 
            
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1.", ",", "8."}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4.", ",", "1.", ",", "8."}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "bond", " ", "coefficients"}], "**********)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffsBond", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "12"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "newParameters", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newBondParams", "=", 
        RowBox[{"{", 
         RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "0.1", "+", "FernandoDuarte`LongRunRisk`Model`Parameters`psi"}], "/.", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}]}], ")"}]}], "}"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"solWcNewBondParams", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "newBondParams", ",", "optsWc"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"solBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solBond", "===", "solBondNew"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solNomBond", "===", "solNomBondNew"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "maxMaturity", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldMaxMaturity", "=", "maxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"save", " ", "to", " ", "restore", " ", "later"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solNomBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "oldMaxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "original", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "options", " ", "for", " ", "RecurrenceTable"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffs", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"updateCoeffs", " ", "matches", " ", "updateCoeffsBond"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<bond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateNomBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<nombond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
             "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
                "[", "_", "]"}], "|", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb",
                 "[", "_", "]"}]}]}], "]"}]}], "===", 
           RowBox[{"Sort", "@", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<bond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}],
               ",", 
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<nombond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
               "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"ReleaseHold", "@", 
            RowBox[{"First", "@", "m2"}]}], ",", 
           StyleBox[
            RowBox[{
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], "MessageName"]}], 
          StyleBox["]", "MessageName"]}], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
             ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",",
              "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", "$Failed", 
             ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";"}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.902738190083231*^9, 3.902738191941931*^9}, {
   3.902756289368319*^9, 3.902756290645808*^9}, 3.903367554456627*^9, 
   3.90336761476572*^9, 3.9033679158229322`*^9, 3.903367953145947*^9, 
   3.903368446610979*^9, 3.903368566845581*^9, {3.9033690342241783`*^9, 
   3.9033690458587503`*^9}, {3.903369120339946*^9, 3.903369173398312*^9}, {
   3.903369213950077*^9, 3.903369215507873*^9}, {3.90336924757663*^9, 
   3.903369263794701*^9}, {3.903369324741993*^9, 3.903369618477161*^9}, {
   3.903369763809095*^9, 3.903369763968398*^9}, {3.9033697946972237`*^9, 
   3.903369833092771*^9}, 3.90336995056032*^9, {3.903369999688233*^9, 
   3.903370049515942*^9}, {3.903370152201243*^9, 3.9033701527642717`*^9}, {
   3.9033702750511436`*^9, 3.903370275096901*^9}, {3.90337030790005*^9, 
   3.903370336846512*^9}, {3.903370452601376*^9, 3.903370493071638*^9}, {
   3.903370531426106*^9, 3.903370614884407*^9}, {3.903370650463318*^9, 
   3.9033706690412607`*^9}, {3.903370758653572*^9, 3.903370759311151*^9}, 
   3.90337080487085*^9, {3.903370848726095*^9, 3.903371006741373*^9}, {
   3.903371118400571*^9, 3.9033712407927647`*^9}, {3.903876675635762*^9, 
   3.9038766768417997`*^9}, {3.9038767078728523`*^9, 3.903876709208724*^9}, {
   3.903876810354755*^9, 3.903876810436152*^9}, {3.903876882681025*^9, 
   3.903876937178338*^9}, {3.903877109041683*^9, 3.903877139896817*^9}, {
   3.903877312726338*^9, 3.903877337749157*^9}, 3.903877375340865*^9, 
   3.903877429745676*^9, {3.903879853701571*^9, 3.903880386887842*^9}, {
   3.9038805023515663`*^9, 3.9038805168312607`*^9}, {3.903880578409403*^9, 
   3.903880580793682*^9}, {3.903880643178487*^9, 3.903880643437065*^9}, 
   3.9038808282072983`*^9, {3.903880919908001*^9, 3.903880929069625*^9}, {
   3.9038809843663063`*^9, 3.90388099762131*^9}, {3.903946746810584*^9, 
   3.903946882830439*^9}, {3.903946916079405*^9, 3.903947194232129*^9}, {
   3.903947302789904*^9, 3.903947365821086*^9}, {3.903947397612604*^9, 
   3.903947480404434*^9}, {3.903947520727475*^9, 3.903947775543419*^9}, {
   3.903947814473352*^9, 3.903947902620613*^9}, {3.903947959940763*^9, 
   3.903947965419816*^9}, 3.9039480405910053`*^9, {3.903948170656618*^9, 
   3.9039481958812103`*^9}, {3.903954083591836*^9, 3.903954093219599*^9}, {
   3.903957110219754*^9, 3.903957120856778*^9}, {3.9039572697111483`*^9, 
   3.903957303598179*^9}, {3.90395734098941*^9, 3.903957380669937*^9}, {
   3.9039574339668217`*^9, 3.903957559865464*^9}, {3.903957633917492*^9, 
   3.9039576572380867`*^9}, {3.903957736603272*^9, 3.9039577431804953`*^9}, {
   3.903957843089891*^9, 3.9039579222700167`*^9}, {3.903957976260666*^9, 
   3.903958005517933*^9}, 3.903958243680842*^9, {3.903958274609536*^9, 
   3.903958304368545*^9}, {3.903958409422388*^9, 3.903958416665062*^9}, {
   3.9039584592648497`*^9, 3.90395857520253*^9}, {3.9039586083279753`*^9, 
   3.903958624788992*^9}, {3.903958677317418*^9, 3.903958857444724*^9}, 
   3.903959402502407*^9, {3.9039594472468967`*^9, 3.903959460439021*^9}, {
   3.903959500180381*^9, 3.903959556897715*^9}, {3.9039595961373987`*^9, 
   3.903959651799542*^9}, {3.905048951482769*^9, 3.9050489527246447`*^9}, {
   3.9050490643661413`*^9, 3.9050492434464293`*^9}, 3.905051837071126*^9, {
   3.905074651699704*^9, 3.905074676395534*^9}, {3.905075325337388*^9, 
   3.905075369553441*^9}, {3.9050765789398127`*^9, 3.9050766282827673`*^9}, 
   3.905076664799794*^9, {3.9050773939684877`*^9, 3.905077394398437*^9}, {
   3.905077706931822*^9, 3.9050777074645777`*^9}, {3.905080956322939*^9, 
   3.9050809592593737`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"194d0d65-1833-42c3-9043-414081e8803e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"noMissingTest", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
      RowBox[{"Sort", "@", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Keys", "@", 
          RowBox[{"SubValues", "@", "outTests"}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"noMissingTest", ",", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
        "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Values", "@", 
      RowBox[{"SubValues", "@", "outTests"}]}]}]}], "\[IndentingNewLine]", 
   "}"}]}]}], "Input",
 CellChangeTimes->{{3.90388105526523*^9, 3.903881056354525*^9}, {
   3.903881131846246*^9, 3.903881352277603*^9}, {3.9038813860211477`*^9, 
   3.9038814908548803`*^9}, 3.903881522862175*^9, 3.905082034198983*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"c2143d61-6f31-43bb-802b-75c01051eabb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["To Do", "Section",
 CellChangeTimes->{{3.903367445221517*^9, 
  3.903367462959752*^9}},ExpressionUUID->"cbce848c-6e50-4a18-9ca2-\
77b172824bb7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"plotCoeffs", "[", "\[IndentingNewLine]", "\t", 
   RowBox[{
   "model_Association", ",", "\[IndentingNewLine]", "\t", "sol_List", ",", 
    "\[IndentingNewLine]", "\t", "parameters_List", ",", 
    "\[IndentingNewLine]", "\t", "Ewc0_List", ",", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"opts", " ", ":", " ", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"activateLast", " ", "=", " ", 
       RowBox[{"{", "MapThread", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"system", "=", 
       RowBox[{
        RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
        "\"\<wc\>\"", "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"inactiveFunctions", "=", 
         RowBox[{"DeleteDuplicates", "@", 
          RowBox[{"Cases", "[", 
           RowBox[{"system", ",", 
            RowBox[{
             RowBox[{"Inactive", "[", "fun_", "]"}], ":>", "fun"}], ",", 
            "Infinity", ",", 
            RowBox[{"Heads", "->", "True"}]}], "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"alternativesActivateLast", "=", 
         RowBox[{"Alternatives", "@@", "activateLast"}]}]}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"activateFirst", "=", 
          RowBox[{"Cases", "[", 
           RowBox[{"inactiveFunctions", ",", 
            RowBox[{"Except", "[", 
             RowBox[{"alternativesActivateLast", " ", "|", " ", "FindRoot"}], 
             "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffSystem", "=", 
             RowBox[{"Activate", "[", 
              RowBox[{
               RowBox[{"Activate", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"system", "//.", "parameters"}], "//.", 
                   RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "/.", 
                  
                  RowBox[{"FernandoDuarte`LongRunRisk`Ewc0", "->", 
                   RowBox[{"Sequence", "@@", "Ewc0"}]}]}], ",", 
                 RowBox[{"Alternatives", "@@", "activateFirst"}]}], "]"}], 
               ",", "alternativesActivateLast"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"indexToSymbol", "=", 
             RowBox[{
              RowBox[{"x_", "[", "i_Integer", "]"}], ":>", 
              RowBox[{"Symbol", "[", 
               RowBox[{
                RowBox[{"SymbolName", "[", "x", "]"}], "<>", 
                RowBox[{"IntegerString", "[", "i", "]"}]}], "]"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"solWithout0", "=", 
             RowBox[{"KeySelect", "[", 
              RowBox[{"sol", ",", 
               RowBox[{
                RowBox[{"Not", "@", 
                 RowBox[{"MatchQ", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"x_", "[", "0", "]"}]}], "]"}]}], "&"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
          "\[IndentingNewLine]", "\t", 
          RowBox[{"With", "[", "\[IndentingNewLine]", "\t", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", "\t", 
             RowBox[{
              RowBox[{"eq0", "=", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "@", 
                  RowBox[{"Select", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"coeffSystem", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}], "/.", 
                    "solWithout0"}], ",", 
                    RowBox[{
                    RowBox[{"Not", "@", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"_", "[", "0", "]"}]}], "]"}]}], "&"}]}], "]"}]}],
                  "/.", "indexToSymbol"}], "//", "N"}]}], ",", 
              "\[IndentingNewLine]", "\t", 
              RowBox[{"ic0", "=", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"Select", "[", 
                  RowBox[{
                   RowBox[{"coeffSystem", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"Not", "@", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"_", "[", "0", "]"}]}], "]"}]}], "&"}]}], "]"}]}],
                 "/.", "indexToSymbol"}]}]}], "\[IndentingNewLine]", "\t", 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Echo", "[", 
              RowBox[{"ic0", ",", "\"\<ic0\>\""}], "]"}], ";", 
             "\[IndentingNewLine]", "\t", 
             RowBox[{
              RowBox[{"ResourceFunction", "[", "\"\<FindRootPlot\>\"", "]"}], 
              "[", 
              RowBox[{
               RowBox[{"Subtract", "@@", "eq0"}], ",", "ic0", ",", 
               RowBox[{"Flatten", "@", 
                RowBox[{"{", "opts", "}"}]}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}], 
         RowBox[{"(*", "With", "*)"}], "\[IndentingNewLine]", "]"}]}], 
       RowBox[{"(*", "With", "*)"}], "\[IndentingNewLine]", "]"}]}], 
     RowBox[{"(*", "With", "*)"}], "\[IndentingNewLine]", "]"}]}], 
   RowBox[{"(*", "With", "*)"}], "\[IndentingNewLine]", "]"}], 
  RowBox[{"(*", "With", "*)"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.90275049747173*^9, 3.9027506133060713`*^9}, {
   3.902750785503784*^9, 3.902750874595606*^9}, {3.9027509221316633`*^9, 
   3.902750929227779*^9}, {3.902750987467383*^9, 3.902751034059656*^9}, 
   3.9027511072318897`*^9, {3.902751198791041*^9, 3.902751236748394*^9}, {
   3.902751535776079*^9, 3.9027515890891323`*^9}, {3.902753020371208*^9, 
   3.9027530384309072`*^9}, {3.9027532200925198`*^9, 3.902753225508328*^9}, {
   3.90275326224419*^9, 3.902753316075032*^9}, {3.9027533606353283`*^9, 
   3.9027534119151163`*^9}, {3.9027534840600433`*^9, 3.902753484216947*^9}, {
   3.902753656148527*^9, 3.902753823140216*^9}, {3.902753856138386*^9, 
   3.902753982862741*^9}, {3.902754013338408*^9, 3.902754018646023*^9}, {
   3.9027540685068827`*^9, 3.902754073066269*^9}, {3.902754123739973*^9, 
   3.902754132888946*^9}, {3.902754176670602*^9, 3.902754183014533*^9}, {
   3.90275425597397*^9, 3.902754336231668*^9}, {3.902754366865666*^9, 
   3.902754428569045*^9}, {3.90275446279263*^9, 3.9027549076761923`*^9}, {
   3.9027549486373777`*^9, 3.902755001976182*^9}, {3.9027551086756487`*^9, 
   3.9027552670001574`*^9}, {3.902755501841921*^9, 3.902755539998415*^9}, {
   3.902755632117098*^9, 3.902755657933927*^9}, {3.902755806480185*^9, 
   3.9027558130338373`*^9}, 3.9027566292838497`*^9, {3.902756862256899*^9, 
   3.902756862983481*^9}, {3.9027570307050343`*^9, 3.902757030870783*^9}, 
   3.902757073611875*^9, {3.903354212394425*^9, 3.9033544323809977`*^9}, {
   3.9033544747020597`*^9, 3.903354503053092*^9}, {3.9033546065413237`*^9, 
   3.903354618106361*^9}, {3.9033546562715073`*^9, 3.903354695976782*^9}, {
   3.903355272544539*^9, 3.903355275741747*^9}, {3.903355560338331*^9, 
   3.903355562824798*^9}, {3.903355746302339*^9, 3.903355751006805*^9}, 
   3.903367430012896*^9},
 CellLabel->
  "In[375]:=",ExpressionUUID->"cf4b3904-d2b7-4c0d-acf7-4f07bf64c8b6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"opts", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"initialGuess", "=", 
    RowBox[{"{", "4.35", "}"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"newParams", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", "1.5"}],
      ",", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`Parameters`gamma", "->", "8"}]}], 
    "*)"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"solWc", "=", 
  RowBox[{"updateCoeffs", "[", 
   RowBox[{"model", ",", "newParams", ",", "opts", ",", 
    RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], ",", 
    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
     RowBox[{"<|", 
      RowBox[{"\"\<Ewc\>\"", "->", "initialGuess"}], "|>"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts"}], 
  RowBox[{"(*", 
   RowBox[{",", 
    RowBox[{"PlotLegends", "->", "Automatic"}]}], "*)"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts", 
   ",", 
   RowBox[{"PlotLegends", "->", "Automatic"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.902755672516103*^9, 3.902755737075512*^9}, {
   3.90275580048024*^9, 3.902755853877122*^9}, {3.90275593959352*^9, 
   3.902756096261532*^9}, {3.902756147847783*^9, 3.9027562398323812`*^9}, {
   3.9027566400187483`*^9, 3.902756797484849*^9}, {3.9027570479453077`*^9, 
   3.9027570486860437`*^9}, 3.903367430013139*^9},
 CellLabel->
  "In[376]:=",ExpressionUUID->"debdc98e-d1f0-427a-a71f-14b056fdb64b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"opts", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"initialGuess", "=", 
    RowBox[{"{", "4.6", "}"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"newParams", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", "1.5"}],
      ",", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`Parameters`gamma", "->", "8"}]}], 
    "*)"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"solWc", "=", 
  RowBox[{"updateCoeffs", "[", 
   RowBox[{"model", ",", "newParams", ",", "opts", ",", 
    RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], ",", 
    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
     RowBox[{"<|", 
      RowBox[{"\"\<Ewc\>\"", "->", "initialGuess"}], "|>"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts"}], 
  RowBox[{"(*", 
   RowBox[{",", 
    RowBox[{"PlotLegends", "->", "Automatic"}]}], "*)"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts", 
   ",", 
   RowBox[{"PlotLegends", "->", "Automatic"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.902757000319029*^9, 3.902757000941647*^9}, 
   3.903367430013316*^9},
 CellLabel->
  "In[382]:=",ExpressionUUID->"158394b4-38fc-4488-a50f-077a445a8db2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"opts", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"initialGuess", "=", 
   RowBox[{"{", "3", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"newParams", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", "1.5"}],
      ",", 
     RowBox[{
     "FernandoDuarte`LongRunRisk`Model`Parameters`gamma", "->", "8"}]}], 
    "*)"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"solWc", "=", 
  RowBox[{"updateCoeffs", "[", 
   RowBox[{"model", ",", "newParams", ",", "opts", ",", 
    RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], ",", 
    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
     RowBox[{"<|", 
      RowBox[{"\"\<Ewc\>\"", "->", "initialGuess"}], "|>"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts"}], 
  RowBox[{"(*", 
   RowBox[{",", 
    RowBox[{"PlotLegends", "->", "Automatic"}]}], "*)"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"plotCoeffs", "[", 
  RowBox[{
  "model", ",", "solWc", ",", "newParams", ",", "initialGuess", ",", "opts", 
   ",", 
   RowBox[{"PlotLegends", "->", "Automatic"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.902757106549612*^9, 3.902757135733921*^9}, {
   3.902757169215858*^9, 3.90275727766996*^9}, {3.902757342183981*^9, 
   3.902757348290078*^9}, {3.90335505351298*^9, 3.903355081319334*^9}, {
   3.903355117665001*^9, 3.903355120230205*^9}, {3.903355181515204*^9, 
   3.903355188470869*^9}, 3.903355387495069*^9, 3.9033674300134983`*^9},
 CellLabel->
  "In[388]:=",ExpressionUUID->"d0706fc7-55e8-4bb6-bc2a-f710361c1e9d"],

Cell["PD", "Subsubsection",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.895881639581942*^9, {3.8958827242255983`*^9, 3.8958827248513823`*^9}, {
   3.895886294760726*^9, 3.895886295335432*^9}, 
   3.9033674300137367`*^9},ExpressionUUID->"41a7a781-5f1e-4db8-921c-\
eaff91bb1ce3"],

Cell[BoxData[
 RowBox[{"solPd", "=", 
  RowBox[{"updateCoeffsPd", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", "\"\<pd\>\"",
      "]"}], ",", 
    RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
    RowBox[{"{", "}"}], ",", "solWc", ",", 
    RowBox[{"\"\<Epd0[1]\>\"", "->", "5.5"}]}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882059198284*^9, 3.895882060157794*^9}, {
   3.89588224193538*^9, 3.895882272519047*^9}, {3.89592523012236*^9, 
   3.895925230350383*^9}, {3.9026749682499228`*^9, 3.90267496825035*^9}, {
   3.903346752711132*^9, 3.903346752847321*^9}, 3.903367430013932*^9},
 CellLabel->
  "In[119]:=",ExpressionUUID->"595ca871-a254-4c25-8a3e-6bc07d255373"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"newParamStock", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"mud", "[", "1", "]"}], "->", 
     RowBox[{"0.8", "*", 
      RowBox[{"mud", "[", "1", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"updateCoeffsPd", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", "\"\<pd\>\"", 
    "]"}], ",", 
   RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newParamStock", ",", 
   "solWc", ",", 
   RowBox[{"\"\<Epd0[1]\>\"", "->", "5"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParamStock", ",", 
   RowBox[{"{", "}"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882134646406*^9, 3.895882162632021*^9}, {
   3.895882213711039*^9, 3.895882218396365*^9}, {3.895882266322233*^9, 
   3.895882374158873*^9}, {3.895882521721136*^9, 3.89588252948306*^9}, 
   3.8959678366761*^9, {3.902674968251134*^9, 3.902674968252007*^9}, {
   3.9033420207312717`*^9, 3.9033420320344*^9}, 3.903367430014099*^9},
 CellLabel->
  "In[120]:=",ExpressionUUID->"65264077-dda2-45cf-8291-15731bd22b08"],

Cell[BoxData[{
 RowBox[{"newParam", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"delta", "->", 
    RowBox[{"0.9", "*", "delta"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"updateCoeffsPd", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", "\"\<pd\>\"", 
    "]"}], ",", 
   RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newParam", ",", 
   "solWc", ",", 
   RowBox[{"\"\<Epd0[1]\>\"", "->", "5"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParam", ",", 
   RowBox[{"{", "}"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882346801435*^9, 3.895882395754321*^9}, 
   3.895967847757676*^9, {3.902674968252727*^9, 3.902674968253482*^9}, 
   3.903367430014204*^9},
 CellLabel->
  "In[123]:=",ExpressionUUID->"d1acdd2d-3135-45c7-bd52-12dbc8dedc5b"],

Cell[BoxData[
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParamStock", ",", 
   RowBox[{"{", "}"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882134646406*^9, 3.895882162632021*^9}, {
   3.895882213711039*^9, 3.895882218396365*^9}, {3.895882360520015*^9, 
   3.895882361975872*^9}, {3.895882469458242*^9, 3.895882475626444*^9}, {
   3.895882537227139*^9, 3.89588257416304*^9}, 3.8958858565278873`*^9, 
   3.895967851821722*^9, 3.902674968254045*^9, 3.9033674300142937`*^9},
 CellLabel->
  "In[126]:=",ExpressionUUID->"51facf79-3fa2-4208-8759-497e9d05c84d"],

Cell[BoxData[{
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParamStock", ",", 
   RowBox[{"{", "}"}], ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "]"}], "\n", 
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParamStock", ",", 
   RowBox[{"{", "}"}], ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
   RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882134646406*^9, 3.895882162632021*^9}, {
   3.895882213711039*^9, 3.895882218396365*^9}, {3.895882360520015*^9, 
   3.895882361975872*^9}, {3.895882469458242*^9, 3.895882475626444*^9}, {
   3.895882537227139*^9, 3.89588257416304*^9}, {3.8958858565278873`*^9, 
   3.895885865233232*^9}, {3.8958859187679977`*^9, 3.895885999114087*^9}, {
   3.895886030855624*^9, 3.895886059812874*^9}, {3.8958860968004503`*^9, 
   3.895886099299676*^9}, {3.895886312825287*^9, 3.895886321223544*^9}, {
   3.895967856557612*^9, 3.895967857595768*^9}, {3.9026749682547503`*^9, 
   3.902674968255136*^9}, 3.9033674300144043`*^9},
 CellLabel->
  "In[127]:=",ExpressionUUID->"276f5aeb-6c06-4493-b0a6-224775ea3645"],

Cell[BoxData[
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", "newParamStock", ",", 
   RowBox[{"{", "}"}], ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], ",", 
   RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Ewc\>\"", "->", 
       RowBox[{"{", "4.1", "}"}]}], ",", 
      RowBox[{"\"\<Epd\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"{", "4.00001", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]], "Input",\

 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882134646406*^9, 3.895882162632021*^9}, {
   3.895882213711039*^9, 3.895882218396365*^9}, {3.895882360520015*^9, 
   3.895882361975872*^9}, {3.895882469458242*^9, 3.895882475626444*^9}, {
   3.895882537227139*^9, 3.89588257416304*^9}, {3.895882624611093*^9, 
   3.8958826434535103`*^9}, {3.895882734258539*^9, 3.89588273533134*^9}, {
   3.895886143170442*^9, 3.895886172575583*^9}, {3.8958863296489697`*^9, 
   3.895886332577561*^9}, 3.895967859013173*^9, 3.902674968255871*^9, {
   3.9027563787499743`*^9, 3.9027563794343567`*^9}, {3.902756930283688*^9, 
   3.9027569302840137`*^9}, {3.903346932994177*^9, 3.9033470131315737`*^9}, {
   3.903347170756966*^9, 3.903347173876943*^9}, 3.903367430014632*^9},
 CellLabel->
  "In[129]:=",ExpressionUUID->"b8de874e-410d-44a6-ac7b-76fee95e75e9"],

Cell[BoxData[
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"mud", "[", "1", "]"}], "->", "0.000171798971158"}], "}"}], ",", 
   "solWc", ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "200"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895145510330256*^9, 3.895145514330055*^9}, {
   3.895145858509598*^9, 3.895145859330676*^9}, {3.895244251502386*^9, 
   3.895244258152309*^9}, {3.895303721412504*^9, 3.895303745964321*^9}, {
   3.895303834592225*^9, 3.8953038384028597`*^9}, {3.895886248991261*^9, 
   3.895886260705221*^9}, 3.902674968256618*^9, 3.9033674300147333`*^9},
 CellLabel->
  "In[130]:=",ExpressionUUID->"83fce17d-91cf-4bb4-a6b9-504592054cad"],

Cell[BoxData[
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"mud", "[", "1", "]"}], "->", "0.000171798971158"}], "}"}], ",", 
   
   RowBox[{"Flatten", "@", "solPd"}], ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "200"}], ",", 
   RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Ewc\>\"", "->", 
       RowBox[{"{", "6.6", "}"}]}], ",", 
      RowBox[{"\"\<Epd\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"{", "5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895319599310861*^9, 3.8953196041124687`*^9}, {
   3.895886239374755*^9, 3.895886242391572*^9}, {3.895886352201865*^9, 
   3.895886358775614*^9}, 3.90267496825729*^9, 3.9027563873899717`*^9, 
   3.9033674300148363`*^9},
 CellLabel->
  "In[131]:=",ExpressionUUID->"d52e3a9a-0790-4f79-be48-6718ef08034e"],

Cell[BoxData[
 RowBox[{"updateCoeffsSol", "[", 
  RowBox[{"model", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"mud", "[", "1", "]"}], "->", "0.000171798971158"}], "}"}], ",", 
   
   RowBox[{"Flatten", "@", 
    RowBox[{"Join", "[", 
     RowBox[{"solWc", ",", "solPd"}], "]"}]}], ",", " ", 
   RowBox[{"\"\<MaxIterations\>\"", "->", "200"}], ",", 
   RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Ewc\>\"", "->", 
       RowBox[{"{", "6.6", "}"}]}], ",", 
      RowBox[{"\"\<Epd\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"{", "5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895319069450287*^9, 3.895319073077476*^9}, {
   3.8953191133742857`*^9, 3.895319129969843*^9}, {3.895886212488936*^9, 
   3.8958862325909033`*^9}, {3.895886366234297*^9, 3.895886368017703*^9}, 
   3.902674968257958*^9, 3.9027563892623053`*^9, 3.9033674300149393`*^9},
 CellLabel->
  "In[132]:=",ExpressionUUID->"ef33233b-f901-413e-804c-43a284e9eb19"],

Cell["Bonds", "Subsubsection",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895882737001993*^9, 3.895882738387738*^9}, 
   3.9033674300150423`*^9},ExpressionUUID->"72e8b36d-4e3b-4df4-969d-\
c7068276c4c1"],

Cell[BoxData[{
 RowBox[{"solBond", "=", 
  RowBox[{"updateCoeffsBond", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
     "\"\<bond\>\"", "]"}], ",", 
    RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
    RowBox[{"{", "}"}], ",", "12", ",", "solWc"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"solNomBond", "=", 
  RowBox[{"updateCoeffsBond", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
     "\"\<nombond\>\"", "]"}], ",", 
    RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
    RowBox[{"{", "}"}], ",", "12", ",", "solWc"}], "]"}]}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.895134481019923*^9, 3.895134481433093*^9}, {
   3.895146674996188*^9, 3.895146701718624*^9}, {3.895146917704774*^9, 
   3.895146938136932*^9}, {3.895243786555932*^9, 3.895243816776692*^9}, {
   3.895303694547784*^9, 3.895303696345989*^9}, {3.8958856960874653`*^9, 
   3.895885702855577*^9}, {3.902674968258649*^9, 3.902674968259817*^9}, 
   3.903367430015148*^9},
 CellLabel->
  "In[133]:=",ExpressionUUID->"36835994-0ce4-4864-a0c9-303b5bf07c9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "coeff", " ", "returns", " ", "Values", " ", "that", " ", "are", " ", 
    "numbers"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"model", "=", "modBKY"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"modelc", "=", 
     RowBox[{"coeff", "[", "model", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"NumberQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Values", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", "modelc", "}"}]}]}], ")"}]}], ")"}]}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.901549360267252*^9, 3.903367430015267*^9},
 CellLabel->
  "In[135]:=",ExpressionUUID->"6f9d0f79-8491-43e3-8ab3-edc45610e7c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"check", " ", "maxMaturity", " ", "option"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"modelMaxMaturity", " ", "=", " ", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<maxMaturity\>\"", "->", "2"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"NumberQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Values", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", "modelMaxMaturity", "}"}]}]}], ")"}]}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"NumberQ", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`R", "[", "2", 
       "]"}], "[", "0", "]"}], "/.", "modelMaxMaturity"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Not", "@", 
    RowBox[{"NumberQ", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`R", "[", "3", 
        "]"}], "[", "0", "]"}], "/.", "modelMaxMaturity"}], "]"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"check", " ", "FindRoot"}], ",", " ", 
     RowBox[{"RecurrenceTable", " ", "options"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"modelOptions", " ", "=", " ", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<maxMaturity\>\"", "->", "2"}], ",", 
       RowBox[{"PrecisionGoal", "\[Rule]", "$MachinePrecision"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"NumberQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Values", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", "modelOptions", "}"}]}]}], ")"}]}], ")"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{"pass", " ", "new", " ", "parameters"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"modelParam", " ", "=", " ", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<parameters\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"psi", "->", "1.3"}], "}"}]}], ",", 
       RowBox[{"MaxIterations", "->", "3500"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"NumberQ", "/@", 
      RowBox[{"(", 
       RowBox[{"Values", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", "modelParam", "}"}]}]}], ")"}]}], ")"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "1", 
        "]"}], "/.", "modelc"}], ")"}], "===", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", "1", 
        "]"}], "/.", "modelParam"}], ")"}]}], "]"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320486700457*^9, 3.893204962019204*^9}, 
   3.8932056137420464`*^9, 3.8932058980062532`*^9, {3.893215090559119*^9, 
   3.8932151130068493`*^9}, {3.8932169948280354`*^9, 3.89321700630632*^9}, {
   3.893217326676784*^9, 3.893217332703724*^9}, {3.893219085733716*^9, 
   3.893219153921521*^9}, {3.893219336448955*^9, 3.893219342737569*^9}, 
   3.9033674300154552`*^9},
 CellLabel->
  "In[138]:=",ExpressionUUID->"903f2ecc-3845-4bfa-a6bb-b7a8985e0552"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "change", " ", "initial", " ", "guess", " ", "for", " ", "solver"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SuperscriptBox["10", 
     RowBox[{"-", "8"}]], ">=", 
    RowBox[{"Plus", "@@", 
     RowBox[{"(", 
      RowBox[{"RealAbs", "/@", 
       RowBox[{"(", 
        RowBox[{"Chop", "[", 
         RowBox[{
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", "model", "]"}]}], "-", 
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", 
            RowBox[{"model", ",", 
             RowBox[{"\"\<initialGuessEwc\>\"", "->", "7"}]}], "]"}]}]}], 
         "]"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
   RowBox[{
    SuperscriptBox["10", 
     RowBox[{"-", "8"}]], ">=", 
    RowBox[{"Plus", "@@", 
     RowBox[{"(", 
      RowBox[{"RealAbs", "/@", 
       RowBox[{"(", 
        RowBox[{"Chop", "[", 
         RowBox[{
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", "model", "]"}]}], "-", 
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", 
            RowBox[{"model", ",", 
             RowBox[{"\"\<initialGuessEPd\>\"", "->", "6"}]}], "]"}]}]}], 
         "]"}], ")"}]}], ")"}]}]}], "\[IndentingNewLine]", 
   RowBox[{
    SuperscriptBox["10", 
     RowBox[{"-", "8"}]], ">=", 
    RowBox[{"Plus", "@@", 
     RowBox[{"(", 
      RowBox[{"RealAbs", "/@", 
       RowBox[{"(", 
        RowBox[{"Chop", "[", 
         RowBox[{
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", "model", "]"}]}], "-", 
          RowBox[{"Values", "@", 
           RowBox[{"coeff", "[", 
            RowBox[{"model", ",", 
             RowBox[{"\"\<initialGuessEwc\>\"", "->", "7"}], ",", 
             RowBox[{"\"\<initialGuessEPd\>\"", "->", "6"}]}], "]"}]}]}], 
         "]"}], ")"}]}], ")"}]}]}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320486700457*^9, 3.893204962019204*^9}, 
   3.8932056137420464`*^9, 3.8932058980062532`*^9, {3.893215090559119*^9, 
   3.8932151130068493`*^9}, {3.8932169948280354`*^9, 3.89321700630632*^9}, {
   3.893217326676784*^9, 3.893217332703724*^9}, {3.893219085733716*^9, 
   3.893219153921521*^9}, {3.893219336448955*^9, 3.893219342737569*^9}, {
   3.893219458556484*^9, 3.893219630777573*^9}, 3.903367430015628*^9},
 CellLabel->
  "In[147]:=",ExpressionUUID->"6730f95d-c5ae-41f0-a62b-6f23e01a3ddf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "issue", " ", "message", " ", "and", " ", "compute", " ", "theta", " ", 
     "using", " ", "the", " ", "user"}], "-", 
    RowBox[{"provided", " ", "psi", " ", "and", " ", "gamma"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Values", "@", 
      RowBox[{"coeff", "[", 
       RowBox[{"model", ",", 
        RowBox[{"\"\<parameters\>\"", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"psi", "->", "1.3"}], ",", 
           RowBox[{"gamma", "->", "3"}], ",", 
           RowBox[{"theta", "->", "2"}]}], "}"}]}]}], "]"}]}], "===", 
     RowBox[{"Values", "@", 
      RowBox[{"coeff", "[", "model", "]"}]}]}], "]"}], "\[IndentingNewLine]", 
   "\n", 
   RowBox[{
    RowBox[{"Values", "@", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<parameters\>\"", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"psi", "->", "1.3"}], ",", 
          RowBox[{"gamma", "->", "3"}], ",", 
          RowBox[{"theta", "->", "2"}]}], "}"}]}]}], "]"}]}], "===", 
    RowBox[{"Values", "@", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<parameters\>\"", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"psi", "->", "1.3"}], ",", 
          RowBox[{"gamma", "->", "3"}], ",", 
          RowBox[{"theta", "->", 
           RowBox[{"N", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"1", "-", "3"}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"1", "-", 
               RowBox[{"1", "/", "1.3"}]}], ")"}]}], "]"}]}]}], "}"}]}]}], 
      "]"}]}], "===", 
    RowBox[{"Values", "@", 
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<parameters\>\"", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"psi", "->", "1.3"}], ",", 
          RowBox[{"gamma", "->", "3"}]}], "}"}]}]}], "]"}]}]}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320486700457*^9, 3.893204962019204*^9}, 
   3.8932056137420464`*^9, 3.8932058980062532`*^9, {3.893215090559119*^9, 
   3.8932151130068493`*^9}, {3.8932169948280354`*^9, 3.89321700630632*^9}, {
   3.893217326676784*^9, 3.893217352523203*^9}, {3.893217479901515*^9, 
   3.893217487164637*^9}, {3.893217763018086*^9, 3.8932178003639*^9}, 
   3.903367430015808*^9},
 CellLabel->
  "In[150]:=",ExpressionUUID->"2d160caf-45b8-4e78-a1ae-7d8ba15b9442"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"provide", " ", "2", " ", "of", " ", 
     RowBox[{"{", 
      RowBox[{"psi", ",", "gamma", ",", "theta"}], "}"}]}], ",", " ", 
    RowBox[{
    "code", " ", "solves", " ", "for", " ", "the", " ", "third", " ", 
     "one"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"coeff", "[", 
      RowBox[{"model", ",", 
       RowBox[{"\"\<parameters\>\"", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"psi", "->", "1.3"}], ",", 
          RowBox[{"gamma", "->", "3"}]}], "}"}]}]}], "]"}], "===", 
     RowBox[{"coeff", "[", "model", "]"}]}], "]"}], "\n", 
   RowBox[{
    RowBox[{"coeff", "[", 
     RowBox[{"model", ",", 
      RowBox[{"\"\<parameters\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"psi", "->", "1.3"}], ",", 
         RowBox[{"gamma", "->", "3"}]}], "}"}]}]}], "]"}], "===", 
    RowBox[{"coeff", "[", 
     RowBox[{"model", ",", 
      RowBox[{"\"\<parameters\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"psi", "->", "1.3"}], ",", 
         RowBox[{"theta", "->", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "3"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"1", "/", "1.3"}]}], ")"}]}]}]}], "}"}]}]}], "]"}], "===", 
    RowBox[{"coeff", "[", 
     RowBox[{"model", ",", 
      RowBox[{"\"\<parameters\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"theta", "->", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "3"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"1", "/", "1.3"}]}], ")"}]}]}], ",", 
         RowBox[{"gamma", "->", "3"}]}], "}"}]}]}], "]"}]}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320486700457*^9, 3.893204962019204*^9}, 
   3.8932056137420464`*^9, 3.8932058980062532`*^9, {3.893215090559119*^9, 
   3.8932151130068493`*^9}, {3.8932169948280354`*^9, 3.89321700630632*^9}, {
   3.893217326676784*^9, 3.893217338344111*^9}, {3.893217380393572*^9, 
   3.893217427050227*^9}, {3.893217847655972*^9, 3.8932178701808167`*^9}, 
   3.903367430015984*^9},
 CellLabel->
  "In[152]:=",ExpressionUUID->"54eddef3-9404-4812-89f3-35c69efccddb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "abort"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"psi", "=", "1"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"coeff", "[", 
    RowBox[{"model", ",", 
     RowBox[{"\"\<parameters\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"psi", "->", "1"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"theta", " ", "without", " ", "gamma", " ", "or", " ", "psi"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"coeff", "[", 
    RowBox[{"model", ",", 
     RowBox[{"\"\<parameters\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"theta", "->", "1"}], "}"}]}]}], "]"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.893213480493442*^9, 3.893213513867922*^9}, {
   3.8932146381185923`*^9, 3.893214645371011*^9}, {3.893214945164032*^9, 
   3.893214979367539*^9}, {3.893215127014707*^9, 3.8932151420286016`*^9}, 
   3.893218030976947*^9, 3.893336223043859*^9, 3.9033674300161057`*^9},
 CellLabel->
  "In[154]:=",ExpressionUUID->"df4da6a6-b774-4d32-ae15-0facc4b518c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"provided", " ", "incorrect", " ", "parameters"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"coeff", "[", 
   RowBox[{"model", ",", 
    RowBox[{"\"\<parameters\>\"", "->", 
     RowBox[{"{", 
      RowBox[{"foo", "->", "1"}], "}"}]}]}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.893213480493442*^9, 3.893213513867922*^9}, {
   3.8932146381185923`*^9, 3.893214645371011*^9}, {3.893214945164032*^9, 
   3.893214979367539*^9}, {3.893215127014707*^9, 3.8932151420286016`*^9}, 
   3.893218030976947*^9, 3.903367430016203*^9},
 CellLabel->
  "In[156]:=",ExpressionUUID->"9cbc1c2d-4a83-43ae-b5ed-880e7b1b386c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modBKYc", "=", 
   RowBox[{"coeff", "[", "modBKY", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320355487665*^9, 3.89320355984653*^9}, 
   3.89320441553959*^9, {3.8932044586221333`*^9, 3.8932044968664923`*^9}, 
   3.893336299812443*^9, 3.901549442206107*^9, 3.903367430016304*^9},
 CellLabel->
  "In[157]:=",ExpressionUUID->"8e464c46-f34c-46e9-9835-966f173dd67d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modNRCc", "=", 
   RowBox[{"coeff", "[", "modNRC", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320355487665*^9, 3.89320355984653*^9}, 
   3.89320441553959*^9, {3.8932044586221333`*^9, 3.8932044968664923`*^9}, {
   3.893336299812443*^9, 3.893336302092616*^9}, 3.901549445754847*^9, 
   3.903367430016391*^9},
 CellLabel->
  "In[158]:=",ExpressionUUID->"172ae682-a4b2-4ad7-8ecd-fa49b7754677"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"modBSc", "=", 
    RowBox[{"coeff", "[", "modBS", "]"}]}], ";"}], "*)"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320355487665*^9, 3.89320355984653*^9}, 
   3.89320441553959*^9, {3.8932044586221333`*^9, 3.8932044968664923`*^9}, {
   3.893336299812443*^9, 3.893336305261215*^9}, {3.901549448339552*^9, 
   3.901549456186776*^9}, 3.903367430016477*^9},
 CellLabel->
  "In[159]:=",ExpressionUUID->"b7dced97-8f8c-4fb5-83fc-19ff0eb1a136"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modDESc", "=", 
   RowBox[{"coeff", "[", "modDES", "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320355487665*^9, 3.89320355984653*^9}, 
   3.89320441553959*^9, {3.8932044586221333`*^9, 3.8932044968664923`*^9}, {
   3.893336299812443*^9, 3.893336307173601*^9}, 3.901549450525608*^9, 
   3.903367430016568*^9},
 CellLabel->
  "In[160]:=",ExpressionUUID->"3dad1a1f-8e74-4650-ba37-8e8046525fb0"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"modWCratioc", "=", 
    RowBox[{"coeff", "[", "modWCratio", "]"}]}], ";"}], "*)"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.89320355487665*^9, 3.89320355984653*^9}, 
   3.89320441553959*^9, {3.8932044586221333`*^9, 3.8932044968664923`*^9}, {
   3.893336299812443*^9, 3.893336307173601*^9}, {3.901549451764057*^9, 
   3.9015494590554447`*^9}, 3.903367430016657*^9},
 CellLabel->
  "In[161]:=",ExpressionUUID->"f3389191-df7a-43dd-af7f-3b8af3d4e3b1"],

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{"NumberQ", "/@", 
    RowBox[{"(", 
     RowBox[{"Values", "@", 
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"modBKYc", ",", "modNRCc", ",", "modDESc"}], "}"}]}]}], 
     ")"}]}], ")"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.893204509144492*^9, 3.893204518728978*^9}, {
   3.901549482908464*^9, 3.901549485162991*^9}, 3.903367430016749*^9},
 CellLabel->
  "In[162]:=",ExpressionUUID->"bc9cc504-c4ff-41c7-8ed5-09e6cf3369b4"],

Cell[BoxData[
 RowBox[{"coeff", "[", 
  RowBox[{"modNRCa", ",", 
   RowBox[{"\"\<maxMaturity\>\"", "->", "120"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.893347469130912*^9, 3.8933474957838917`*^9}, {
   3.89334778864644*^9, 3.893347789028409*^9}, 3.903367430016839*^9},
 CellLabel->
  "In[163]:=",ExpressionUUID->"1d85eb20-a924-4402-b7dd-4b87ef3511de"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "processNewParameters", "=", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
processNewParameters"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "issue", " ", "message", " ", "and", " ", "compute", " ", "theta", 
         " ", "using", " ", "the", " ", "user"}], "-", 
        RowBox[{"provided", " ", "psi", " ", "and", " ", "gamma"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"psi", "->", "1.3"}], ",", 
            RowBox[{"gamma", "->", "3"}], ",", 
            RowBox[{"theta", "->", "2"}]}], "}"}], ",", 
          RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}], "===", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`psi", "\[Rule]", 
           "1.3`"}], ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`gamma", "\[Rule]", 
           "3"}], ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`theta", "\[Rule]", 
           RowBox[{"-", "8.666666666666664`"}]}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"ignore", " ", "user"}], "-", 
         RowBox[{
         "provided", " ", "theta", " ", "and", " ", "return", " ", "theta", 
          " ", "computed", " ", "using", " ", "the", " ", "user"}], "-", 
         RowBox[{"provided", " ", "psi", " ", "and", " ", "gamma"}]}], "*)"}],
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"processNewParameters", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"psi", "->", "1.3"}], ",", 
            RowBox[{"gamma", "->", "3"}], ",", 
            RowBox[{"theta", "->", "2"}]}], "}"}], ",", 
          RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}], "===", 
        RowBox[{"processNewParameters", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"psi", "->", "1.3"}], ",", 
            RowBox[{"gamma", "->", "3"}], ",", 
            RowBox[{"theta", "->", 
             RowBox[{"N", "[", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "-", "3"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"1", "/", "1.3"}]}], ")"}]}], "]"}]}]}], "}"}], ",", 
          
          RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"provide", " ", "2", " ", "of", " ", 
          RowBox[{"{", 
           RowBox[{"psi", ",", "gamma", ",", "theta"}], "}"}]}], ",", " ", 
         RowBox[{
         "code", " ", "solves", " ", "for", " ", "the", " ", "third", " ", 
          "one"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Sort", "@", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"psi", "->", "1.3"}], ",", 
             RowBox[{"gamma", "->", "3"}]}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"psi", "->", "1.3"}], ",", 
             RowBox[{"gamma", "->", "3"}]}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}]}], "===", 
        RowBox[{"Sort", "@", 
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"theta", "->", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"1", "-", "3"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"1", "/", "1.3"}]}], ")"}]}]}], ",", 
             RowBox[{"gamma", "->", "3"}]}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}]}], "===", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`gamma", "\[Rule]", 
           "3"}], ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`psi", "\[Rule]", 
           "1.3`"}], ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`Parameters`theta", "\[Rule]", 
           RowBox[{"-", "8.666666666666664`"}]}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", "\n", 
       RowBox[{"(*", 
        RowBox[{"should", " ", "abort"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"psi", "=", "1"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"CheckAbort", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"psi", "->", "1"}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}], ",", 
         "True"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "theta", " ", "without", " ", "gamma", " ", "or", " ", "psi"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"CheckAbort", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"theta", "->", "1"}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}], ",", 
         "True"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"provided", " ", "incorrect", " ", "parameters"}], "*)"}], 
       "\n", 
       RowBox[{"CheckAbort", "[", 
        RowBox[{
         RowBox[{"processNewParameters", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"foo", "->", "1"}], "}"}], ",", 
           RowBox[{"model", "[", "\"\<parameters\>\"", "]"}]}], "]"}], ",", 
         "True"}], "]"}]}], "\[IndentingNewLine]", "}"}]}], 
    "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"model", ",", 
      RowBox[{"{", 
       RowBox[{"modBKY", ",", "modNRC"}], "}"}]}], "}"}]}], "]"}]}]}], "Input",\

 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8941774517001047`*^9, 3.894177539616911*^9}, {
   3.894177572117379*^9, 3.8941777214735126`*^9}, {3.894178059911865*^9, 
   3.8941780708634043`*^9}, {3.89417811051646*^9, 3.894178217704805*^9}, {
   3.894178250113542*^9, 3.894178408428382*^9}, {3.901549523078267*^9, 
   3.901549524437027*^9}, 3.903367430017174*^9},
 CellLabel->
  "In[164]:=",ExpressionUUID->"8ab47633-4cc9-4e09-89d4-e325f2da4b21"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1010, 930},
WindowMargins->{{80, Automatic}, {Automatic, 0}},
WindowStatusArea->"",
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"687ad4e1-2cb9-4e32-a333-97f0266cb208"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 215, 4, 37, "Input",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],
Cell[CellGroupData[{
Cell[640, 21, 1958, 37, 194, "Input",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],
Cell[2601, 60, 264, 3, 42, "Output",ExpressionUUID->"51fae73d-b600-4844-8572-bb7d973df86a"],
Cell[2868, 65, 242, 3, 42, "Output",ExpressionUUID->"451a7a23-6ce5-4998-b5aa-377ef952002b"],
Cell[3113, 70, 264, 4, 42, "Output",ExpressionUUID->"de9b8b32-9c4f-4a5e-988b-446a7d67a3f5"],
Cell[3380, 76, 188, 2, 42, "Output",ExpressionUUID->"5d70e76b-5d54-45d2-bb19-c8d8d97e21e0"],
Cell[3571, 80, 282, 5, 42, "Output",ExpressionUUID->"f0142bf3-adc8-43b1-acec-df82a33f5f80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3890, 90, 255, 4, 67, "Subsection",ExpressionUUID->"2157750c-ae6d-47e9-b5dd-9c68ad40141b"],
Cell[4148, 96, 381, 10, 37, "Input",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],
Cell[CellGroupData[{
Cell[4554, 110, 601, 11, 64, "Input",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],
Cell[5158, 123, 241, 3, 42, "Output",ExpressionUUID->"6dedbfe7-921c-4974-ad27-543d6dd8319b"]
}, Open  ]],
Cell[5414, 129, 261, 5, 37, "Input",ExpressionUUID->"ed50da44-63c4-4c2d-93eb-f54b1777aa81"],
Cell[CellGroupData[{
Cell[5700, 138, 136796, 3245, 19591, "Input",ExpressionUUID->"06ab1b38-cea5-4ae6-b2d5-544ea578d153"],
Cell[142499, 3385, 429, 10, 35, "Message",ExpressionUUID->"eb11da08-df80-4c06-a661-2738b231ce38"],
Cell[142931, 3397, 429, 10, 35, "Message",ExpressionUUID->"52c4befb-a309-4607-9491-c678aea8463c"],
Cell[143363, 3409, 429, 10, 35, "Message",ExpressionUUID->"4ea38346-77e1-4b30-8acf-44bf4c3d266e"],
Cell[143795, 3421, 429, 10, 35, "Message",ExpressionUUID->"c411becd-0e6e-4b6e-88c8-5c414f147e92"],
Cell[144227, 3433, 431, 10, 35, "Message",ExpressionUUID->"b81fe4b0-ee00-467a-85c9-840c46c723a1"],
Cell[144661, 3445, 429, 10, 35, "Message",ExpressionUUID->"2ec6803b-0964-4491-84e8-c7f469b37ca7"],
Cell[145093, 3457, 429, 10, 35, "Message",ExpressionUUID->"db927d9d-68c9-45ef-a7ef-bdafea760236"],
Cell[145525, 3469, 431, 10, 35, "Message",ExpressionUUID->"3e62d301-ee73-41a9-b64c-6c9bc27ee1c6"],
Cell[145959, 3481, 431, 10, 35, "Message",ExpressionUUID->"39451ede-9294-4d40-ac78-d13a3809ae6f"],
Cell[146393, 3493, 430, 10, 35, "Message",ExpressionUUID->"51f0dc8b-638f-4945-8fc6-603785baff58"],
Cell[146826, 3505, 430, 10, 35, "Message",ExpressionUUID->"c6487026-ce13-4b03-baeb-e0592c5b5eab"],
Cell[147259, 3517, 430, 10, 35, "Message",ExpressionUUID->"6df664fe-f30e-4fd7-95c1-50715f54769f"],
Cell[147692, 3529, 495, 12, 35, "Message",ExpressionUUID->"9f0305a9-c3b8-4e9f-a6fa-4a2d865c4f93"],
Cell[148190, 3543, 587, 13, 35, "Message",ExpressionUUID->"092d84e0-cb5a-43a5-af9d-4eccf249f444"],
Cell[148780, 3558, 585, 13, 35, "Message",ExpressionUUID->"de78cfe1-2516-4a3f-be69-3feafccdbdd7"],
Cell[149368, 3573, 589, 13, 35, "Message",ExpressionUUID->"5e67602f-8960-4b60-97af-90e254717d5b"],
Cell[149960, 3588, 432, 10, 35, "Message",ExpressionUUID->"60b9aad1-bb44-475f-a77c-ed9baaab1094"],
Cell[150395, 3600, 430, 10, 35, "Message",ExpressionUUID->"8f177ba7-d969-4389-8658-1412a6df517d"],
Cell[150828, 3612, 430, 10, 35, "Message",ExpressionUUID->"75ca5957-8729-4f28-b36b-0da95c3fa7e7"],
Cell[151261, 3624, 430, 10, 35, "Message",ExpressionUUID->"0239fafa-206a-4a1e-bdc6-3c360c82e5f0"],
Cell[151694, 3636, 495, 12, 35, "Message",ExpressionUUID->"b3af5dae-afe7-4b6f-be37-d836c0b8e350"],
Cell[152192, 3650, 495, 12, 35, "Message",ExpressionUUID->"b677c746-91ab-4e17-8d77-9de7a9167faa"],
Cell[152690, 3664, 437, 10, 35, "Message",ExpressionUUID->"cc3cb8f6-1473-4e87-bb38-8ff2d230b931"],
Cell[153130, 3676, 439, 10, 35, "Message",ExpressionUUID->"acf63161-6f1d-42a9-920b-3b36fa3db1b5"],
Cell[153572, 3688, 430, 10, 35, "Message",ExpressionUUID->"5ab927f1-0c89-4475-964d-90d270bf9002"],
Cell[154005, 3700, 430, 10, 35, "Message",ExpressionUUID->"e622a66e-b1ed-493d-b361-128f424970c0"],
Cell[154438, 3712, 428, 10, 35, "Message",ExpressionUUID->"02bfb879-1984-477b-b35e-8efc75d191d0"],
Cell[154869, 3724, 495, 12, 35, "Message",ExpressionUUID->"795b183c-d74b-4bf0-88c0-a8e81820849b"],
Cell[155367, 3738, 496, 12, 35, "Message",ExpressionUUID->"15a6ace9-1058-4478-bf6e-fb6815d834e0"],
Cell[155866, 3752, 495, 12, 35, "Message",ExpressionUUID->"ae09b6a3-ad7c-4621-af7c-79ca19c37c6a"],
Cell[156364, 3766, 589, 13, 35, "Message",ExpressionUUID->"a8051d23-3d87-49e3-ad13-a580710d384f"],
Cell[156956, 3781, 583, 13, 35, "Message",ExpressionUUID->"abf2c9a5-5474-4337-91a3-ff313e03bc11"],
Cell[157542, 3796, 583, 13, 35, "Message",ExpressionUUID->"c7dfd065-adb6-4aef-bfa3-d27e19faa6f9"],
Cell[158128, 3811, 583, 13, 35, "Message",ExpressionUUID->"e3830cb2-002e-4195-b791-9ffe83bd9b08"],
Cell[158714, 3826, 589, 13, 35, "Message",ExpressionUUID->"449056c2-f7bb-4573-b939-d7a6cd4384e6"],
Cell[159306, 3841, 430, 10, 35, "Message",ExpressionUUID->"a378c6bf-45da-4c39-82b7-424ff7b7c084"],
Cell[159739, 3853, 430, 10, 35, "Message",ExpressionUUID->"602f4d02-4cd4-45de-bf90-313ffd41eb4a"],
Cell[160172, 3865, 429, 10, 35, "Message",ExpressionUUID->"904c7ea9-8978-4a38-bcec-75074f927e7c"],
Cell[160604, 3877, 430, 10, 35, "Message",ExpressionUUID->"d4908b94-8a5d-48e0-a72b-83eeaea816b6"],
Cell[161037, 3889, 430, 10, 35, "Message",ExpressionUUID->"588f383a-d0bf-4b94-bd34-b72912fb22ab"],
Cell[161470, 3901, 430, 10, 35, "Message",ExpressionUUID->"d7aabade-404e-4d3a-aa8f-809294b68be4"],
Cell[161903, 3913, 430, 10, 35, "Message",ExpressionUUID->"0209bc56-c5c4-42db-b84d-eaeaf08228b6"],
Cell[162336, 3925, 432, 10, 35, "Message",ExpressionUUID->"7e67c30d-d2a5-4471-ba24-f97a7c53c701"],
Cell[162771, 3937, 430, 10, 35, "Message",ExpressionUUID->"76c82d6f-b33b-4892-8160-b14817bbd2a4"],
Cell[163204, 3949, 432, 10, 35, "Message",ExpressionUUID->"e37e54c2-756f-4022-8451-68e48e8bd0ff"],
Cell[163639, 3961, 428, 10, 35, "Message",ExpressionUUID->"4f2a8c9e-405f-4c84-82ec-826fc59cf72b"],
Cell[164070, 3973, 432, 10, 35, "Message",ExpressionUUID->"65ac1e23-e523-4dc4-b1c4-9d8037f54b4b"],
Cell[164505, 3985, 495, 12, 35, "Message",ExpressionUUID->"54fa806b-0014-452e-a73a-119c4f716e89"],
Cell[165003, 3999, 589, 13, 35, "Message",ExpressionUUID->"0d225fb9-6d6d-4a24-a12f-892133c9bbdb"],
Cell[165595, 4014, 583, 13, 35, "Message",ExpressionUUID->"53a63c6e-cb50-44b8-9184-1ec0c210a855"],
Cell[166181, 4029, 589, 13, 35, "Message",ExpressionUUID->"20d99db8-fddc-4afa-8b59-46eb71788471"],
Cell[166773, 4044, 430, 10, 35, "Message",ExpressionUUID->"71d5c480-23fb-434c-9e94-56a22a6f9352"],
Cell[167206, 4056, 430, 10, 35, "Message",ExpressionUUID->"a6c8a63b-93de-4cd9-9f15-223955ee5888"],
Cell[167639, 4068, 430, 10, 35, "Message",ExpressionUUID->"2506cb94-bec3-46b4-b589-a0ab19238fb8"],
Cell[168072, 4080, 430, 10, 35, "Message",ExpressionUUID->"264fd653-8ecc-411a-ab73-a9b46178efb1"],
Cell[168505, 4092, 495, 12, 35, "Message",ExpressionUUID->"31e1b298-2d78-4dca-8861-3fb457e3a159"],
Cell[169003, 4106, 495, 12, 35, "Message",ExpressionUUID->"c65f06c0-d1e4-45aa-9134-4c20b9054565"],
Cell[169501, 4120, 439, 10, 35, "Message",ExpressionUUID->"2aea6de3-7d8b-4a05-8031-d4901e5f313f"],
Cell[169943, 4132, 439, 10, 35, "Message",ExpressionUUID->"087fa073-06ef-4d54-bd57-6ff8e83fd7b8"],
Cell[170385, 4144, 430, 10, 35, "Message",ExpressionUUID->"b3b5917e-d02a-419a-b3ee-b2bb61e54f05"],
Cell[170818, 4156, 430, 10, 35, "Message",ExpressionUUID->"17fe2c77-1f89-435e-9e15-13ce03583dfa"],
Cell[171251, 4168, 430, 10, 35, "Message",ExpressionUUID->"5c106730-3849-496d-8276-c92f64104866"],
Cell[171684, 4180, 495, 12, 35, "Message",ExpressionUUID->"9521eaf3-65d9-4e39-9fce-e1ad8866455d"],
Cell[172182, 4194, 496, 12, 35, "Message",ExpressionUUID->"632358fb-4178-4562-9936-7bdd52b41e43"],
Cell[172681, 4208, 497, 12, 35, "Message",ExpressionUUID->"17550b8f-1b9d-4ea3-ba99-0dd3436c8390"],
Cell[173181, 4222, 589, 13, 35, "Message",ExpressionUUID->"2425d304-0d8c-4fc8-969b-183b2a1af004"],
Cell[173773, 4237, 583, 13, 35, "Message",ExpressionUUID->"b62e2b72-468d-42d8-991d-38fcc7fe7820"],
Cell[174359, 4252, 586, 13, 35, "Message",ExpressionUUID->"42a088c4-39aa-4af5-b891-db96f531797f"],
Cell[174948, 4267, 582, 13, 35, "Message",ExpressionUUID->"dcf2b015-da8f-49f2-b351-750901853a21"],
Cell[175533, 4282, 589, 13, 35, "Message",ExpressionUUID->"ee7e336a-9c09-4435-aebf-374cad021bf2"],
Cell[176125, 4297, 432, 10, 35, "Message",ExpressionUUID->"379216d4-2a7c-40ba-8512-965f1d4c7e5a"],
Cell[176560, 4309, 430, 10, 35, "Message",ExpressionUUID->"7915f9b9-6a1c-4fc5-8166-0cdb3261fa9c"],
Cell[176993, 4321, 430, 10, 35, "Message",ExpressionUUID->"9aab2b35-401c-4836-a4b2-67a14b5ff537"],
Cell[177426, 4333, 430, 10, 35, "Message",ExpressionUUID->"2aa58009-9594-4a66-8395-ef7b4b3c67c9"],
Cell[177859, 4345, 432, 10, 35, "Message",ExpressionUUID->"d8fa15e3-3cd6-44ab-a9df-cebd83b90159"],
Cell[178294, 4357, 430, 10, 35, "Message",ExpressionUUID->"a7ac879b-5dc7-4eb2-87ca-7741b9f8503d"],
Cell[178727, 4369, 430, 10, 35, "Message",ExpressionUUID->"cdc0cfd7-ce77-429c-871c-6ecbd473da7d"],
Cell[179160, 4381, 432, 10, 35, "Message",ExpressionUUID->"694fbc94-014c-4189-979c-d4d221bbcc3f"],
Cell[179595, 4393, 429, 10, 35, "Message",ExpressionUUID->"9aeb2b42-6a06-4eaf-aacd-607872c2addd"],
Cell[180027, 4405, 430, 10, 35, "Message",ExpressionUUID->"f63c9372-d57d-4be8-ab7b-c2debd576e49"],
Cell[180460, 4417, 430, 10, 35, "Message",ExpressionUUID->"72116f74-a107-4f83-a0a0-8f183a23e8c3"],
Cell[180893, 4429, 430, 10, 35, "Message",ExpressionUUID->"bda66598-d6ac-45e0-9d38-b38db2163df4"],
Cell[181326, 4441, 495, 12, 35, "Message",ExpressionUUID->"5e9270ec-dd29-4fbc-a761-7be6b159030e"],
Cell[181824, 4455, 589, 13, 35, "Message",ExpressionUUID->"ea677468-0885-4a40-9fde-bb2010898271"],
Cell[182416, 4470, 583, 13, 35, "Message",ExpressionUUID->"1229e23a-7929-454d-ab41-fa264e036426"],
Cell[183002, 4485, 591, 13, 35, "Message",ExpressionUUID->"eb394eec-1606-45fa-8142-62bf506d59f7"],
Cell[183596, 4500, 621, 12, 79, "Message",ExpressionUUID->"d9772463-c2a2-41d9-ada4-4e9977fbc178"],
Cell[184220, 4514, 430, 10, 35, "Message",ExpressionUUID->"8f9034a5-c77b-4087-88b9-6ae59fb714d1"],
Cell[184653, 4526, 430, 10, 35, "Message",ExpressionUUID->"90824941-1c80-460f-834a-2ad243c12f1b"],
Cell[185086, 4538, 430, 10, 35, "Message",ExpressionUUID->"c22c3801-8094-41d6-9abc-1aa8cca45005"],
Cell[185519, 4550, 430, 10, 35, "Message",ExpressionUUID->"dc0e1d5e-912a-4bc4-90e5-e4679d36f1f0"],
Cell[185952, 4562, 494, 12, 35, "Message",ExpressionUUID->"ec0268ef-a83f-4b71-9e1c-2c50b6f900a6"],
Cell[186449, 4576, 497, 12, 35, "Message",ExpressionUUID->"bd4aa731-e9ca-4a22-9ff7-37c990e9772f"],
Cell[186949, 4590, 437, 10, 35, "Message",ExpressionUUID->"3590ef71-fe49-4c72-9220-40996906dac6"],
Cell[187389, 4602, 437, 10, 35, "Message",ExpressionUUID->"04a0ec50-45fe-41c4-9b9b-0b15e353d574"],
Cell[187829, 4614, 432, 10, 35, "Message",ExpressionUUID->"492bef9b-3a03-40d8-add8-b8b47590168f"],
Cell[188264, 4626, 430, 10, 35, "Message",ExpressionUUID->"1ef38237-fc10-4daa-a4c3-5152ddb1acdd"],
Cell[188697, 4638, 432, 10, 35, "Message",ExpressionUUID->"ed08f63d-82ca-4619-a9df-e3c731ef1730"],
Cell[189132, 4650, 495, 12, 35, "Message",ExpressionUUID->"45a242ae-75f9-4ab3-bc7b-bf91bc2be1fc"],
Cell[189630, 4664, 499, 12, 35, "Message",ExpressionUUID->"d00b72d6-f7df-479c-a83e-66cff59a0f86"],
Cell[190132, 4678, 496, 12, 35, "Message",ExpressionUUID->"2aabedc1-95b9-4d85-8876-6e18e932aba9"],
Cell[190631, 4692, 590, 13, 35, "Message",ExpressionUUID->"50abd655-7d22-4324-92e5-1c0a5dbab072"],
Cell[191224, 4707, 584, 13, 35, "Message",ExpressionUUID->"629218a0-96e3-4003-a4fe-e42d745096d8"],
Cell[191811, 4722, 585, 13, 35, "Message",ExpressionUUID->"61737719-b572-4fc4-9863-f3fccdf2dd08"],
Cell[192399, 4737, 584, 13, 35, "Message",ExpressionUUID->"02c1e401-f5ae-4f17-86cd-5943445a3310"],
Cell[192986, 4752, 592, 13, 35, "Message",ExpressionUUID->"16a9e230-0600-42a2-ba13-c03436332995"],
Cell[193581, 4767, 430, 10, 35, "Message",ExpressionUUID->"344b8ed9-b81b-49e8-8c4e-2aa0acc02ef3"],
Cell[194014, 4779, 433, 10, 35, "Message",ExpressionUUID->"66fc4b79-ce91-4bba-8386-7bac96d039d5"],
Cell[194450, 4791, 433, 10, 35, "Message",ExpressionUUID->"38530f85-3753-4217-9227-19d8e3d006c0"],
Cell[194886, 4803, 431, 10, 35, "Message",ExpressionUUID->"01def0cf-7ea0-4512-bd98-ecc63a7775a3"],
Cell[195320, 4815, 433, 10, 35, "Message",ExpressionUUID->"5f7f678f-bf0d-4c57-a9e9-1315f009165d"],
Cell[195756, 4827, 433, 10, 35, "Message",ExpressionUUID->"2f2bd9bb-433f-4990-a409-ac720644469a"],
Cell[196192, 4839, 431, 10, 35, "Message",ExpressionUUID->"ebbada10-38a1-4b5e-87a3-22bf125b141a"],
Cell[196626, 4851, 433, 10, 35, "Message",ExpressionUUID->"5af1fbe1-39a1-4751-b7d8-27910576bad1"],
Cell[197062, 4863, 431, 10, 35, "Message",ExpressionUUID->"65ede040-466d-4c04-a716-90d06e04d245"],
Cell[197496, 4875, 433, 10, 35, "Message",ExpressionUUID->"29c21b7b-fb14-4b40-b34e-a320f81fa7a9"],
Cell[197932, 4887, 431, 10, 35, "Message",ExpressionUUID->"f0f43b93-833b-4c7c-b309-4d0a5b675060"],
Cell[198366, 4899, 433, 10, 35, "Message",ExpressionUUID->"5fc03070-b1c8-42bb-87cc-448edf8cd8cf"],
Cell[198802, 4911, 499, 12, 35, "Message",ExpressionUUID->"013d4336-c2ff-404d-9af0-82359f52f86d"],
Cell[199304, 4925, 590, 13, 35, "Message",ExpressionUUID->"ead92b11-0123-47fc-8e31-fa071020be24"],
Cell[199897, 4940, 587, 13, 35, "Message",ExpressionUUID->"6ce6401f-13e1-42f0-942e-32a231b4ff51"],
Cell[200487, 4955, 593, 13, 35, "Message",ExpressionUUID->"a42d1f00-f355-4609-9d93-442e31bf8e4a"],
Cell[201083, 4970, 433, 10, 35, "Message",ExpressionUUID->"9cbd2731-94d7-4dd4-8ca7-723f964133ad"],
Cell[201519, 4982, 433, 10, 35, "Message",ExpressionUUID->"f0dc7254-41bb-4094-8765-4839219454e4"],
Cell[201955, 4994, 435, 10, 35, "Message",ExpressionUUID->"4137511f-b1d4-4b89-8954-a1bc1b0a03f6"],
Cell[202393, 5006, 435, 10, 35, "Message",ExpressionUUID->"b4d3a2f8-df3c-43c9-8371-a6fe4fb7a412"],
Cell[202831, 5018, 433, 10, 35, "Message",ExpressionUUID->"3f091377-95b2-4782-a30a-e28a2b6a593a"],
Cell[203267, 5030, 435, 10, 35, "Message",ExpressionUUID->"4a34d121-67a2-4800-9751-0230d6543bc7"],
Cell[203705, 5042, 433, 10, 35, "Message",ExpressionUUID->"9f0d3704-6fb3-4403-8799-c109f7d22d4f"],
Cell[204141, 5054, 435, 10, 35, "Message",ExpressionUUID->"cf426065-b59a-4710-bda3-422d9bdd3d6c"],
Cell[204579, 5066, 431, 10, 35, "Message",ExpressionUUID->"b69d6684-4915-47f6-a544-f2d0a07f7c71"],
Cell[205013, 5078, 431, 10, 35, "Message",ExpressionUUID->"0e2b946c-0550-406c-b548-7eb3b6b582f7"],
Cell[205447, 5090, 433, 10, 35, "Message",ExpressionUUID->"3613434c-c340-4ffd-ade0-3b53b322d592"],
Cell[205883, 5102, 435, 10, 35, "Message",ExpressionUUID->"836c9e5d-2f0f-433c-aeeb-3b76568127d8"],
Cell[206321, 5114, 432, 10, 35, "Message",ExpressionUUID->"62e22c9c-2d87-4b77-a27e-a80005490e2f"],
Cell[206756, 5126, 433, 10, 35, "Message",ExpressionUUID->"f23b1d6c-be73-4504-a476-d540034745b3"],
Cell[207192, 5138, 431, 10, 35, "Message",ExpressionUUID->"725da978-274e-440d-8c23-25fde93b2917"],
Cell[207626, 5150, 499, 12, 35, "Message",ExpressionUUID->"ebbe048b-efe7-45e0-af15-6c548d12d51d"],
Cell[208128, 5164, 497, 12, 35, "Message",ExpressionUUID->"8b306365-4017-40ee-9d3b-94ccae632e5c"],
Cell[208628, 5178, 438, 10, 35, "Message",ExpressionUUID->"8f81da5d-5cd3-462b-82e6-47b34440f17d"],
Cell[209069, 5190, 438, 10, 35, "Message",ExpressionUUID->"2706a088-3db1-4694-9a1c-2b2ae4afe1b5"],
Cell[209510, 5202, 431, 10, 35, "Message",ExpressionUUID->"cbdabaef-11b3-4d61-b0c8-33926b9006f0"],
Cell[209944, 5214, 431, 10, 35, "Message",ExpressionUUID->"8f9d0503-e02f-414e-829f-cca17e0eac9b"],
Cell[210378, 5226, 431, 10, 35, "Message",ExpressionUUID->"48779899-76a2-44ae-9e13-e61fb1910afc"],
Cell[210812, 5238, 433, 10, 35, "Message",ExpressionUUID->"7166f034-870b-4711-896f-4e389e55b552"],
Cell[211248, 5250, 435, 10, 35, "Message",ExpressionUUID->"1d375234-3922-4475-9471-5e2fe29e668f"],
Cell[211686, 5262, 433, 10, 35, "Message",ExpressionUUID->"d1cdf713-2e82-4553-83cb-310c3a44dd6a"],
Cell[212122, 5274, 497, 12, 35, "Message",ExpressionUUID->"923d8dcb-c2c6-4bd5-8d39-c8c53317b7d3"],
Cell[212622, 5288, 496, 12, 35, "Message",ExpressionUUID->"c680e605-a86b-43cc-ad76-a5570fddd14a"],
Cell[213121, 5302, 497, 12, 35, "Message",ExpressionUUID->"a88e688f-945f-41eb-9ba4-44838b209520"],
Cell[213621, 5316, 591, 13, 35, "Message",ExpressionUUID->"f1b226e2-6b81-41a8-8df7-f645104bf4a5"],
Cell[214215, 5331, 587, 13, 35, "Message",ExpressionUUID->"508c52ec-f610-4eb9-91fe-32ba83f46541"],
Cell[214805, 5346, 585, 13, 35, "Message",ExpressionUUID->"64da5ba7-3028-4618-9fad-6ef8a37dff40"],
Cell[215393, 5361, 585, 13, 35, "Message",ExpressionUUID->"06900801-5800-4768-a469-7ea474a89518"],
Cell[215981, 5376, 591, 13, 35, "Message",ExpressionUUID->"182d08ac-121a-4ae4-964e-6cb1c9ecc73d"],
Cell[216575, 5391, 431, 10, 35, "Message",ExpressionUUID->"5750eda1-5c1e-49ee-bd0f-02ac26628f7d"],
Cell[217009, 5403, 430, 10, 35, "Message",ExpressionUUID->"05d5a1ce-26f0-4159-9a77-4cd033556a22"],
Cell[217442, 5415, 431, 10, 35, "Message",ExpressionUUID->"cc48066a-cb0a-4301-8161-dae0911d4774"],
Cell[217876, 5427, 433, 10, 35, "Message",ExpressionUUID->"05f774de-81c4-4143-b16f-060dc3e4d5c5"],
Cell[218312, 5439, 433, 10, 35, "Message",ExpressionUUID->"e0d89331-73c8-4331-837e-51326738f3ff"],
Cell[218748, 5451, 431, 10, 35, "Message",ExpressionUUID->"d6f0aa3c-55f8-480e-9dc1-a1f4be43f270"],
Cell[219182, 5463, 433, 10, 35, "Message",ExpressionUUID->"03b6a457-ace5-4e11-8f2e-de5203f68fd3"],
Cell[219618, 5475, 431, 10, 35, "Message",ExpressionUUID->"f7fd8909-b81b-4e4b-8a3c-8aa36cd42183"],
Cell[220052, 5487, 431, 10, 35, "Message",ExpressionUUID->"e212920a-342c-4cfe-859d-c7f29796f8c4"],
Cell[220486, 5499, 433, 10, 35, "Message",ExpressionUUID->"3ab5e07f-5afc-45d9-97d0-adf265b28ef8"],
Cell[220922, 5511, 430, 10, 35, "Message",ExpressionUUID->"c18e706f-b852-4be5-8e0c-9437b0feacaa"],
Cell[221355, 5523, 433, 10, 35, "Message",ExpressionUUID->"476a91a8-8736-45c9-bfdb-cd2f3f524cb0"],
Cell[221791, 5535, 496, 12, 35, "Message",ExpressionUUID->"561698d8-a26b-4797-958e-20f407a6445b"],
Cell[222290, 5549, 590, 13, 35, "Message",ExpressionUUID->"2618fd97-4cf1-4589-8115-58702c186114"],
Cell[222883, 5564, 584, 13, 35, "Message",ExpressionUUID->"3db50885-b13a-40af-9ace-c9c4c958033c"],
Cell[223470, 5579, 590, 13, 35, "Message",ExpressionUUID->"2030e5f2-c321-4ad2-a4b0-5a7ffc7b53d3"],
Cell[224063, 5594, 620, 12, 79, "Message",ExpressionUUID->"089784a8-71a2-4711-9048-b0dc10331ccb"],
Cell[224686, 5608, 620, 12, 79, "Message",ExpressionUUID->"8ca3f159-cece-4547-b9f3-4d4d8aa369b9"],
Cell[225309, 5622, 619, 12, 79, "Message",ExpressionUUID->"199d634b-f3b3-45e9-adbe-6db5e63773f2"],
Cell[225931, 5636, 431, 10, 35, "Message",ExpressionUUID->"003bad91-aa5a-4a5f-b04e-682484d781f2"],
Cell[226365, 5648, 431, 10, 35, "Message",ExpressionUUID->"1b2aa5a7-4afb-4f2f-92fe-d6ac217df10a"],
Cell[226799, 5660, 431, 10, 35, "Message",ExpressionUUID->"3854c2dc-8bed-45e5-bfaa-db1ec3523487"],
Cell[227233, 5672, 433, 10, 35, "Message",ExpressionUUID->"f77bed14-c9d2-473e-814c-d4734551f3d1"],
Cell[227669, 5684, 496, 12, 35, "Message",ExpressionUUID->"9251859c-3fb7-4841-b549-f1539fe3ba98"],
Cell[228168, 5698, 496, 12, 35, "Message",ExpressionUUID->"0948bdeb-b6d7-45ec-9f43-f40d61109dbd"],
Cell[228667, 5712, 438, 10, 35, "Message",ExpressionUUID->"ae14c1b4-f1f4-460a-b764-9f9e91c214c9"],
Cell[229108, 5724, 440, 10, 35, "Message",ExpressionUUID->"326e0c05-88da-4b33-a92f-0271741724c4"],
Cell[229551, 5736, 431, 10, 35, "Message",ExpressionUUID->"cc9aaf50-6589-4508-9805-47e6e263cbbb"],
Cell[229985, 5748, 431, 10, 35, "Message",ExpressionUUID->"5cbf2caa-faea-41f5-a7be-805514088064"],
Cell[230419, 5760, 431, 10, 35, "Message",ExpressionUUID->"f89239ea-4f2a-46e5-bb23-1db9b97156d4"],
Cell[230853, 5772, 496, 12, 35, "Message",ExpressionUUID->"a3c7504a-00b1-4c7c-8ea5-543e9dc0803f"],
Cell[231352, 5786, 496, 12, 35, "Message",ExpressionUUID->"4d676fd0-5a92-4117-82af-b9a014d6ca2a"],
Cell[231851, 5800, 496, 12, 35, "Message",ExpressionUUID->"20767b55-810b-4257-a9d2-30cbd3c3178e"],
Cell[232350, 5814, 590, 13, 35, "Message",ExpressionUUID->"cc9105eb-2f58-45a2-b0ba-424d12f00992"],
Cell[232943, 5829, 584, 13, 35, "Message",ExpressionUUID->"3aac5c95-27ac-422b-bfb7-2566f877a3d8"],
Cell[233530, 5844, 585, 13, 35, "Message",ExpressionUUID->"742654ba-5c11-4f69-8311-424332f3c040"],
Cell[234118, 5859, 584, 13, 35, "Message",ExpressionUUID->"4a025f8c-f5a3-4843-9fe7-229dc3abb81c"],
Cell[234705, 5874, 590, 13, 35, "Message",ExpressionUUID->"4333ee55-4179-4045-a6f6-bb362e910308"],
Cell[CellGroupData[{
Cell[235320, 5891, 398, 9, 29, "Print",ExpressionUUID->"de40b787-725b-431f-815f-9a1a0269145f"],
Cell[235721, 5902, 291, 5, 29, "Print",ExpressionUUID->"8d310a30-76b4-4e40-944c-431d74b593cc"]
}, Open  ]],
Cell[236027, 5910, 359119, 6874, 42, "Output",ExpressionUUID->"07525fae-2084-45fa-aa65-ecf464028405"]
}, Open  ]],
Cell[595161, 12787, 311, 6, 37, "Input",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],
Cell[595475, 12795, 356, 7, 37, "Input",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],
Cell[595834, 12804, 1502, 33, 402, "Input",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],
Cell[597339, 12839, 3288, 67, 558, "Input",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],
Cell[CellGroupData[{
Cell[600652, 12910, 1955, 42, 428, "Input",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],
Cell[602610, 12954, 417, 8, 95, "Output",ExpressionUUID->"0712a9cb-27ea-47b0-bc7f-24c2720dc224"],
Cell[603030, 12964, 174, 2, 42, "Output",ExpressionUUID->"10a6f6f6-0fe8-4bcb-bf31-d99c5118257f"],
Cell[603207, 12968, 417, 8, 95, "Output",ExpressionUUID->"ca199c5c-0132-40cc-8410-475a636e0c7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[603661, 12981, 177, 3, 37, "Input",ExpressionUUID->"a15849b6-9342-44ea-9c59-e4d715ba1a7a"],
Cell[603841, 12986, 137794, 3143, 76, "Output",ExpressionUUID->"79208cbc-2b30-4886-b8ab-503be8d59762"]
}, Open  ]],
Cell[CellGroupData[{
Cell[741672, 16134, 720, 19, 64, "Input",ExpressionUUID->"5dbb8d6d-e638-4bc7-a9fa-0aaf305bcf77"],
Cell[742395, 16155, 84871, 3006, 93, "Output",ExpressionUUID->"baaaf42e-6139-448e-b23c-c7f4437ef319"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[827315, 19167, 214, 4, 67, "Subsection",ExpressionUUID->"d03dfeba-2718-41c7-9b3f-19ce5bed64e2"],
Cell[827532, 19173, 655, 12, 37, "Input",ExpressionUUID->"899fc20c-f2e8-4595-aa23-0ac007c8899b"],
Cell[828190, 19187, 1500, 31, 246, "Input",ExpressionUUID->"f9c3d613-11be-45c4-8516-78bfd45d9265"],
Cell[829693, 19220, 1476, 37, 220, "Input",ExpressionUUID->"2111868b-759b-4735-b152-31f93e8c9c9f"],
Cell[831172, 19259, 5779, 139, 662, "Input",ExpressionUUID->"11cfe1fe-9482-4b69-90bb-d338a02414fb"],
Cell[836954, 19400, 11280, 263, 1338, "Input",ExpressionUUID->"1f7b8c98-ad1c-4f61-a982-2422f735aa83"],
Cell[848237, 19665, 115008, 2724, 15145, "Input",ExpressionUUID->"194d0d65-1833-42c3-9043-414081e8803e"],
Cell[963248, 22391, 1776, 44, 324, "Input",ExpressionUUID->"c2143d61-6f31-43bb-802b-75c01051eabb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[965061, 22440, 150, 3, 84, "Section",ExpressionUUID->"cbce848c-6e50-4a18-9ca2-77b172824bb7"],
Cell[CellGroupData[{
Cell[965236, 22447, 8029, 166, 1053, "Input",ExpressionUUID->"cf4b3904-d2b7-4c0d-acf7-4f07bf64c8b6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[973268, 22615, 1939, 49, 168, "Input",ExpressionUUID->"debdc98e-d1f0-427a-a71f-14b056fdb64b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[975210, 22666, 1690, 46, 168, "Input",ExpressionUUID->"158394b4-38fc-4488-a50f-077a445a8db2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[976903, 22714, 1858, 45, 168, "Input",ExpressionUUID->"d0706fc7-55e8-4bb6-bc2a-f710361c1e9d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[978764, 22761, 312, 6, 56, "Subsubsection",ExpressionUUID->"41a7a781-5f1e-4db8-921c-eaff91bb1ce3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[979079, 22769, 783, 16, 37, "Input",ExpressionUUID->"595ca871-a254-4c25-8a3e-6bc07d255373",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[979865, 22787, 1181, 27, 90, "Input",ExpressionUUID->"65264077-dda2-45cf-8291-15731bd22b08",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[981049, 22816, 904, 21, 90, "Input",ExpressionUUID->"d1acdd2d-3135-45c7-bd52-12dbc8dedc5b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[981956, 22839, 631, 11, 37, "Input",ExpressionUUID->"51facf79-3fa2-4208-8759-497e9d05c84d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[982590, 22852, 1210, 21, 64, "Input",ExpressionUUID->"276f5aeb-6c06-4493-b0a6-224775ea3645",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[983803, 22875, 1354, 26, 37, "Input",ExpressionUUID->"b8de874e-410d-44a6-ac7b-76fee95e75e9",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[985160, 22903, 772, 15, 37, "Input",ExpressionUUID->"83fce17d-91cf-4bb4-a6b9-504592054cad",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[985935, 22920, 963, 23, 64, "Input",ExpressionUUID->"d52e3a9a-0790-4f79-be48-6718ef08034e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[986901, 22945, 1075, 25, 64, "Input",ExpressionUUID->"ef33233b-f901-413e-804c-43a284e9eb19",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[987979, 22972, 236, 4, 56, "Subsubsection",ExpressionUUID->"72e8b36d-4e3b-4df4-969d-c7068276c4c1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[988218, 22978, 1191, 26, 64, "Input",ExpressionUUID->"36835994-0ce4-4864-a0c9-303b5bf07c9e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[989412, 23006, 818, 22, 116, "Input",ExpressionUUID->"6f9d0f79-8491-43e3-8ab3-edc45610e7c1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[990233, 23030, 3388, 92, 350, "Input",ExpressionUUID->"903f2ecc-3845-4bfa-a6bb-b7a8985e0552",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[993624, 23124, 2441, 64, 194, "Input",ExpressionUUID->"6730f95d-c5ae-41f0-a62b-6f23e01a3ddf",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[996068, 23190, 2540, 67, 168, "Input",ExpressionUUID->"2d160caf-45b8-4e78-a1ae-7d8ba15b9442",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[998611, 23259, 2372, 63, 142, "Input",ExpressionUUID->"54eddef3-9404-4812-89f3-35c69efccddb",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1000986, 23324, 1132, 26, 142, "Input",ExpressionUUID->"df4da6a6-b774-4d32-ae15-0facc4b518c4",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1002121, 23352, 714, 16, 64, "Input",ExpressionUUID->"9cbc1c2d-4a83-43ae-b5ed-880e7b1b386c",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1002838, 23370, 458, 9, 37, "Input",ExpressionUUID->"8e464c46-f34c-46e9-9835-966f173dd67d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1003299, 23381, 486, 10, 37, "Input",ExpressionUUID->"172ae682-a4b2-4ad7-8ecd-fa49b7754677",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1003788, 23393, 535, 11, 37, "Input",ExpressionUUID->"b7dced97-8f8c-4fb5-83fc-19ff0eb1a136",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1004326, 23406, 486, 10, 37, "Input",ExpressionUUID->"3dad1a1f-8e74-4650-ba37-8e8046525fb0",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1004815, 23418, 547, 11, 37, "Input",ExpressionUUID->"f3389191-df7a-43dd-af7f-3b8af3d4e3b1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1005365, 23431, 562, 14, 37, "Input",ExpressionUUID->"bc9cc504-c4ff-41c7-8ed5-09e6cf3369b4",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1005930, 23447, 409, 8, 37, "Input",ExpressionUUID->"1d85eb20-a924-4402-b7dd-4b87ef3511de",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1006342, 23457, 7056, 173, 844, "Input",ExpressionUUID->"8ab47633-4cc9-4e09-89d4-e325f2da4b21",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]]
}, Open  ]]
}
]
*)

