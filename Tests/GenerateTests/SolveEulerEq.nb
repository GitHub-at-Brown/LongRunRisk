(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    708176,      14433]
NotebookOptionsPosition[    692546,      14234]
NotebookOutlinePosition[    693039,      14253]
CellTagsIndexPosition[    692996,      14250]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
      "\"\<.wlt\>\""}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pacletDir", "=", 
  RowBox[{"DirectoryName", "[", 
   RowBox[{"testFileName", ",", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"PacletDirectoryLoad", "[", "pacletDir", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"testContextBase", "=", 
  RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891244075958187*^9, 3.891244079885818*^9}, 
   3.891274440015959*^9, 3.891913898993636*^9, {3.893083620043439*^9, 
   3.893083620908062*^9}, 3.893336453091833*^9, 3.8933472708044786`*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>"], "Output",
 CellChangeTimes->{3.905769100905964*^9, 3.905769241381472*^9, 
  3.905874693563242*^9, 3.905874725856312*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"38a05f1c-8d84-4f3d-aa40-db8f2dacaa99"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>"], "Output",
 CellChangeTimes->{3.905769100905964*^9, 3.905769241381472*^9, 
  3.905874693563242*^9, 3.90587472585728*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"faf13e57-5db9-418a-bd6b-8e81d8b15ce3"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/\"\>", "}"}]], "Output",
 CellChangeTimes->{3.905769100905964*^9, 3.905769241381472*^9, 
  3.905874693563242*^9, 3.905874725918807*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"e4e4daee-fcd4-459a-902a-d1651f216826"],

Cell[BoxData["\<\"SolveEulerEq\"\>"], "Output",
 CellChangeTimes->{3.905769100905964*^9, 3.905769241381472*^9, 
  3.905874693563242*^9, 3.905874725919655*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"29ea8f0a-de3a-47f6-a92d-0d7312e9903e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905769100905964*^9, 3.905769241381472*^9, 
  3.905874693563242*^9, 3.905874725920267*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"a2072db0-419b-4294-81ed-496705af02ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"2157750c-ae6d-47e9-b5dd-\
9c68ad40141b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellChangeTimes->{3.9050704645551*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
   "testContextBase", "<>", "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, 
   3.890710660724628*^9, 3.893104584960622*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
\"\>"], "Output",
 CellChangeTimes->{3.905769104297872*^9, 3.905874696697537*^9, 
  3.905874728074671*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"9e5c86a3-7e69-4481-b073-d9f726bd1c63"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<ComputationalEngine`SolveEulerEq`\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{3.905096520818309*^9, 3.905096556613597*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"ed50da44-63c4-4c2d-93eb-f54b1777aa81"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"longTest", " ", "=", " ", "False"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"fast", " ", "and", " ", "partial", " ", "coverage", " ", 
      RowBox[{"(", "False", ")"}], " ", "or", " ", "slow", " ", "and", " ", 
      "full", " ", "coverage", " ", 
      RowBox[{"(", "True", ")"}]}], "*)"}], "\[IndentingNewLine]", "True"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.9058729546338253`*^9, 3.9058729616258383`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"49663655-81f7-425b-81ed-b11b0d8154ac"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"SolveEulerEq_20231009-J0EJJE\"\>"}],
  SequenceForm["Adding test: ", "SolveEulerEq_20231009-J0EJJE"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9058746970215693`*^9, 3.9058747283745117`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ffa708b4-a2a5-4c91-abf5-18fea1713ea3"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9058746970215693`*^9, 3.905874728400152*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"2c369f8a-a0f2-41ee-99dd-d558f830e636"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "ComputationalEngine`SolveEulerEq`longTest = False;\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tComputationalEngine`SolveEulerEq`longTest = False;\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"SolveEulerEq_20231009-J0EJJE\"\
\n]\n\n", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = 
  True, FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ \
= <|"Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[ComputationalEngine`SolveEulerEq`longTest = False; True], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"SolveEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`SolveEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"SolveEulerEq_20231009-J0EJJE\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905874697058033*^9, 3.9058747284280376`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"4633f948-c9c0-44d9-93d6-14350ac3d18a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Off", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
    "Needs", "[", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"$ContextPath", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Prepend", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`\>\""}], "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modBKY", "=", 
     RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRCStochVol", "=", 
     RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"mods", "=", 
     RowBox[{"If", "[", 
      RowBox[{"longTest", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
        "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
         "modNRCStochVol"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"modBKY", ",", "modDES"}], "}"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"testing", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "returns", " ", "True", " ", "if", " ", "coefficients", " ", "have", " ",
       "expected", " ", "form"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coeffsQ", "[", 
      RowBox[{"sol_", ",", "coeffName_", ",", "numStateVars_", ",", 
       RowBox[{"numAssets_", ":", "0"}], ",", 
       RowBox[{"bond_", ":", "0"}]}], "]"}], ":=", 
     RowBox[{"And", "@@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"numAssets", "==", "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"wc", " ", 
             RowBox[{"ratio", ":", " ", 
              RowBox[{
              "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
               "0"}]}]}], ",", " ", "1", ",", " ", 
            RowBox[{"2", "..."}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Keys", "/@", "sol"}], ",", 
               RowBox[{
                RowBox[{"coeffName", "[", "i_Integer", "]"}], ":>", "i"}]}], 
              "]"}]}], ")"}], "===", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}], ")"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"pd", " ", "ratio", " ", "or", " ", "bond", " ", 
             RowBox[{"prices", ":", " ", 
              RowBox[{
              "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
               "two", " ", "integers"}]}]}], ",", " ", 
            RowBox[{
            "first", " ", "one", " ", "indexes", " ", "stock", " ", "number", 
             " ", "or", " ", "maturity", " ", "of", " ", "bond"}], ",", " ", 
            RowBox[{
            "second", " ", "one", " ", "indexes", " ", "state", " ", 
             "variables"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Tuples", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"Range", "[", "numAssets", "]"}], "-", "bond"}], ",",
                 "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ")"}], "==", 
           RowBox[{"(", 
            RowBox[{"Sort", "@", 
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{"Keys", "/@", "sol"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"coeffName", "[", "i_Integer", "]"}], "[", 
                 "j_Integer", "]"}], ":>", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "j"}], "}"}]}]}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"names", " ", "match", " ", "coeffName"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", "coeffName"}], "]"}], "&"}], "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", 
               "]"}], ":>", "var"}]}], "]"}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "context", " ", "is", " ", "same", " ", "as", " ", "context", " ", 
          "of", " ", "coeffName"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"MatchQ", "[", 
             RowBox[{"#", ",", 
              RowBox[{"StringDrop", "[", 
               RowBox[{
                RowBox[{"ToString", "[", "coeffName", "]"}], ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", 
               "]"}], ":>", 
              RowBox[{"Context", "[", "var", "]"}]}]}], "]"}]}], ")"}]}], ",",
         "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"(", 
          RowBox[{"NumberQ", "/@", 
           RowBox[{"(", 
            RowBox[{"Values", "/@", "sol"}], ")"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"list", " ", "with", " ", "different", " ", "options"}], "*)"}], 
    "\n", 
    RowBox[{"opts", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"single", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "4.6", "}"}]}], ",", 
           RowBox[{"\"\<Epd\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", " ", 
       
       RowBox[{"(*", 
        RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
       " ", 
       RowBox[{"{", 
        RowBox[{"\"\<FindRootOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], "}"}], ",", 
       " ", 
       RowBox[{"(*", 
        RowBox[{
        "FindRoot", " ", "option", " ", "via", " ", "updateCoeffsSol", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"more", " ", "than", " ", "one", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}]}], "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "same", " ", "FindRootOptions", " ", "and", " ", "options", " ", "to", 
      " ", "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"optsRepeated", " ", "=", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], "}"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}]}], "}"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}], ",", 
          RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
         "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{"longTest", ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"optsMany", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"opts", "[", 
           RowBox[{"[", 
            RowBox[{"5", ";;", 
             RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "optsRepeated"}], 
         "]"}]}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"optsMany", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"opts", "[", 
           RowBox[{"[", 
            RowBox[{"5", ";;", "6"}], "]"}], "]"}], ",", 
          RowBox[{"optsRepeated", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"**", "**", "**", "**"}], "*", "set", " ", "up", " ", "useful",
        " ", "variables", " ", "used", " ", "throughout", " ", "loop"}], 
      "**********)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ind", "=", "0"}], ";", 
       RowBox[{"(*", 
        RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "convenience", " ", "functions", " ", "for", " ", "different", " ", 
         "coefficients"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"numStateVars", "=", 
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"numStocks", "=", 
        RowBox[{"model", "[", "\"\<numStocks\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQWc", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{
         "sol", ",", 
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", ",",
           "numStateVars"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQPd", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd"}], 
          ",", "numStateVars", ",", "numStocks"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQNomBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "testing", " ", "starts", " ",
          "here"}], "**********)"}], "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffs", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsSol", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsWc", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsPd", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
       "ComputationalEngine`SolveEulerEq`updateCoeffsBond", "=", 
        "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "passing", " ", "arguments", " ", "works", " ", "as", " ", 
          "intended"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parse", " ", "positional", " ", "arguments", " ", "correctly"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newParameters", "=", 
        RowBox[{"{", 
         RowBox[{"delta", "->", "0.99"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"guessCoeffsSolution", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"updateCoeffs", "[", "model", "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffsSol", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", "newParameters"}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", "newParameters", ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", "newParameters", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffsSol", "[", 
                RowBox[{"model", ",", "newParameters", ",", 
                 RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", " ", 
                 "guessCoeffsSolution"}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", " ", 
                 "guessCoeffsSolution"}], "]"}], "==", 
               RowBox[{"updateCoeffs", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", " ", 
                 "guessCoeffsSolution", ",", 
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "]"}], "==", 
               RowBox[{"updateCoeffsSol", "[", 
                RowBox[{
                "model", ",", "newParameters", ",", " ", 
                 "guessCoeffsSolution"}], "]"}]}]}], "\[IndentingNewLine]", 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "separates", " ", "positional", " ", "arguments", " ", "and", " ", 
         "optional", " ", "arguments", " ", "correctly"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
            RowBox[{"And", "@@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Map", "[", "\[IndentingNewLine]", 
                 RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Most", "@", "#"}], "]"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "&"}], "/@", 
                   RowBox[{"opts", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], 
                ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "different", " ", "ways", " ", "to", " ", "pass", " ", 
                  "more", " ", "than", " ", "one", " ", "option", " ", "are", 
                  " ", "equivalent"}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Map", "[", "\[IndentingNewLine]", 
                 RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Rest", "@", "#"}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"Last", "@", "#"}]}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"First", "@", "#"}]}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsMany"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
               "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "wealth", " ", "consumption", " ", "ratio", " ", "coefficients"}], 
        "**********)"}], "\[IndentingNewLine]", 
       RowBox[{"optsWc", "=", 
        RowBox[{"{", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "optsWc"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wrapper", " ", "functions", " ", "updateCoeffsSol", " ", "and", " ",
           "updateCoeffs", " ", "give", " ", "same", " ", "answer", " ", "as",
           " ", "updateCoeffsWc"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"solWc", "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "options"}], " ", "work", " ", "as", " ", 
         "intended"}], "*******)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"test", ":", " ", 
           RowBox[{"one", " ", "iteration", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "get", " ", "far", " ", "from", 
            " ", "initial", " ", "guess"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"solWc1", "=", 
           RowBox[{"updateCoeffs", "[", 
            RowBox[{"model", ",", " ", 
             RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
             RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
              RowBox[{"<|", 
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"solWc2", "=", 
           RowBox[{"updateCoeffs", "[", 
            RowBox[{"model", ",", " ", 
             RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
             RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
              RowBox[{"<|", 
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[",
                 "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[",
                 "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"solWc1", "=", 
           RowBox[{"updateCoeffs", "[", 
            RowBox[{"model", ",", 
             RowBox[{"\"\<FindRootOptions\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
             RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
              RowBox[{"<|", 
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"solWc2", "=", 
           RowBox[{"updateCoeffs", "[", 
            RowBox[{"model", ",", 
             RowBox[{"\"\<FindRootOptions\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
             RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
              RowBox[{"<|", 
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[",
                 "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[",
                 "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"MaxIterations", " ", "works"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "one", " ", "iteration", " ", "passing", " ", "FindRoot", " ", 
             "option"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"m1", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "three", " ", "iterations", " ", "passing", " ", "FindRoot", " ", 
             "option"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"m2", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "one", " ", "iteration", " ", "passing", " ", "updateCoeffsSol", 
             " ", "option"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"m3", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "three", " ", "iterations", " ", "passing", " ", 
             "updateCoeffsSol", " ", "option"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"m4", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m1"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m2"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m3"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m4"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "3", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{
             "when", " ", "passing", " ", "same", " ", "FindRoot", " ", "and",
               " ", "updateCoeffsSol", " ", "options"}]}], ",", " ", 
            RowBox[{"FindRoot", " ", "option", " ", "is", " ", "used"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"m1", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"m2", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"m3", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"m4", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<FindRootOptions\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], 
                    ",", 
                    RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                    RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                    RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
                "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m1"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m2"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m3"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
              
              RowBox[{
               RowBox[{"ReleaseHold", "@", 
                RowBox[{"Last", "@", "m4"}]}], "==", 
               RowBox[{"{", 
                RowBox[{"{", "1", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
             "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"First", "@", "m2"}], "==", 
          RowBox[{"{", 
           RowBox[{"HoldForm", "@", 
            RowBox[{"(", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], ")"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
              ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c1", "=", 
        RowBox[{"Not", "@", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"CheckAbort", "[", 
           RowBox[{
            RowBox[{"Check", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", 
              RowBox[{"Abort", "[", "]"}], ",", 
              RowBox[{"(", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"TrueQ", "[", 
         RowBox[{"CheckAbort", "[", 
          RowBox[{
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", 
             RowBox[{"Abort", "[", "]"}], ",", 
             RowBox[{"(", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"ReturnPd", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Ewc0", "=", "4.6"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "return", " ", "pd", " ", "coefficients"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", 
         RowBox[{"updateCoeffs", "[", 
          RowBox[{"model", ",", 
           RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ind", "=", "ind"}], ";", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"return", " ", "pd", " ", "coefficients"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"coeffsWcPd", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<UpdatePd\>\"", "->", "True"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<Ewc\>\"", "->", 
              RowBox[{"{", "Ewc0", "}"}]}], ",", 
             RowBox[{"\"\<Epd\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "separate", " ", "wc", " ", "and", " ", "pd", " ", 
          "coefficients"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coeffsWc", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"coeffsPd", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "check", " ", "coefficients", " ", "have", " ", "expected", " ", 
          "form"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", "coeffsWc", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQPd", "[", "coeffsPd", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"test", ":", " ", 
           RowBox[{
           "wc", " ", "coefficients", " ", "are", " ", "the", " ", "same", 
            " ", "when", " ", "pd", " ", "coefficients", " ", "are", " ", 
            "or", " ", "are", " ", "not", " ", "returned"}]}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "Ewc0", "}"}]}], "|>"}]}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<Ewc\>\"", "->", 
                   RowBox[{"{", "Ewc0", "}"}]}], ",", 
                  RowBox[{"\"\<Epd\>\"", "->", 
                   RowBox[{"{", 
                    RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}],
             ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{
             "updateCoeff", " ", "inherits", " ", "options", " ", "from", " ",
               "updateCoeffsSol"}]}], ",", " ", "checks"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SubsetQ", "[", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
                RowBox[{
                "Options", "[", 
                 "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"SubsetQ", "[", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
                RowBox[{
                "Options", "[", 
                 "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
            "pass", " ", "initial", " ", "guess", " ", "in", " ", 
             "updateCoeffs"}], ",", " ", "updateCoeffsSol", ",", " ", 
            "updateCoeffsWc"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"oldOptions", "=", 
           RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"oldOptionsSol", "=", 
           RowBox[{
           "Options", "[", 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"oldOptionsWc", "=", 
           RowBox[{
           "Options", "[", 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ig", "=", "1"}], ";", 
          RowBox[{"(*", 
           RowBox[{"new", " ", "initial", " ", "guess"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{"initial", " ", "guess", " ", "as", " ", "argument"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
             "\[IndentingNewLine]", 
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"\"\<Ewc0\>\"", "->", "ig"}]}], "]"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "initial", " ", "guess", " ", "as", " ", "default", " ", "in", " ",
             "options"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "default", " ", "arguments", " ", "of", " ", "updateCoeffs"}]}], 
           "*)"}], 
          RowBox[{"SetOptions", "[", 
           RowBox[{"updateCoeffs", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", "model", "]"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", "oldOptions"}],
           ";", 
          RowBox[{"(*", 
           RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "default", " ", "arguments", " ", "of", " ", 
             "updateCoeffsSol"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"SetOptions", "[", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], "==", 
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{"Not", "@", 
             RowBox[{"TrueQ", "@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"updateCoeffsSol", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "Options", "[", 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol", "]"}], "=", "oldOptionsSol"}], ";", 
          RowBox[{"(*", 
           RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "default", " ", "arguments", " ", "of", " ", "updateCoeffsWc"}]}],
            "*)"}], "\[IndentingNewLine]", 
          RowBox[{"SetOptions", "[", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc", ",", 
            RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], ";", " ",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}]}], "]"}], "==", 
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], "==", 
             
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{"Not", "@", 
             RowBox[{"TrueQ", "@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"updateCoeffsWc", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], 
                   "[", "\"\<wc\>\"", "]"}], ",", 
                  RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
                  RowBox[{"{", "}"}], ",", 
                  RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
            ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "Options", "[", 
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc", "]"}], "=", "oldOptionsWc"}], ";", 
          RowBox[{"(*", 
           RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]",
           "\[IndentingNewLine]", 
          RowBox[{"oldOptions", "=", 
           RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{
             "use", " ", "defaults", " ", "for", " ", "updateCoeffs", " ", 
              "for", " ", "any", " ", "options", " ", "inherited", " ", 
              "from", " ", "updateCoeffsSol"}]}], ",", " ", "check"}], "*)"}],
           "\[IndentingNewLine]", 
          RowBox[{"optsUpdateCoeff", "=", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4.6", "}"}]}], ",", 
                 RowBox[{"\"\<Epd\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"{", "4.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
             RowBox[{"(*", 
              RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
             "\[IndentingNewLine]", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}]}], 
            RowBox[{"(*", 
             RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]",
             "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"SetOptions", "[", 
                   RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"out", "=", 
                   RowBox[{
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], "==", 
                    RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                   "oldOptions"}], ";", 
                  RowBox[{"(*", 
                   RowBox[{"restore", " ", "options"}], "*)"}], 
                  "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", 
                 "}"}], "&"}], "/@", "optsUpdateCoeff"}], ")"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
             RowBox[{"can", "'"}], "t", " ", "set", " ", "defaults", " ", 
             "for", " ", "updateCoeffs", " ", "for", " ", "FindRoot", " ", 
             "options", " ", "since", " ", "they", " ", "are", " ", "not", 
             " ", "inherited"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"optsBad", "=", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", " ", 
             RowBox[{"(*", 
              RowBox[{"FindRoot", " ", "option"}], "*)"}], 
             "\[IndentingNewLine]", " ", 
             RowBox[{"{", 
              RowBox[{"PrecisionGoal", "\[Rule]", "$MachinePrecision"}], 
              "}"}]}], 
            RowBox[{"(*", 
             RowBox[{"FindRoot", " ", "option"}], "*)"}], 
            "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"m", "=", 
                   RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
                    RowBox[{"$MessageList", "=", 
                    RowBox[{"{", "}"}]}]}], "}"}], ",", 
                    RowBox[{"Reap", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Module", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{"updateCoeffs", ",", "#"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "$MessageList"}], "\[IndentingNewLine]", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                   "oldOptions"}], ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"First", "@", 
                    RowBox[{"First", "@", "m"}]}], "==", 
                   RowBox[{"HoldForm", "@", 
                    RowBox[{"SetOptions", "::", "optnf"}]}]}]}], 
                 "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsBad"}], 
              ")"}]}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
            "option", " ", "\"\<FindRootOptions\>\"", " ", "inherited", " ", 
            "from", " ", "updateCoeffsSol"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"optsFindRoot", "=", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<FindRootOptions\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"MaxIterations", "->", "1"}], "}"}]}], ",", 
             RowBox[{"(*", 
              RowBox[{
              "has", " ", "a", " ", "default", " ", "in", " ", 
               "\"\<FindRootOptions\>\""}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"\"\<FindRootOptions\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"AccuracyGoal", "\[Rule]", "2"}], "}"}]}]}], 
            RowBox[{"(*", 
             RowBox[{
             "does", " ", "not", " ", "have", " ", "a", " ", "default", " ", 
              "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
            "\[IndentingNewLine]", "}"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
            "default", " ", "options", " ", "from", " ", "FindRoot", " ", 
            "only", " ", "for", " ", "options", " ", "without", " ", "a", " ",
             "default", " ", "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"oldFindRootOpts", " ", "=", " ", 
           RowBox[{"Options", "[", "FindRoot", "]"}]}], ";", 
          RowBox[{"(*", 
           RowBox[{
           "save", " ", "options", " ", "to", " ", "restore", " ", "at", " ", 
            "the", " ", "end"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "find", " ", "options", " ", "with", " ", "a", " ", "default", " ",
             "value", " ", "in", " ", "\"\<FindRootOptions\>\"", " ", 
            "option", " ", "in", " ", "updateCoeffs"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"withFindRootOptionDefault", "=", 
           RowBox[{"Keys", "@", 
            RowBox[{"(", 
             RowBox[{"\"\<FindRootOptions\>\"", "/.", 
              RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ")"}]}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"SetOptions", "[", 
                   RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
                  RowBox[{"(*", 
                   RowBox[{"test", ":", " ", 
                    RowBox[{
                    "change", " ", "default", " ", "option", " ", 
                    "\"\<FindRootOptions\>\"", " ", "in", " ", 
                    "updateCoeffs"}]}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"out1", "=", 
                   RowBox[{
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], "==", 
                    RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                   "oldOptions"}], ";", 
                  RowBox[{"(*", 
                   RowBox[{"restore", " ", "options"}], "*)"}], 
                  "\[IndentingNewLine]", 
                  RowBox[{"Unprotect", "[", "FindRoot", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SetOptions", "[", 
                   RowBox[{"FindRoot", ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}], ";", 
                  RowBox[{"(*", 
                   RowBox[{
                   "change", " ", "default", " ", "option", " ", "in", " ", 
                    "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"out2", "=", 
                   RowBox[{
                    RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], "==", 
                    RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{"test", ":", " ", 
                    RowBox[{
                    "if", " ", "option", " ", "has", " ", "a", " ", "default",
                     " ", "in", " ", "\"\<FindRootOptions\>\""}]}], ",", " ", 
                    
                    RowBox[{
                    "FindRoot", " ", "option", " ", "does", " ", "not", " ", 
                    "override", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
                  
                  RowBox[{"out2", "=", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"withFindRootOptionDefault", ",", 
                    RowBox[{"First", "@", 
                    RowBox[{"First", "@", 
                    RowBox[{"Last", "@", "#"}]}]}]}], "]"}], ",", 
                    RowBox[{"Not", "@", 
                    RowBox[{"TrueQ", "@", "out2"}]}], ",", "out2"}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Options", "[", "FindRoot", "]"}], "=", 
                   "oldFindRootOpts"}], ";", "\[IndentingNewLine]", 
                  RowBox[{"Protect", "[", "FindRoot", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"out1", ",", "out2"}], "}"}]}], 
                 "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsFindRoot"}], 
              ")"}]}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\n", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "pass", " ", "interval", " ", "as", " ", "initial", " ", "guess", 
             " ", "works"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"test", ":", " ", 
             RowBox[{
             "pass", " ", "interval", " ", "interval", " ", "and", " ", 
              "initial", " ", "guess", " ", "works"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
             "]"}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"test", ":", " ", 
           RowBox[{
           "pass", " ", "approximate", " ", "or", " ", "exact", " ", 
            "numbers"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4.", "}"}]}], "|>"}]}]}], "]"}], "]"}], "==", 
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], "]"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"1.", ",", "8."}], "}"}]}], "|>"}]}]}], "]"}], 
                "]"}], "==", 
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"4.", ",", "1.", ",", "8."}], "}"}]}], "|>"}]}]}],
                  "]"}], "]"}], "==", 
               RowBox[{"coeffsQWc", "[", 
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                   RowBox[{"<|", 
                    RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
                 "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "bond", " ", "coefficients"}], "**********)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffsBond", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", 
        RowBox[{"If", "[", 
         RowBox[{"longTest", ",", "12", ",", "2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "newParameters", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newBondParams", "=", 
        RowBox[{"{", 
         RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "0.1", "+", "FernandoDuarte`LongRunRisk`Model`Parameters`psi"}], "/.", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}]}], ")"}]}], "}"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"solWcNewBondParams", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "newBondParams", ",", "optsWc"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"solBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solBond", "===", "solBondNew"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solNomBond", "===", "solNomBondNew"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "maxMaturity", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldMaxMaturity", "=", "maxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"save", " ", "to", " ", "restore", " ", "later"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solNomBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "oldMaxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "original", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"longTest", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"test", ":", " ", 
           RowBox[{
           "pass", " ", "options", " ", "for", " ", "RecurrenceTable"}]}], 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"solBond", "=", 
           RowBox[{"updateCoeffsBond", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
              "\"\<bond\>\"", "]"}], ",", 
             RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
             RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
             RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
             RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"solNomBond", "=", 
           RowBox[{"updateCoeffsBond", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
              "\"\<nombond\>\"", "]"}], ",", 
             RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
             RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
             RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
             RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"coeffsQBond", "[", 
               RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"coeffsQNomBond", "[", 
               RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", "updateCoeffs", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "updateCoeffs", " ", "matches", " ", "updateCoeffsBond"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], 
                  "]"}], ",", 
                 RowBox[{
                 "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
               RowBox[{"updateCoeffsBond", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                  "\"\<bond\>\"", "]"}], ",", 
                 RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                 RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
                "]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateNomBond\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], 
                  "]"}], ",", 
                 RowBox[{
                 "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
               RowBox[{"updateCoeffsBond", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                  "\"\<nombond\>\"", "]"}], ",", 
                 RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                 RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
                "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{"FilterRules", "[", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], 
                  "]"}], ",", 
                 RowBox[{
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb", "[", "_", "]"}], "|", 
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb", "[", "_", "]"}]}]}], "]"}]}], "===", 
              RowBox[{"Sort", "@", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"updateCoeffsBond", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], 
                    "[", "\"\<bond\>\"", "]"}], ",", 
                   RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                   RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
                  "]"}], ",", 
                 RowBox[{"updateCoeffsBond", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], 
                    "[", "\"\<nombond\>\"", "]"}], ",", 
                   RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                   RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
                  "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"m1", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                   "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{"print", " ", "residual"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"m2", "=", 
           RowBox[{"Block", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
               RowBox[{"$MessageList", "=", 
                RowBox[{"{", "}"}]}]}], "}"}], ",", 
             RowBox[{"Reap", "[", 
              RowBox[{
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{
                  RowBox[{"updateCoeffs", "[", 
                   RowBox[{"model", ",", 
                    RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                   "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{
             "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], 
            ",", " ", 
            RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"ReleaseHold", "@", "m1"}], "==", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"ReleaseHold", "@", 
               RowBox[{"First", "@", "m2"}]}], ",", 
              StyleBox[
               RowBox[{
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], "MessageName"]}], 
             StyleBox[" ", "MessageName"], 
             StyleBox["]", "MessageName"]}], ")"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"NumberQ", "@", 
            RowBox[{"(", 
             RowBox[{"ReleaseHold", "@", 
              RowBox[{"First", "@", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
             "finding", " ", "residual", " ", 
             RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}],
           "\[IndentingNewLine]", 
          RowBox[{"c1", "=", 
           RowBox[{"Not", "@", 
            RowBox[{"TrueQ", "[", 
             RowBox[{"CheckAbort", "[", 
              RowBox[{
               RowBox[{"Check", "[", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}],
                  ",", 
                 RowBox[{"Abort", "[", "]"}], ",", 
                 RowBox[{"(", 
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", 
               "True"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{
             "check", " ", "if", " ", "root", " ", "finding", " ", "residual",
               " ", 
              RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", 
            " ", 
            RowBox[{
            "abort", " ", "if", " ", "error", " ", "above", " ", 
             "tolerance"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"c2", "=", 
           RowBox[{"TrueQ", "[", 
            RowBox[{"CheckAbort", "[", 
             RowBox[{
              RowBox[{"Check", "[", 
               RowBox[{
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], 
                ",", 
                RowBox[{"Abort", "[", "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{
                 "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", 
             RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
            RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"c1", "=", 
           RowBox[{"Not", "@", 
            RowBox[{"TrueQ", "[", 
             RowBox[{"CheckAbort", "[", 
              RowBox[{
               RowBox[{"Check", "[", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", 
                   RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", 
                 RowBox[{"Abort", "[", "]"}], ",", 
                 RowBox[{"(", 
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", 
               "True"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"test", ":", " ", 
             RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
            RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"c2", "=", 
           RowBox[{"TrueQ", "[", 
            RowBox[{"CheckAbort", "[", 
             RowBox[{
              RowBox[{"Check", "[", 
               RowBox[{
                RowBox[{"updateCoeffs", "[", 
                 RowBox[{"model", ",", 
                  RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<Tol\>\"", "->", 
                   RowBox[{"10.", "^", 
                    RowBox[{"-", "20"}]}]}]}], "]"}], ",", 
                RowBox[{"Abort", "[", "]"}], ",", 
                RowBox[{"(", 
                 RowBox[{
                 "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}], ")"}]}], "]"}], ",", "True"}], "]"}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "ind", "]"}], "=", 
           RowBox[{"And", "@@", 
            RowBox[{"{", 
             RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Echo", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ind", ",", 
                RowBox[{
                 RowBox[{"outTests", "[", 
                  RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], 
                 "[", "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], 
             "]"}], ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"ind", "=", 
           RowBox[{"ind", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}],
        ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";", 
    RowBox[{"(*", "Do", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
    
    RowBox[{"noMissingTest", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
        RowBox[{"Sort", "@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "@", 
            RowBox[{"SubValues", "@", "outTests"}]}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"noMissingTest", ",", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", 
            RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
          "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"out", "=", 
     RowBox[{"And", "@@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"Values", "@", 
          RowBox[{"SubValues", "@", "outTests"}]}]}]}], "\[IndentingNewLine]",
        "}"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Echo", "[", 
       RowBox[{"out", ",", "\"\<out\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Unprotect", "[", "$MessageList", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"$MessageList", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Protect", "[", "$MessageList", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Echo", "[", 
       RowBox[{"$MessageList", ",", "\"\<message list\>\""}], "]"}], ";"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"On", "[", 
     RowBox[{"General", "::", "stop"}], "]"}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.893175497420415*^9, {3.905064965796405*^9, 3.905064972933811*^9}, {
   3.90506500917981*^9, 3.905065019806591*^9}, {3.905065058967902*^9, 
   3.905065064928623*^9}, {3.905065115629972*^9, 3.905065179323022*^9}, {
   3.905066928137994*^9, 3.905066936880246*^9}, {3.9050669814503736`*^9, 
   3.9050669959776278`*^9}, {3.9050670378268633`*^9, 3.905067046111577*^9}, {
   3.905067156013421*^9, 3.905067168867992*^9}, {3.905067223299613*^9, 
   3.905067282907559*^9}, {3.9050677650990868`*^9, 3.905067774700183*^9}, {
   3.9050685122861633`*^9, 3.905068591060135*^9}, {3.9050687844222107`*^9, 
   3.905068786082623*^9}, {3.9050688509455*^9, 3.905068851455679*^9}, {
   3.905069173014428*^9, 3.905069233326126*^9}, {3.90506931915333*^9, 
   3.905069345720421*^9}, {3.905069387810457*^9, 3.9050694232860737`*^9}, {
   3.905069630330922*^9, 3.905069665149935*^9}, {3.905069768091342*^9, 
   3.905069769130316*^9}, 3.905070098085723*^9, {3.90507453003374*^9, 
   3.9050745480678387`*^9}, {3.9050745979036016`*^9, 3.905074620548455*^9}, {
   3.905074870933104*^9, 3.905074958926791*^9}, {3.905074993102131*^9, 
   3.905075044671555*^9}, {3.905075076766088*^9, 3.905075172273251*^9}, 
   3.9050752881686773`*^9, {3.905075586304927*^9, 3.905075598837223*^9}, {
   3.905075696548112*^9, 3.905075697495349*^9}, {3.905075853427477*^9, 
   3.9050758545188293`*^9}, {3.905075895023199*^9, 3.905075897104611*^9}, {
   3.90507598082213*^9, 3.905075981760796*^9}, {3.905076115923216*^9, 
   3.905076124758299*^9}, {3.905076181618115*^9, 3.90507618257285*^9}, {
   3.905076217877694*^9, 3.905076223465703*^9}, {3.905076284617469*^9, 
   3.9050762911256638`*^9}, {3.905076434720276*^9, 3.905076445162734*^9}, {
   3.90507651858289*^9, 3.905076569165306*^9}, {3.90507694443674*^9, 
   3.905077029200659*^9}, {3.9050771023176947`*^9, 3.905077102777562*^9}, {
   3.9050772934841433`*^9, 3.9050773076712914`*^9}, {3.9050773934528847`*^9, 
   3.905077393939683*^9}, {3.905077522608235*^9, 3.905077546174322*^9}, {
   3.905077706306137*^9, 3.9050777068822308`*^9}, {3.905079817460314*^9, 
   3.905079828400318*^9}, {3.9050799639147787`*^9, 3.9050799660635242`*^9}, {
   3.905080062293583*^9, 3.9050800777398577`*^9}, 3.905080149484006*^9, {
   3.9050806759695063`*^9, 3.905080711679976*^9}, {3.905081775480446*^9, 
   3.905081833401041*^9}, 3.905082005785323*^9, {3.905096014798903*^9, 
   3.905096030063353*^9}, {3.9050962477225924`*^9, 3.905096264689839*^9}, {
   3.90509631425896*^9, 3.905096365677239*^9}, {3.905096405385466*^9, 
   3.90509641321699*^9}, {3.905096449846875*^9, 3.905096463431314*^9}, 
   3.905096501960783*^9, {3.905770645985441*^9, 3.905770647099566*^9}, {
   3.9058736076979437`*^9, 3.905873632055017*^9}, {3.905873679197093*^9, 
   3.9058737273870993`*^9}, {3.905873773947507*^9, 3.905873799611973*^9}, {
   3.905873843374236*^9, 3.905873845245839*^9}, {3.905873907065322*^9, 
   3.905873954121711*^9}, 3.905873999121202*^9, {3.9058740348706913`*^9, 
   3.9058740364036493`*^9}, {3.9058746034542913`*^9, 3.905874656436063*^9}, 
   3.9058747196457233`*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"06ab1b38-cea5-4ae6-b2d5-544ea578d153"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 11, 1, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.9058747298123293`*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"e909d0d4-853d-4a47-b88c-5cb33331ac23"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 11, 2, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.9058747298515997`*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"2ff29c64-d2a7-439a-afff-5c8bdebdc723"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 11, 3, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874729894209*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"c336e21d-5826-4fe9-a5f4-7cdc40cc9e8c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 11, 4, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874729926783*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"98ea8931-d67c-4f08-b192-1e290e94d962"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 11, 5, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874730194853*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"fe481370-4443-4af3-b3ff-47db352fe3f9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 11, 6, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874730411252*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"b5a65ee9-9085-43e7-aba3-6af1bc493932"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 11, 7, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874730627254*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"d7e4869a-2d47-4c83-b381-e41e3d52cbd8"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 11, 8, 
   24971388784507357216, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874730834046*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"6037504c-f956-447a-9f71-0091aacc493f"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"100\\\"}]\\) iterations.\"", 2, 11, 9, 24971388784507357216, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769105392366*^9, 3.905874698474703*^9, 
  3.905874731098979*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"73570872-4d3f-413d-8661-a9cef8f205d0"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"SolveEulerEq_20231009-1PZFOB\"\>"}],
  SequenceForm["Adding test: ", "SolveEulerEq_20231009-1PZFOB"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9057691378401814`*^9, 3.905874698634203*^9, 
  3.905874731203569*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"bb4f537e-e02d-45a2-93de-db15bcb40cb9"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>"], "Print",
 CellChangeTimes->{3.9057691378401814`*^9, 3.905874698634203*^9, 
  3.9058747312052*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"15bacfb0-c964-4a4d-86e0-7cf5d6e6c964"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Off[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol},\n\t\t\
{ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modDES}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[And,\n\t\t{\n\
\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\t\
SameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\t,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;6]], \
ComputationalEngine`SolveEulerEq`optsRepeated[[1;;2]]];\n\t];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\t\
Apply[And,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\
\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t\t}\n\t\
\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`opts[[1;;4]]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\t{2}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t{2}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\
\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\n\t\t\
ComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\
\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\
\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\t\
Module[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\"UpdatePd\" -> True,\n\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = \
Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t\t\
{\"PrintResidualsNorm\" -> True}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t\t]\n\t\t\t\t\
]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\t\tReap[\n\t\
\t\t\t\t\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t\t$MessageList\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\t\
\"FindRootOptions\" -> {MaxIterations -> 1},\n\t\t\t\t\"FindRootOptions\" -> \
{AccuracyGoal -> 2}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ FindRoot;\n\t\t\t\
ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t\t]\
\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t\t],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`maxMaturity = \
If[ComputationalEngine`SolveEulerEq`longTest, 12, 2];\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\
\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tSort[\n\t\t\t\t\t\t\t\
FilterRules[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\
\tCheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[And,\n\t\t{\n\t\t\tApply[And, \
ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, Values @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\t\
On[General::stop];\n\tComputationalEngine`SolveEulerEq`out", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tOff[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol},\n\t\t\
{ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modDES}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[And,\n\t\t{\n\
\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\t\
SameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\t,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;6]], \
ComputationalEngine`SolveEulerEq`optsRepeated[[1;;2]]];\n\t];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\t\
Apply[And,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\
\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t\t}\n\t\
\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`opts[[1;;4]]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\t{2}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t{2}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\
\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\n\t\t\
ComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\
\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\
\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\t\
Module[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\"UpdatePd\" -> True,\n\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = \
Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t\t\
{\"PrintResidualsNorm\" -> True}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t\t]\n\t\t\t\t\
]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\t\tReap[\n\t\
\t\t\t\t\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t\t$MessageList\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\t\
\"FindRootOptions\" -> {MaxIterations -> 1},\n\t\t\t\t\"FindRootOptions\" -> \
{AccuracyGoal -> 2}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ FindRoot;\n\t\t\t\
ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t\t]\
\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t\t],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`maxMaturity = \
If[ComputationalEngine`SolveEulerEq`longTest, 12, 2];\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\
\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tSort[\n\t\t\t\t\t\t\t\
FilterRules[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\
\tCheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[And,\n\t\t{\n\t\t\tApply[And, \
ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, Values @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\t\
On[General::stop];\n\tComputationalEngine`SolveEulerEq`out\n\t,\n\tTrue\n\t,\n\
\t{HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]]}\n\t,\n\t\
TestID->\"SolveEulerEq_20231009-1PZFOB\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> False, "FailureType" -> "MessageFailure", 
   "OutputLog" -> {}, 
   "Messages" -> {
    "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", "The norm of the residuals (errors) is `1`", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is smaller than the \
specified tolerance `2`.", 
     "The norm of the residuals (errors) is `1`, which is larger than the \
specified tolerance `2`.", 
     MessageName[FindRoot, "cvmit"]}, 
   "MessagesText" -> {
    "                                                               -14\n\
checks::norm : The norm of the residuals (errors) is 4.38391 10", 
     "                                                                     \
-14                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-14\nchecks::smallresid : The norm of the residuals (errors) is 4.38391 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-14                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 4.38391 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                               -12\n\
checks::norm : The norm of the residuals (errors) is 1.13832 10", 
     "                                                                     \
-12                                                    -16\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "                                                                     \
-12\nchecks::smallresid : The norm of the residuals (errors) is 1.13832 10   \
, which is smaller than the specified tolerance 1.", 
     "                                                                     \
-12                                                    -20\n\
checks::largeresid : The norm of the residuals (errors) is 1.13832 10   , \
which is larger than the specified tolerance 1. 10   .", 
     "FindRoot::cvmit : Failed to converge to the requested accuracy or \
precision within 100 iterations."}, "MessagesExpressions" -> {
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
     Hold[
      Message[
       MessageName[
       FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
     Hold[
      Message[
       MessageName[FindRoot, "cvmit"], 
       HoldForm[100]]]}, "Timing" -> 2.599, "AbsoluteTiming" -> 2.603, 
   "InputString" :> ToString[
     Unevaluated[Off[
        MessageName[General, "stop"]]; 
      Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`"]; \
$ContextPath = DeleteDuplicates[
         Prepend[$ContextPath, 
          "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`"]]; Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      ComputationalEngine`SolveEulerEq`msp = 
       FernandoDuarte`LongRunRisk`Models; 
      ComputationalEngine`SolveEulerEq`modBY = 
       ComputationalEngine`SolveEulerEq`msp["BY"]; 
      ComputationalEngine`SolveEulerEq`modBKY = 
       ComputationalEngine`SolveEulerEq`msp["BKY"]; 
      ComputationalEngine`SolveEulerEq`modNRC = 
       ComputationalEngine`SolveEulerEq`msp["NRC"]; 
      ComputationalEngine`SolveEulerEq`modDES = 
       ComputationalEngine`SolveEulerEq`msp["DES"]; 
      ComputationalEngine`SolveEulerEq`modNRCStochVol = 
       ComputationalEngine`SolveEulerEq`msp["NRCStochVol"]; 
      ComputationalEngine`SolveEulerEq`mods = 
       If[ComputationalEngine`SolveEulerEq`longTest, {
         ComputationalEngine`SolveEulerEq`modBY, 
          ComputationalEngine`SolveEulerEq`modBKY, 
          ComputationalEngine`SolveEulerEq`modNRC, 
          ComputationalEngine`SolveEulerEq`modDES, 
          ComputationalEngine`SolveEulerEq`modNRCStochVol}, {
         ComputationalEngine`SolveEulerEq`modBKY, 
          ComputationalEngine`SolveEulerEq`modDES}]; 
      ComputationalEngine`SolveEulerEq`coeffsQ[
         Pattern[ComputationalEngine`SolveEulerEq`sol, 
          Blank[]], 
         Pattern[ComputationalEngine`SolveEulerEq`coeffName, 
          Blank[]], 
         Pattern[ComputationalEngine`SolveEulerEq`numStateVars, 
          Blank[]], 
         Optional[
          Pattern[ComputationalEngine`SolveEulerEq`numAssets, 
           Blank[]], 0], 
         Optional[
          Pattern[ComputationalEngine`SolveEulerEq`bond, 
           Blank[]], 0]] := Apply[And, {
          If[ComputationalEngine`SolveEulerEq`numAssets == 0, Sort[
             Cases[
              Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
              ComputationalEngine`SolveEulerEq`coeffName[
                Pattern[ComputationalEngine`SolveEulerEq`i, 
                 Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`i]] === 
           Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1, 
           Sort[
             
             Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - 
               ComputationalEngine`SolveEulerEq`bond, 
               Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 
               1}]] == Sort[
             Cases[
              Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
              ComputationalEngine`SolveEulerEq`coeffName[
                Pattern[ComputationalEngine`SolveEulerEq`i, 
                 Blank[Integer]]][
                Pattern[ComputationalEngine`SolveEulerEq`j, 
                 Blank[Integer]]] :> {
               ComputationalEngine`SolveEulerEq`i, 
                ComputationalEngine`SolveEulerEq`j}]]], 
          Apply[And, 
           Map[MatchQ[#, ComputationalEngine`SolveEulerEq`coeffName]& , 
            Cases[
             Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
             Pattern[ComputationalEngine`SolveEulerEq`var, 
               Blank[]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]][
               Pattern[ComputationalEngine`SolveEulerEq`j, 
                Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`var]]], 
          Apply[And, 
           Map[MatchQ[#, 
             StringDrop[
              ToString[ComputationalEngine`SolveEulerEq`coeffName], -1]]& , 
            Cases[
             Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
             Pattern[ComputationalEngine`SolveEulerEq`var, 
               Blank[]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]][
               Pattern[ComputationalEngine`SolveEulerEq`j, 
                Blank[Integer]]] :> 
             Context[ComputationalEngine`SolveEulerEq`var]]]], 
          Apply[And, 
           Map[NumberQ, 
            Map[Values, ComputationalEngine`SolveEulerEq`sol]]]}]; 
      ComputationalEngine`SolveEulerEq`opts = {{
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>}, {
         "PrintResidualsNorm" -> False}, {"MaxIterations" -> 1}, {
         "FindRootOptions" -> {"MaxIterations" -> 1}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}}; 
      ComputationalEngine`SolveEulerEq`optsRepeated = {{
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
          "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
          WorkingPrecision -> $MachinePrecision}, {
         "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
          "FindRootOptions" -> {"MaxIterations" -> 5}}, {
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
           "FindRootOptions" -> {
            "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision}}; {
          "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
           "FindRootOptions" -> {
            "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision}, 
           WorkingPrecision -> $MachinePrecision}}; 
      If[ComputationalEngine`SolveEulerEq`longTest, 
        ComputationalEngine`SolveEulerEq`optsMany = Join[
           Part[ComputationalEngine`SolveEulerEq`opts, 
            Span[5, -1]], ComputationalEngine`SolveEulerEq`optsRepeated]; 
        Null, ComputationalEngine`SolveEulerEq`optsMany = Join[
           Part[ComputationalEngine`SolveEulerEq`opts, 
            Span[5, 6]], 
           Part[ComputationalEngine`SolveEulerEq`optsRepeated, 
            Span[1, 2]]]; Null]; 
      Do[ComputationalEngine`SolveEulerEq`ind = 0; 
        ComputationalEngine`SolveEulerEq`numStateVars = Length[
           ComputationalEngine`SolveEulerEq`model["stateVars"][
           ComputationalEngine`SolveEulerEq`t]]; 
        ComputationalEngine`SolveEulerEq`numStocks = 
         ComputationalEngine`SolveEulerEq`model["numStocks"]; 
        ComputationalEngine`SolveEulerEq`coeffsQWc[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, 
           ComputationalEngine`SolveEulerEq`numStateVars]; 
        ComputationalEngine`SolveEulerEq`coeffsQPd[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd],
            ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`numStocks]; 
        ComputationalEngine`SolveEulerEq`coeffsQBond[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]], 
           Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb], 
           ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
        ComputationalEngine`SolveEulerEq`coeffsQNomBond[
           Pattern[ComputationalEngine`SolveEulerEq`sol, 
            Blank[]], 
           Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
            Blank[]]] := 
         ComputationalEngine`SolveEulerEq`coeffsQ[
          ComputationalEngine`SolveEulerEq`sol, 
           Head[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb],
            ComputationalEngine`SolveEulerEq`numStateVars, 
           ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
        ComputationalEngine`SolveEulerEq`updateCoeffs = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs; 
        ComputationalEngine`SolveEulerEq`updateCoeffsSol = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol; 
        ComputationalEngine`SolveEulerEq`updateCoeffsWc = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc; 
        ComputationalEngine`SolveEulerEq`updateCoeffsPd = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd; 
        ComputationalEngine`SolveEulerEq`updateCoeffsBond = 
         FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond; 
        ComputationalEngine`SolveEulerEq`newParameters = {
          ComputationalEngine`SolveEulerEq`delta -> 0.99}; 
        ComputationalEngine`SolveEulerEq`guessCoeffsSolution = {
          ComputationalEngine`SolveEulerEq`A[0] -> 4.6}; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           Apply[And, {
             ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, {}, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, {}, {}, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffsSol[
               ComputationalEngine`SolveEulerEq`model, {}, {}], 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, {}, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffsSol[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, {}], 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, 
                ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, 
                ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, 
                ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}] == 
              ComputationalEngine`SolveEulerEq`updateCoeffsSol[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newParameters, 
                ComputationalEngine`SolveEulerEq`guessCoeffsSolution]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Quiet[
             Apply[And, 
              Flatten[{
                Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                 Map[{
                   ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                   ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Sequence[#]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Apply[Sequence, #]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, {}, #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Sequence[{}], #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, {}], #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Sequence[#]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, #]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Most[#], 
                    Last[#]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    Most[#]], 
                    Last[#]]}& , 
                  Part[ComputationalEngine`SolveEulerEq`opts, 
                   Span[1, 4]]], {2}], 
                Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                 Map[{
                   ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                   ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Rest[#]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Sequence[
                    Rest[#]]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    First[#], 
                    Rest[#]]], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, 
                    Most[#], {
                    Last[#]}], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, {
                    First[#]}, 
                    Rest[#]]}& , ComputationalEngine`SolveEulerEq`optsMany], {
                 2}]}]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
        ComputationalEngine`SolveEulerEq`optsWc = {"MaxIterations" -> 100}; 
        ComputationalEngine`SolveEulerEq`solWc = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`solWc == 
          ComputationalEngine`SolveEulerEq`updateCoeffsSol[
           ComputationalEngine`SolveEulerEq`model, {}, {}, 
            ComputationalEngine`SolveEulerEq`optsWc] == 
          ComputationalEngine`SolveEulerEq`updateCoeffsWc[
            ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
            ComputationalEngine`SolveEulerEq`model["params"], {}, 
            ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`solWc1 = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
            ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
             "initialGuess" -> <|"Ewc" -> {3}|>]; 
          ComputationalEngine`SolveEulerEq`solWc2 = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
            ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1, 
             "initialGuess" -> <|"Ewc" -> {1}|>]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
              ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
              ComputationalEngine`SolveEulerEq`solWc2]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`solWc1 = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
            ComputationalEngine`SolveEulerEq`model, 
             "FindRootOptions" -> {"MaxIterations" -> 1}, 
             "initialGuess" -> <|"Ewc" -> {3}|>]; 
          ComputationalEngine`SolveEulerEq`solWc2 = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
            ComputationalEngine`SolveEulerEq`model, 
             "FindRootOptions" -> {"MaxIterations" -> 1}, 
             "initialGuess" -> <|"Ewc" -> {1}|>]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
              ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
              FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0], 
              ComputationalEngine`SolveEulerEq`solWc2]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`m1 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1,
                   "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m2 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 3,
                   "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m3 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 1}, 
                  "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m4 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 3}, 
                  "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m1]] == {{1}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m4]] == {{3}}}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`m1 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 3,
                   "FindRootOptions" -> {"MaxIterations" -> 1}, 
                  "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m2 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 1}, 
                  "MaxIterations" -> 3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m3 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1,
                   "FindRootOptions" -> {"MaxIterations" -> 3}, 
                  "initialGuess" -> <|"Ewc" -> {4}|>]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m4 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 3}, 
                  "MaxIterations" -> 1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m1]] == {{3}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
              ReleaseHold[
                Last[ComputationalEngine`SolveEulerEq`m4]] == {{1}}}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
        ComputationalEngine`SolveEulerEq`m1 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "PrintResidualsNorm" -> 
                False]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`m2 = 
         Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
           Reap[
           Module[{}, 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "PrintResidualsNorm" -> 
                True]; Null]; $MessageList]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         First[ComputationalEngine`SolveEulerEq`m2] == {
            HoldForm[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]}; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = NumberQ[
           ReleaseHold[
            First[
             Flatten[
              Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
               False], 
              Abort[], 
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
              True], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`c1 = Not[
           TrueQ[
            CheckAbort[
             Check[
              ComputationalEngine`SolveEulerEq`updateCoeffs[
              ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
               True, "Tol" -> 1], 
              Abort[], 
              MessageName[
              
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
        ComputationalEngine`SolveEulerEq`c2 = TrueQ[
           CheckAbort[
            Check[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> True,
               "Tol" -> 10.^(-20)], 
             Abort[], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         Apply[And, {
           ComputationalEngine`SolveEulerEq`c1, 
            ComputationalEngine`SolveEulerEq`c2}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`Ewc0 = 4.6; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQWc[
           ComputationalEngine`SolveEulerEq`updateCoeffs[
           ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
              "Epd" -> {{5.5}}|>]]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`coeffsWcPd = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> True, 
           "initialGuess" -> <|
            "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
             "Epd" -> {{5.5}}|>]; 
        ComputationalEngine`SolveEulerEq`coeffsWc = 
         FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
            Blank[Integer]]]; 
        ComputationalEngine`SolveEulerEq`coeffsPd = 
         FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
           FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
            Blank[Integer]]]; ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQWc[
          ComputationalEngine`SolveEulerEq`coeffsWc]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = 
         ComputationalEngine`SolveEulerEq`coeffsQPd[
          ComputationalEngine`SolveEulerEq`coeffsPd]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}|>] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                "Epd" -> {{5.5}}|>]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
              SubsetQ[
               Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
               Options[
               FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]], 
              SubsetQ[
               Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
               Options[
               FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks]]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`oldOptions = 
           Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
          ComputationalEngine`SolveEulerEq`oldOptionsSol = 
           Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol]; 
          ComputationalEngine`SolveEulerEq`oldOptionsWc = 
           Options[FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsWc]; ComputationalEngine`SolveEulerEq`ig = 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, {}, {}, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsWc[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
              
              ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
              "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          SetOptions[
           ComputationalEngine`SolveEulerEq`updateCoeffs, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
           ComputationalEngine`SolveEulerEq`oldOptions; 
          SetOptions[
           FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, 
            "initialGuess" -> <|
             "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, {}, {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsSol[
             ComputationalEngine`SolveEulerEq`model, {}, {}, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Not[
             TrueQ[
             ComputationalEngine`SolveEulerEq`updateCoeffsSol[
               ComputationalEngine`SolveEulerEq`model, {}, {}, MaxIterations -> 
                1] == ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, MaxIterations -> 1]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol; 
          SetOptions[
           FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ComputationalEngine`SolveEulerEq`updateCoeffsWc[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
              
              ComputationalEngine`SolveEulerEq`model["parameters"], {}] == 
            ComputationalEngine`SolveEulerEq`updateCoeffsWc[
              ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["wc"], 
              
              ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
              "Ewc0" -> ComputationalEngine`SolveEulerEq`ig] == 
            ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|
               "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Not[
             TrueQ[ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "wc"], 
                ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                MaxIterations -> 1] == 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, MaxIterations -> 1]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc; 
          ComputationalEngine`SolveEulerEq`oldOptions = 
           Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
          ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {{
             "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{4.6}}|>}, {
             "PrintResidualsNorm" -> True}}; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
             Flatten[
              
              Map[{SetOptions[
                 ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                ComputationalEngine`SolveEulerEq`out = 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, #] == 
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model]; 
                Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                 ComputationalEngine`SolveEulerEq`oldOptions; 
                ComputationalEngine`SolveEulerEq`out}& , 
               ComputationalEngine`SolveEulerEq`optsUpdateCoeff]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`optsBad = {{
             MaxIterations -> 100}, {PrecisionGoal -> $MachinePrecision}}; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
             Flatten[
              
              Map[{ComputationalEngine`SolveEulerEq`m = 
                 Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                   Reap[Module[{}, 
                    SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]]; \
$MessageList]]; Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                 ComputationalEngine`SolveEulerEq`oldOptions; First[
                   First[ComputationalEngine`SolveEulerEq`m]] == HoldForm[
                   MessageName[SetOptions, "optnf"]]}& , 
               ComputationalEngine`SolveEulerEq`optsBad]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`optsFindRoot = {
            "FindRootOptions" -> {MaxIterations -> 1}, 
             "FindRootOptions" -> {AccuracyGoal -> 2}}; 
          ComputationalEngine`SolveEulerEq`oldFindRootOpts = 
           Options[FindRoot]; 
          ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = Keys[
             ReplaceAll["FindRootOptions", 
              Options[ComputationalEngine`SolveEulerEq`updateCoeffs]]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
             Flatten[
              Map[{
               SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                ComputationalEngine`SolveEulerEq`out1 = 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, #] == 
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model]; 
                Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                 ComputationalEngine`SolveEulerEq`oldOptions; 
                Unprotect[FindRoot]; SetOptions[FindRoot, 
                  Last[#]]; 
                ComputationalEngine`SolveEulerEq`out2 = 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, #] == 
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model]; 
                ComputationalEngine`SolveEulerEq`out2 = If[
                   MemberQ[
                   ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, 
                    First[
                    First[
                    Last[#]]]], 
                   Not[
                    TrueQ[ComputationalEngine`SolveEulerEq`out2]], 
                   ComputationalEngine`SolveEulerEq`out2]; 
                Options[FindRoot] = 
                 ComputationalEngine`SolveEulerEq`oldFindRootOpts; 
                Protect[FindRoot]; {
                 ComputationalEngine`SolveEulerEq`out1, 
                  ComputationalEngine`SolveEulerEq`out2}}& , 
               ComputationalEngine`SolveEulerEq`optsFindRoot]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQWc[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
            ComputationalEngine`SolveEulerEq`coeffsQWc[
             ComputationalEngine`SolveEulerEq`updateCoeffs[
             ComputationalEngine`SolveEulerEq`model, 
              "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           Apply[And, {ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {4.}|>]] == 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {4}|>]], 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {1., 8.}|>]] == 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {4., 1., 8.}|>]] == 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, 
                 "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 
         If[ComputationalEngine`SolveEulerEq`longTest, 12, 2]; 
        ComputationalEngine`SolveEulerEq`solBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`solNomBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`newBondParams = {
          FernandoDuarte`LongRunRisk`Model`Parameters`psi -> 
           ReplaceAll[0.1 + FernandoDuarte`LongRunRisk`Model`Parameters`psi, 
             ComputationalEngine`SolveEulerEq`model["params"]]}; 
        ComputationalEngine`SolveEulerEq`solWcNewBondParams = 
         ComputationalEngine`SolveEulerEq`updateCoeffs[
          ComputationalEngine`SolveEulerEq`model, 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`optsWc]; 
        ComputationalEngine`SolveEulerEq`solBondNew = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
        ComputationalEngine`SolveEulerEq`solNomBondNew = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], 
           ComputationalEngine`SolveEulerEq`newBondParams, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBondNew, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBondNew, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            Not[
            ComputationalEngine`SolveEulerEq`solBond === 
             ComputationalEngine`SolveEulerEq`solBondNew], 
            Not[
            ComputationalEngine`SolveEulerEq`solNomBond === 
             ComputationalEngine`SolveEulerEq`solNomBondNew]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`oldMaxMaturity = 
         ComputationalEngine`SolveEulerEq`maxMaturity; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 2; 
        ComputationalEngine`SolveEulerEq`solBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`solNomBond = 
         ComputationalEngine`SolveEulerEq`updateCoeffsBond[
           ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
           "nombond"], 
           ComputationalEngine`SolveEulerEq`model["params"], {}, 
           ComputationalEngine`SolveEulerEq`maxMaturity, 
           ComputationalEngine`SolveEulerEq`solWc]; 
        ComputationalEngine`SolveEulerEq`outTests[
           ComputationalEngine`SolveEulerEq`model["shortname"]][
          ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
            ComputationalEngine`SolveEulerEq`coeffsQBond[
            ComputationalEngine`SolveEulerEq`solBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            ComputationalEngine`SolveEulerEq`coeffsQNomBond[
            ComputationalEngine`SolveEulerEq`solNomBond, 
             ComputationalEngine`SolveEulerEq`maxMaturity], 
            Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == Sort[
              DeleteDuplicates[
               Cases[
                Keys[ComputationalEngine`SolveEulerEq`solBond], 
                Pattern[ComputationalEngine`SolveEulerEq`x, 
                  Blank[]][
                  Pattern[ComputationalEngine`SolveEulerEq`i, 
                   Blank[]]][
                  Pattern[ComputationalEngine`SolveEulerEq`j, 
                   Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]], 
            Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == Sort[
              DeleteDuplicates[
               Cases[
                Keys[ComputationalEngine`SolveEulerEq`solNomBond], 
                Pattern[ComputationalEngine`SolveEulerEq`x, 
                  Blank[]][
                  Pattern[ComputationalEngine`SolveEulerEq`i, 
                   Blank[]]][
                  Pattern[ComputationalEngine`SolveEulerEq`j, 
                   Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]]}]; 
        ComputationalEngine`SolveEulerEq`ind = 
         ComputationalEngine`SolveEulerEq`ind + 1; 
        ComputationalEngine`SolveEulerEq`maxMaturity = 
         ComputationalEngine`SolveEulerEq`oldMaxMaturity; 
        If[ComputationalEngine`SolveEulerEq`longTest, 
          ComputationalEngine`SolveEulerEq`solBond = 
           ComputationalEngine`SolveEulerEq`updateCoeffsBond[
             ComputationalEngine`SolveEulerEq`model["coeffsSolution"]["bond"], 
             ComputationalEngine`SolveEulerEq`model["params"], {}, 
             ComputationalEngine`SolveEulerEq`maxMaturity, 
             ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic, 
             "Precision" -> 1]; 
          ComputationalEngine`SolveEulerEq`solNomBond = 
           ComputationalEngine`SolveEulerEq`updateCoeffsBond[
             ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
             "nombond"], 
             ComputationalEngine`SolveEulerEq`model["params"], {}, 
             ComputationalEngine`SolveEulerEq`maxMaturity, 
             ComputationalEngine`SolveEulerEq`solWc, "Method" -> Automatic, 
             "Precision" -> 1]; ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
              ComputationalEngine`SolveEulerEq`coeffsQBond[
              ComputationalEngine`SolveEulerEq`solBond, 
               ComputationalEngine`SolveEulerEq`maxMaturity], 
              ComputationalEngine`SolveEulerEq`coeffsQNomBond[
              ComputationalEngine`SolveEulerEq`solNomBond, 
               ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {FilterRules[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                 "MaxMaturity" -> 
                 ComputationalEngine`SolveEulerEq`maxMaturity], 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                 Blank[]]] === 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc], FilterRules[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdateNomBond" -> 
                 True, "MaxMaturity" -> 
                 ComputationalEngine`SolveEulerEq`maxMaturity], 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                 Blank[]]] === 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = Apply[And, {Sort[
                FilterRules[
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "UpdateBonds" -> 
                  True, "MaxMaturity" -> 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Alternatives[
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[
                  
                   Blank[]], 
                  FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[
                   Blank[]]]]] === Sort[
                Join[
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                  ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                  "bond"], 
                  ComputationalEngine`SolveEulerEq`model["params"], {}, 
                  ComputationalEngine`SolveEulerEq`maxMaturity, 
                  ComputationalEngine`SolveEulerEq`solWc], 
                 ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                  ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                  "nombond"], 
                  ComputationalEngine`SolveEulerEq`model["params"], {}, 
                  ComputationalEngine`SolveEulerEq`maxMaturity, 
                  ComputationalEngine`SolveEulerEq`solWc]]]}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`m1 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True,
                   "PrintResidualsNorm" -> False]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`m2 = 
           Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
             Reap[
             Module[{}, 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True,
                   "PrintResidualsNorm" -> True]; Null]; $MessageList]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = MemberQ[
             ReleaseHold[
              First[ComputationalEngine`SolveEulerEq`m2]], 
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = NumberQ[
             ReleaseHold[
              First[
               Flatten[
                Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`c1 = Not[
             TrueQ[
              CheckAbort[
               Check[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                 "CheckResiduals" -> False], 
                Abort[], 
                MessageName[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
          ComputationalEngine`SolveEulerEq`c2 = TrueQ[
             CheckAbort[
              Check[
               ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                "CheckResiduals" -> True], 
               Abort[], 
               MessageName[
               FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           Apply[And, {
             ComputationalEngine`SolveEulerEq`c1, 
              ComputationalEngine`SolveEulerEq`c2}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; 
          ComputationalEngine`SolveEulerEq`c1 = Not[
             TrueQ[
              CheckAbort[
               Check[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                 "CheckResiduals" -> True, "Tol" -> 1], 
                Abort[], 
                MessageName[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]]; 
          ComputationalEngine`SolveEulerEq`c2 = TrueQ[
             CheckAbort[
              Check[
               ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> True, 
                "CheckResiduals" -> True, "Tol" -> 10.^(-20)], 
               Abort[], 
               MessageName[
               FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
          ComputationalEngine`SolveEulerEq`outTests[
             ComputationalEngine`SolveEulerEq`model["shortname"]][
            ComputationalEngine`SolveEulerEq`ind] = 
           Apply[And, {
             ComputationalEngine`SolveEulerEq`c1, 
              ComputationalEngine`SolveEulerEq`c2}]; 
          ComputationalEngine`SolveEulerEq`ind = 
           ComputationalEngine`SolveEulerEq`ind + 1; Null]; Null, {
        ComputationalEngine`SolveEulerEq`model, 
         ComputationalEngine`SolveEulerEq`mods}]; 
      ComputationalEngine`SolveEulerEq`noMissingTest = {}; 
      Do[ComputationalEngine`SolveEulerEq`testNumber = Sort[
           Cases[
            Keys[
             SubValues[ComputationalEngine`SolveEulerEq`outTests]], 
            Verbatim[HoldPattern][
              ComputationalEngine`SolveEulerEq`outTests[
               ComputationalEngine`SolveEulerEq`model["shortname"]][
               Pattern[ComputationalEngine`SolveEulerEq`i, 
                Blank[Integer]]]] :> ComputationalEngine`SolveEulerEq`i]]; 
        AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Range[0, 
            Max[ComputationalEngine`SolveEulerEq`testNumber]] == 
          ComputationalEngine`SolveEulerEq`testNumber]; Null, {
        ComputationalEngine`SolveEulerEq`model, 
         ComputationalEngine`SolveEulerEq`mods}]; 
      ComputationalEngine`SolveEulerEq`out = Apply[And, {
          Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest], 
          Apply[And, 
           Values[
            SubValues[ComputationalEngine`SolveEulerEq`outTests]]]}]; On[
        MessageName[General, "stop"]]; ComputationalEngine`SolveEulerEq`out], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 4.383905086044507*^-14]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 4.383905086044507*^-14, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "norm"], 1.1383179045888502`*^-12]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
   Hold[
    Message[
     MessageName[
     FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
   Hold[
    Message[
     MessageName[FindRoot, "cvmit"], 
     HoldForm[100]]]}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = 
  "{HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]]}", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"SolveEulerEq\"]\n\n\nVerificationTest[\n\t\
ComputationalEngine`SolveEulerEq`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\
\t{}\n\t,\n\tTestID->\"SolveEulerEq_20231009-J0EJJE\"\n]\n\n\n\
VerificationTest[\n\tOff[General::stop];\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\";\n\t\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\"];\n\t\
Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\
\tComputationalEngine`SolveEulerEq`msp = FernandoDuarte`LongRunRisk`Models;\n\
\tComputationalEngine`SolveEulerEq`modBY = \
ComputationalEngine`SolveEulerEq`msp @ \"BY\";\n\t\
ComputationalEngine`SolveEulerEq`modBKY = \
ComputationalEngine`SolveEulerEq`msp @ \"BKY\";\n\t\
ComputationalEngine`SolveEulerEq`modNRC = \
ComputationalEngine`SolveEulerEq`msp @ \"NRC\";\n\t\
ComputationalEngine`SolveEulerEq`modDES = \
ComputationalEngine`SolveEulerEq`msp @ \"DES\";\n\t\
ComputationalEngine`SolveEulerEq`modNRCStochVol = \
ComputationalEngine`SolveEulerEq`msp @ \"NRCStochVol\";\n\t\
ComputationalEngine`SolveEulerEq`mods = \
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
{ComputationalEngine`SolveEulerEq`modBY, \
ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modNRC, \
ComputationalEngine`SolveEulerEq`modDES, \
ComputationalEngine`SolveEulerEq`modNRCStochVol},\n\t\t\
{ComputationalEngine`SolveEulerEq`modBKY, \
ComputationalEngine`SolveEulerEq`modDES}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol_\
,ComputationalEngine`SolveEulerEq`coeffName_,ComputationalEngine`SolveEulerEq`\
numStateVars_,Optional[ComputationalEngine`SolveEulerEq`numAssets_, \
0],Optional[ComputationalEngine`SolveEulerEq`bond_, 0]] := Apply[And,\n\t\t{\n\
\t\t\tIf[Equal[ComputationalEngine`SolveEulerEq`numAssets, 0],\n\t\t\t\t\
SameQ[Sort[Cases[Map[Keys, ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer] :> ComputationalEngine`SolveEulerEq`i]],\n\t\t\t\t\t\
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1\n\t\t\t\t],\n\t\t\
\t\tEqual[\n\t\t\t\t\tSort[\n\t\t\t\t\t\t\
Tuples[{Range[ComputationalEngine`SolveEulerEq`numAssets] - \
ComputationalEngine`SolveEulerEq`bond, \
Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1}]\n\t\t\t\t\t],\n\
\t\t\t\t\tSort[\n\t\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`coeffName[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
{ComputationalEngine`SolveEulerEq`i, ComputationalEngine`SolveEulerEq`j}]\n\t\
\t\t\t\t]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\t\t\t\tMap[MatchQ[#, \
ComputationalEngine`SolveEulerEq`coeffName]&,\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
ComputationalEngine`SolveEulerEq`var]\n\t\t\t\t]\n\t\t\t],\n\t\t\tApply[And,\n\
\t\t\t\tMap[Function @ MatchQ[#, StringDrop[ToString @ \
ComputationalEngine`SolveEulerEq`coeffName, -1]],\n\t\t\t\t\tCases[Map[Keys, \
ComputationalEngine`SolveEulerEq`sol], \
ComputationalEngine`SolveEulerEq`var_[ComputationalEngine`SolveEulerEq`i_\
Integer][ComputationalEngine`SolveEulerEq`j_Integer] :> \
Context[ComputationalEngine`SolveEulerEq`var]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
Apply[And, Map[NumberQ, Map[Values, ComputationalEngine`SolveEulerEq`sol]]]\n\
\t\t}\n\t];\n\tComputationalEngine`SolveEulerEq`opts = {\n\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>},\n\t\t{\"PrintResidualsNorm\" \
-> False},\n\t\t{\"MaxIterations\" -> 1},\n\t\t{\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1}},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False\n\t\t},\n\
\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\
\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1\n\t\t},\n\t\t{\n\t\
\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\
\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \"FindRootOptions\" \
-> {WorkingPrecision -> $MachinePrecision}\n\t\t},\n\t\t{\n\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision}}\n\t};\n\tComputationalEngine`SolveEulerEq`optsRepeated = \
{\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\
\n\t\t\t\"PrintResidualsNorm\" -> False,\n\t\t\t\"FindRootOptions\" -> \
{WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t},\n\t\t{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> \
{4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{5.6}}|>,\n\t\t\t\
\"MaxIterations\" -> 1,\n\t\t\t\"FindRootOptions\" -> {WorkingPrecision -> \
$MachinePrecision},\n\t\t\tWorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t\
{\n\t\t\t\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {WorkingPrecision -> $MachinePrecision},\n\t\t\t\
WorkingPrecision -> $MachinePrecision\n\t\t},\n\t\t{\"PrintResidualsNorm\" -> \
False, \"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> \
5}},\n\t\t{\"PrintResidualsNorm\" -> False, \"MaxIterations\" -> 1, \
\"FindRootOptions\" -> {\"MaxIterations\" -> 5, WorkingPrecision -> \
$MachinePrecision}};\n\t\t{\n\t\t\t\"PrintResidualsNorm\" -> False, \
\"MaxIterations\" -> 1, \"FindRootOptions\" -> {\"MaxIterations\" -> 5, \
WorkingPrecision -> $MachinePrecision},\n\t\t\tWorkingPrecision -> \
$MachinePrecision\n\t\t}\n\t};\n\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;-1]], \
ComputationalEngine`SolveEulerEq`optsRepeated];\n\t,\n\t\t\
ComputationalEngine`SolveEulerEq`optsMany = \
Join[ComputationalEngine`SolveEulerEq`opts[[5;;6]], \
ComputationalEngine`SolveEulerEq`optsRepeated[[1;;2]]];\n\t];\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`ind = 0;\n\t\t\
ComputationalEngine`SolveEulerEq`numStateVars = Length @ \
ComputationalEngine`SolveEulerEq`model[\"stateVars\"][ComputationalEngine`\
SolveEulerEq`t];\n\t\tComputationalEngine`SolveEulerEq`numStocks = \
ComputationalEngine`SolveEulerEq`model @ \"numStocks\";\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, \
ComputationalEngine`SolveEulerEq`numStateVars];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQPd[ComputationalEngine`SolveEulerEq`\
sol_] := ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`\
SolveEulerEq`sol, Head @ \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`numStocks];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`sol_, ComputationalEngine`SolveEulerEq`maxMaturity_] := \
ComputationalEngine`SolveEulerEq`coeffsQ[ComputationalEngine`SolveEulerEq`sol,\
 Head @ FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb, \
ComputationalEngine`SolveEulerEq`numStateVars, \
ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1];\n\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\
\tComputationalEngine`SolveEulerEq`updateCoeffsSol = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsWc = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsPd = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsPd;\n\t\tComputationalEngine`SolveEulerEq`updateCoeffsBond = \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsBond;\n\t\tComputationalEngine`SolveEulerEq`newParameters = \
{ComputationalEngine`SolveEulerEq`delta -> 0.99};\n\t\t\
ComputationalEngine`SolveEulerEq`guessCoeffsSolution = \
{ComputationalEngine`SolveEulerEq`A[0] -> 4.6};\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters],\n\t\t\t\t\
\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, {}, {}],\n\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`updateCoeffsSol[\
ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`newParameters, {}]\n\t\t\t\t\t],\n\t\t\t\t\t\
Equal[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, {}],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newParameters, \
ComputationalEngine`SolveEulerEq`guessCoeffsSolution]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Quiet[\n\t\t\t\t\
Apply[And,\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\
\t\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, {}, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ {}, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @@ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, Last @ #],\n\t\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence @ Most @ #, Last @ #]\n\t\t\t\t\t\t\t\t\t\t}\n\t\
\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`opts[[1;;4]]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\
\t\t\t{2}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc,\n\t\t\t\t\t\t\t\tMap[\n\t\t\t\t\t\
\t\t\t\tFunction @ {\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, First @ #, Sequence @ Rest @ #],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Sequence[First @ #, Rest @ #]],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, Most @ #, {Last @ #}],\n\t\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, {First @ #}, Rest @ #]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsMany\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\
\t\t\t\t{2}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\
\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`optsWc = {\"MaxIterations\" -> 100};\n\t\t\
ComputationalEngine`SolveEulerEq`solWc = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ComputationalEngine`SolveEulerEq`solWc,\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, ComputationalEngine`SolveEulerEq`optsWc],\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`optsWc]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{3}|>];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{1}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`solWc1 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {3}|>\n\t\
\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`solWc2 = \
ComputationalEngine`SolveEulerEq`updateCoeffs[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model,\n\t\t\t\t\"FindRootOptions\" -> \
{\"MaxIterations\" -> 1},\n\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {1}|>\n\t\
\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Greater[FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc1, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0] /. \
ComputationalEngine`SolveEulerEq`solWc2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t\
{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 1, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"MaxIterations\" -> 3, \"initialGuess\" -> <|\"Ewc\" -> \
{4}|>];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{1}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{3}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 1},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 1},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 3,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`m3 = Block[\n\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\t\
Module[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\
\"FindRootOptions\" -> {\"MaxIterations\" -> 3},\n\t\t\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\
\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m4 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"FindRootOptions\" -> {\"MaxIterations\" \
-> 3},\n\t\t\t\t\t\t\t\"MaxIterations\" -> 1,\n\t\t\t\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {4}|>\n\t\t\t\t\t\t];\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\
\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[ReleaseHold @ Last @ \
ComputationalEngine`SolveEulerEq`m1, {{3}}],\n\t\t\t\t\tEqual[ReleaseHold @ \
Last @ ComputationalEngine`SolveEulerEq`m2, {{3}}],\n\t\t\t\t\t\
Equal[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m3, {{1}}],\n\t\t\
\t\t\tEqual[ReleaseHold @ Last @ ComputationalEngine`SolveEulerEq`m4, {{1}}]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[{$MessagePrePrint = Sow, \
$MessageList = {}},\n\t\t\tReap[\n\t\t\t\tModule[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> False];];\n\t\t\t\t$MessageList\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`m2 = \
Block[{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\tReap[\n\t\t\t\t\
Module[{}, \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"PrintResidualsNorm\" -> True];];\n\t\t\t\t$MessageList\n\
\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[First @ ComputationalEngine`SolveEulerEq`m2, \
{HoldForm[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::norm]}];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> False],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True],\n\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\tTrueQ[\n\t\t\t\tCheckAbort[\
\n\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> 1],\n\t\t\t\t\t\t\
Abort[], FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks::largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\
\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\tCheckAbort[\n\t\t\t\t\
Check[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"CheckResiduals\" -> True, \"Tol\" -> (10. ^ -20)],\n\t\t\
\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t],\n\t\t\t\tTrue\n\t\t\t]\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`Ewc0 = 4.6;\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\"initialGuess\" \
-> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\
\n\t\t\t]\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`coeffsWcPd = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\"UpdatePd\" -> True,\n\t\t\t\"initialGuess\" -> \
<|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \"Epd\" -> {{5.5}}|>\n\t\
\t];\n\t\tComputationalEngine`SolveEulerEq`coeffsWc = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`coeffsPd = \
FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd @ _Integer];\n\t\
\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQWc @ \
ComputationalEngine`SolveEulerEq`coeffsWc;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
ComputationalEngine`SolveEulerEq`coeffsQPd @ \
ComputationalEngine`SolveEulerEq`coeffsPd;\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tIf[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`Ewc0}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\"UpdatePd\" -> False,\n\t\t\t\t\t\
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`Ewc0}, \
\"Epd\" -> {{5.5}}|>\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol],\n\t\t\t\t\tSubsetQ[Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs, Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks]\n\
\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptionsSol = Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol;\n\t\t\tComputationalEngine`SolveEulerEq`oldOptionsWc = \
Options @ \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc;\n\t\t\tComputationalEngine`SolveEulerEq`ig = 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
\"initialGuess\" -> <|\"Ewc\" -> {ComputationalEngine`SolveEulerEq`ig}|>];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tOptions[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\t\
Equal[ComputationalEngine`SolveEulerEq`updateCoeffsSol[ComputationalEngine`\
SolveEulerEq`model, {}, {}, MaxIterations -> 1],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol;\n\t\t\t\
SetOptions[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, \"Ewc0\" -> ComputationalEngine`SolveEulerEq`ig];\n\t\
\t\tComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`\
SolveEulerEq`model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"], \
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, \"Ewc0\" -> \
ComputationalEngine`SolveEulerEq`ig\n\t\t\t\t],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> \
{ComputationalEngine`SolveEulerEq`ig}|>]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Not[\n\t\t\t\t\
TrueQ[\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsWc[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"wc\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"parameters\", {}, MaxIterations -> \
1\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, MaxIterations -> 1]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
Options[FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc;\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldOptions = Options @ \
ComputationalEngine`SolveEulerEq`updateCoeffs;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {\n\t\t\t\t{\"initialGuess\
\" -> <|\"Ewc\" -> {4.6}, \"Epd\" -> {{4.6}}|>},\n\t\t\t\t\
{\"PrintResidualsNorm\" -> True}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\
\t\t\tComputationalEngine`SolveEulerEq`optsUpdateCoeff\n\t\t\t\t\t]\n\t\t\t\t\
]\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad = {{MaxIterations -> 100}, \
{PrecisionGoal -> $MachinePrecision}};\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`m = Block[\n\t\t\t\t\t\t\t\
\t\t{$MessagePrePrint = Sow, $MessageList = {}},\n\t\t\t\t\t\t\t\t\tReap[\n\t\
\t\t\t\t\t\t\t\t\tModule[{}, \
SetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, #]];\n\t\t\t\t\t\t\t\
\t\t\t$MessageList\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tEqual[First @ \
First @ ComputationalEngine`SolveEulerEq`m, HoldForm[SetOptions::optnf]]\n\t\t\
\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`optsBad\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\
\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`optsFindRoot = {\n\t\t\t\t\
\"FindRootOptions\" -> {MaxIterations -> 1},\n\t\t\t\t\"FindRootOptions\" -> \
{AccuracyGoal -> 2}\n\t\t\t};\n\t\t\t\
ComputationalEngine`SolveEulerEq`oldFindRootOpts = Options @ FindRoot;\n\t\t\t\
ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = \
Keys[\"FindRootOptions\" /. \
Options[ComputationalEngine`SolveEulerEq`updateCoeffs]];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\tFlatten[\n\t\t\t\t\tMap[\n\t\t\t\t\t\tFunction[\n\t\t\t\t\t\t\t\
{\n\t\t\t\t\t\t\t\tSetOptions[ComputationalEngine`SolveEulerEq`updateCoeffs, \
#];\n\t\t\t\t\t\t\t\tComputationalEngine`SolveEulerEq`out1 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = \
ComputationalEngine`SolveEulerEq`oldOptions;\n\t\t\t\t\t\t\t\tUnprotect @ \
FindRoot;\n\t\t\t\t\t\t\t\tSetOptions[FindRoot, Last @ #];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = \
Equal[ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, #], ComputationalEngine`SolveEulerEq`updateCoeffs @ \
ComputationalEngine`SolveEulerEq`model];\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2 = If[\n\t\t\t\t\t\t\t\t\t\
MemberQ[ComputationalEngine`SolveEulerEq`withFindRootOptionDefault, First @ \
First @ Last @ #],\n\t\t\t\t\t\t\t\t\t\
!TrueQ[ComputationalEngine`SolveEulerEq`out2],\n\t\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`out2\n\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\
Options[FindRoot] = ComputationalEngine`SolveEulerEq`oldFindRootOpts;\n\t\t\t\
\t\t\t\t\tProtect @ FindRoot;\n\t\t\t\t\t\t\t\t\
{ComputationalEngine`SolveEulerEq`out1, \
ComputationalEngine`SolveEulerEq`out2}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\
\t\t\t\tComputationalEngine`SolveEulerEq`optsFindRoot\n\t\t\t\t\t]\n\t\t\t\t]\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t],\n\t\
\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t]\n\
\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4.}|>]],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[ComputationalEngine`SolveEulerEq`\
updateCoeffs[ComputationalEngine`SolveEulerEq`model, \"initialGuess\" -> \
<|\"Ewc\" -> {4}|>]]\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1., 8.}|>]\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {1, 8}|>]\n\t\t\t\t\t\t]\
\n\t\t\t\t\t],\n\t\t\t\t\tEqual[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4., 1., 8.}|>]\n\t\t\t\t\
\t\t],\n\t\t\t\t\t\tComputationalEngine`SolveEulerEq`coeffsQWc[\n\t\t\t\t\t\t\
\tComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"initialGuess\" -> <|\"Ewc\" -> {4, 1, 8}|>]\n\t\t\t\t\t\
\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`maxMaturity = \
If[ComputationalEngine`SolveEulerEq`longTest, 12, 2];\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`newBondParams = \
{FernandoDuarte`LongRunRisk`Model`Parameters`psi -> ((0.1 + \
FernandoDuarte`LongRunRisk`Model`Parameters`psi) /. \
ComputationalEngine`SolveEulerEq`model[\"params\"])};\n\t\t\
ComputationalEngine`SolveEulerEq`solWcNewBondParams = \
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`optsWc];\n\t\t\
ComputationalEngine`SolveEulerEq`solBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBondNew = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", \
ComputationalEngine`SolveEulerEq`newBondParams, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWcNewBondParams\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBondNew, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\
\t\t\t!SameQ[ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`solBondNew],\n\t\t\t\t\
!SameQ[ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`solNomBondNew]\n\t\t\t}\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\tComputationalEngine`SolveEulerEq`oldMaxMaturity = \
ComputationalEngine`SolveEulerEq`maxMaturity;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = 2;\n\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t];\n\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And,\n\t\t\
\t{\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\
\t\tEqual[Range[0, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ ComputationalEngine`SolveEulerEq`solBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t],\n\t\t\t\tEqual[Range[0, \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
Sort[DeleteDuplicates[Cases[Keys @ \
ComputationalEngine`SolveEulerEq`solNomBond, \
ComputationalEngine`SolveEulerEq`x_[ComputationalEngine`SolveEulerEq`i_][\
ComputationalEngine`SolveEulerEq`j_] :> ComputationalEngine`SolveEulerEq`i]]]\
\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\
ComputationalEngine`SolveEulerEq`maxMaturity = \
ComputationalEngine`SolveEulerEq`oldMaxMaturity;\n\t\t\
If[ComputationalEngine`SolveEulerEq`longTest,\n\t\t\t\
ComputationalEngine`SolveEulerEq`solBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`solNomBond = \
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc, \"Method\" -> Automatic, \
\"Precision\" -> 1\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQBond[ComputationalEngine`SolveEulerEq`\
solBond, ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`coeffsQNomBond[ComputationalEngine`\
SolveEulerEq`solNomBond, ComputationalEngine`SolveEulerEq`maxMaturity]\n\t\t\t\
\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\
\tSameQ[\n\t\t\t\t\t\tFilterRules[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateNomBond\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb @ _\n\t\t\t\t\t\t\
],\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[ComputationalEngine`\
SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\
\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[\n\t\t\t\t\
And,\n\t\t\t\t{\n\t\t\t\t\tSameQ[\n\t\t\t\t\t\tSort[\n\t\t\t\t\t\t\t\
FilterRules[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBonds\" -> True, \"MaxMaturity\" -> \
ComputationalEngine`SolveEulerEq`maxMaturity],\n\t\t\t\t\t\t\t\t\
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb[_] | \
FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb[_]\n\t\t\t\t\t\t\
\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tSort @ Join[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"bond\"],\n\t\t\t\
\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffsBond[\n\t\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`model[\"coeffsSolution\"][\"nombond\"],\n\t\t\
\t\t\t\t\t\tComputationalEngine`SolveEulerEq`model @ \"params\", {}, \
ComputationalEngine`SolveEulerEq`maxMaturity, \
ComputationalEngine`SolveEulerEq`solWc\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\
\t\t]\n\t\t\t\t}\n\t\t\t];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`m1 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> False];\
\n\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`m2 = Block[\n\t\t\t\t{$MessagePrePrint = \
Sow, $MessageList = {}},\n\t\t\t\tReap[\n\t\t\t\t\tModule[{},\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"PrintResidualsNorm\" -> True];\n\
\t\t\t\t\t];\n\t\t\t\t\t$MessageList\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
Equal[ReleaseHold @ ComputationalEngine`SolveEulerEq`m1, {{}, {}}];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
MemberQ[ReleaseHold @ First @ ComputationalEngine`SolveEulerEq`m2, \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
norm];\n\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = \
NumberQ[ReleaseHold @ First @ Flatten @ Last @ \
ComputationalEngine`SolveEulerEq`m2];\n\t\t\t\
ComputationalEngine`SolveEulerEq`ind = ComputationalEngine`SolveEulerEq`ind + \
1;\n\t\t\tComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\
\tCheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> False],\n\t\
\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True],\n\t\t\
\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t\t\
ComputationalEngine`SolveEulerEq`c1 = Not[\n\t\t\t\tTrueQ[\n\t\t\t\t\t\
CheckAbort[\n\t\t\t\t\t\tCheck[\n\t\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model, \"UpdateBond\" -> True, \"CheckResiduals\" -> True, \"Tol\
\" -> 1],\n\t\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t\t],\n\t\t\t\t\t\tTrue\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t\
];\n\t\t\tComputationalEngine`SolveEulerEq`c2 = TrueQ[\n\t\t\t\tCheckAbort[\n\
\t\t\t\t\tCheck[\n\t\t\t\t\t\t\
ComputationalEngine`SolveEulerEq`updateCoeffs[ComputationalEngine`\
SolveEulerEq`model,\n\t\t\t\t\t\t\t\"UpdateBond\" -> True, \"CheckResiduals\" \
-> True, \"Tol\" -> (10. ^ -20)\n\t\t\t\t\t\t],\n\t\t\t\t\t\tAbort[], \
FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`checks::\
largeresid\n\t\t\t\t\t],\n\t\t\t\t\tTrue\n\t\t\t\t]\n\t\t\t];\n\t\t\t\
ComputationalEngine`SolveEulerEq`outTests[ComputationalEngine`SolveEulerEq`\
model[\"shortname\"]][ComputationalEngine`SolveEulerEq`ind] = Apply[And, \
{ComputationalEngine`SolveEulerEq`c1, ComputationalEngine`SolveEulerEq`c2}];\n\
\t\t\tComputationalEngine`SolveEulerEq`ind = \
ComputationalEngine`SolveEulerEq`ind + 1;\n\t\t];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`noMissingTest = {};\n\tDo[\n\t\t\
ComputationalEngine`SolveEulerEq`testNumber = Sort[\n\t\t\tCases[Keys @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests,\n\t\t\t\tRuleDelayed[\n\
\t\t\t\t\tVerbatim[HoldPattern][ComputationalEngine`SolveEulerEq`outTests[\
ComputationalEngine`SolveEulerEq`model[\"shortname\"]][ComputationalEngine`\
SolveEulerEq`i_Integer]],\n\t\t\t\t\tComputationalEngine`SolveEulerEq`i\n\t\t\
\t\t]\n\t\t\t]\n\t\t];\n\t\t\
AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Equal[Range[0, Max @ \
ComputationalEngine`SolveEulerEq`testNumber], \
ComputationalEngine`SolveEulerEq`testNumber]];\n\t,\n\t\t\
{ComputationalEngine`SolveEulerEq`model, \
ComputationalEngine`SolveEulerEq`mods}\n\t];\n\t\
ComputationalEngine`SolveEulerEq`out = Apply[And,\n\t\t{\n\t\t\tApply[And, \
ComputationalEngine`SolveEulerEq`noMissingTest],\n\t\t\tApply[And, Values @ \
SubValues @ ComputationalEngine`SolveEulerEq`outTests]\n\t\t}\n\t];\n\t\
On[General::stop];\n\tComputationalEngine`SolveEulerEq`out\n\t,\n\tTrue\n\t,\n\
\t{HoldForm[Message[checks::norm, 4.383905086044507*^-14]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 4.383905086044507*^-14, 1]], \n \
HoldForm[Message[checks::largeresid, 4.383905086044507*^-14, 1.*^-20]], \n \
HoldForm[Message[checks::norm, 1.1383179045888502*^-12]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-16]], \n \
HoldForm[Message[checks::smallresid, 1.1383179045888502*^-12, 1]], \n \
HoldForm[Message[checks::largeresid, 1.1383179045888502*^-12, 1.*^-20]], \n \
HoldForm[Message[FindRoot::cvmit, HoldForm[100]]]}\n\t,\n\t\
TestID->\"SolveEulerEq_20231009-1PZFOB\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905769137885865*^9, 3.905874698646476*^9, 
  3.905874731216694*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"6054b907-2b03-4043-a7fd-44030aae04bf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}, 
   3.9050963544542847`*^9, {3.9050965128864*^9, 3.905096515712666*^9}, 
   3.905096546156603*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"add", " ", 
   RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
   RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890681841946844*^9, 3.890681899849094*^9}, {
  3.890682055663522*^9, 3.890682084827585*^9}, {3.890683635625399*^9, 
  3.890683720295089*^9}, {3.890685425949465*^9, 3.890685434516119*^9}, {
  3.890686231117095*^9, 3.890686238212121*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8906824011137114`*^9, 3.890682405708049*^9}, {
   3.890683066049664*^9, 3.8906830825042677`*^9}, {3.89068319056032*^9, 
   3.890683191547068*^9}, {3.89068338518532*^9, 3.890683430044886*^9}, {
   3.890683477495555*^9, 3.89068350860789*^9}, {3.890683563263863*^9, 
   3.890683572999384*^9}, {3.8906837588959513`*^9, 3.890683769652152*^9}, 
   3.890683975431652*^9, 3.890684184728485*^9, {3.890684538464937*^9, 
   3.890684546403357*^9}, 3.8906847013731937`*^9, 3.890684736359234*^9, {
   3.890684917937912*^9, 3.890684918964259*^9}, {3.890685003978653*^9, 
   3.8906850058353167`*^9}, {3.890685081266893*^9, 3.890685086440845*^9}, {
   3.890685162742771*^9, 3.890685164959052*^9}, {3.890685207547077*^9, 
   3.890685210133041*^9}, {3.890685379823967*^9, 3.890685396833392*^9}, {
   3.89068547363831*^9, 3.890685483195992*^9}, {3.8906856724322433`*^9, 
   3.890685672699678*^9}, {3.890685793209527*^9, 3.890685826416944*^9}, 
   3.8906858923977957`*^9, {3.890685924003189*^9, 3.890685959055036*^9}, {
   3.890686016304421*^9, 3.890686073140353*^9}, {3.890686249638393*^9, 
   3.8906862512145*^9}, {3.905770845564307*^9, 3.9057708457311487`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", "\[IndentingNewLine]", 
     "\"\<\nBegin[\\\"ComputationalEngine`SolveEulerEq`\\\"]\nNeeds @ \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\\\";\n\
$ContextPath = DeleteDuplicates @ Prepend[$ContextPath, \
\\\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\\\"];\
\n\>\""}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.890684439578331*^9, {3.8906861781312037`*^9, 3.890686181646003*^9}, {
   3.890686261099564*^9, 3.8906862940387907`*^9}, {3.890710614230303*^9, 
   3.8907106202002974`*^9}, 3.8931046283317003`*^9, 3.893174923361951*^9, 
   3.905067432105736*^9, {3.905097012154454*^9, 3.90509702645646*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905769138046104*^9, 3.905874698906906*^9, 
  3.905874731477092*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"9417447f-6bfc-4299-9edb-9468d38dd19a"],

Cell[BoxData["854"], "Output",
 CellChangeTimes->{3.905769138046104*^9, 3.905874698906906*^9, 
  3.90587473149986*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"7ba5e753-2744-4a32-ad5b-c3b04daea7b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905769138046104*^9, 3.905874698906906*^9, 
  3.905874731531124*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"8ce26470-96ce-48b7-b9d3-bb6c696cd261"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"a15849b6-9342-44ea-9c59-e4d715ba1a7a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             InsetBox[
              PaneBox[
               DynamicBox[
                FEPrivate`FrontEndResource["MUnitExpressions", "SuccessIcon"],
                 ImageSizeCache -> {20., {4., 11.}}], Alignment -> Center, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]]], AspectRatio -> 1, Axes -> False, 
             Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {13., {0., 13.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             InsetBox[
              PaneBox[
               DynamicBox[
                FEPrivate`FrontEndResource["MUnitExpressions", "SuccessIcon"],
                 ImageSizeCache -> {20., {4., 11.}}], Alignment -> Center, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]]], AspectRatio -> 1, Axes -> False, 
             Background -> GrayLevel[0.93], Frame -> True, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]], FrameTicks -> None, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{0, 1}, {0, 1}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: SolveEulerEq.wlt\"", "SummaryItem"]}],
                "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "1.230374`5.939522147304306", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity"], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: SolveEulerEq.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     3420519145191090804 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9058747315983195`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "8e5bba93-de85-497c-b972-54aacd76b0dc", "TestID" -> 
         "SolveEulerEq_20231009-J0EJJE", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "EvaluationID" -> 
         "adced0af-52ff-4912-8758-bc9670f2c5e7", "Input" -> 
         HoldForm[ComputationalEngine`SolveEulerEq`longTest = False; True], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.00003`1.627636252551654, "CPUTimeUsed" -> 0.000029999999999752447`,
          "MemoryUsed" -> 2760, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 3295441885358659904 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.9058747316005726`*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "1bdda721-89d4-42f7-9129-421f7500158c", "TestID" -> 
         "SolveEulerEq_20231009-1PZFOB", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/SolveEulerEq.wlt", "EvaluationID" -> 
         "508d7584-e9f2-465f-af06-2fd1b6c81248", "Input" -> HoldForm[Off[
             MessageName[General, "stop"]]; 
           Needs["FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
"]; $ContextPath = DeleteDuplicates[
              
              Prepend[$ContextPath, 
               "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`"]]; Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           ComputationalEngine`SolveEulerEq`msp = 
            FernandoDuarte`LongRunRisk`Models; 
           ComputationalEngine`SolveEulerEq`modBY = 
            ComputationalEngine`SolveEulerEq`msp["BY"]; 
           ComputationalEngine`SolveEulerEq`modBKY = 
            ComputationalEngine`SolveEulerEq`msp["BKY"]; 
           ComputationalEngine`SolveEulerEq`modNRC = 
            ComputationalEngine`SolveEulerEq`msp["NRC"]; 
           ComputationalEngine`SolveEulerEq`modDES = 
            ComputationalEngine`SolveEulerEq`msp["DES"]; 
           ComputationalEngine`SolveEulerEq`modNRCStochVol = 
            ComputationalEngine`SolveEulerEq`msp["NRCStochVol"]; 
           ComputationalEngine`SolveEulerEq`mods = 
            If[ComputationalEngine`SolveEulerEq`longTest, {
              ComputationalEngine`SolveEulerEq`modBY, 
               ComputationalEngine`SolveEulerEq`modBKY, 
               ComputationalEngine`SolveEulerEq`modNRC, 
               ComputationalEngine`SolveEulerEq`modDES, 
               ComputationalEngine`SolveEulerEq`modNRCStochVol}, {
              ComputationalEngine`SolveEulerEq`modBKY, 
               ComputationalEngine`SolveEulerEq`modDES}]; 
           ComputationalEngine`SolveEulerEq`coeffsQ[
              Pattern[ComputationalEngine`SolveEulerEq`sol, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`coeffName, 
               Blank[]], 
              Pattern[ComputationalEngine`SolveEulerEq`numStateVars, 
               Blank[]], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`numAssets, 
                Blank[]], 0], 
              Optional[
               Pattern[ComputationalEngine`SolveEulerEq`bond, 
                Blank[]], 0]] := Apply[And, {
               If[ComputationalEngine`SolveEulerEq`numAssets == 0, Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]] :> ComputationalEngine`SolveEulerEq`i]] === 
                Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 1, 
                Sort[
                  
                  Tuples[{
                   Range[ComputationalEngine`SolveEulerEq`numAssets] - 
                    ComputationalEngine`SolveEulerEq`bond, 
                    Range[ComputationalEngine`SolveEulerEq`numStateVars + 1] - 
                    1}]] == Sort[
                  Cases[
                   Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                   ComputationalEngine`SolveEulerEq`coeffName[
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> {
                    ComputationalEngine`SolveEulerEq`i, 
                    ComputationalEngine`SolveEulerEq`j}]]], 
               Apply[And, 
                Map[MatchQ[#, ComputationalEngine`SolveEulerEq`coeffName]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  ComputationalEngine`SolveEulerEq`var]]], 
               Apply[And, 
                Map[MatchQ[#, 
                  StringDrop[
                   ToString[
                   ComputationalEngine`SolveEulerEq`coeffName], -1]]& , 
                 Cases[
                  Map[Keys, ComputationalEngine`SolveEulerEq`sol], 
                  Pattern[ComputationalEngine`SolveEulerEq`var, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[Integer]]] :> 
                  Context[ComputationalEngine`SolveEulerEq`var]]]], 
               Apply[And, 
                Map[NumberQ, 
                 Map[Values, ComputationalEngine`SolveEulerEq`sol]]]}]; 
           ComputationalEngine`SolveEulerEq`opts = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>}, {
              "PrintResidualsNorm" -> False}, {"MaxIterations" -> 1}, {
              "FindRootOptions" -> {"MaxIterations" -> 1}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {
                WorkingPrecision -> $MachinePrecision}}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}}}; 
           ComputationalEngine`SolveEulerEq`optsRepeated = {{
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{5.6}}|>, 
               "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {WorkingPrecision -> $MachinePrecision}, 
               WorkingPrecision -> $MachinePrecision}, {
              "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
               "FindRootOptions" -> {"MaxIterations" -> 5}}, {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, 
                  WorkingPrecision -> $MachinePrecision}}; {
               "PrintResidualsNorm" -> False, "MaxIterations" -> 1, 
                "FindRootOptions" -> {
                 "MaxIterations" -> 5, WorkingPrecision -> $MachinePrecision},
                 WorkingPrecision -> $MachinePrecision}}; 
           If[ComputationalEngine`SolveEulerEq`longTest, 
             ComputationalEngine`SolveEulerEq`optsMany = Join[
                Part[ComputationalEngine`SolveEulerEq`opts, 
                 Span[5, -1]], ComputationalEngine`SolveEulerEq`optsRepeated]; 
             Null, ComputationalEngine`SolveEulerEq`optsMany = Join[
                Part[ComputationalEngine`SolveEulerEq`opts, 
                 Span[5, 6]], 
                Part[ComputationalEngine`SolveEulerEq`optsRepeated, 
                 Span[1, 2]]]; Null]; 
           Do[ComputationalEngine`SolveEulerEq`ind = 0; 
             ComputationalEngine`SolveEulerEq`numStateVars = Length[
                ComputationalEngine`SolveEulerEq`model["stateVars"][
                ComputationalEngine`SolveEulerEq`t]]; 
             ComputationalEngine`SolveEulerEq`numStocks = 
              ComputationalEngine`SolveEulerEq`model["numStocks"]; 
             ComputationalEngine`SolveEulerEq`coeffsQWc[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc, 
                ComputationalEngine`SolveEulerEq`numStateVars]; 
             ComputationalEngine`SolveEulerEq`coeffsQPd[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`numStocks]; 
             ComputationalEngine`SolveEulerEq`coeffsQBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb], 
                ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                Pattern[ComputationalEngine`SolveEulerEq`sol, 
                 Blank[]], 
                Pattern[ComputationalEngine`SolveEulerEq`maxMaturity, 
                 Blank[]]] := 
              ComputationalEngine`SolveEulerEq`coeffsQ[
               ComputationalEngine`SolveEulerEq`sol, 
                Head[
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb],
                 ComputationalEngine`SolveEulerEq`numStateVars, 
                ComputationalEngine`SolveEulerEq`maxMaturity + 1, 1]; 
             ComputationalEngine`SolveEulerEq`updateCoeffs = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
updateCoeffs; 
             ComputationalEngine`SolveEulerEq`updateCoeffsSol = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol; 
             ComputationalEngine`SolveEulerEq`updateCoeffsWc = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc; 
             ComputationalEngine`SolveEulerEq`updateCoeffsPd = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsPd; 
             ComputationalEngine`SolveEulerEq`updateCoeffsBond = 
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsBond; 
             ComputationalEngine`SolveEulerEq`newParameters = {
               ComputationalEngine`SolveEulerEq`delta -> 0.99}; 
             ComputationalEngine`SolveEulerEq`guessCoeffsSolution = {
               ComputationalEngine`SolveEulerEq`A[0] -> 4.6}; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, {}] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, {}] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, {}, {}] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, {}], 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, 
                    ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, 
                    ComputationalEngine`SolveEulerEq`guessCoeffsSolution] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, 
                    ComputationalEngine`SolveEulerEq`guessCoeffsSolution, {}, \
{}] == ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, 
                    ComputationalEngine`SolveEulerEq`newParameters, 
                    ComputationalEngine`SolveEulerEq`guessCoeffsSolution]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Quiet[
                  Apply[And, 
                   Flatten[{
                    Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[{}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, {}], #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Apply[Sequence, #]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], 
                    Last[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    Most[#]], 
                    Last[#]]}& , 
                    Part[ComputationalEngine`SolveEulerEq`opts, 
                    Span[1, 4]]], {2}], 
                    Map[ComputationalEngine`SolveEulerEq`coeffsQWc, 
                    Map[{
                    ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, #], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Rest[#]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    First[#], 
                    Sequence[
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Sequence[
                    First[#], 
                    Rest[#]]], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    Most[#], {
                    Last[#]}], 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, {
                    First[#]}, 
                    Rest[#]]}& , ComputationalEngine`SolveEulerEq`optsMany], {
                    2}]}]]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
             ComputationalEngine`SolveEulerEq`optsWc = {
               "MaxIterations" -> 100}; 
             ComputationalEngine`SolveEulerEq`solWc = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`solWc == 
               ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                ComputationalEngine`SolveEulerEq`model, {}, {}, 
                 ComputationalEngine`SolveEulerEq`optsWc] == 
               ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                 ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                 "wc"], 
                 ComputationalEngine`SolveEulerEq`model["params"], {}, 
                 ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`solWc1 = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1,
                   "initialGuess" -> <|"Ewc" -> {3}|>]; 
               ComputationalEngine`SolveEulerEq`solWc2 = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 1,
                   "initialGuess" -> <|"Ewc" -> {1}|>]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0],
                    ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0],
                    ComputationalEngine`SolveEulerEq`solWc2]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`solWc1 = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 1}, 
                  "initialGuess" -> <|"Ewc" -> {3}|>]; 
               ComputationalEngine`SolveEulerEq`solWc2 = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                 ComputationalEngine`SolveEulerEq`model, 
                  "FindRootOptions" -> {"MaxIterations" -> 1}, 
                  "initialGuess" -> <|"Ewc" -> {1}|>]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = ReplaceAll[
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0],
                    ComputationalEngine`SolveEulerEq`solWc1] > ReplaceAll[
                   FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A[0],
                    ComputationalEngine`SolveEulerEq`solWc2]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`m1 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m2 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m3 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m4 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m1]] == {{1}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m4]] == {{3}}}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`m1 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    3, "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m2 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 1}, 
                    "MaxIterations" -> 3, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m3 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "MaxIterations" -> 
                    1, "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m4 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "FindRootOptions" -> {"MaxIterations" -> 3}, 
                    "MaxIterations" -> 1, "initialGuess" -> <|"Ewc" -> {4}|>]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m1]] == {{3}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m2]] == {{3}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m3]] == {{1}}, 
                   ReleaseHold[
                    Last[ComputationalEngine`SolveEulerEq`m4]] == {{1}}}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
             ComputationalEngine`SolveEulerEq`m1 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> False]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`m2 = 
              Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                Reap[
                Module[{}, 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "PrintResidualsNorm" -> True]; Null]; $MessageList]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              First[ComputationalEngine`SolveEulerEq`m2] == {
                 HoldForm[
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]}; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                ReleaseHold[
                 First[
                  Flatten[
                   Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    False], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`c1 = Not[
                TrueQ[
                 CheckAbort[
                  Check[
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                   ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                    True, "Tol" -> 1], 
                   Abort[], 
                   MessageName[
                   FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
             ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                CheckAbort[
                 Check[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "CheckResiduals" -> 
                   True, "Tol" -> 10.^(-20)], 
                  Abort[], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"]], True]]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              Apply[And, {
                ComputationalEngine`SolveEulerEq`c1, 
                 ComputationalEngine`SolveEulerEq`c2}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`Ewc0 = 4.6; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                   "Epd" -> {{5.5}}|>]]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`coeffsWcPd = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> True, 
                "initialGuess" -> <|
                 "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                  "Epd" -> {{5.5}}|>]; 
             ComputationalEngine`SolveEulerEq`coeffsWc = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc[
                 Blank[Integer]]]; 
             ComputationalEngine`SolveEulerEq`coeffsPd = 
              FilterRules[ComputationalEngine`SolveEulerEq`coeffsWcPd, 
                FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd[
                 Blank[Integer]]]; ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQWc[
               ComputationalEngine`SolveEulerEq`coeffsWc]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = 
              ComputationalEngine`SolveEulerEq`coeffsQPd[
               ComputationalEngine`SolveEulerEq`coeffsPd]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}|>] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, "UpdatePd" -> False,
                    "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`Ewc0}, 
                    "Epd" -> {{5.5}}|>]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                   SubsetQ[
                    Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                    Options[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`updateCoeffsSol]], 
                   SubsetQ[
                    Options[ComputationalEngine`SolveEulerEq`updateCoeffs], 
                    Options[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks]]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`oldOptions = 
                Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
               ComputationalEngine`SolveEulerEq`oldOptionsSol = 
                Options[
                 FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol]; 
               ComputationalEngine`SolveEulerEq`oldOptionsWc = 
                Options[
                 FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc]; ComputationalEngine`SolveEulerEq`ig = 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "wc"], 
                   ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                   "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               SetOptions[
                ComputationalEngine`SolveEulerEq`updateCoeffs, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                ComputationalEngine`SolveEulerEq`oldOptions; 
               SetOptions[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol, 
                 "initialGuess" -> <|
                  "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                  ComputationalEngine`SolveEulerEq`model, {}, {}, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Not[
                  TrueQ[
                  ComputationalEngine`SolveEulerEq`updateCoeffsSol[
                    ComputationalEngine`SolveEulerEq`model, {}, {}, 
                    MaxIterations -> 1] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                    1]]]; ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               Options[
                 FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsSol] = ComputationalEngine`SolveEulerEq`oldOptionsSol; 
               SetOptions[
                FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc, "Ewc0" -> ComputationalEngine`SolveEulerEq`ig]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "wc"], 
                   ComputationalEngine`SolveEulerEq`model["parameters"], {}] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                   ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                   "wc"], 
                   ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                   "Ewc0" -> ComputationalEngine`SolveEulerEq`ig] == 
                 ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|
                    "Ewc" -> {ComputationalEngine`SolveEulerEq`ig}|>]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Not[
                  TrueQ[ComputationalEngine`SolveEulerEq`updateCoeffsWc[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "wc"], 
                    ComputationalEngine`SolveEulerEq`model["parameters"], {}, 
                    MaxIterations -> 1] == 
                   ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, MaxIterations -> 
                    1]]]; ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               Options[
                 FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`updateCoeffsWc] = ComputationalEngine`SolveEulerEq`oldOptionsWc; 
               ComputationalEngine`SolveEulerEq`oldOptions = 
                Options[ComputationalEngine`SolveEulerEq`updateCoeffs]; 
               ComputationalEngine`SolveEulerEq`optsUpdateCoeff = {{
                  "initialGuess" -> <|"Ewc" -> {4.6}, "Epd" -> {{4.6}}|>}, {
                  "PrintResidualsNorm" -> True}}; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                  Flatten[
                   
                   Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                    ComputationalEngine`SolveEulerEq`out = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                    Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                    ComputationalEngine`SolveEulerEq`out}& , 
                    ComputationalEngine`SolveEulerEq`optsUpdateCoeff]]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`optsBad = {{
                  MaxIterations -> 100}, {
                  PrecisionGoal -> $MachinePrecision}}; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                  Flatten[
                   
                   Map[{ComputationalEngine`SolveEulerEq`m = 
                    Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                    Reap[Module[{}, 
                    SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]]; \
$MessageList]]; Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; First[
                    First[ComputationalEngine`SolveEulerEq`m]] == HoldForm[
                    MessageName[SetOptions, "optnf"]]}& , 
                    ComputationalEngine`SolveEulerEq`optsBad]]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`optsFindRoot = {
                 "FindRootOptions" -> {MaxIterations -> 1}, 
                  "FindRootOptions" -> {AccuracyGoal -> 2}}; 
               ComputationalEngine`SolveEulerEq`oldFindRootOpts = 
                Options[FindRoot]; 
               ComputationalEngine`SolveEulerEq`withFindRootOptionDefault = 
                Keys[
                  ReplaceAll["FindRootOptions", 
                   Options[ComputationalEngine`SolveEulerEq`updateCoeffs]]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, 
                  Flatten[
                   
                   Map[{SetOptions[
                    ComputationalEngine`SolveEulerEq`updateCoeffs, #]; 
                    ComputationalEngine`SolveEulerEq`out1 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                    Options[ComputationalEngine`SolveEulerEq`updateCoeffs] = 
                    ComputationalEngine`SolveEulerEq`oldOptions; 
                    Unprotect[FindRoot]; SetOptions[FindRoot, 
                    Last[#]]; 
                    ComputationalEngine`SolveEulerEq`out2 = 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, #] == 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model]; 
                    ComputationalEngine`SolveEulerEq`out2 = If[
                    MemberQ[
                    ComputationalEngine`SolveEulerEq`\
withFindRootOptionDefault, 
                    First[
                    First[
                    Last[#]]]], 
                    Not[
                    TrueQ[ComputationalEngine`SolveEulerEq`out2]], 
                    ComputationalEngine`SolveEulerEq`out2]; 
                    Options[FindRoot] = 
                    ComputationalEngine`SolveEulerEq`oldFindRootOpts; 
                    Protect[FindRoot]; {
                    ComputationalEngine`SolveEulerEq`out1, 
                    ComputationalEngine`SolveEulerEq`out2}}& , 
                    ComputationalEngine`SolveEulerEq`optsFindRoot]]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                 ComputationalEngine`SolveEulerEq`coeffsQWc[
                  ComputationalEngine`SolveEulerEq`updateCoeffs[
                  ComputationalEngine`SolveEulerEq`model, 
                   "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4.}|>]] == 
                   ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4}|>]], 
                   ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1., 8.}|>]] == 
                   ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {1, 8}|>]], 
                   ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4., 1., 8.}|>]] == 
                   ComputationalEngine`SolveEulerEq`coeffsQWc[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, 
                    "initialGuess" -> <|"Ewc" -> {4, 1, 8}|>]]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 
              If[ComputationalEngine`SolveEulerEq`longTest, 12, 2]; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`newBondParams = {
               FernandoDuarte`LongRunRisk`Model`Parameters`psi -> 
                ReplaceAll[
                 0.1 + FernandoDuarte`LongRunRisk`Model`Parameters`psi, 
                  ComputationalEngine`SolveEulerEq`model["params"]]}; 
             ComputationalEngine`SolveEulerEq`solWcNewBondParams = 
              ComputationalEngine`SolveEulerEq`updateCoeffs[
               ComputationalEngine`SolveEulerEq`model, 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`optsWc]; 
             ComputationalEngine`SolveEulerEq`solBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`solNomBondNew = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], 
                ComputationalEngine`SolveEulerEq`newBondParams, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWcNewBondParams]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBondNew, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solBond === 
                  ComputationalEngine`SolveEulerEq`solBondNew], 
                 Not[
                 ComputationalEngine`SolveEulerEq`solNomBond === 
                  ComputationalEngine`SolveEulerEq`solNomBondNew]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`oldMaxMaturity = 
              ComputationalEngine`SolveEulerEq`maxMaturity; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 2; 
             ComputationalEngine`SolveEulerEq`solBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "bond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`solNomBond = 
              ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                "nombond"], 
                ComputationalEngine`SolveEulerEq`model["params"], {}, 
                ComputationalEngine`SolveEulerEq`maxMaturity, 
                ComputationalEngine`SolveEulerEq`solWc]; 
             ComputationalEngine`SolveEulerEq`outTests[
                ComputationalEngine`SolveEulerEq`model["shortname"]][
               ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                 ComputationalEngine`SolveEulerEq`coeffsQBond[
                 ComputationalEngine`SolveEulerEq`solBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                 ComputationalEngine`SolveEulerEq`solNomBond, 
                  ComputationalEngine`SolveEulerEq`maxMaturity], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]], 
                 Range[0, ComputationalEngine`SolveEulerEq`maxMaturity] == 
                 Sort[
                   DeleteDuplicates[
                    Cases[
                    Keys[ComputationalEngine`SolveEulerEq`solNomBond], 
                    Pattern[ComputationalEngine`SolveEulerEq`x, 
                    Blank[]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[]]][
                    Pattern[ComputationalEngine`SolveEulerEq`j, 
                    Blank[]]] :> ComputationalEngine`SolveEulerEq`i]]]}]; 
             ComputationalEngine`SolveEulerEq`ind = 
              ComputationalEngine`SolveEulerEq`ind + 1; 
             ComputationalEngine`SolveEulerEq`maxMaturity = 
              ComputationalEngine`SolveEulerEq`oldMaxMaturity; 
             If[ComputationalEngine`SolveEulerEq`longTest, 
               ComputationalEngine`SolveEulerEq`solBond = 
                ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                  ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                  "bond"], 
                  ComputationalEngine`SolveEulerEq`model["params"], {}, 
                  ComputationalEngine`SolveEulerEq`maxMaturity, 
                  ComputationalEngine`SolveEulerEq`solWc, "Method" -> 
                  Automatic, "Precision" -> 1]; 
               ComputationalEngine`SolveEulerEq`solNomBond = 
                ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                  ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                  "nombond"], 
                  ComputationalEngine`SolveEulerEq`model["params"], {}, 
                  ComputationalEngine`SolveEulerEq`maxMaturity, 
                  ComputationalEngine`SolveEulerEq`solWc, "Method" -> 
                  Automatic, "Precision" -> 1]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, {
                   ComputationalEngine`SolveEulerEq`coeffsQBond[
                   ComputationalEngine`SolveEulerEq`solBond, 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                   ComputationalEngine`SolveEulerEq`coeffsQNomBond[
                   ComputationalEngine`SolveEulerEq`solNomBond, 
                    ComputationalEngine`SolveEulerEq`maxMaturity]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {FilterRules[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Blank[]]] === 
                   ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "bond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc], FilterRules[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateNomBond" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]] === 
                   ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "nombond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = Apply[And, {Sort[
                    FilterRules[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBonds" -> 
                    True, "MaxMaturity" -> 
                    ComputationalEngine`SolveEulerEq`maxMaturity], 
                    Alternatives[
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefb[
                    Blank[]], 
                    
                    FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`\
coefnb[
                    Blank[]]]]] === Sort[
                    Join[
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "bond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc], 
                    ComputationalEngine`SolveEulerEq`updateCoeffsBond[
                    ComputationalEngine`SolveEulerEq`model["coeffsSolution"][
                    "nombond"], 
                    ComputationalEngine`SolveEulerEq`model["params"], {}, 
                    ComputationalEngine`SolveEulerEq`maxMaturity, 
                    ComputationalEngine`SolveEulerEq`solWc]]]}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`m1 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> False]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`m2 = 
                Block[{$MessagePrePrint = Sow, $MessageList = {}}, 
                  Reap[
                  Module[{}, 
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "PrintResidualsNorm" -> True]; 
                    Null]; $MessageList]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                ReleaseHold[ComputationalEngine`SolveEulerEq`m1] == {{}, {}}; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = MemberQ[
                  ReleaseHold[
                   First[ComputationalEngine`SolveEulerEq`m2]], 
                  MessageName[
                  FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = NumberQ[
                  ReleaseHold[
                   First[
                    Flatten[
                    Last[ComputationalEngine`SolveEulerEq`m2]]]]]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`c1 = Not[
                  TrueQ[
                   CheckAbort[
                    Check[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> False], 
                    Abort[], 
                    MessageName[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
               ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                  CheckAbort[
                   Check[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> True], 
                    Abort[], 
                    MessageName[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {
                  ComputationalEngine`SolveEulerEq`c1, 
                   ComputationalEngine`SolveEulerEq`c2}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; 
               ComputationalEngine`SolveEulerEq`c1 = Not[
                  TrueQ[
                   CheckAbort[
                    Check[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> True, "Tol" -> 1], 
                    Abort[], 
                    MessageName[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]]; 
               ComputationalEngine`SolveEulerEq`c2 = TrueQ[
                  CheckAbort[
                   Check[
                    ComputationalEngine`SolveEulerEq`updateCoeffs[
                    ComputationalEngine`SolveEulerEq`model, "UpdateBond" -> 
                    True, "CheckResiduals" -> True, "Tol" -> 10.^(-20)], 
                    Abort[], 
                    MessageName[
                    FernandoDuarte`LongRunRisk`ComputationalEngine`\
SolveEulerEq`Private`checks, "largeresid"]], True]]; 
               ComputationalEngine`SolveEulerEq`outTests[
                  ComputationalEngine`SolveEulerEq`model["shortname"]][
                 ComputationalEngine`SolveEulerEq`ind] = 
                Apply[And, {
                  ComputationalEngine`SolveEulerEq`c1, 
                   ComputationalEngine`SolveEulerEq`c2}]; 
               ComputationalEngine`SolveEulerEq`ind = 
                ComputationalEngine`SolveEulerEq`ind + 1; Null]; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`noMissingTest = {}; 
           Do[ComputationalEngine`SolveEulerEq`testNumber = Sort[
                Cases[
                 Keys[
                  SubValues[ComputationalEngine`SolveEulerEq`outTests]], 
                 Verbatim[HoldPattern][
                   ComputationalEngine`SolveEulerEq`outTests[
                    ComputationalEngine`SolveEulerEq`model["shortname"]][
                    Pattern[ComputationalEngine`SolveEulerEq`i, 
                    Blank[Integer]]]] :> ComputationalEngine`SolveEulerEq`i]]; 
             AppendTo[ComputationalEngine`SolveEulerEq`noMissingTest, Range[0, 
                 Max[ComputationalEngine`SolveEulerEq`testNumber]] == 
               ComputationalEngine`SolveEulerEq`testNumber]; Null, {
             ComputationalEngine`SolveEulerEq`model, 
              ComputationalEngine`SolveEulerEq`mods}]; 
           ComputationalEngine`SolveEulerEq`out = Apply[And, {
               Apply[And, ComputationalEngine`SolveEulerEq`noMissingTest], 
               Apply[And, 
                Values[
                 SubValues[ComputationalEngine`SolveEulerEq`outTests]]]}]; 
           On[
             MessageName[General, "stop"]]; 
           ComputationalEngine`SolveEulerEq`out], "ExpectedMessages" -> 
         HoldForm[{
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
            HoldForm[
             Message[
              MessageName[
              FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
            HoldForm[
             Message[
              MessageName[FindRoot, "cvmit"], 
              HoldForm[100]]]}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 4.383905086044507*^-14]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 4.383905086044507*^-14, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 4.383905086044507*^-14, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "norm"], 1.1383179045888502`*^-12]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-16]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "smallresid"], 1.1383179045888502`*^-12, 1]], 
           HoldForm[
            Message[
             MessageName[
             FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks, "largeresid"], 1.1383179045888502`*^-12, 1.*^-20]], 
           HoldForm[
            Message[
             MessageName[FindRoot, "cvmit"], 
             HoldForm[100]]]}, "AbsoluteTimeUsed" -> 
         1.230344`6.24054155351069, "CPUTimeUsed" -> 1.2375920000000002`, 
         "MemoryUsed" -> 35568, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>]|>, "FailureResults" -> <||>, 
    "TestsNotEvaluatedKeys" -> {}, "TestsFailedWrongResultsKeys" -> {}, 
    "TestsFailedWithMessagesKeys" -> {}, "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {3420519145191090804, 3295441885358659904}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905769149269902*^9, 3.905874700291419*^9, 
  3.9058747330193043`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"af2b1004-eae5-40df-bdf5-b93facf01066"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"actual", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", 
      RowBox[{"{", 
       RowBox[{"(", 
        RowBox[{"ReleaseHold", "@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
           RowBox[{"[", "\"\<ActualOutput\>\"", "]"}], "]"}], ")"}]}], ")"}], 
       "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"jj", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expected", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"(", 
         RowBox[{"ReleaseHold", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
            RowBox[{"[", "\"\<ExpectedOutput\>\"", "]"}], "]"}], ")"}]}], 
         ")"}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"jj", ",", "1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "value", " ", "of", " ", "next", " ", "two", " ", "lines", " ", "should", 
    " ", "be", " ", "true"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "actual"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "expected"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"numEntries", "=", 
     RowBox[{
      RowBox[{"Dimensions", "[", "actual", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"numCol", "=", "5"}], ";", "\[IndentingNewLine]", 
    RowBox[{"numRows", "=", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"numEntries", "/", "numCol"}], "]"}], "+", "1"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ArrayReshape", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"TableForm", "[", 
              RowBox[{"{", 
               RowBox[{"#1", ",", "#2"}], "}"}], "]"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"actual", ",", "\[IndentingNewLine]", "expected"}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "}"}], "\[Transpose]"}], ",", 
        RowBox[{"{", 
         RowBox[{"numRows", ",", "numCol"}], "}"}], ",", "\"\<--\>\""}], 
       "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"TableDepth", "\[Rule]", "1"}]}], " ", "]"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.905694462163437*^9, 3.905694478942039*^9}, {
   3.905697309999281*^9, 3.905697352099519*^9}, {3.905698637086853*^9, 
   3.905698637247707*^9}, {3.9056993097841167`*^9, 3.905699372508963*^9}, {
   3.905701884187395*^9, 3.905701885054824*^9}, {3.905767492744175*^9, 
   3.9057674935249777`*^9}, 3.9057678324661016`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"a692e665-294a-4da4-bc7b-a41afe12ba83"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057691493663607`*^9, 3.9058747004902353`*^9, 
  3.905874733207098*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"72452386-770c-4fb2-b6b0-c92b4bc7b06e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057691493663607`*^9, 3.9058747004902353`*^9, 
  3.905874733207947*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"fe326cde-c53a-433d-92d3-36890d56f70b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"d03dfeba-2718-41c7-9b3f-\
19ce5bed64e2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
    "pacletDir", ",", "\"\<Kernel\>\"", ",", "\"\<ComputationalEngine\>\"", 
     ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "@", 
   RowBox[{"Prepend", "[", 
    RowBox[{
    "$ContextPath", ",", 
     "\"\<FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
\>\""}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.8907107328284597`*^9, 
   3.890716596142606*^9, 3.8912441409010677`*^9, {3.891284064139113*^9, 
   3.891284078157*^9}, {3.89128451819068*^9, 3.8912845185051107`*^9}, {
   3.8913176074268427`*^9, 3.891317626509036*^9}, {3.8919141921795597`*^9, 
   3.891914193888651*^9}, 3.9026747447148247`*^9, {3.902674827715456*^9, 
   3.9026748330094213`*^9}, {3.9050647938688803`*^9, 3.905064824740706*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"f9c3d613-11be-45c4-8516-78bfd45d9265"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Kernel/ComputationalEngine/SolveEulerEq.wl\"\
\>"], "Output",
 CellChangeTimes->{3.9057692451127863`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"bc050d8e-9aa1-4dae-be8d-df05a25021d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\"\>\
", ",", "\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905769245178237*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"ea20349e-1c52-40f2-8078-f20da91108eb"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "pacletDir", ",", "\"\<Resources\>\"", ",", "\"\<Models.wl\>\""}], 
      "}"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBKY", "=", 
   RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRCStochVol", "=", 
   RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mods", "=", 
   RowBox[{"{", 
    RowBox[{
    "modBY", ",", "modBKY", ",", "modNRC", ",", "modDES", ",", 
     "modNRCStochVol"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.895400995806225*^9, 3.8954009959498043`*^9}, {
   3.895401333682231*^9, 3.8954013437477283`*^9}, {3.895415511062855*^9, 
   3.895415512534185*^9}, 3.895416761698543*^9, {3.901549307710441*^9, 
   3.901549339660038*^9}, {3.902674438484131*^9, 3.902674458952189*^9}, 
   3.902674851272751*^9, 
   3.9057693382777576`*^9},ExpressionUUID->"2111868b-759b-4735-b152-\
31f93e8c9c9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"testing", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "returns", " ", "True", " ", "if", " ", "coefficients", " ", "have", " ", 
    "expected", " ", "form"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"coeffsQ", "[", 
    RowBox[{"sol_", ",", "coeffName_", ",", "numStateVars_", ",", 
     RowBox[{"numAssets_", ":", "0"}], ",", 
     RowBox[{"bond_", ":", "0"}]}], "]"}], ":=", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numAssets", "==", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"wc", " ", 
           RowBox[{"ratio", ":", " ", 
            RowBox[{
            "coefficients", " ", "are", " ", "indexed", " ", "by", " ", 
             "0"}]}]}], ",", " ", "1", ",", " ", 
          RowBox[{"2", "..."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{"coeffName", "[", "i_Integer", "]"}], ":>", "i"}]}], 
            "]"}]}], ")"}], "===", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}], ")"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"pd", " ", "ratio", " ", "or", " ", "bond", " ", 
           RowBox[{"prices", ":", " ", 
            RowBox[{
            "coefficients", " ", "are", " ", "indexed", " ", "by", " ", "two",
              " ", "integers"}]}]}], ",", " ", 
          RowBox[{
          "first", " ", "one", " ", "indexes", " ", "stock", " ", "number", 
           " ", "or", " ", "maturity", " ", "of", " ", "bond"}], ",", " ", 
          RowBox[{
          "second", " ", "one", " ", "indexes", " ", "state", " ", 
           "variables"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Tuples", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Range", "[", "numAssets", "]"}], "-", "bond"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"numStateVars", "+", "1"}], "]"}], "-", "1"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ")"}], "==", 
         RowBox[{"(", 
          RowBox[{"Sort", "@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Keys", "/@", "sol"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"coeffName", "[", "i_Integer", "]"}], "[", "j_Integer",
                "]"}], ":>", 
              RowBox[{"{", 
               RowBox[{"i", ",", "j"}], "}"}]}]}], "]"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"names", " ", "match", " ", "coeffName"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "coeffName"}], "]"}], "&"}], "/@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "/@", "sol"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", "]"}],
             ":>", "var"}]}], "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "context", " ", "is", " ", "same", " ", "as", " ", "context", " ", 
        "of", " ", "coeffName"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", 
            RowBox[{"StringDrop", "[", 
             RowBox[{
              RowBox[{"ToString", "[", "coeffName", "]"}], ",", 
              RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}], "/@", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"Keys", "/@", "sol"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"var_", "[", "i_Integer", "]"}], "[", "j_Integer", "]"}],
             ":>", 
            RowBox[{"Context", "[", "var", "]"}]}]}], "]"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"values", " ", "are", " ", "numbers"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{"NumberQ", "/@", 
         RowBox[{"(", 
          RowBox[{"Values", "/@", "sol"}], ")"}]}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9027365623102837`*^9, 3.9027366445619097`*^9}, {
  3.903265465097476*^9, 3.9032655020979843`*^9}, {3.9032655495193453`*^9, 
  3.903265607471015*^9}, {3.9032659990151377`*^9, 3.9032660752460747`*^9}, {
  3.903266159881975*^9, 3.903266190007286*^9}, {3.903266274351212*^9, 
  3.903266276067524*^9}, {3.903266396787388*^9, 3.903266538320751*^9}, {
  3.903266574486245*^9, 3.903266643569592*^9}, {3.903266923803172*^9, 
  3.903266926933984*^9}, {3.9032670145986757`*^9, 3.903267017206147*^9}, {
  3.903267067928321*^9, 3.903267078865045*^9}, {3.903267522029098*^9, 
  3.903267522178343*^9}, {3.903948521740769*^9, 3.903948522931101*^9}, {
  3.903954048980898*^9, 3.903954066819949*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"11cfe1fe-9482-4b69-90bb-d338a02414fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"list", " ", "with", " ", "different", " ", "options"}], "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"opts", "=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"single", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "4.6", "}"}]}], ",", 
           RowBox[{"\"\<Epd\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", " ", 
       
       RowBox[{"(*", 
        RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}], ",", 
       RowBox[{"(*", 
        RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
       " ", 
       RowBox[{"{", 
        RowBox[{"\"\<FindRootOptions\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], "}"}], ",", 
       " ", 
       RowBox[{"(*", 
        RowBox[{
        "FindRoot", " ", "option", " ", "via", " ", "updateCoeffsSol", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"more", " ", "than", " ", "one", " ", "option"}], "*)"}], 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}]}],
         "}"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "same", " ", "FindRootOptions", " ", "and", " ", "options", " ", "to", 
     " ", "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"optsRepeated", " ", "=", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "4.6", "}"}]}], ",", 
            RowBox[{"\"\<Epd\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"{", "5.6", "}"}], "}"}]}]}], "|>"}]}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}], "}"}]}], 
         ",", 
         RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
         RowBox[{"\"\<FindRootOptions\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], "}"}]}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}]}], "}"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<MaxIterations\>\"", "->", "5"}], ",", 
             RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
            "}"}]}], ",", 
          RowBox[{"WorkingPrecision", "->", "$MachinePrecision"}]}], 
         "}"}]}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"optsMany", "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"opts", "[", 
        RowBox[{"[", 
         RowBox[{"5", ";;", 
          RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "optsRepeated"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.895921969082823*^9, 3.89592197127921*^9}, {
   3.9026749456842937`*^9, 3.902674952678933*^9}, {3.9027368458961143`*^9, 
   3.902736853530096*^9}, 3.90273688667575*^9, {3.90273704798573*^9, 
   3.902737150598179*^9}, {3.902737221721982*^9, 3.902737302926468*^9}, {
   3.902737476508258*^9, 3.902737476696528*^9}, {3.9027375809018993`*^9, 
   3.902737590739389*^9}, {3.9027376357545033`*^9, 3.902737637201068*^9}, 
   3.902738079418811*^9, {3.9027382952627068`*^9, 3.902738331378592*^9}, {
   3.9027563693519897`*^9, 3.902756377669726*^9}, {3.902756930249604*^9, 
   3.902756930273058*^9}, {3.903370206783245*^9, 3.903370230812236*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"1f7b8c98-ad1c-4f61-a982-2422f735aa83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AbortProtect", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Do", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"**", "**", "**", "**"}], "*", "set", " ", "up", " ", "useful",
        " ", "variables", " ", "used", " ", "throughout", " ", "loop"}], 
      "**********)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ind", "=", "0"}], ";", 
       RowBox[{"(*", 
        RowBox[{"counter", " ", "for", " ", "Do", " ", "loop"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "convenience", " ", "functions", " ", "for", " ", "different", " ", 
         "coefficients"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"numStateVars", "=", 
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"model", "[", "\"\<stateVars\>\"", "]"}], "[", "t", "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"numStocks", "=", 
        RowBox[{"model", "[", "\"\<numStocks\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQWc", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{
         "sol", ",", 
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", ",",
           "numStateVars"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQPd", "[", "sol_", "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd"}], 
          ",", "numStateVars", ",", "numStocks"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coeffsQNomBond", "[", 
         RowBox[{"sol_", ",", "maxMaturity_"}], "]"}], ":=", 
        RowBox[{"coeffsQ", "[", 
         RowBox[{"sol", ",", 
          RowBox[{
          "Head", "@", 
           "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb"}], 
          ",", "numStateVars", ",", 
          RowBox[{"maxMaturity", "+", "1"}], ",", "1"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "testing", " ", "starts", " ",
          "here"}], "**********)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "passing", " ", "arguments", " ", "works", " ", "as", " ", 
          "intended"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "parse", " ", "positional", " ", "arguments", " ", "correctly"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newParameters", "=", 
        RowBox[{"{", 
         RowBox[{"delta", "->", "0.99"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"guessCoeffsSolution", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "[", "0", "]"}], "\[Rule]", "4.6"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"updateCoeffs", "[", "model", "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters"}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{"model", ",", "newParameters", ",", 
              RowBox[{"{", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}], "==", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution", 
              ",", 
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "]"}], "==", 
            RowBox[{"updateCoeffsSol", "[", 
             RowBox[{
             "model", ",", "newParameters", ",", " ", "guessCoeffsSolution"}],
              "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "separates", " ", "positional", " ", "arguments", " ", "and", " ", 
         "optional", " ", "arguments", " ", "correctly"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
         RowBox[{"And", "@@", 
          RowBox[{"Flatten", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", "}"}]}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "@@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Most", "@", "#"}], "]"}], ",", 
                    RowBox[{"Last", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", 
                RowBox[{"opts", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ";;", "4"}], "]"}], "]"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "different", " ", "ways", " ", "to", " ", "pass", " ", "more", 
               " ", "than", " ", "one", " ", "option", " ", "are", " ", 
               "equivalent"}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Map", "[", "\[IndentingNewLine]", 
              RowBox[{"coeffsQWc", ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"updateCoeffsSol", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}], ",", "#"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{"Rest", "@", "#"}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"Most", "@", "#"}], ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"Last", "@", "#"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"updateCoeffs", "[", 
                    RowBox[{"model", ",", 
                    RowBox[{"List", "@", 
                    RowBox[{"First", "@", "#"}]}], ",", 
                    RowBox[{"Rest", "@", "#"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsMany"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "wealth", " ", "consumption", " ", "ratio", " ", "coefficients"}], 
        "**********)"}], "\[IndentingNewLine]", 
       RowBox[{"optsWc", "=", 
        RowBox[{"{", 
         RowBox[{"\"\<MaxIterations\>\"", "->", "100"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "optsWc"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wrapper", " ", "functions", " ", "updateCoeffsSol", " ", "and", " ",
           "updateCoeffs", " ", "give", " ", "same", " ", "answer", " ", "as",
           " ", "updateCoeffsWc"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"solWc", "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", "optsWc"}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "options"}], " ", "work", " ", "as", " ", 
         "intended"}], "*******)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"one", " ", "iteration", " ", 
          RowBox[{"doesn", "'"}], "t", " ", "get", " ", "far", " ", "from", 
          " ", "initial", " ", "guess"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", " ", 
          RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc1", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "3", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solWc2", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
           RowBox[{"<|", 
            RowBox[{"\"\<Ewc\>\"", "->", 
             RowBox[{"{", "1", "}"}]}], "|>"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc1"}], ")"}], " ", ">", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`A", "[", 
             "0", "]"}], "/.", "solWc2"}], ")"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"MaxIterations", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "FindRoot", " ", 
          "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "one", " ", "iteration", " ", "passing", " ", "updateCoeffsSol", " ",
           "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "three", " ", "iterations", " ", "passing", " ", "updateCoeffsSol", 
          " ", "option"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "when", " ", "passing", " ", "same", " ", "FindRoot", " ", "and", 
           " ", "updateCoeffsSol", " ", "options"}]}], ",", " ", 
         RowBox[{"FindRoot", " ", "option", " ", "is", " ", "used"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m3", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"m4", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<FindRootOptions\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"\"\<MaxIterations\>\"", "->", "3"}], "}"}]}], ",", 
                 RowBox[{"\"\<MaxIterations\>\"", "->", "1"}], ",", 
                 RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                  RowBox[{"<|", 
                   RowBox[{"\"\<Ewc\>\"", "->", 
                    RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], ";"}]}], 
             "]"}], ";", "$MessageList"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m1"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m2"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "3", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m3"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ReleaseHold", "@", 
             RowBox[{"Last", "@", "m4"}]}], "==", 
            RowBox[{"{", 
             RowBox[{"{", "1", "}"}], "}"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"First", "@", "m2"}], "==", 
          RowBox[{"{", 
           RowBox[{"HoldForm", "@", 
            RowBox[{"(", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], ")"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
             ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",",
              "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", "$Failed", 
             ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"ReturnPd", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Ewc0", "=", "4.6"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "return", " ", "pd", " ", "coefficients"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", 
         RowBox[{"updateCoeffs", "[", 
          RowBox[{"model", ",", 
           RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"return", " ", "pd", " ", "coefficients"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"coeffsWcPd", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", 
          RowBox[{"\"\<UpdatePd\>\"", "->", "True"}], ",", 
          RowBox[{"\"\<initialGuess\>\"", " ", "->", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<Ewc\>\"", "->", 
              RowBox[{"{", "Ewc0", "}"}]}], ",", 
             RowBox[{"\"\<Epd\>\"", "->", 
              RowBox[{"{", 
               RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "separate", " ", "wc", " ", "and", " ", "pd", " ", 
          "coefficients"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coeffsWc", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefwc", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"coeffsPd", "=", 
        RowBox[{"FilterRules", "[", 
         RowBox[{"coeffsWcPd", ",", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefpd", "[",
            "_Integer", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "check", " ", "coefficients", " ", "have", " ", "expected", " ", 
          "form"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQWc", "[", "coeffsWc", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"coeffsQPd", "[", "coeffsPd", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "wc", " ", "coefficients", " ", "are", " ", "the", " ", "same", " ", 
          "when", " ", "pd", " ", "coefficients", " ", "are", " ", "or", " ", 
          "are", " ", "not", " ", "returned"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "Ewc0", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<UpdatePd\>\"", "->", "False"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Ewc\>\"", "->", 
                RowBox[{"{", "Ewc0", "}"}]}], ",", 
               RowBox[{"\"\<Epd\>\"", "->", 
                RowBox[{"{", 
                 RowBox[{"{", "5.5", "}"}], "}"}]}]}], "|>"}]}]}], "]"}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "updateCoeff", " ", "inherits", " ", "options", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "checks"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{"Options", "[", "updateCoeffsSol", "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"SubsetQ", "[", 
            RowBox[{
             RowBox[{"Options", "[", "updateCoeffs", "]"}], ",", 
             RowBox[{
             "Options", "[", 
              "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "]"}]}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "pass", " ", "initial", " ", "guess", " ", "in", " ", 
          "updateCoeffs"}], ",", " ", "updateCoeffsSol", ",", " ", 
         "updateCoeffsWc"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsSol", "=", 
        RowBox[{"Options", "[", "updateCoeffsSol", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldOptionsWc", "=", 
        RowBox[{"Options", "[", "updateCoeffsWc", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ig", "=", "1"}], ";", 
       RowBox[{"(*", 
        RowBox[{"new", " ", "initial", " ", "guess"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"initial", " ", "guess", " ", "as", " ", "argument"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          "\[IndentingNewLine]", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", "->", "ig"}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "initial", " ", "guess", " ", "as", " ", "default", " ", "in", " ", 
         "options"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffs"}]}], 
        "*)"}], 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffs", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", "model", "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", "oldOptions"}], 
       ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsSol"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffsSol", ",", 
         RowBox[{"\"\<initialGuess\>\"", " ", "->", 
          RowBox[{"<|", 
           RowBox[{"\"\<Ewc\>\"", "->", 
            RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsSol", "[", 
           RowBox[{"model", ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsSol", "[", 
              RowBox[{"model", ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffsSol", "]"}], "=", 
        "oldOptionsSol"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "default", " ", "arguments", " ", "of", " ", "updateCoeffsWc"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SetOptions", "[", 
        RowBox[{"updateCoeffsWc", ",", 
         RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}]}], "]"}], "==", 
          RowBox[{"updateCoeffsWc", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
             "\"\<wc\>\"", "]"}], ",", 
            RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
            RowBox[{"{", "}"}], ",", 
            RowBox[{"\"\<Ewc0\>\"", " ", "->", " ", "ig"}]}], "]"}], "==", 
          RowBox[{"updateCoeffs", "[", 
           RowBox[{"model", ",", 
            RowBox[{"\"\<initialGuess\>\"", " ", "->", 
             RowBox[{"<|", 
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "ig", "}"}]}], "|>"}]}]}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"Not", "@", 
          RowBox[{"TrueQ", "@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"updateCoeffsWc", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                "\"\<wc\>\"", "]"}], ",", 
               RowBox[{"model", "[", "\"\<parameters\>\"", "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}], "==", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"MaxIterations", "->", "1"}]}], "]"}]}], ")"}]}]}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Options", "[", "updateCoeffsWc", "]"}], "=", 
        "oldOptionsWc"}], ";", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"oldOptions", "=", 
        RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "later"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "use", " ", "defaults", " ", "for", " ", "updateCoeffs", " ", "for",
            " ", "any", " ", "options", " ", "inherited", " ", "from", " ", 
           "updateCoeffsSol"}]}], ",", " ", "check"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"optsUpdateCoeff", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<Ewc\>\"", "->", 
               RowBox[{"{", "4.6", "}"}]}], ",", 
              RowBox[{"\"\<Epd\>\"", "->", 
               RowBox[{"{", 
                RowBox[{"{", "4.6", "}"}], "}"}]}]}], "|>"}]}], "}"}], ",", 
          RowBox[{"(*", 
           RowBox[{"updateCoeffsSol", " ", "option"}], "*)"}], 
          "\[IndentingNewLine]", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"checks", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"out", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", "}"}], 
             "&"}], "/@", "optsUpdateCoeff"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
          RowBox[{"can", "'"}], "t", " ", "set", " ", "defaults", " ", "for", 
          " ", "updateCoeffs", " ", "for", " ", "FindRoot", " ", "options", 
          " ", "since", " ", "they", " ", "are", " ", "not", " ", 
          "inherited"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsBad", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"MaxIterations", "->", "100"}], "}"}], ",", " ", 
          RowBox[{"(*", 
           RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]",
           " ", 
          RowBox[{"{", 
           RowBox[{"PrecisionGoal", "\[Rule]", "$MachinePrecision"}], "}"}]}], 
         RowBox[{"(*", 
          RowBox[{"FindRoot", " ", "option"}], "*)"}], "\[IndentingNewLine]", 
         "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"m", "=", 
                RowBox[{"Block", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
                    RowBox[{"$MessageList", "=", 
                    RowBox[{"{", "}"}]}]}], "}"}], ",", 
                  RowBox[{"Reap", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Module", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"SetOptions", "[", 
                    RowBox[{"updateCoeffs", ",", "#"}], "]"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    "$MessageList"}], "\[IndentingNewLine]", "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"First", "@", 
                 RowBox[{"First", "@", "m"}]}], "==", 
                RowBox[{"HoldForm", "@", 
                 RowBox[{"SetOptions", "::", "optnf"}]}]}]}], 
              "\[IndentingNewLine]", "}"}], "&"}], "/@", "optsBad"}], 
           ")"}]}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "option", " ", "\"\<FindRootOptions\>\"", " ", "inherited", " ", 
         "from", " ", "updateCoeffsSol"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"optsFindRoot", "=", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"MaxIterations", "->", "1"}], "}"}]}], ",", 
          RowBox[{"(*", 
           RowBox[{
           "has", " ", "a", " ", "default", " ", "in", " ", 
            "\"\<FindRootOptions\>\""}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"\"\<FindRootOptions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"AccuracyGoal", "\[Rule]", "2"}], "}"}]}]}], 
         RowBox[{"(*", 
          RowBox[{
          "does", " ", "not", " ", "have", " ", "a", " ", "default", " ", 
           "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
         "\[IndentingNewLine]", "}"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "can", " ", "set", " ", "defaults", " ", "using", " ", "the", " ", 
         "default", " ", "options", " ", "from", " ", "FindRoot", " ", "only",
          " ", "for", " ", "options", " ", "without", " ", "a", " ", 
         "default", " ", "in", " ", "\"\<FindRootOptions\>\""}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"oldFindRootOpts", " ", "=", " ", 
        RowBox[{"Options", "[", "FindRoot", "]"}]}], ";", 
       RowBox[{"(*", 
        RowBox[{
        "save", " ", "options", " ", "to", " ", "restore", " ", "at", " ", 
         "the", " ", "end"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "find", " ", "options", " ", "with", " ", "a", " ", "default", " ", 
         "value", " ", "in", " ", "\"\<FindRootOptions\>\"", " ", "option", 
         " ", "in", " ", "updateCoeffs"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"withFindRootOptionDefault", "=", 
        RowBox[{"Keys", "@", 
         RowBox[{"(", 
          RowBox[{"\"\<FindRootOptions\>\"", "/.", 
           RowBox[{"Options", "[", "updateCoeffs", "]"}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetOptions", "[", 
                RowBox[{"updateCoeffs", ",", "#"}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{"test", ":", " ", 
                 RowBox[{
                 "change", " ", "default", " ", "option", " ", 
                  "\"\<FindRootOptions\>\"", " ", "in", " ", 
                  "updateCoeffs"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out1", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "updateCoeffs", "]"}], "=", 
                "oldOptions"}], ";", 
               RowBox[{"(*", 
                RowBox[{"restore", " ", "options"}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Unprotect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"SetOptions", "[", 
                RowBox[{"FindRoot", ",", 
                 RowBox[{"Last", "@", "#"}]}], "]"}], ";", 
               RowBox[{"(*", 
                RowBox[{
                "change", " ", "default", " ", "option", " ", "in", " ", 
                 "FindRoot"}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{
                 RowBox[{"updateCoeffs", "[", 
                  RowBox[{"model", ",", "#"}], "]"}], "==", 
                 RowBox[{"updateCoeffs", "[", "model", "]"}]}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{"test", ":", " ", 
                  RowBox[{
                  "if", " ", "option", " ", "has", " ", "a", " ", "default", 
                   " ", "in", " ", "\"\<FindRootOptions\>\""}]}], ",", " ", 
                 RowBox[{
                 "FindRoot", " ", "option", " ", "does", " ", "not", " ", 
                  "override", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{"out2", "=", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"withFindRootOptionDefault", ",", 
                    RowBox[{"First", "@", 
                    RowBox[{"First", "@", 
                    RowBox[{"Last", "@", "#"}]}]}]}], "]"}], ",", 
                  RowBox[{"Not", "@", 
                   RowBox[{"TrueQ", "@", "out2"}]}], ",", "out2"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Options", "[", "FindRoot", "]"}], "=", 
                "oldFindRootOpts"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Protect", "[", "FindRoot", "]"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"out1", ",", "out2"}], "}"}]}], "\[IndentingNewLine]",
               "}"}], "&"}], "/@", "optsFindRoot"}], ")"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\n", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"test", ":", " ", 
            RowBox[{
            "pass", " ", "interval", " ", "as", " ", "initial", " ", "guess", 
             " ", "works"}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"test", ":", " ", 
             RowBox[{
             "pass", " ", "interval", " ", "interval", " ", "and", " ", 
              "initial", " ", "guess", " ", "works"}]}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQWc", "[", 
            RowBox[{"updateCoeffs", "[", 
             RowBox[{"model", ",", 
              RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
               RowBox[{"<|", 
                RowBox[{"\"\<Ewc\>\"", "->", 
                 RowBox[{"{", 
                  RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
             "]"}], "]"}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "approximate", " ", "or", " ", "exact", " ", 
          "numbers"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4.", "}"}]}], "|>"}]}]}], "]"}], "]"}], "==", 
            
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", "4", "}"}]}], "|>"}]}]}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1.", ",", "8."}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "8"}], "}"}]}], "|>"}]}]}], "]"}], 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4.", ",", "1.", ",", "8."}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}], "==", 
            RowBox[{"coeffsQWc", "[", 
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<initialGuess\>\"", " ", "->", " ", 
                RowBox[{"<|", 
                 RowBox[{"\"\<Ewc\>\"", "->", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "1", ",", "8"}], "}"}]}], "|>"}]}]}], 
              "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"**", "**", "**", "**"}], "*", "tests", " ", "for", " ", 
         "bond", " ", "coefficients"}], "**********)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffsBond", "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "12"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "newParameters", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"newBondParams", "=", 
        RowBox[{"{", 
         RowBox[{"FernandoDuarte`LongRunRisk`Model`Parameters`psi", "->", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
            "0.1", "+", "FernandoDuarte`LongRunRisk`Model`Parameters`psi"}], "/.", 
            RowBox[{"model", "[", "\"\<params\>\"", "]"}]}], ")"}]}], "}"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"solWcNewBondParams", "=", 
        RowBox[{"updateCoeffs", "[", 
         RowBox[{"model", ",", "newBondParams", ",", "optsWc"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"solBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBondNew", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", "newBondParams",
           ",", "maxMaturity", ",", "solWcNewBondParams"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBondNew", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solBond", "===", "solBondNew"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Not", "[", 
            RowBox[{"solNomBond", "===", "solNomBondNew"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "maxMaturity", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"oldMaxMaturity", "=", "maxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"save", " ", "to", " ", "restore", " ", "later"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "coefficients", " ", "have", " ", "expected", " ", "form"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", "maxMaturity"}], "]"}], "==", 
            RowBox[{"(", 
             RowBox[{"Sort", "@", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Keys", "@", "solNomBond"}], ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"x_", "[", "i_", "]"}], "[", "j_", "]"}], ":>", 
                  "i"}]}], "]"}]}]}], ")"}]}]}], "\[IndentingNewLine]", 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"maxMaturity", "=", "oldMaxMaturity"}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{"restore", " ", "original", " ", "value"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "pass", " ", "options", " ", "for", " ", "RecurrenceTable"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"solBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<bond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"solNomBond", "=", 
        RowBox[{"updateCoeffsBond", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
           "\"\<nombond\>\"", "]"}], ",", 
          RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
          RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc", ",", 
          RowBox[{"\"\<Method\>\"", "->", "Automatic"}], ",", 
          RowBox[{"\"\<Precision\>\"", "->", "1"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coeffsQBond", "[", 
            RowBox[{"solBond", ",", "maxMaturity"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"coeffsQNomBond", "[", 
            RowBox[{"solNomBond", ",", "maxMaturity"}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "updateCoeffs", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"updateCoeffs", " ", "matches", " ", "updateCoeffsBond"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<bond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}]}],
            ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateNomBond\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb", 
               "[", "_", "]"}]}], "]"}], "===", "\[IndentingNewLine]", 
            RowBox[{"updateCoeffsBond", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
               "\"\<nombond\>\"", "]"}], ",", 
              RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
              RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
             "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"updateCoeffs", "[", 
               RowBox[{"model", ",", 
                RowBox[{"\"\<UpdateBonds\>\"", "->", "True"}], ",", 
                RowBox[{"\"\<MaxMaturity\>\"", "->", "maxMaturity"}]}], "]"}],
               ",", 
              RowBox[{
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefb", 
                "[", "_", "]"}], "|", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`EndogenousEq`Private`coefnb",
                 "[", "_", "]"}]}]}], "]"}]}], "===", 
           RowBox[{"Sort", "@", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<bond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], "]"}],
               ",", 
              RowBox[{"updateCoeffsBond", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"model", "[", "\"\<coeffsSolution\>\"", "]"}], "[", 
                 "\"\<nombond\>\"", "]"}], ",", 
                RowBox[{"model", "[", "\"\<params\>\"", "]"}], ",", 
                RowBox[{"{", "}"}], ",", "maxMaturity", ",", "solWc"}], 
               "]"}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"PrintResidualsNorm", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"do", " ", "not", " ", "print", " ", "residual"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"m1", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "False"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{"print", " ", "residual"}]}], "*)"}], "\[IndentingNewLine]", 
       
       RowBox[{"m2", "=", 
        RowBox[{"Block", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"$MessagePrePrint", "=", "Sow"}], ",", 
            RowBox[{"$MessageList", "=", 
             RowBox[{"{", "}"}]}]}], "}"}], ",", 
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Module", "[", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{
               RowBox[{"updateCoeffs", "[", 
                RowBox[{"model", ",", 
                 RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
                 RowBox[{"\"\<PrintResidualsNorm\>\"", "->", "True"}]}], 
                "]"}], ";"}]}], "]"}], ";", "$MessageList"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "m1", " ", "did", " ", "not", " ", "print"}]}], ",", 
         " ", 
         RowBox[{"m2", " ", "printed", " ", "correct", " ", "message"}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "m1"}], "==", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", 
            RowBox[{"{", "}"}]}], "}"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"(", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"ReleaseHold", "@", 
            RowBox[{"First", "@", "m2"}]}], ",", 
           StyleBox[
            RowBox[{
            "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "norm"}], "MessageName"]}], 
          StyleBox["]", "MessageName"]}], ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"NumberQ", "@", 
         RowBox[{"(", 
          RowBox[{"ReleaseHold", "@", 
           RowBox[{"First", "@", 
            RowBox[{"Flatten", "@", 
             RowBox[{"Last", "@", "m2"}]}]}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"CheckResiduals", " ", "works"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"test", ":", " ", 
         RowBox[{
         "do", " ", "not", " ", "check", " ", "if", " ", "root", " ", 
          "finding", " ", "residual", " ", 
          RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "False"}]}], "]"}], 
             ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{
          "check", " ", "if", " ", "root", " ", "finding", " ", "residual", 
           " ", 
           RowBox[{"(", "error", ")"}], " ", "is", " ", "small"}]}], ",", " ", 
         RowBox[{
         "abort", " ", "if", " ", "error", " ", "above", " ", "tolerance"}]}],
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}]}], "]"}], ",",
              "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Tol", " ", "works"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"big", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "does", " ", "not", " ", "abort"}]}], 
        "*)"}], 
       RowBox[{"c1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", "1"}]}], "]"}], ",", "$Failed", 
             ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "False"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"test", ":", " ", 
          RowBox[{"low", " ", "tolerance"}]}], ",", " ", 
         RowBox[{"computation", " ", "aborts"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"c2", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"FailureQ", "[", 
           RowBox[{"Check", "[", 
            RowBox[{
             RowBox[{"updateCoeffs", "[", 
              RowBox[{"model", ",", 
               RowBox[{"\"\<UpdateBond\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<CheckResiduals\>\"", "->", "True"}], ",", 
               RowBox[{"\"\<Tol\>\"", "->", 
                RowBox[{"10.", "^", 
                 RowBox[{"-", "20"}]}]}]}], "]"}], ",", "$Failed", ",", 
             RowBox[{
             "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`\
Private`checks", "::", "largeresid"}]}], "]"}], "]"}], "==", "True"}], 
         ")"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"outTests", "[", 
          RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", "ind",
          "]"}], "=", 
        RowBox[{"And", "@@", 
         RowBox[{"{", 
          RowBox[{"c1", ",", "c2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"Echo", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ind", ",", 
             RowBox[{
              RowBox[{"outTests", "[", 
               RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
              "ind", "]"}]}], "}"}], ",", "\"\<ind, outTests\>\""}], "]"}], 
         ";"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"ind", "=", 
        RowBox[{"ind", "+", "1"}]}], ";"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    ";"}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.902738190083231*^9, 3.902738191941931*^9}, {
   3.902756289368319*^9, 3.902756290645808*^9}, 3.903367554456627*^9, 
   3.90336761476572*^9, 3.9033679158229322`*^9, 3.903367953145947*^9, 
   3.903368446610979*^9, 3.903368566845581*^9, {3.9033690342241783`*^9, 
   3.9033690458587503`*^9}, {3.903369120339946*^9, 3.903369173398312*^9}, {
   3.903369213950077*^9, 3.903369215507873*^9}, {3.90336924757663*^9, 
   3.903369263794701*^9}, {3.903369324741993*^9, 3.903369618477161*^9}, {
   3.903369763809095*^9, 3.903369763968398*^9}, {3.9033697946972237`*^9, 
   3.903369833092771*^9}, 3.90336995056032*^9, {3.903369999688233*^9, 
   3.903370049515942*^9}, {3.903370152201243*^9, 3.9033701527642717`*^9}, {
   3.9033702750511436`*^9, 3.903370275096901*^9}, {3.90337030790005*^9, 
   3.903370336846512*^9}, {3.903370452601376*^9, 3.903370493071638*^9}, {
   3.903370531426106*^9, 3.903370614884407*^9}, {3.903370650463318*^9, 
   3.9033706690412607`*^9}, {3.903370758653572*^9, 3.903370759311151*^9}, 
   3.90337080487085*^9, {3.903370848726095*^9, 3.903371006741373*^9}, {
   3.903371118400571*^9, 3.9033712407927647`*^9}, {3.903876675635762*^9, 
   3.9038766768417997`*^9}, {3.9038767078728523`*^9, 3.903876709208724*^9}, {
   3.903876810354755*^9, 3.903876810436152*^9}, {3.903876882681025*^9, 
   3.903876937178338*^9}, {3.903877109041683*^9, 3.903877139896817*^9}, {
   3.903877312726338*^9, 3.903877337749157*^9}, 3.903877375340865*^9, 
   3.903877429745676*^9, {3.903879853701571*^9, 3.903880386887842*^9}, {
   3.9038805023515663`*^9, 3.9038805168312607`*^9}, {3.903880578409403*^9, 
   3.903880580793682*^9}, {3.903880643178487*^9, 3.903880643437065*^9}, 
   3.9038808282072983`*^9, {3.903880919908001*^9, 3.903880929069625*^9}, {
   3.9038809843663063`*^9, 3.90388099762131*^9}, {3.903946746810584*^9, 
   3.903946882830439*^9}, {3.903946916079405*^9, 3.903947194232129*^9}, {
   3.903947302789904*^9, 3.903947365821086*^9}, {3.903947397612604*^9, 
   3.903947480404434*^9}, {3.903947520727475*^9, 3.903947775543419*^9}, {
   3.903947814473352*^9, 3.903947902620613*^9}, {3.903947959940763*^9, 
   3.903947965419816*^9}, 3.9039480405910053`*^9, {3.903948170656618*^9, 
   3.9039481958812103`*^9}, {3.903954083591836*^9, 3.903954093219599*^9}, {
   3.903957110219754*^9, 3.903957120856778*^9}, {3.9039572697111483`*^9, 
   3.903957303598179*^9}, {3.90395734098941*^9, 3.903957380669937*^9}, {
   3.9039574339668217`*^9, 3.903957559865464*^9}, {3.903957633917492*^9, 
   3.9039576572380867`*^9}, {3.903957736603272*^9, 3.9039577431804953`*^9}, {
   3.903957843089891*^9, 3.9039579222700167`*^9}, {3.903957976260666*^9, 
   3.903958005517933*^9}, 3.903958243680842*^9, {3.903958274609536*^9, 
   3.903958304368545*^9}, {3.903958409422388*^9, 3.903958416665062*^9}, {
   3.9039584592648497`*^9, 3.90395857520253*^9}, {3.9039586083279753`*^9, 
   3.903958624788992*^9}, {3.903958677317418*^9, 3.903958857444724*^9}, 
   3.903959402502407*^9, {3.9039594472468967`*^9, 3.903959460439021*^9}, {
   3.903959500180381*^9, 3.903959556897715*^9}, {3.9039595961373987`*^9, 
   3.903959651799542*^9}, {3.905048951482769*^9, 3.9050489527246447`*^9}, {
   3.9050490643661413`*^9, 3.9050492434464293`*^9}, 3.905051837071126*^9, {
   3.905074651699704*^9, 3.905074676395534*^9}, {3.905075325337388*^9, 
   3.905075369553441*^9}, {3.9050765789398127`*^9, 3.9050766282827673`*^9}, 
   3.905076664799794*^9, {3.9050773939684877`*^9, 3.905077394398437*^9}, {
   3.905077706931822*^9, 3.9050777074645777`*^9}, {3.905080956322939*^9, 
   3.9050809592593737`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"194d0d65-1833-42c3-9043-414081e8803e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 1, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246385571*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"a5d661d1-9f5b-4d63-85f1-3537ae3f2620"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 2, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692464125433`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"af898f40-2667-4046-aa5e-d2acf27da243"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 3, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246439846*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"725e4ace-b43a-4662-b6a8-ddf2ba10438f"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"FindRoot\\\", \
\\\"::\\\", \\\"cvmit\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 22, 4, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246464303*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"26cde231-1b03-4e15-b842-5777621455b6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 5, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246494769*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"13b3a681-0e14-48c6-93cf-811951826917"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 6, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246522365*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0fb3babc-8f4e-4ca2-983e-a8570350d53d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 7, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246550157*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"487ba760-138d-490b-923f-32b8adc0eb86"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 8, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246577374*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"34a14b0f-9ccd-4e23-8acd-a8855cca1e52"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 9, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246604885*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"e9f79ec0-fc24-4c8d-a5db-8d8f81553ebb"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 10, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246632319*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"697a890c-0af1-4d5b-9514-fedab9e4ccf9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 11, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769246659459*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"524ea09b-871a-4c19-91b0-ae90e4513434"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 12, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692466867943`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"c8ecceff-e008-4f93-b29d-fa01b0ab1e95"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 22, 13, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.9057692467169867`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"5f57a269-5c18-446f-919e-41de1abf58f7"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 22, 14,
    24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.90576924674701*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"d956da94-fb01-4a00-9d45-95f2794b59e2"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 22, 15, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769246774128*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"024e77c7-8da5-422f-afee-f9868b6ee221"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-20\\\"}]\\).\"", 2, 22, 16,
    24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769246801343*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"a0fd9fcc-d5e5-4af1-8d2e-a556122b5614"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 22, 17, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.9057692468834333`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"2d370ee5-89ac-44ab-ad3e-18abc7868a11"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 22, 18, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769246910274*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"ef15388b-c5fd-4dc2-a08e-7b247bfbf2ae"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 19, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692469323893`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"7612cf1e-939f-4b12-ada1-84b796479dfc"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 20, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692469351587`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0cfc89aa-02c0-4fe7-b9b9-8b16ca7b6fc9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 22, 21, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247042028*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"3ba77b82-7b30-4148-b9d9-d8901685b516"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.5569089476209456`*^-13\\\"}]\\)\"", 2, 22, 22, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247091812*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"9e28d12b-ff45-4d9b-8584-87c9f08bea60"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\)\"", 2, 22, 23, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247122314*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"40fc2290-e816-4510-9bb2-f65804006856"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 24, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247152417*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"8a81da4a-9102-4121-bf3d-86779cedf378"],

Cell[BoxData[
 TemplateBox[{
  "checks", "largeresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is larger than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1.`*^-16\\\"}]\\).\"", 2, 22, 25,
    24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247184073*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"aa58b5e5-130f-4aab-81dd-7930faa070e6"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"largeresid\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 26, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247208303*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"e5df4643-75c4-48b0-ab75-73358bc5db9c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.113502648927882`*^-14\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 22, 27, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247255163*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"b29bccea-7bf4-4e3e-8f0a-dc414de10604"],

Cell[BoxData[
 TemplateBox[{
  "checks", "smallresid", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.5569089476209456`*^-13\\\"}]\\), which is smaller than \
the specified tolerance \\!\\(\\*RowBox[{\\\"1\\\"}]\\).\"", 2, 22, 28, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.9057692473053513`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"faeef833-88a3-4d0e-b351-5ed1455b2094"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"smallresid\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 29, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247336609*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"96144304-1c5b-4eaa-ac4c-8ec3d4c4e2c6"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 30, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.90576924776256*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"61ca8c60-75a3-4ccf-b23d-69deae7ea1d8"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 31, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247790413*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"2029b139-660d-4a05-99c5-4ebe2d762e99"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 32, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247818877*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"5090df8a-8a5b-44a1-aa4f-e83f8e0fec75"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 33, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247846958*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"aad52c22-b36f-4546-8997-8cc4b2ae5cbf"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 34, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247875388*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"808be586-dceb-4d38-b116-a910bcd0fa46"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 35, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692479036217`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"c17a0a2f-8391-40c5-adb7-d686ac67bc9d"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 36, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692479318542`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"b518773e-6050-4497-87fd-3d1f01c6529e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 37, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769247960043*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"5467d3c9-07e5-431d-840e-a302c80fedf2"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 22, 38, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769247991177*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"b4bd9b03-74d4-4128-8f89-bc6b7bb75617"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 22, 39, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.9057692480878983`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"7b15fe73-e03b-4bdf-8303-b5557e3aa64f"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 40, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769248112879*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0cd9bcbf-ff43-45c2-ad55-ca0e05e3402d"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 41, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769248118176*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"493395d4-436b-433e-a8f0-a748fb5471ad"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 42, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769248121202*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"037aa6c2-82cd-4a1f-9332-4ec4cedcd9a9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 22, 43, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769248231141*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"17dc9017-bf9d-404a-8819-6389dc1c3553"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.4890825068561554`*^-13\\\"}]\\)\"", 2, 22, 44, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769248282762*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0d2b5eea-9ba4-4ea5-88e3-ad688c5c9d2c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"4.383905086044507`*^-14\\\"}]\\)\"", 2, 22, 45, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769248314382*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"645925ef-6840-406a-88b4-801f6311c1f6"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 46, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769248345915*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"38560f82-1d30-4a05-a4c0-72ca48ed8c5e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 47, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769251896906*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"30893311-fd45-45ce-a636-d79edd6f01d1"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 48, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769252104959*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"ab831aac-0d17-47c7-98ab-221b2c98160e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 49, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.90576925231244*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"4e23e120-b649-4f50-b94c-a17a21bf836c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 50, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692525206747`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"a86503c3-74bc-47cd-9e09-4711e6c6f2ff"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 51, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769252728105*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0567fcda-049d-4fec-bacc-727d72b576d9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 52, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769252935665*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"e59cf1ea-0e87-49a3-b3ec-c64f08e136e9"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 53, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769253143289*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"a4559862-859f-4d5e-aaf3-7ba08aca5fec"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 54, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692533510313`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"f9cdb5a8-a7bc-4ad5-9866-1c58f743899e"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 22, 55, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769253582077*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"04212ef2-22fb-45fa-b933-14b52118780b"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 22, 56, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692542921247`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"2b7ab5dd-f246-4a0a-a6c2-e820af2e45ac"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 57, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769254836829*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"188bdf23-8025-46bc-b65d-05b8cfe56b36"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 58, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769254840583*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"e925e7c6-d61c-4426-8091-7378806d570a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 22, 59, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769255854061*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"d94ff945-0a50-42b9-b6f3-94dbdff4375c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.1898485160071426`*^-13\\\"}]\\)\"", 2, 22, 60, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769256201511*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"52033a93-f7d7-4747-a0b1-209e0a23d5c4"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.315142795448291`*^-14\\\"}]\\)\"", 2, 22, 61, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.90576925641816*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"2e77d752-1079-4098-9172-9a6fc05f7747"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 62, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769256634403*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"df8a5928-f143-489c-8c6a-ec14d6251f53"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 63, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692580956287`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"a0bf4367-6972-4362-9f42-c2bc43b0e979"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 64, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769258293744*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"876bae40-3363-4e6f-9ac1-d45fcdf98003"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 65, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769258491499*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"8f345d1d-7815-475e-9790-9f422f806da2"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 66, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769258689796*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"c97c6aa5-e691-442b-a426-a2c60a41aa8e"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 67, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769258888188*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"1b083dc5-c989-407b-9f1a-5cf54d1bc712"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 68, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769259085916*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"8ad14289-a832-4e40-a949-dd26a3eb66e1"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 69, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769259283763*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"50fef7bb-2d5e-47a9-b405-184ec4eb3693"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 70, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769259481505*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"700f3ea0-4c97-49d5-b12b-2186cf75aee8"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 22, 71, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769259687195*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"78b107f1-4c00-47c1-9135-22bfb18b2a98"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 72, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769259864182*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"29914338-169c-4f2e-a43f-d36f088023f6"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 73, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769259867275*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"3e5e2c60-93f0-4a97-9f5a-34a6ac85bd1a"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 22, 74, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.90576926036874*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"81561c8b-876a-4775-a8c5-dabac0885b70"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"3.8764093488563845`*^-12\\\"}]\\)\"", 2, 22, 75, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.9057692607383633`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"fca09450-655c-40ad-ad27-a2fb45a4653c"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"1.1383179045888502`*^-12\\\"}]\\)\"", 2, 22, 76, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.90576926096343*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"62804b88-7b4e-4c93-8741-20721ebd9556"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 77, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769261187057*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"0a0976a1-680e-471d-bf6c-de5222c60384"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 78, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769262859777*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"7be23823-e520-4c6e-9858-2c81ade9c25a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 79, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769262980916*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"fecdd710-7091-4141-9894-6d86f1614061"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 80, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692631022463`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"c31537ca-2f66-4c77-819a-fe2c5b275a8a"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 81, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769263223052*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"03ea6c6b-4736-4bf1-bdc0-5ed00407a91c"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 82, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769263343651*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"fd8f36a1-4ee1-44d5-ac8e-5541d1aa6bc4"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"3\\\"}]\\) iterations.\"", 2, 22, 83, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769263464366*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"1d4b33af-958c-4160-9e85-0c4261c47260"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 84, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769263584692*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"b05c6d28-4dd7-4f3b-a572-502d1d109549"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "cvmit", 
   "\"Failed to converge to the requested accuracy or precision within \\!\\(\
\\*RowBox[{\\\"1\\\"}]\\) iterations.\"", 2, 22, 85, 24970697478571811980, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769263705307*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"11ab5f47-8a50-4c8d-93b8-a9b809352c1e"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 22, 86, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769263835764*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"35bdd361-6ff2-4056-a68c-cc273216f7fe"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 22, 87, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769264043355*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"5b095561-53f7-4ad8-af41-b1f996628ede"],

Cell[BoxData[
 TemplateBox[{
  "FindRoot", "lstol", 
   "\"The line search decreased the step size to within tolerance specified \
by AccuracyGoal and PrecisionGoal but was unable to find a sufficient \
decrease in the merit function. You may need more than \
\\!\\(\\*RowBox[{\\\"MachinePrecision\\\"}]\\) digits of working precision to \
meet these tolerances.\"", 2, 22, 88, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769264164425*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"f145ef0f-85e8-49fe-90b7-3425d893d002"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"FindRoot\\\", \
\\\"::\\\", \\\"lstol\\\"}], \\\"MessageName\\\"]\\) will be suppressed \
during this calculation.\"", 2, 22, 89, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9057692642781763`*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"49ef2028-cc65-489d-a248-825632b30ec3"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"MaxIterations\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 90, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769264452622*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"aafd2809-d2ac-4628-9b8c-322ec987c44e"],

Cell[BoxData[
 TemplateBox[{
  "SetOptions", "optnf", 
   "\"\\!\\(\\*RowBox[{\\\"PrecisionGoal\\\"}]\\) is not a known option for \
\\!\\(\\*RowBox[{\\\"updateCoeffs\\\"}]\\).\"", 2, 22, 91, 
   24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769264456956*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"dd9428cd-da62-4b26-98a9-7becefdcf9a6"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 22, 92, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.90576926498508*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"9afe5e76-544a-4f9d-b859-28faecd42b86"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.6632349341506793`*^-14\\\"}]\\)\"", 2, 22, 93, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769265310143*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"07643c97-fccb-4722-ab44-9876cc0cc7c9"],

Cell[BoxData[
 TemplateBox[{
  "checks", "norm", 
   "\"The norm of the residuals (errors) is \
\\!\\(\\*RowBox[{\\\"2.799177515852174`*^-14\\\"}]\\)\"", 2, 22, 94, 
   24970697478571811980, "Local", 
   "FernandoDuarte`LongRunRisk`ComputationalEngine`SolveEulerEq`Private`\
checks"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.905769265437283*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"874b01a8-f3b8-4d26-a835-aff9dd54cbec"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"checks\\\", \\\"::\\\", \
\\\"norm\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 22, 95, 24970697478571811980, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.905769265562242*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"8247c02d-3c77-486d-b883-d3228bebafb1"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.905769266205783*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"1dc7140c-c926-4193-b4b2-e111c11fc711"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"noMissingTest", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"testNumber", "=", "\[IndentingNewLine]", 
      RowBox[{"Sort", "@", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Keys", "@", 
          RowBox[{"SubValues", "@", "outTests"}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
           RowBox[{
            RowBox[{"outTests", "[", 
             RowBox[{"model", "[", "\"\<shortname\>\"", "]"}], "]"}], "[", 
            "i_Integer", "]"}], "]"}], ":>", "i"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"noMissingTest", ",", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", 
          RowBox[{"Max", "[", "testNumber", "]"}]}], "]"}], "==", 
        "testNumber"}]}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"model", ",", "mods"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"And", "@@", "noMissingTest"}], ",", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"Values", "@", 
      RowBox[{"SubValues", "@", "outTests"}]}]}]}], "\[IndentingNewLine]", 
   "}"}]}]}], "Input",
 CellChangeTimes->{{3.90388105526523*^9, 3.903881056354525*^9}, {
   3.903881131846246*^9, 3.903881352277603*^9}, {3.9038813860211477`*^9, 
   3.9038814908548803`*^9}, 3.903881522862175*^9, 3.905082034198983*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"c2143d61-6f31-43bb-802b-75c01051eabb"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905769266287661*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"f881bcce-cdff-488b-93d7-fb993a843b00"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1010, 930},
WindowMargins->{{-1472, Automatic}, {-76, Automatic}},
WindowStatusArea->"",
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"687ad4e1-2cb9-4e32-a333-97f0266cb208"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 215, 4, 37, "Input",ExpressionUUID->"22feddcb-b3fc-478d-8077-4a914f160da7"],
Cell[CellGroupData[{
Cell[640, 21, 1958, 37, 194, "Input",ExpressionUUID->"3678a217-ed8d-42c6-86a2-75c1ea1115fd"],
Cell[2601, 60, 312, 4, 42, "Output",ExpressionUUID->"38a05f1c-8d84-4f3d-aa40-db8f2dacaa99"],
Cell[2916, 66, 289, 4, 42, "Output",ExpressionUUID->"faf13e57-5db9-418a-bd6b-8e81d8b15ce3"],
Cell[3208, 72, 312, 5, 42, "Output",ExpressionUUID->"e4e4daee-fcd4-459a-902a-d1651f216826"],
Cell[3523, 79, 236, 3, 42, "Output",ExpressionUUID->"29ea8f0a-de3a-47f6-a92d-0d7312e9903e"],
Cell[3762, 84, 328, 6, 42, "Output",ExpressionUUID->"a2072db0-419b-4294-81ed-496705af02ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4127, 95, 255, 4, 67, "Subsection",ExpressionUUID->"2157750c-ae6d-47e9-b5dd-9c68ad40141b"],
Cell[4385, 101, 381, 10, 37, "Input",ExpressionUUID->"f2799e55-a4bc-4cd6-9966-6392a845d852"],
Cell[CellGroupData[{
Cell[4791, 115, 601, 11, 64, "Input",ExpressionUUID->"8eff5a9c-f1a4-4d23-af33-c77709b1754e"],
Cell[5395, 128, 264, 4, 42, "Output",ExpressionUUID->"9e5c86a3-7e69-4481-b073-d9f726bd1c63"]
}, Open  ]],
Cell[5674, 135, 261, 5, 37, "Input",ExpressionUUID->"ed50da44-63c4-4c2d-93eb-f54b1777aa81"],
Cell[CellGroupData[{
Cell[5960, 144, 770, 15, 142, "Input",ExpressionUUID->"49663655-81f7-425b-81ed-b11b0d8154ac"],
Cell[CellGroupData[{
Cell[6755, 163, 403, 9, 29, "Print",ExpressionUUID->"ffa708b4-a2a5-4c91-abf5-18fea1713ea3"],
Cell[7161, 174, 293, 5, 29, "Print",ExpressionUUID->"2c369f8a-a0f2-41ee-99dd-d558f830e636"]
}, Open  ]],
Cell[7469, 182, 4905, 88, 42, "Output",ExpressionUUID->"4633f948-c9c0-44d9-93d6-14350ac3d18a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12411, 275, 144409, 3314, 19617, "Input",ExpressionUUID->"06ab1b38-cea5-4ae6-b2d5-544ea578d153"],
Cell[156823, 3591, 521, 13, 35, "Message",ExpressionUUID->"e909d0d4-853d-4a47-b88c-5cb33331ac23"],
Cell[157347, 3606, 615, 14, 35, "Message",ExpressionUUID->"2ff29c64-d2a7-439a-afff-5c8bdebdc723"],
Cell[157965, 3622, 607, 14, 35, "Message",ExpressionUUID->"c336e21d-5826-4fe9-a5f4-7cdc40cc9e8c"],
Cell[158575, 3638, 613, 14, 35, "Message",ExpressionUUID->"98ea8931-d67c-4f08-b192-1e290e94d962"],
Cell[159191, 3654, 520, 13, 35, "Message",ExpressionUUID->"fe481370-4443-4af3-b3ff-47db352fe3f9"],
Cell[159714, 3669, 614, 14, 35, "Message",ExpressionUUID->"b5a65ee9-9085-43e7-aba3-6af1bc493932"],
Cell[160331, 3685, 608, 14, 35, "Message",ExpressionUUID->"d7e4869a-2d47-4c83-b381-e41e3d52cbd8"],
Cell[160942, 3701, 614, 14, 35, "Message",ExpressionUUID->"6037504c-f956-447a-9f71-0091aacc493f"],
Cell[161559, 3717, 456, 11, 35, "Message",ExpressionUUID->"73570872-4d3f-413d-8661-a9cef8f205d0"],
Cell[CellGroupData[{
Cell[162040, 3732, 426, 10, 29, "Print",ExpressionUUID->"bb4f537e-e02d-45a2-93de-db15bcb40cb9"],
Cell[162469, 3744, 316, 6, 29, "Print",ExpressionUUID->"15bacfb0-c964-4a4d-86e0-7cf5d6e6c964"]
}, Open  ]],
Cell[162800, 3753, 252375, 4138, 42, "Output",ExpressionUUID->"6054b907-2b03-4043-a7fd-44030aae04bf"]
}, Open  ]],
Cell[415190, 7894, 311, 6, 37, "Input",ExpressionUUID->"985a3ae6-e130-4f8a-9b93-ae3fe10177bc"],
Cell[415504, 7902, 356, 7, 37, "Input",ExpressionUUID->"34eb60b3-650d-4879-853c-727ea9a613af"],
Cell[415863, 7911, 1502, 33, 402, "Input",ExpressionUUID->"a85f5693-d085-4cc5-989a-a9500987950c"],
Cell[417368, 7946, 3257, 66, 532, "Input",ExpressionUUID->"ad25c99b-2683-4ce1-a7e6-bbce1e6ba9da"],
Cell[CellGroupData[{
Cell[420650, 8016, 1955, 42, 428, "Input",ExpressionUUID->"315ef181-7d11-46ac-8819-a70759fefbb2"],
Cell[422608, 8060, 442, 9, 95, "Output",ExpressionUUID->"9417447f-6bfc-4299-9edb-9468d38dd19a"],
Cell[423053, 8071, 197, 3, 42, "Output",ExpressionUUID->"7ba5e753-2744-4a32-ad5b-c3b04daea7b4"],
Cell[423253, 8076, 442, 9, 95, "Output",ExpressionUUID->"8ce26470-96ce-48b7-b9d3-bb6c696cd261"]
}, Open  ]],
Cell[CellGroupData[{
Cell[423732, 8090, 177, 3, 37, "Input",ExpressionUUID->"a15849b6-9342-44ea-9c59-e4d715ba1a7a"],
Cell[423912, 8095, 83756, 1524, 117, "Output",ExpressionUUID->"af2b1004-eae5-40df-bdf5-b93facf01066"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507705, 9624, 3577, 92, 532, "Input",ExpressionUUID->"a692e665-294a-4da4-bc7b-a41afe12ba83"],
Cell[511285, 9718, 203, 3, 42, "Output",ExpressionUUID->"72452386-770c-4fb2-b6b0-c92b4bc7b06e"],
Cell[511491, 9723, 203, 3, 42, "Output",ExpressionUUID->"fe326cde-c53a-433d-92d3-36890d56f70b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[511743, 9732, 214, 4, 46, "Subsection",ExpressionUUID->"d03dfeba-2718-41c7-9b3f-19ce5bed64e2"],
Cell[CellGroupData[{
Cell[511982, 9740, 1499, 31, 246, "Input",ExpressionUUID->"f9c3d613-11be-45c4-8516-78bfd45d9265"],
Cell[513484, 9773, 267, 4, 69, "Output",ExpressionUUID->"bc050d8e-9aa1-4dae-be8d-df05a25021d0"],
Cell[513754, 9779, 429, 8, 95, "Output",ExpressionUUID->"ea20349e-1c52-40f2-8078-f20da91108eb"]
}, Open  ]],
Cell[514198, 9790, 1507, 39, 220, "Input",ExpressionUUID->"2111868b-759b-4735-b152-31f93e8c9c9f"],
Cell[515708, 9831, 5779, 139, 662, "Input",ExpressionUUID->"11cfe1fe-9482-4b69-90bb-d338a02414fb"],
Cell[521490, 9972, 11280, 263, 1338, "Input",ExpressionUUID->"1f7b8c98-ad1c-4f61-a982-2422f735aa83"],
Cell[CellGroupData[{
Cell[532795, 10239, 115008, 2724, 15171, "Input",ExpressionUUID->"194d0d65-1833-42c3-9043-414081e8803e"],
Cell[647806, 12965, 407, 10, 35, "Message",ExpressionUUID->"a5d661d1-9f5b-4d63-85f1-3537ae3f2620"],
Cell[648216, 12977, 409, 10, 35, "Message",ExpressionUUID->"af898f40-2667-4046-aa5e-d2acf27da243"],
Cell[648628, 12989, 407, 10, 35, "Message",ExpressionUUID->"725e4ace-b43a-4662-b6a8-ddf2ba10438f"],
Cell[649038, 13001, 453, 10, 35, "Message",ExpressionUUID->"26cde231-1b03-4e15-b842-5777621455b6"],
Cell[649494, 13013, 407, 10, 35, "Message",ExpressionUUID->"13b3a681-0e14-48c6-93cf-811951826917"],
Cell[649904, 13025, 407, 10, 35, "Message",ExpressionUUID->"0fb3babc-8f4e-4ca2-983e-a8570350d53d"],
Cell[650314, 13037, 407, 10, 35, "Message",ExpressionUUID->"487ba760-138d-490b-923f-32b8adc0eb86"],
Cell[650724, 13049, 407, 10, 35, "Message",ExpressionUUID->"34a14b0f-9ccd-4e23-8acd-a8855cca1e52"],
Cell[651134, 13061, 407, 10, 35, "Message",ExpressionUUID->"e9f79ec0-fc24-4c8d-a5db-8d8f81553ebb"],
Cell[651544, 13073, 408, 10, 35, "Message",ExpressionUUID->"697a890c-0af1-4d5b-9514-fedab9e4ccf9"],
Cell[651955, 13085, 408, 10, 35, "Message",ExpressionUUID->"524ea09b-871a-4c19-91b0-ae90e4513434"],
Cell[652366, 13097, 410, 10, 35, "Message",ExpressionUUID->"c8ecceff-e008-4f93-b29d-fa01b0ab1e95"],
Cell[652779, 13109, 475, 12, 35, "Message",ExpressionUUID->"5f57a269-5c18-446f-919e-41de1abf58f7"],
Cell[653257, 13123, 566, 13, 35, "Message",ExpressionUUID->"d956da94-fb01-4a00-9d45-95f2794b59e2"],
Cell[653826, 13138, 561, 13, 35, "Message",ExpressionUUID->"024e77c7-8da5-422f-afee-f9868b6ee221"],
Cell[654390, 13153, 567, 13, 35, "Message",ExpressionUUID->"a0fd9fcc-d5e5-4af1-8d2e-a556122b5614"],
Cell[654960, 13168, 475, 12, 35, "Message",ExpressionUUID->"2d370ee5-89ac-44ab-ad3e-18abc7868a11"],
Cell[655438, 13182, 473, 12, 35, "Message",ExpressionUUID->"ef15388b-c5fd-4dc2-a08e-7b247bfbf2ae"],
Cell[655914, 13196, 417, 10, 35, "Message",ExpressionUUID->"7612cf1e-939f-4b12-ada1-84b796479dfc"],
Cell[656334, 13208, 417, 10, 35, "Message",ExpressionUUID->"0cfc89aa-02c0-4fe7-b9b9-8b16ca7b6fc9"],
Cell[656754, 13220, 473, 12, 35, "Message",ExpressionUUID->"3ba77b82-7b30-4148-b9d9-d8901685b516"],
Cell[657230, 13234, 474, 12, 35, "Message",ExpressionUUID->"9e28d12b-ff45-4d9b-8584-87c9f08bea60"],
Cell[657707, 13248, 473, 12, 35, "Message",ExpressionUUID->"40fc2290-e816-4510-9bb2-f65804006856"],
Cell[658183, 13262, 451, 10, 35, "Message",ExpressionUUID->"8a81da4a-9102-4121-bf3d-86779cedf378"],
Cell[658637, 13274, 567, 13, 35, "Message",ExpressionUUID->"aa58b5e5-130f-4aab-81dd-7930faa070e6"],
Cell[659207, 13289, 457, 10, 35, "Message",ExpressionUUID->"e5df4643-75c4-48b0-ab75-73358bc5db9c"],
Cell[659667, 13301, 561, 13, 35, "Message",ExpressionUUID->"b29bccea-7bf4-4e3e-8f0a-dc414de10604"],
Cell[660231, 13316, 564, 13, 35, "Message",ExpressionUUID->"faeef833-88a3-4d0e-b351-5ed1455b2094"],
Cell[660798, 13331, 457, 10, 35, "Message",ExpressionUUID->"96144304-1c5b-4eaa-ac4c-8ec3d4c4e2c6"],
Cell[661258, 13343, 407, 10, 35, "Message",ExpressionUUID->"61ca8c60-75a3-4ccf-b23d-69deae7ea1d8"],
Cell[661668, 13355, 408, 10, 35, "Message",ExpressionUUID->"2029b139-660d-4a05-99c5-4ebe2d762e99"],
Cell[662079, 13367, 408, 10, 35, "Message",ExpressionUUID->"5090df8a-8a5b-44a1-aa4f-e83f8e0fec75"],
Cell[662490, 13379, 408, 10, 35, "Message",ExpressionUUID->"aad52c22-b36f-4546-8997-8cc4b2ae5cbf"],
Cell[662901, 13391, 408, 10, 35, "Message",ExpressionUUID->"808be586-dceb-4d38-b116-a910bcd0fa46"],
Cell[663312, 13403, 410, 10, 35, "Message",ExpressionUUID->"c17a0a2f-8391-40c5-adb7-d686ac67bc9d"],
Cell[663725, 13415, 410, 10, 35, "Message",ExpressionUUID->"b518773e-6050-4497-87fd-3d1f01c6529e"],
Cell[664138, 13427, 408, 10, 35, "Message",ExpressionUUID->"5467d3c9-07e5-431d-840e-a302c80fedf2"],
Cell[664549, 13439, 473, 12, 35, "Message",ExpressionUUID->"b4bd9b03-74d4-4128-8f89-bc6b7bb75617"],
Cell[665025, 13453, 475, 12, 35, "Message",ExpressionUUID->"7b15fe73-e03b-4bdf-8303-b5557e3aa64f"],
Cell[665503, 13467, 451, 10, 35, "Message",ExpressionUUID->"0cd9bcbf-ff43-45c2-ad55-ca0e05e3402d"],
Cell[665957, 13479, 415, 10, 35, "Message",ExpressionUUID->"493395d4-436b-433e-a8f0-a748fb5471ad"],
Cell[666375, 13491, 415, 10, 35, "Message",ExpressionUUID->"037aa6c2-82cd-4a1f-9332-4ec4cedcd9a9"],
Cell[666793, 13503, 473, 12, 35, "Message",ExpressionUUID->"17dc9017-bf9d-404a-8819-6389dc1c3553"],
Cell[667269, 13517, 474, 12, 35, "Message",ExpressionUUID->"0d2b5eea-9ba4-4ea5-88e3-ad688c5c9d2c"],
Cell[667746, 13531, 473, 12, 35, "Message",ExpressionUUID->"645925ef-6840-406a-88b4-801f6311c1f6"],
Cell[668222, 13545, 451, 10, 35, "Message",ExpressionUUID->"38560f82-1d30-4a05-a4c0-72ca48ed8c5e"],
Cell[668676, 13557, 408, 10, 35, "Message",ExpressionUUID->"30893311-fd45-45ce-a636-d79edd6f01d1"],
Cell[669087, 13569, 408, 10, 35, "Message",ExpressionUUID->"ab831aac-0d17-47c7-98ab-221b2c98160e"],
Cell[669498, 13581, 407, 10, 35, "Message",ExpressionUUID->"4e23e120-b649-4f50-b94c-a17a21bf836c"],
Cell[669908, 13593, 410, 10, 35, "Message",ExpressionUUID->"a86503c3-74bc-47cd-9e09-4711e6c6f2ff"],
Cell[670321, 13605, 408, 10, 35, "Message",ExpressionUUID->"0567fcda-049d-4fec-bacc-727d72b576d9"],
Cell[670732, 13617, 408, 10, 35, "Message",ExpressionUUID->"e59cf1ea-0e87-49a3-b3ec-c64f08e136e9"],
Cell[671143, 13629, 408, 10, 35, "Message",ExpressionUUID->"a4559862-859f-4d5e-aaf3-7ba08aca5fec"],
Cell[671554, 13641, 410, 10, 35, "Message",ExpressionUUID->"f9cdb5a8-a7bc-4ad5-9866-1c58f743899e"],
Cell[671967, 13653, 473, 12, 35, "Message",ExpressionUUID->"04212ef2-22fb-45fa-b933-14b52118780b"],
Cell[672443, 13667, 599, 12, 79, "Message",ExpressionUUID->"2b7ab5dd-f246-4a0a-a6c2-e820af2e45ac"],
Cell[673045, 13681, 415, 10, 35, "Message",ExpressionUUID->"188bdf23-8025-46bc-b65d-05b8cfe56b36"],
Cell[673463, 13693, 415, 10, 35, "Message",ExpressionUUID->"e925e7c6-d61c-4426-8091-7378806d570a"],
Cell[673881, 13705, 473, 12, 35, "Message",ExpressionUUID->"d94ff945-0a50-42b9-b6f3-94dbdff4375c"],
Cell[674357, 13719, 474, 12, 35, "Message",ExpressionUUID->"52033a93-f7d7-4747-a0b1-209e0a23d5c4"],
Cell[674834, 13733, 472, 12, 35, "Message",ExpressionUUID->"2e77d752-1079-4098-9172-9a6fc05f7747"],
Cell[675309, 13747, 451, 10, 35, "Message",ExpressionUUID->"df8a5928-f143-489c-8c6a-ec14d6251f53"],
Cell[675763, 13759, 410, 10, 35, "Message",ExpressionUUID->"a0bf4367-6972-4362-9f42-c2bc43b0e979"],
Cell[676176, 13771, 408, 10, 35, "Message",ExpressionUUID->"876bae40-3363-4e6f-9ac1-d45fcdf98003"],
Cell[676587, 13783, 408, 10, 35, "Message",ExpressionUUID->"8f345d1d-7815-475e-9790-9f422f806da2"],
Cell[676998, 13795, 408, 10, 35, "Message",ExpressionUUID->"c97c6aa5-e691-442b-a426-a2c60a41aa8e"],
Cell[677409, 13807, 408, 10, 35, "Message",ExpressionUUID->"1b083dc5-c989-407b-9f1a-5cf54d1bc712"],
Cell[677820, 13819, 408, 10, 35, "Message",ExpressionUUID->"8ad14289-a832-4e40-a949-dd26a3eb66e1"],
Cell[678231, 13831, 408, 10, 35, "Message",ExpressionUUID->"50fef7bb-2d5e-47a9-b405-184ec4eb3693"],
Cell[678642, 13843, 408, 10, 35, "Message",ExpressionUUID->"700f3ea0-4c97-49d5-b12b-2186cf75aee8"],
Cell[679053, 13855, 474, 12, 35, "Message",ExpressionUUID->"78b107f1-4c00-47c1-9135-22bfb18b2a98"],
Cell[679530, 13869, 415, 10, 35, "Message",ExpressionUUID->"29914338-169c-4f2e-a43f-d36f088023f6"],
Cell[679948, 13881, 415, 10, 35, "Message",ExpressionUUID->"3e5e2c60-93f0-4a97-9f5a-34a6ac85bd1a"],
Cell[680366, 13893, 473, 12, 35, "Message",ExpressionUUID->"81561c8b-876a-4775-a8c5-dabac0885b70"],
Cell[680842, 13907, 476, 12, 35, "Message",ExpressionUUID->"fca09450-655c-40ad-ad27-a2fb45a4653c"],
Cell[681321, 13921, 473, 12, 35, "Message",ExpressionUUID->"62804b88-7b4e-4c93-8741-20721ebd9556"],
Cell[681797, 13935, 451, 10, 35, "Message",ExpressionUUID->"0a0976a1-680e-471d-bf6c-de5222c60384"],
Cell[682251, 13947, 408, 10, 35, "Message",ExpressionUUID->"7be23823-e520-4c6e-9858-2c81ade9c25a"],
Cell[682662, 13959, 408, 10, 35, "Message",ExpressionUUID->"fecdd710-7091-4141-9894-6d86f1614061"],
Cell[683073, 13971, 410, 10, 35, "Message",ExpressionUUID->"c31537ca-2f66-4c77-819a-fe2c5b275a8a"],
Cell[683486, 13983, 408, 10, 35, "Message",ExpressionUUID->"03ea6c6b-4736-4bf1-bdc0-5ed00407a91c"],
Cell[683897, 13995, 408, 10, 35, "Message",ExpressionUUID->"fd8f36a1-4ee1-44d5-ac8e-5541d1aa6bc4"],
Cell[684308, 14007, 408, 10, 35, "Message",ExpressionUUID->"1d4b33af-958c-4160-9e85-0c4261c47260"],
Cell[684719, 14019, 408, 10, 35, "Message",ExpressionUUID->"b05c6d28-4dd7-4f3b-a572-502d1d109549"],
Cell[685130, 14031, 408, 10, 35, "Message",ExpressionUUID->"11ab5f47-8a50-4c8d-93b8-a9b809352c1e"],
Cell[685541, 14043, 473, 12, 35, "Message",ExpressionUUID->"35bdd361-6ff2-4056-a68c-cc273216f7fe"],
Cell[686017, 14057, 597, 12, 79, "Message",ExpressionUUID->"5b095561-53f7-4ad8-af41-b1f996628ede"],
Cell[686617, 14071, 597, 12, 79, "Message",ExpressionUUID->"f145ef0f-85e8-49fe-90b7-3425d893d002"],
Cell[687217, 14085, 456, 10, 35, "Message",ExpressionUUID->"49ef2028-cc65-489d-a248-825632b30ec3"],
Cell[687676, 14097, 415, 10, 35, "Message",ExpressionUUID->"aafd2809-d2ac-4628-9b8c-322ec987c44e"],
Cell[688094, 14109, 415, 10, 35, "Message",ExpressionUUID->"dd9428cd-da62-4b26-98a9-7becefdcf9a6"],
Cell[688512, 14121, 472, 12, 35, "Message",ExpressionUUID->"9afe5e76-544a-4f9d-b859-28faecd42b86"],
Cell[688987, 14135, 474, 12, 35, "Message",ExpressionUUID->"07643c97-fccb-4722-ab44-9876cc0cc7c9"],
Cell[689464, 14149, 473, 12, 35, "Message",ExpressionUUID->"874b01a8-f3b8-4d26-a835-aff9dd54cbec"],
Cell[689940, 14163, 451, 10, 35, "Message",ExpressionUUID->"8247c02d-3c77-486d-b883-d3228bebafb1"],
Cell[690394, 14175, 156, 2, 42, "Output",ExpressionUUID->"1dc7140c-c926-4193-b4b2-e111c11fc711"]
}, Open  ]],
Cell[CellGroupData[{
Cell[690587, 14182, 1776, 44, 350, "Input",ExpressionUUID->"c2143d61-6f31-43bb-802b-75c01051eabb"],
Cell[692366, 14228, 152, 2, 62, "Output",ExpressionUUID->"f881bcce-cdff-488b-93d7-fb993a843b00"]
}, Open  ]]
}, Closed]]
}
]
*)

