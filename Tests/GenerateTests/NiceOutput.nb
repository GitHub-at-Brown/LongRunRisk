(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    122339,       2727]
NotebookOptionsPosition[     70851,       1817]
NotebookOutlinePosition[    117214,       2672]
CellTagsIndexPosition[    117171,       2669]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890031566462019*^9, 3.890031568811056*^9}, 
   3.891753377415228*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DirectoryName", "[", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testContextBase", "=", 
   RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$ContextPath", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"$ContextPath", ",", 
     RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891257888860939*^9, 3.8912578891768503`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-\
5f3e6c853d88"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellLabel->"In[6]:=",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", "testContextBase", "<>", 
   "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, {
   3.89115778716877*^9, 3.8911577875972347`*^9}, {3.891158046655726*^9, 
   3.8911580470847473`*^9}, 3.891159709758952*^9, {3.8911693241870728`*^9, 
   3.8911693246255407`*^9}, {3.891169516764063*^9, 3.891169517676881*^9}, {
   3.891170663100637*^9, 3.8911706635114517`*^9}, {3.891171054370618*^9, 
   3.8911710548413477`*^9}, {3.8917528896335487`*^9, 3.891752890069537*^9}, {
   3.891753097510297*^9, 3.891753097991836*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d1369107-4139-4dd1-97c7-29279f71e417"],

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<NiceOutput`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.891157128406151*^9, 3.8911596416641693`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`\>\"", 
     "]"}], ";", "\t", "\[IndentingNewLine]", "\t", 
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"Needs", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}], ";", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{
    "Get", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
    ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"Needs", "[", "\"\<MaTeX`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889970444788332*^9, 3.889970460485238*^9}, 
   3.889972027468637*^9, {3.890038382603887*^9, 3.890038384300302*^9}, 
   3.890595999906348*^9, 3.891159756865707*^9, {3.891752356904751*^9, 
   3.8917523616639*^9}, {3.891764465154644*^9, 3.891764468662709*^9}, {
   3.8917789682856617`*^9, 3.8917789686151257`*^9}, {3.8917793498896008`*^9, 
   3.891779350503578*^9}, {3.891779614953889*^9, 3.8917796576038427`*^9}, {
   3.891779860496509*^9, 3.891779868464823*^9}, {3.891852298053413*^9, 
   3.891852298315044*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d6de8f4f-599d-4b42-a087-537080fe3553"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`\>\""}], "]"}], ",", 
      
      RowBox[{"MemberQ", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\""}], "]"}], 
      ",", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"$ContextPath", ",", "\"\<PacletizedResourceFunctions`\>\""}], 
       "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.891169334685087*^9, {3.891752370662807*^9, 3.8917523945804577`*^9}, {
   3.891764476048242*^9, 3.891764484429154*^9}, {3.8917645790332823`*^9, 
   3.891764583003715*^9}, {3.89177959919545*^9, 3.891779601291627*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f6fe5571-8f1b-4149-81a8-2903abb09f6a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "True", " ", "if", " ", "Info", " ", "can", " ",
      "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*Info\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, 3.8900384168923597`*^9, 3.890158630751964*^9, 
   3.890596000924869*^9, 3.891169348127371*^9, 3.891171059045641*^9, 
   3.891171101449211*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"729fb818-89ae-4dc4-96fd-b3db7ca4ec6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "should", " ", "be", " ", "True", " ", "if", " ", "processModels"}], ",",
      " ", 
     RowBox[{"models", " ", "can", " ", "be", " ", "found"}]}], "*)"}], 
   "\[IndentingNewLine]", "\t", 
   RowBox[{"And", "@@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Not", "[", 
       RowBox[{
        RowBox[{"Names", "[", "\"\<*processModels\>\"", "]"}], "===", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"Not", "[", 
       RowBox[{
        RowBox[{"Names", "[", "\"\<*models\>\"", "]"}], "===", 
        RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891170695708377*^9, 3.891170716978383*^9}, {
  3.8911708876182117`*^9, 3.891170906654315*^9}, {3.8911711091313763`*^9, 
  3.891171129913014*^9}, {3.891748736890572*^9, 3.8917487650779333`*^9}, {
  3.891752409987871*^9, 3.8917524206819487`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"554550a4-5c76-4f19-98ee-455407c99cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"create", " ", "models"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"myModels", "=", "models"}], ";", "\[IndentingNewLine]", "\t", 
    RowBox[{"{", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{
        RowBox[{"myModels", "[", "\"\<BKY\>\"", "]"}], "[", 
        "\"\<numStocks\>\"", "]"}], "]"}], 
      RowBox[{"(*", 
       RowBox[{"===", "Missing"}], "*)"}], ",", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"myModels", "[", "\"\<BKY\>\"", "]"}], "[", 
        "\"\<parameters\>\"", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], 
     RowBox[{"(*", 
      RowBox[{"===", 
       RowBox[{"(", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Model`Parameters`delta", "\[Rule]", 
         "0.9989`"}], ")"}]}], "*)"}], "\[IndentingNewLine]", "\t", "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891752540797484*^9, 3.891752627722397*^9}, {
   3.891752700062598*^9, 3.8917527679438257`*^9}, 3.891753309947804*^9, {
   3.8917533704952993`*^9, 3.891753374523561*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"f1399781-59ac-4844-856a-2b42e20a062f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", 
     "formatting", " ", "of", " ", "Info", " ", "is", " ", "correct"}], 
    "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"myModelsInfo", "=", 
     RowBox[{"Info", "[", "myModels", "]"}]}], ";", "\[IndentingNewLine]", 
    "\t", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "myModelsInfo", "]"}], "===", "Column"}], ",", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"myModelsInfo", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"myModelsInfo", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", 
        "OpenerView"}], ",", "\[IndentingNewLine]", "\t", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Head", "/@", 
            RowBox[{"myModelsInfo", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
           ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "\t", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891752635888153*^9, 3.8917527193076763`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"7069d4fe-8a65-426b-9a53-691f8e1f0e4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "True", " ", "if", " ", "Info", " ", "gives", 
     " ", "correct", " ", "output"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"myModels", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newBYInfo", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"Info", "[", "newBY", "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"newBYproc", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"processModels", "[", "newBY", "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"newBYprocInfo", "=", 
     RowBox[{"Info", "[", "newBYproc", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "===", 
        "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"ToString", "@", 
          RowBox[{"newBYInfo", "[", 
           RowBox[{"[", 
            RowBox[{
            "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", 
             ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], 
            "]"}], "]"}]}], ")"}], "===", "\"\<x[t]\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"newBYprocInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "===", 
        "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"ToString", "@", 
          RowBox[{"newBYprocInfo", "[", 
           RowBox[{"[", 
            RowBox[{
            "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", 
             ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], 
            "]"}], "]"}]}], ")"}], "===", "\"\<x[t]\>\""}]}], 
      "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891169665481431*^9, 3.891169691640395*^9}, {
   3.8911697606824427`*^9, 3.891169881138083*^9}, {3.891170551208984*^9, 
   3.8911705813817167`*^9}, {3.8911710653806963`*^9, 3.891171068125359*^9}, {
   3.891171140236326*^9, 3.89117118725177*^9}, 3.891171937159231*^9, {
   3.891172212018353*^9, 3.891172219661458*^9}, {3.891172303037376*^9, 
   3.891172326789027*^9}, {3.891172410588435*^9, 3.891172427290374*^9}, {
   3.891748807729649*^9, 3.891748823314893*^9}, {3.891752794409904*^9, 
   3.89175282211385*^9}, 3.8917529519499207`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"eeebd2b0-bfe9-4792-9fd6-98614b1bc6b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", 
     "formatting", " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Head", "[", "newBYInfo", "]"}], "===", "Column"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"Head", "/@", 
           RowBox[{"newBYInfo", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
          ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891752832506144*^9, 3.89175284627124*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"af41c96d-a57c-4a73-b8bc-431ba8de9158"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"localPi", "=", "3.14"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "3.14", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"3.14", ",", 
         RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"3.14", ",", 
         RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "localPi", "]"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"localPi", ",", 
         RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"localPi", ",", 
         RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "\[CapitalPi]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"\[CapitalPi]", ",", 
         RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "Pi", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"N", "[", "Pi", "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"3.14", "*", 
         RowBox[{"10", "^", 
          RowBox[{"(", 
           RowBox[{"-", "7"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
       "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
            "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stripContext", "[", "delta", "]"}], "/", "2"}], "/.", 
           RowBox[{
           "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext",
             "[", 
            RowBox[{"{", 
             RowBox[{"delta", "->", "0.99"}], "}"}], "]"}]}], "}"}], "]"}], 
        "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}],
    "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
   3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
   3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
   3.88996754071059*^9}, {3.8899676626847277`*^9, 3.889967663326408*^9}, {
   3.889967743694665*^9, 3.889967744059184*^9}, {3.8899677859095707`*^9, 
   3.8899678081741953`*^9}, {3.8899679955631647`*^9, 3.889968003395926*^9}, {
   3.889969462764024*^9, 3.8899694656136417`*^9}, {3.889969517081333*^9, 
   3.8899695670076637`*^9}, {3.889970354531378*^9, 3.889970361426557*^9}, 
   3.889970446358612*^9, 3.889971586268968*^9, 3.8899720413397284`*^9, 
   3.8900384349199142`*^9, {3.890595744665406*^9, 3.890595822842442*^9}, {
   3.890596027895255*^9, 3.890596039209169*^9}, 3.890596097376584*^9, {
   3.890596245232936*^9, 3.8905962564719467`*^9}, {3.8905963402476254`*^9, 
   3.890596381162334*^9}, {3.89059654726117*^9, 3.8905966027811527`*^9}, {
   3.890596633897502*^9, 3.890596646103675*^9}, 3.890596760140626*^9, {
   3.890596800805632*^9, 3.890596867779873*^9}, {3.891159762905858*^9, 
   3.891159769164448*^9}, {3.891753028545545*^9, 3.891753029713202*^9}, {
   3.891753061122591*^9, 3.8917530617215977`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"24e75f0e-c203-42b9-b7ec-cafef50368ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "True", " ", "if", " ", "string", " ", "has", 
     " ", "linebreaks", " ", "\\n", " ", "and", " ", 
     RowBox[{"tabs", " ", "\\", "t"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Not", "@", 
    RowBox[{"StringFreeQ", "[", 
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stringFormattingTemplate", "[", 
       "\"\<Long-run risk model with stochastic volatility in the original \
2004 paper by Bansal and Yaron\>\"", "]"}], ",", 
      RowBox[{"\"\<\\t\>\"", "|", "\"\<\\n\>\""}]}], "]"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966121134981*^9, 3.889966129513671*^9}, {
   3.8899675430265427`*^9, 3.889967546703742*^9}, {3.889967666639736*^9, 
   3.8899676668939447`*^9}, {3.889967746374608*^9, 3.889967746668034*^9}, {
   3.88996781333914*^9, 3.8899678201195583`*^9}, {3.88996801609513*^9, 
   3.88996801967063*^9}, 3.8900384566452312`*^9, {3.890595704946677*^9, 
   3.890595710909752*^9}, {3.890596059690604*^9, 3.8905960716937237`*^9}, 
   3.891159771328697*^9, {3.891170989672349*^9, 3.8911710051969233`*^9}, 
   3.891171074893589*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"51059a36-3376-434a-afec-57a2920c91f1"],

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"add", " ", 
    RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
    RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "countLines", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
       "n"}]}], "\[IndentingNewLine]", "]"}]}], "\n", 
   RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"replaceNthRecord", "[", 
     RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"writeStream", "=", 
         RowBox[{"OpenWrite", "[", 
          RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
        "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"WriteLine", "[", 
          RowBox[{"writeStream", ",", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{
          RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", 
          "\"\< \\r\\n\>\"", "<>", "replaceWith"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"UnsameQ", "[", 
             RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WriteLine", "[", 
             RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", 
         RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], "\n", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", "\"\<Begin[\\\"NiceOutput`\\\"]\>\""}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
   3.8911593195689373`*^9, 3.8911593372713346`*^9}, 3.8911596484786263`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"48305ff8-83b9-4d5a-8570-\
85b25d4a4a26"],

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Tools\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  "\"\<FernandoDuarte`LongRunRisk`Model`ProcessModels`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "PacletizedResourceFunctions`"}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.890825576987958*^9, {
   3.890987450098063*^9, 3.8909874502616673`*^9}, {3.891159388110983*^9, 
   3.891159388420541*^9}, {3.891159688056053*^9, 3.891159704172017*^9}, {
   3.891748927421254*^9, 3.8917489278823643`*^9}, {3.891749223961915*^9, 
   3.891749231277231*^9}, {3.891749519456523*^9, 3.891749519771348*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"myModels", "=", "models"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{
    RowBox[{"myModels", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<numStocks\>\"", 
    "]"}], "]"}], "===", "Missing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"myModels", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<parameters\>\"", 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "===", 
  RowBox[{"(", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Parameters`delta", "\[Rule]", 
    "0.9989`"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.891749655583271*^9, 3.8917496610313263`*^9}, {
  3.8917497361495743`*^9, 3.891749742544346*^9}, {3.891750130067815*^9, 
  3.891750140797153*^9}, {3.8917503846187773`*^9, 3.891750409773196*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f0218d44-4b68-4ccb-8246-e50c74c85fc7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelsP", "=", 
   RowBox[{"processModels", "[", "myModels", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.891749665154903*^9, 3.891749665809271*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"4d2c4271-b21d-4175-aaac-5932d4001a0f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"modelsP", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<numStocks\>\"", 
   "]"}], "===", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsP", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<parameters\>\"", 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "===", 
  RowBox[{"(", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Parameters`delta", "\[Rule]", 
    "0.9989`"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.8917496685813417`*^9, 3.8917496747115192`*^9}, {
  3.891749739951631*^9, 3.891749744448929*^9}, {3.8917504136145773`*^9, 
  3.891750419482279*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"26a70240-e622-429f-8b45-c9d645ef351d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"myModelsC", "=", 
   RowBox[{"SetSymbolsContext", "[", "myModels", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{
    RowBox[{"myModelsC", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<numStocks\>\"", 
    "]"}], "]"}], "===", "Missing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"myModelsC", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<parameters\>\"",
     "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "===", 
  RowBox[{"(", 
   RowBox[{"delta", "\[Rule]", "0.9989`"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.891749701902204*^9, 3.8917497298614187`*^9}, {
  3.891750427246983*^9, 3.8917504411968813`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"cd216883-4976-498f-b736-4c6c6b365ce2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"modelsPC", "=", 
   RowBox[{"SetSymbolsContext", "[", "modelsP", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"modelsPC", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<numStocks\>\"", 
   "]"}], "===", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"modelsPC", "[", "\"\<BKY\>\"", "]"}], "[", "\"\<parameters\>\"", 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "===", 
  RowBox[{"(", 
   RowBox[{"delta", "\[Rule]", "0.9989`"}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.891749683491559*^9, 3.891749747987927*^9}, {
  3.891750448773402*^9, 3.891750453352531*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"e8d45147-2f04-4d35-87f7-98a81a503984"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "be", " ", "qualified", " ", "by", " ", 
    "the", " ", "context", " ", "in", " ", "which", " ", "they", " ", "were", 
    " ", "created"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"myModelsInfo", "=", 
   RowBox[{"Info", "[", "myModels", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8917495538778677`*^9, 3.8917495775508204`*^9}, 
   3.891749774892411*^9, {3.891750469682312*^9, 3.891750518135106*^9}, {
   3.891750560646047*^9, 3.8917505628539457`*^9}, {3.891750796319543*^9, 
   3.89175079921373*^9}, {3.891750865678462*^9, 3.891750869123267*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"fa66d102-52e8-47ef-a717-4581b18664c3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Head", "[", "myModelsInfo", "]"}], "===", 
  "Column"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{"myModelsInfo", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", 
  "List"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Head", "[", 
   RowBox[{"myModelsInfo", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", 
  "OpenerView"}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"MatchQ", "[", 
      RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{"Head", "/@", 
      RowBox[{"myModelsInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], ")"}]}],
    ")"}]}]}], "Input",
 CellChangeTimes->{{3.891751937937875*^9, 3.891751940577396*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"de4d8b00-e488-4f08-9a8c-39ba3fa2970e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "be", " ", "qualified", " ", "by", " ", 
    "the", " ", "context", " ", "in", " ", "which", " ", "they", " ", "were", 
    " ", "created"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"modelsPInfo", "=", 
   RowBox[{"Info", "[", "modelsP", "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.8917497817030087`*^9, {3.891750565056521*^9, 3.8917505862146053`*^9}, {
   3.891750803565818*^9, 3.8917508053826237`*^9}, {3.891750882030768*^9, 
   3.891750883909338*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"2cd1cbcd-5097-4c95-9a62-b41a7d5d8f98"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "modelsPInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"modelsPInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"modelsPInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"modelsPInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891751927987688*^9, 3.891751932228208*^9}, {
  3.891751982395754*^9, 3.8917519927058*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"f72d4359-ccf3-48f6-b044-c1790f4e7ed5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "be", " ", "qualified", " ", "by", " ", 
    "the", " ", "context", " ", "in", " ", "which", " ", "they", " ", "were", 
    " ", "created"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"myModelsCInfo", "=", 
   RowBox[{"Info", "[", "myModelsC", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.891750566735304*^9, 3.891750587430071*^9}, {
  3.891750908504327*^9, 3.891750910286099*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"d4374ccd-411b-4cb7-8583-b5c5fdb90c72"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "myModelsCInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"myModelsCInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"myModelsCInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"myModelsCInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891751945634848*^9, 3.891751948029595*^9}, {
  3.891751996739156*^9, 3.891751996943074*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"a7ce3d85-3cb7-448c-b620-acf64d7aa838"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "not", " ", "be", " ", "qualified", " ", 
    "by", " ", "the", " ", "context", " ", "in", " ", "which", " ", "they", 
    " ", "were", " ", "created"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"myModelsCInfoC", "=", 
   RowBox[{"SetSymbolsContext", "@", 
    RowBox[{"Info", "[", "myModelsC", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891750907666129*^9, 3.8917509529797*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"d4a3cb94-e4bf-4a7a-a251-2994eb2a062a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "myModelsCInfoC", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"myModelsCInfoC", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"myModelsCInfoC", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"myModelsCInfoC", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891751950426283*^9, 3.891751952628488*^9}, {
  3.891751999687587*^9, 3.8917519998836*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"8de8543e-11d7-4d18-9f51-bc332b2c852b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "not", " ", "be", " ", "qualified", " ", 
    "by", " ", "the", " ", "context", " ", "in", " ", "which", " ", "they", 
    " ", "were", " ", "created"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"modelsPCInfo", "=", 
   RowBox[{"Info", "[", "modelsPC", "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.891749793417182*^9, {3.8917505675839987`*^9, 3.8917505885017443`*^9}, {
   3.891750682013723*^9, 3.8917506826293707`*^9}, {3.89175072048099*^9, 
   3.891750737686154*^9}, {3.891750915129136*^9, 3.891750924578013*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"0ee274b4-f3d2-4026-bd07-f04fc6356461"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "modelsPCInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"modelsPCInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"modelsPCInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"modelsPCInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891751735104851*^9, 3.8917518095732403`*^9}, {
  3.8917519139131308`*^9, 3.89175191409219*^9}, {3.891751955907392*^9, 
  3.8917519588200703`*^9}, {3.891752002120583*^9, 3.8917520023596973`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"694efbd9-8a73-472f-9475-7807f869ee77"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "check", " ", "that", " ", "Info", " ", "is", " ", "correct", " ", "when", 
   " ", "model", " ", "key", " ", "does", " ", "not", " ", "match", " ", 
   "shortname"}], "*)"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"88a5a870-87d8-4928-9343-0eea6c377f01"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "myModels", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"myModels", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   
   RowBox[{
    RowBox[{"newBYInfo", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"Info", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYproc", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"processModels", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYprocInfo", "=", 
     RowBox[{"Info", "[", "newBYproc", "]"}]}], ";"}], "\n", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.890140021630383*^9, 3.890140040264176*^9}, {
   3.8911598232359867`*^9, 3.891159824939945*^9}, 3.891159870680977*^9, {
   3.8911649478485518`*^9, 3.891164969623293*^9}, 3.8911651835823393`*^9, 
   3.89116566169151*^9, {3.891170529265967*^9, 3.891170540528756*^9}, 
   3.891172091915544*^9, 3.891751026146418*^9, {3.891751212056683*^9, 
   3.8917512180969152`*^9}, {3.89175130841641*^9, 3.8917513106188173`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"edb52da4-30c0-4d74-9e45-a6904b3356f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "newBYInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", "newBYprocInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYprocInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891752016529977*^9, 3.8917520312748423`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"109cf052-9257-409b-9a7a-09066bdd590e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "modelsP", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"modelsP", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYInfo", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"Info", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYproc", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"processModels", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYprocInfo", "=", 
     RowBox[{"Info", "[", "newBYproc", "]"}]}], ";"}], "\n", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", 
    "}"}]}]}]], "Input",
 CellChangeTimes->{
  3.891751237036289*^9, {3.891751315084826*^9, 3.8917513172516537`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"bb6158c6-cd02-425d-b35a-db811e540933"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "newBYInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", "newBYprocInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYprocInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"307eb85f-63f7-4ec7-9b36-3fc2bc9f1c34"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "myModelsC", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"myModelsC", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYInfo", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"Info", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYproc", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"processModels", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYprocInfo", "=", 
     RowBox[{"Info", "[", "newBYproc", "]"}]}], ";"}], "\n", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", 
    "}"}]}]}]], "Input",
 CellChangeTimes->{
  3.8917512439104357`*^9, {3.891751321406822*^9, 3.891751331166828*^9}, {
   3.89175139105597*^9, 3.8917513989121428`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"cba7e7c3-2b01-4294-8356-d540d54fa17e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "newBYInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", "newBYprocInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYprocInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"e25ebd75-a103-492e-8a89-618c81c7a45d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "modelsPC", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"modelsPC", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   
   RowBox[{
    RowBox[{"newBYInfo", "=", 
     RowBox[{"Info", "[", "newBY", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYproc", "=", 
     RowBox[{"SetSymbolsContext", "@", 
      RowBox[{"processModels", "[", "newBY", "]"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"newBYprocInfo", "=", 
     RowBox[{"Info", "[", "newBYproc", "]"}]}], ";"}], "\n", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
      "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newBYprocInfo", "[", 
       RowBox[{"[", 
        RowBox[{
        "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",", 
         "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
       "]"}], "===", 
      RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", 
    "}"}]}]}]], "Input",
 CellChangeTimes->{
  3.891751084935629*^9, {3.891751120135282*^9, 3.8917511440085297`*^9}, 
   3.891751199289483*^9, 3.891751263209038*^9, {3.8917513243920813`*^9, 
   3.891751327210567*^9}, {3.8917514126486187`*^9, 3.8917514219991083`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"21e54c24-4854-4e7e-b2fc-45b9ed5c4636"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Head", "[", "newBYInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", "newBYprocInfo", "]"}], "===", "Column"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"newBYprocInfo", "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Head", "/@", 
        RowBox[{"newBYprocInfo", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
       ")"}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.891752057969376*^9, 3.891752067171666*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"5cec11e4-96f9-4388-a7d5-1002d55096b2"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "check", " ", "keys", " ", "before", " ", "and", " ", "after", " ", 
   "processing"}], "*)"}]], "Input",
 CellChangeTimes->{{3.891752096835505*^9, 3.891752105480218*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"142da040-c4b9-48e5-84e6-29435f80d338"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"myModelsKeys", "=", 
   RowBox[{"Keys", "[", 
    RowBox[{"myModels", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myModelsCKeys", "=", 
   RowBox[{"Keys", "[", 
    RowBox[{"myModelsC", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelsPKeys", "=", 
   RowBox[{"Keys", "[", 
    RowBox[{"modelsP", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelsPCKeys", "=", 
   RowBox[{"Keys", "[", 
    RowBox[{"modelsPC", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8917515262987328`*^9, 3.8917515615932407`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"99d70360-f65c-4b78-a3a3-9d5d0703debc"],

Cell[BoxData[{
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "myModels", "]"}], ",", "\"\<BKY\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"myModelsKeys", ",", "\"\<BKY\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"myModelsKeys", ",", "\"\<exogenousEq\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"myModelsKeys", ",", "\"\<exogenousEqTable\>\""}], "]"}]}], " ", "||",
   " ", 
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"myModelsKeys", ",", "\"\<exogenousEqTableNumeric\>\""}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.891165495364101*^9, 3.891165507193082*^9}, {
  3.8917514376702127`*^9, 3.891751490283721*^9}, {3.891751568611705*^9, 
  3.891751646079464*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"f4d82de2-1db9-46e1-8acb-ad66b96a715e"],

Cell[BoxData[{
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "myModelsC", "]"}], ",", "\"\<BKY\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"myModelsCKeys", ",", "\"\<BKY\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"myModelsCKeys", ",", "\"\<exogenousEq\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"myModelsCKeys", ",", "\"\<exogenousEqTable\>\""}], "]"}]}], " ", 
  "||", " ", 
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"myModelsCKeys", ",", "\"\<exogenousEqTableNumeric\>\""}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.891165495364101*^9, 3.891165507193082*^9}, {
  3.8917514376702127`*^9, 3.891751490283721*^9}, {3.891751568611705*^9, 
  3.891751669342314*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"30f1e341-ad2d-42f9-97eb-6c86cb7e3f60"],

Cell[BoxData[{
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "modelsP", "]"}], ",", "\"\<BKY\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"modelsP", ",", "\"\<BKY\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"MemberQ", "[", 
  RowBox[{"modelsPKeys", ",", "\"\<exogenousEq\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"modelsPKeys", ",", "\"\<exogenousEqTable\>\""}], "]"}]}], " ", "||",
   " ", 
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"modelsPKeys", ",", "\"\<exogenousEqTableNumeric\>\""}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.891165495364101*^9, 3.891165507193082*^9}, {
  3.8917514376702127`*^9, 3.891751490283721*^9}, {3.891751568611705*^9, 
  3.891751696746523*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"293140b8-09c6-4bfa-bb71-13b530d49649"],

Cell[BoxData[{
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "modelsPC", "]"}], ",", "\"\<BKY\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Not", "@", 
  RowBox[{"MemberQ", "[", 
   RowBox[{"modelsPCKeys", ",", "\"\<BKY\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"MemberQ", "[", 
  RowBox[{"modelsPCKeys", ",", "\"\<exogenousEq\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"modelsPCKeys", ",", "\"\<exogenousEqTable\>\""}], "]"}]}], " ", "||",
   " ", 
  RowBox[{"Not", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"modelsPCKeys", ",", "\"\<exogenousEqTableNumeric\>\""}], 
    "]"}]}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.891165495364101*^9, 3.891165507193082*^9}, {
  3.8917514376702127`*^9, 3.891751490283721*^9}, {3.891751568611705*^9, 
  3.891751701026587*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"1ba2d586-d33f-41c4-9980-16352a6d87f1"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"check", " ", "re"}], "-", 
   RowBox[{
   "creating", " ", "formatting", " ", "of", " ", "model", " ", "definitions",
     " ", "in", " ", "Catalog"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.891752118570128*^9, 3.891752142309094*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"c782b5e6-cb8b-4dba-b647-a5f5afea9f27"],

Cell[BoxData[{
 RowBox[{"nb", "=", 
  RowBox[{"CreateNotebook", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"content", "=", 
   RowBox[{"formatModels", "[", "models", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NotebookWrite", "[", 
    RowBox[{"nb", ",", "content"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SelectionMove", "[", 
   RowBox[{"nb", ",", "All", ",", "Notebook"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FrontEndTokenExecute", "[", 
   RowBox[{"nb", ",", "\"\<ClearCellOptions\>\""}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.890015347069269*^9, 3.8900153891524878`*^9}, {
  3.890015708961783*^9, 3.890015758379883*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"acd3cbc9-69ea-418c-b887-28d34b1d6cb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"paramList", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Preferences\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"delta", ",", "psi", ",", "gamma", ",", "theta"}], "}"}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Long-run risk\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"rhox", ",", "rhoxpbar", ",", "phix", ",", "phixc"}], "}"}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Inflation\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
        "mup", ",", "rhoppbar", ",", "rhop", ",", "phip", ",", "xip", ",", 
         "phipc", ",", "phipcx", ",", "phipx", ",", "phipp", ",", "phipxp"}], 
        "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Expected inflation\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
        "mupbar", ",", "rhopbar", ",", "rhopbarx", ",", "phipbarc", ",", 
         "phipbarcx", ",", "phipbarx", ",", "phipbarp", ",", "phipbarxb", ",",
          "phipbarpb", ",", "phipbarxp"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Real consumption growth\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
        "muc", ",", "rhocx", ",", "rhocp", ",", "phics", ",", "phicx", ",", 
         "phicc", ",", "phicpp", ",", "phicpc", ",", "phic", ",", "phicsp", 
         ",", "xic", ",", "phicp"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Nominal-real covariance (NRC)\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"Esg", ",", "rhog", ",", "phig"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Stochastic volatility of long-run risk\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"Esx", ",", "vx", ",", "phisxs"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Stochastic volatility of consumption growth\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"Esc", ",", "vc", ",", "phiscv"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Stochastic volatility of inflation\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"Esp", ",", "vp", ",", "vpp", ",", "vppbar", ",", "phispw"}], 
        "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<Real dividend growth\>\"", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"mud", "[", "1", "]"}], ",", 
         RowBox[{"rhodx", "[", "1", "]"}], ",", 
         RowBox[{"rhodp", "[", "1", "]"}], ",", 
         RowBox[{"phidxd", "[", "1", "]"}], ",", 
         RowBox[{"phids", "[", "1", "]"}], ",", 
         RowBox[{"phidxc", "[", "1", "]"}], ",", 
         RowBox[{"phidpp", "[", "1", "]"}], ",", 
         RowBox[{"phidpd", "[", "1", "]"}], ",", 
         RowBox[{"phidcc", "[", "1", "]"}], ",", 
         RowBox[{"phidpc", "[", "1", "]"}], ",", 
         RowBox[{"phidcd", "[", "1", "]"}], ",", 
         RowBox[{"phidsp", "[", "1", "]"}], ",", 
         RowBox[{"xid", "[", "1", "]"}], ",", 
         RowBox[{"phidp", "[", "1", "]"}], ",", 
         RowBox[{"phidc", "[", "1", "]"}], ",", 
         RowBox[{"taugd", "[", "1", "]"}]}], "}"}]}], "}"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"7e32ede4-28cb-479c-ac0d-712d48de58fe"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.891750117129232*^9, 3.89175011772332*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"532e0e6f-db80-4be9-b560-d0510ae77b3a"]
}, Closed]]
},
WindowSize->{878, 493},
WindowMargins->{{23, Automatic}, {Automatic, 206}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"70b4b93a-a1f6-40e6-903f-48381b8b25a9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 241, 5, 37, "Input",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],
Cell[802, 27, 1926, 41, 194, "Input",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],
Cell[CellGroupData[{
Cell[2753, 72, 255, 4, 67, "Subsection",ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-5f3e6c853d88"],
Cell[3011, 78, 341, 9, 37, "Input",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],
Cell[3355, 89, 966, 16, 64, "Input",ExpressionUUID->"d1369107-4139-4dd1-97c7-29279f71e417"],
Cell[4324, 107, 272, 4, 37, "Input",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],
Cell[4599, 113, 1476, 28, 194, "Input",ExpressionUUID->"d6de8f4f-599d-4b42-a087-537080fe3553"],
Cell[6078, 143, 1334, 31, 220, "Input",ExpressionUUID->"f6fe5571-8f1b-4149-81a8-2903abb09f6a"],
Cell[7415, 176, 883, 18, 116, "Input",ExpressionUUID->"729fb818-89ae-4dc4-96fd-b3db7ca4ec6b"],
Cell[8301, 196, 1219, 28, 142, "Input",ExpressionUUID->"554550a4-5c76-4f19-98ee-455407c99cc0"],
Cell[9523, 226, 1436, 33, 246, "Input",ExpressionUUID->"f1399781-59ac-4844-856a-2b42e20a062f"],
Cell[10962, 261, 1864, 46, 272, "Input",ExpressionUUID->"7069d4fe-8a65-426b-9a53-691f8e1f0e4b"],
Cell[12829, 309, 3014, 66, 350, "Input",ExpressionUUID->"eeebd2b0-bfe9-4792-9fd6-98614b1bc6b9"],
Cell[15846, 377, 1619, 41, 246, "Input",ExpressionUUID->"af41c96d-a57c-4a73-b8bc-431ba8de9158"],
Cell[17468, 420, 4799, 102, 922, "Input",ExpressionUUID->"24e75f0e-c203-42b9-b7ec-cafef50368ed"],
Cell[22270, 524, 1486, 29, 247, "Input",ExpressionUUID->"51059a36-3376-434a-afec-57a2920c91f1"],
Cell[23759, 555, 195, 3, 37, "Input",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],
Cell[23957, 560, 5096, 118, 1208, "Input",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29090, 683, 214, 4, 67, "Subsection",ExpressionUUID->"48305ff8-83b9-4d5a-8570-85b25d4a4a26"],
Cell[29307, 689, 1528, 31, 220, "Input",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],
Cell[30838, 722, 880, 21, 116, "Input",ExpressionUUID->"f0218d44-4b68-4ccb-8246-e50c74c85fc7"],
Cell[31721, 745, 266, 5, 37, "Input",ExpressionUUID->"4d2c4271-b21d-4175-aaac-5932d4001a0f"],
Cell[31990, 752, 712, 18, 90, "Input",ExpressionUUID->"26a70240-e622-429f-8b45-c9d645ef351d"],
Cell[32705, 772, 783, 20, 90, "Input",ExpressionUUID->"cd216883-4976-498f-b736-4c6c6b365ce2"],
Cell[33491, 794, 735, 19, 90, "Input",ExpressionUUID->"e8d45147-2f04-4d35-87f7-98a81a503984"],
Cell[34229, 815, 807, 15, 116, "Input",ExpressionUUID->"fa66d102-52e8-47ef-a717-4581b18664c3"],
Cell[35039, 832, 955, 28, 116, "Input",ExpressionUUID->"de4d8b00-e488-4f08-9a8c-39ba3fa2970e"],
Cell[35997, 862, 713, 15, 116, "Input",ExpressionUUID->"2cd1cbcd-5097-4c95-9a62-b41a7d5d8f98"],
Cell[36713, 879, 1246, 35, 142, "Input",ExpressionUUID->"f72d4359-ccf3-48f6-b044-c1790f4e7ed5"],
Cell[37962, 916, 635, 13, 116, "Input",ExpressionUUID->"d4374ccd-411b-4cb7-8583-b5c5fdb90c72"],
Cell[38600, 931, 1256, 35, 142, "Input",ExpressionUUID->"a7ce3d85-3cb7-448c-b620-acf64d7aa838"],
Cell[39859, 968, 638, 13, 116, "Input",ExpressionUUID->"d4a3cb94-e4bf-4a7a-a251-2994eb2a062a"],
Cell[40500, 983, 1258, 35, 142, "Input",ExpressionUUID->"8de8543e-11d7-4d18-9f51-bc332b2c852b"],
Cell[41761, 1020, 772, 15, 116, "Input",ExpressionUUID->"0ee274b4-f3d2-4026-bd07-f04fc6356461"],
Cell[42536, 1037, 1354, 36, 142, "Input",ExpressionUUID->"694efbd9-8a73-472f-9475-7807f869ee77"],
Cell[43893, 1075, 307, 6, 64, "Input",ExpressionUUID->"88a5a870-87d8-4928-9343-0eea6c377f01"],
Cell[44203, 1083, 2340, 56, 324, "Input",ExpressionUUID->"edb52da4-30c0-4d74-9e45-a6904b3356f4"],
Cell[46546, 1141, 2080, 60, 272, "Input",ExpressionUUID->"109cf052-9257-409b-9a7a-09066bdd590e"],
Cell[48629, 1203, 1971, 51, 298, "Input",ExpressionUUID->"bb6158c6-cd02-425d-b35a-db811e540933"],
Cell[50603, 1256, 2012, 59, 272, "Input",ExpressionUUID->"307eb85f-63f7-4ec7-9b36-3fc2bc9f1c34"],
Cell[52618, 1317, 2026, 52, 298, "Input",ExpressionUUID->"cba7e7c3-2b01-4294-8356-d540d54fa17e"],
Cell[54647, 1371, 2012, 59, 272, "Input",ExpressionUUID->"e25ebd75-a103-492e-8a89-618c81c7a45d"],
Cell[56662, 1432, 2084, 53, 298, "Input",ExpressionUUID->"21e54c24-4854-4e7e-b2fc-45b9ed5c4636"],
Cell[58749, 1487, 2078, 60, 272, "Input",ExpressionUUID->"5cec11e4-96f9-4388-a7d5-1002d55096b2"],
Cell[60830, 1549, 297, 7, 37, "Input",ExpressionUUID->"142da040-c4b9-48e5-84e6-29435f80d338"],
Cell[61130, 1558, 850, 23, 116, "Input",ExpressionUUID->"99d70360-f65c-4b78-a3a3-9d5d0703debc"],
Cell[61983, 1583, 978, 26, 116, "Input",ExpressionUUID->"f4d82de2-1db9-46e1-8acb-ad66b96a715e"],
Cell[62964, 1611, 983, 26, 116, "Input",ExpressionUUID->"30f1e341-ad2d-42f9-97eb-6c86cb7e3f60"],
Cell[63950, 1639, 938, 24, 116, "Input",ExpressionUUID->"293140b8-09c6-4bfa-bb71-13b530d49649"],
Cell[64891, 1665, 974, 25, 142, "Input",ExpressionUUID->"1ba2d586-d33f-41c4-9980-16352a6d87f1"],
Cell[65868, 1692, 373, 9, 37, "Input",ExpressionUUID->"c782b5e6-cb8b-4dba-b647-a5f5afea9f27"],
Cell[66244, 1703, 839, 22, 168, "Input",ExpressionUUID->"acd3cbc9-69ea-418c-b887-28d34b1d6cb4"],
Cell[67086, 1727, 3446, 80, 376, "Input",ExpressionUUID->"7e32ede4-28cb-479c-ac0d-712d48de58fe"],
Cell[70535, 1809, 300, 5, 168, "Input",ExpressionUUID->"532e0e6f-db80-4be9-b560-d0510ae77b3a"]
}, Closed]]
}
]
*)

