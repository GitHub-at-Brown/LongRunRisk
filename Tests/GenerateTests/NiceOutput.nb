(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    231098,       4597]
NotebookOptionsPosition[    175917,       3593]
NotebookOutlinePosition[    222456,       4451]
CellTagsIndexPosition[    222413,       4448]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.890031566462019*^9, 3.890031568811056*^9}, 
   3.891753377415228*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DirectoryName", "[", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testContextBase", "=", 
   RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", "=", 
  RowBox[{"Cases", "[", 
   RowBox[{"$ContextPath", ",", 
    RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, {3.891257888860939*^9, 3.8912578891768503`*^9}, 
   3.905170973360199*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905771670966997*^9, 3.905876533618599*^9, 
  3.905901381669629*^9, 3.905901464091708*^9, 3.90590153737281*^9, 
  3.90590158382732*^9, 3.90590165671677*^9, 3.905901939537641*^9, 
  3.905902289047567*^9, 3.905902329751622*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"f644f909-e830-46b4-8c32-760d7e3526d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-\
5f3e6c853d88"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellLabel->"In[6]:=",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", "testContextBase", "<>", 
   "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, {
   3.89115778716877*^9, 3.8911577875972347`*^9}, {3.891158046655726*^9, 
   3.8911580470847473`*^9}, 3.891159709758952*^9, {3.8911693241870728`*^9, 
   3.8911693246255407`*^9}, {3.891169516764063*^9, 3.891169517676881*^9}, {
   3.891170663100637*^9, 3.8911706635114517`*^9}, {3.891171054370618*^9, 
   3.8911710548413477`*^9}, {3.8917528896335487`*^9, 3.891752890069537*^9}, {
   3.891753097510297*^9, 3.891753097991836*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d1369107-4139-4dd1-97c7-29279f71e417"],

Cell[BoxData["\<\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"\>"], "Output",
 CellChangeTimes->{3.9058765359531937`*^9, 3.905902333996954*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"77100aa6-1068-4c85-a235-f73685ae7409"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<Tools`NiceOutput`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.891157128406151*^9, 3.8911596416641693`*^9, {3.905155790658827*^9, 
   3.905155792478663*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],

Cell[BoxData["\<\"Tools`NiceOutput`\"\>"], "Output",
 CellChangeTimes->{3.9058765359590054`*^9, 3.905902334011796*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"1fc5850d-7387-4f00-a039-ed47ad0815c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"longTest", " ", "=", " ", "False"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{"fast", " ", "and", " ", "partial", " ", "coverage", " ", 
      RowBox[{"(", "False", ")"}], " ", "or", " ", "slow", " ", "and", " ", 
      "full", " ", "coverage", " ", 
      RowBox[{"(", "True", ")"}]}], "*)"}], "\[IndentingNewLine]", "True"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellLabel->"In[10]:=",ExpressionUUID->"ef31a243-f4a9-4065-97c9-93852360dfdf"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-CSDOMC\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-CSDOMC"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876536221157*^9, 3.905902334287513*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ff31a9a1-28dd-4472-ade6-883f29167e8b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876536221157*^9, 3.9059023343099337`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"12471470-5780-4eb9-bc9a-d8481a0e481d"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`NiceOutput`longTest = False;\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tTools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[Tools`NiceOutput`longTest = False; True], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905876536249176*^9, 3.905902334313715*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"744e9162-a01c-48dc-9a2a-b4ddef431787"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Get", "@", 
     RowBox[{"Get", "[", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
        "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], 
        "}"}], "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
    RowBox[{"msp", "=", 
     RowBox[{"If", "[", 
      RowBox[{
      "longTest", ",", "\[IndentingNewLine]", 
       "FernandoDuarte`LongRunRisk`Models", ",", "\[IndentingNewLine]", 
       RowBox[{"KeyTake", "[", 
        RowBox[{"FernandoDuarte`LongRunRisk`Models", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<BY\>\"", ",", "\"\<BKY\>\"", ",", "\"\<NRC\>\"", ",", 
           "\"\<DES\>\"", ",", "\"\<NRCStochVol\>\""}], "}"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modBY", "=", 
     RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modBKY", "=", 
     RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRC", "=", 
     RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modDES", "=", 
     RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"modNRCStochVol", "=", 
     RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], ";", 
    "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.905155825352765*^9, 3.9051558420392313`*^9}, {
  3.905155974170395*^9, 3.9051560234035263`*^9}, {3.905174890536059*^9, 
  3.905174895232579*^9}, {3.905771351878487*^9, 3.905771353407558*^9}, {
  3.905876449856866*^9, 3.905876522083633*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"cb235074-df95-44d7-a0ca-7e5ab21c0383"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-SZ1YXW\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-SZ1YXW"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9058765373512*^9, 3.905902335450164*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"13a4838c-f03a-457e-bebe-de0d88d7f7c7"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.9058765373512*^9, 3.905902335451169*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"966a161f-056b-4d89-adc9-e1f396284c9c"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Get @ Get @ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \
\"Models.wl\"};\n\tTools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tGet @ Get @ FileNameJoin @ \
{\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\tTools`NiceOutput`msp = \
If[\n\t\tTools`NiceOutput`longTest, FernandoDuarte`LongRunRisk`Models, \
KeyTake[FernandoDuarte`LongRunRisk`Models, {\"BY\", \"BKY\", \"NRC\", \
\"DES\", \"NRCStochVol\"}]\n\t];\n\tTools`NiceOutput`modBY = \
Tools`NiceOutput`msp @ \"BY\";\n\tTools`NiceOutput`modBKY = \
Tools`NiceOutput`msp @ \"BKY\";\n\tTools`NiceOutput`modNRC = \
Tools`NiceOutput`msp @ \"NRC\";\n\tTools`NiceOutput`modDES = \
Tools`NiceOutput`msp @ \"DES\";\n\tTools`NiceOutput`modNRCStochVol = \
Tools`NiceOutput`msp @ \"NRCStochVol\";\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\
\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.107, "AbsoluteTiming" -> 1.1, 
   "InputString" :> ToString[
     Unevaluated[Get[
        Get[
         FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
      Tools`NiceOutput`msp = 
       If[Tools`NiceOutput`longTest, FernandoDuarte`LongRunRisk`Models, 
         KeyTake[
         FernandoDuarte`LongRunRisk`Models, {
          "BY", "BKY", "NRC", "DES", "NRCStochVol"}]]; 
      Tools`NiceOutput`modBY = Tools`NiceOutput`msp["BY"]; 
      Tools`NiceOutput`modBKY = Tools`NiceOutput`msp["BKY"]; 
      Tools`NiceOutput`modNRC = Tools`NiceOutput`msp["NRC"]; 
      Tools`NiceOutput`modDES = Tools`NiceOutput`msp["DES"]; 
      Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp["NRCStochVol"]; 
      True], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nEndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905876537368723*^9, 3.905902335466425*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"271a00cc-b9c4-45f5-a3db-b4b1ff2f22fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"$ContextPath", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Prepend", "[", 
       RowBox[{
       "$ContextPath", ",", 
        "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\>\""}], 
       "]"}]}]}], ";", "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]",
    ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889970444788332*^9, 3.889970460485238*^9}, 
   3.889972027468637*^9, {3.890038382603887*^9, 3.890038384300302*^9}, 
   3.890595999906348*^9, 3.891159756865707*^9, {3.891752356904751*^9, 
   3.8917523616639*^9}, {3.891764465154644*^9, 3.891764468662709*^9}, {
   3.8917789682856617`*^9, 3.8917789686151257`*^9}, {3.8917793498896008`*^9, 
   3.891779350503578*^9}, {3.891779614953889*^9, 3.8917796576038427`*^9}, {
   3.891779860496509*^9, 3.891779868464823*^9}, {3.891852298053413*^9, 
   3.891852298315044*^9}, {3.9051558916867027`*^9, 3.905155892057691*^9}, {
   3.905174907494274*^9, 3.905174929685955*^9}, {3.905771358310758*^9, 
   3.905771359817305*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"d6de8f4f-599d-4b42-a087-537080fe3553"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-W3EDPT\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-W3EDPT"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9058765416550837`*^9, 3.9059023385001793`*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"8fa02a13-47e7-42b2-84ce-74a23a8acd57"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.9058765416550837`*^9, 3.905902338501335*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"535c3c35-c31f-420c-8dfe-659d6592af74"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Needs @ \"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath \
= DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 1.6420000000000001`, 
   "AbsoluteTiming" -> 2.955, "InputString" :> ToString[
     Unevaluated[
     Needs["FernandoDuarte`LongRunRisk`Tools`NiceOutput`"]; $ContextPath = 
       DeleteDuplicates[
         Prepend[$ContextPath, 
          "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`"]]; True], 
     InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905876541678562*^9, 3.905902338520975*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"55211160-17a3-45e5-8fe0-43b130245fb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
      "$ContextPath", ",", 
       "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`\>\""}], "]"}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.891169334685087*^9, {3.891752370662807*^9, 3.8917523945804577`*^9}, {
   3.891764476048242*^9, 3.891764484429154*^9}, {3.8917645790332823`*^9, 
   3.891764583003715*^9}, {3.89177959919545*^9, 3.891779601291627*^9}, {
   3.90515589987036*^9, 3.905155904618107*^9}, 3.90517493809581*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"f6fe5571-8f1b-4149-81a8-2903abb09f6a"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-XBKBUS\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-XBKBUS"],
  Editable->False]], "Print",
 CellChangeTimes->{3.90587654183318*^9, 3.905902338707067*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"94b77442-6ff0-441f-9ba3-1c24b6e37d0b"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.90587654183318*^9, 3.905902338816465*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"5408ae7f-f157-4cfd-8845-164782a0f3a1"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, {
        MemberQ[$ContextPath, 
         "FernandoDuarte`LongRunRisk`Tools`NiceOutput`"]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nEndTestSection[]\n"}, "\
\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print[
           "Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905876541855*^9, 3.905902338825632*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"3133eccf-ad20-4ec4-afd2-fa8ddae47910"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "True", " ", "if", " ", "Info", " ", "can", " ",
      "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*info\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9, 3.8900384168923597`*^9, 3.890158630751964*^9, 
   3.890596000924869*^9, 3.891169348127371*^9, 3.891171059045641*^9, 
   3.891171101449211*^9, 3.905174945776129*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"729fb818-89ae-4dc4-96fd-b3db7ca4ec6b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-BFL7AF\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-BFL7AF"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876541919463*^9, 3.905902338892415*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"87936915-9893-4279-9cf6-b5aeb3982871"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876541919463*^9, 3.905902338893578*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"3ccef2a6-d922-4cc3-a1f8-fc2001ea0200"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "!SameQ[Names @ \"*info\", {}]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\t!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\
\n\t,\n\tTestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.028, "AbsoluteTiming" -> 0.028, 
   "InputString" :> ToString[
     Unevaluated[
      Not[Names["*info"] === {}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nEndTestSection[]\n"}, \
"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9058765419435787`*^9, 3.905902338908915*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"a72caf48-c31c-4bcc-894f-d04d3235fedd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"table", " ", "with", " ", "model", " ", "info"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"myModelsInfo", "=", 
     RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
      RowBox[{"info", "[", "msp", "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Head", "[", "myModelsInfo", "]"}], "===", "Column"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"myModelsInfo", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Head", "[", 
         RowBox[{"myModelsInfo", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", 
        "OpenerView"}], ",", "\[IndentingNewLine]", 
       RowBox[{"And", "@@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Head", "/@", 
            RowBox[{"myModelsInfo", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
           ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891752540797484*^9, 3.891752627722397*^9}, {
   3.891752700062598*^9, 3.8917527679438257`*^9}, 3.891753309947804*^9, {
   3.8917533704952993`*^9, 3.891753374523561*^9}, {3.905175017879985*^9, 
   3.905175062726314*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"f1399781-59ac-4844-856a-2b42e20a062f"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-08E57N\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-08E57N"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876544017391*^9, 3.905902340979698*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"30a854a3-8521-4750-9bfe-26eab38760ba"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876544017391*^9, 3.905902340980953*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"afe88438-98b7-4d71-aea3-1f492209d2d7"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`NiceOutput`myModelsInfo = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tTools`NiceOutput`myModelsInfo = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n", FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.863, "AbsoluteTiming" -> 2.047, 
   "InputString" :> ToString[
     Unevaluated[
     Tools`NiceOutput`myModelsInfo = 
       PacletizedResourceFunctions`SetSymbolsContext[
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
         Tools`NiceOutput`msp]]; 
      Apply[And, {Head[Tools`NiceOutput`myModelsInfo] === Column, Head[
           Part[Tools`NiceOutput`myModelsInfo, 1]] === List, Head[
           Part[Tools`NiceOutput`myModelsInfo, 1, 1]] === OpenerView, 
         Apply[And, 
          Map[MatchQ[#, Grid]& , 
           Map[Head, 
            Part[Tools`NiceOutput`myModelsInfo, 1, 
             Span[1, All], 1, 2]]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`myModelsInfo = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n\nEndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9058765440382223`*^9, 3.9059023410084257`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"90672775-5d9f-4676-a334-543c0a44c594"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "check", " ", "that", " ", "Info", " ", "is", " ", "correct", " ", "when",
      " ", "model", " ", "key", " ", "does", " ", "not", " ", "match", " ", 
     "shortname"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"justBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<BY\>\"", "->", 
       RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"infoBY", "=", 
     RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
      RowBox[{"info", "[", "justBY", "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"infoNewBY", "=", 
     RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
      RowBox[{"info", "[", "newBY", "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"infoBY", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
        "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"infoBY", "[", 
         RowBox[{"[", 
          RowBox[{
          "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", 
           ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], 
          "]"}], "]"}], "===", 
        RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"infoNewBY", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
        "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"infoNewBY", "[", 
         RowBox[{"[", 
          RowBox[{
          "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", 
           ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], 
          "]"}], "]"}], "===", 
        RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", "}"}]}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891169665481431*^9, 3.891169691640395*^9}, {
   3.8911697606824427`*^9, 3.891169881138083*^9}, {3.891170551208984*^9, 
   3.8911705813817167`*^9}, {3.8911710653806963`*^9, 3.891171068125359*^9}, {
   3.891171140236326*^9, 3.89117118725177*^9}, 3.891171937159231*^9, {
   3.891172212018353*^9, 3.891172219661458*^9}, {3.891172303037376*^9, 
   3.891172326789027*^9}, {3.891172410588435*^9, 3.891172427290374*^9}, {
   3.891748807729649*^9, 3.891748823314893*^9}, {3.891752794409904*^9, 
   3.89175282211385*^9}, 3.8917529519499207`*^9, {3.905157071593506*^9, 
   3.905157071594721*^9}, {3.9051750812647142`*^9, 3.905175096821858*^9}, {
   3.905771411599072*^9, 3.905771418471093*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"eeebd2b0-bfe9-4792-9fd6-98614b1bc6b9"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-2ALCRK\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-2ALCRK"],
  Editable->False]], "Print",
 CellChangeTimes->{3.9058765443390303`*^9, 3.9059023413107862`*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"9f365288-b901-425d-a6ad-e3b37a7228ab"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.9058765443390303`*^9, 3.9059023413119307`*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"1b665346-fe40-486c-b89d-ac29f8952fae"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Tools`NiceOutput`justBY = <|\"BY\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\t\
Tools`NiceOutput`infoBY = PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tTools`NiceOutput`justBY = <|\"BY\" -> \
Tools`NiceOutput`msp[\"BY\"]|>;\n\tTools`NiceOutput`infoBY = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-2ALCRK\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.23500000000000001`, 
   "AbsoluteTiming" -> 0.23600000000000002`, "InputString" :> ToString[
     Unevaluated[
     Tools`NiceOutput`justBY = <|"BY" -> Tools`NiceOutput`msp["BY"]|>; 
      Tools`NiceOutput`infoBY = 
       PacletizedResourceFunctions`SetSymbolsContext[
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
         Tools`NiceOutput`justBY]]; 
      Tools`NiceOutput`newBY = <|"myModel" -> Tools`NiceOutput`msp["BY"]|>; 
      Tools`NiceOutput`infoNewBY = 
       PacletizedResourceFunctions`SetSymbolsContext[
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
         Tools`NiceOutput`newBY]]; 
      Apply[And, {
        Part[Tools`NiceOutput`infoBY, 1, 1, 1, 1] == "BY", 
         Part[Tools`NiceOutput`infoBY, 1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1] === 
         Tools`NiceOutput`x[Tools`NiceOutput`t], 
         Part[Tools`NiceOutput`infoNewBY, 1, 1, 1, 1] == "BY", 
         Part[Tools`NiceOutput`infoNewBY, 1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 
           1] === Tools`NiceOutput`x[Tools`NiceOutput`t]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`myModelsInfo = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n\nVerificationTest[\n\tTools`NiceOutput`justBY = <|\"BY\" -> \
Tools`NiceOutput`msp[\"BY\"]|>;\n\tTools`NiceOutput`infoBY = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-2ALCRK\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.90587654436178*^9, 3.905902341331263*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"3a960a57-5438-443d-b7ef-92900c285d83"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", 
     "formatting", " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Head", "[", "infoBY", "]"}], "===", "Column"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"infoBY", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"infoBY", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"Head", "/@", 
           RowBox[{"infoBY", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
          ")"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", "infoNewBY", "]"}], "===", "Column"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"infoNewBY", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Head", "[", 
        RowBox[{"infoNewBY", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"And", "@@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"MatchQ", "[", 
           RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"Head", "/@", 
           RowBox[{"infoNewBY", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
          ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891752832506144*^9, 3.89175284627124*^9}, {
  3.905157071595374*^9, 3.905157071596534*^9}, {3.9051750882354403`*^9, 
  3.905175104572239*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"af41c96d-a57c-4a73-b8bc-431ba8de9158"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-WRGBND\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-WRGBND"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876544398912*^9, 3.905902341375547*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"661d2632-2ad5-4a8e-93f1-19703314e6f0"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876544398912*^9, 3.905902341376588*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"e08ce31b-c1ac-4064-abab-39177863deef"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`infoBY, Column],\n\t\
\t\tSameQ[Head[Tools`NiceOutput`infoBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1, 1]]], OpenerView],\n\t\t\tApply[And,\n\
\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
SameQ[Head @ Tools`NiceOutput`infoNewBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoNewBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tApply[And,\n\t\t{\n\t\t\tSameQ[Head @ \
Tools`NiceOutput`infoBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1, 1]]], OpenerView],\n\t\t\tApply[And,\n\
\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
SameQ[Head @ Tools`NiceOutput`infoNewBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoNewBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]\n\
\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-WRGBND\"\n]\n\n",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      Apply[And, {Head[Tools`NiceOutput`infoBY] === Column, Head[
          Part[Tools`NiceOutput`infoBY, 1]] === List, Head[
          Part[Tools`NiceOutput`infoBY, 1, 1]] === OpenerView, 
        Apply[And, 
         Map[MatchQ[#, Grid]& , 
          Map[Head, 
           Part[Tools`NiceOutput`infoBY, 1, 
            Span[1, All], 1, 2]]]], Head[Tools`NiceOutput`infoNewBY] === 
        Column, Head[
          Part[Tools`NiceOutput`infoNewBY, 1]] === List, Head[
          Part[Tools`NiceOutput`infoNewBY, 1, 1]] === OpenerView, 
        Apply[And, 
         Map[MatchQ[#, Grid]& , 
          Map[Head, 
           Part[Tools`NiceOutput`infoNewBY, 1, 
            Span[1, All], 1, 2]]]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`myModelsInfo = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n\nVerificationTest[\n\tTools`NiceOutput`justBY = <|\"BY\" -> \
Tools`NiceOutput`msp[\"BY\"]|>;\n\tTools`NiceOutput`infoBY = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-2ALCRK\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\t{\n\t\t\tSameQ[Head @ \
Tools`NiceOutput`infoBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1, 1]]], OpenerView],\n\t\t\tApply[And,\n\
\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
SameQ[Head @ Tools`NiceOutput`infoNewBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoNewBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]\n\
\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-WRGBND\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.905876544406312*^9, 3.905902341393817*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"70c99110-d0a9-40d9-83fc-cb661f6821a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"localPi", "=", "3.14"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "3.14", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"3.14", ",", 
          RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"3.14", ",", 
          RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "localPi", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"localPi", ",", 
          RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"localPi", ",", 
          RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "\[CapitalPi]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"\[CapitalPi]", ",", 
          RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "Pi", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"N", "[", "Pi", "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"3.14", "*", 
          RowBox[{"10", "^", 
           RowBox[{"(", 
            RowBox[{"-", "7"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
        "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
             "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stripContext", "[", "delta", "]"}], "/", "2"}], "/.", 
            RowBox[{
            "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stripContext", "[", 
             RowBox[{"{", 
              RowBox[{"delta", "->", "0.99"}], "}"}], "]"}]}], "}"}], "]"}], 
         "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
     "]"}], "===", 
    RowBox[{"{", 
     RowBox[{
     "\"\<3.14\>\"", ",", "\"\<3.14`\>\"", ",", "\"\<3.14\>\"", ",", 
      "\"\<3.14\>\"", ",", "\"\<3.14`\>\"", ",", "\"\<3.14\>\"", ",", 
      "\"\<\[CapitalPi]\>\"", ",", "\"\<\\\\[CapitalPi]\>\"", ",", 
      "\"\<3.141592653589793\>\"", ",", "\"\<3.141592653589793\>\"", ",", 
      "\"\<3.14*^-7\>\"", ",", "\"\<{0.495}\>\""}], "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
   3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
   3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
   3.88996754071059*^9}, {3.8899676626847277`*^9, 3.889967663326408*^9}, {
   3.889967743694665*^9, 3.889967744059184*^9}, {3.8899677859095707`*^9, 
   3.8899678081741953`*^9}, {3.8899679955631647`*^9, 3.889968003395926*^9}, {
   3.889969462764024*^9, 3.8899694656136417`*^9}, {3.889969517081333*^9, 
   3.8899695670076637`*^9}, {3.889970354531378*^9, 3.889970361426557*^9}, 
   3.889970446358612*^9, 3.889971586268968*^9, 3.8899720413397284`*^9, 
   3.8900384349199142`*^9, {3.890595744665406*^9, 3.890595822842442*^9}, {
   3.890596027895255*^9, 3.890596039209169*^9}, 3.890596097376584*^9, {
   3.890596245232936*^9, 3.8905962564719467`*^9}, {3.8905963402476254`*^9, 
   3.890596381162334*^9}, {3.89059654726117*^9, 3.8905966027811527`*^9}, {
   3.890596633897502*^9, 3.890596646103675*^9}, 3.890596760140626*^9, {
   3.890596800805632*^9, 3.890596867779873*^9}, {3.891159762905858*^9, 
   3.891159769164448*^9}, {3.891753028545545*^9, 3.891753029713202*^9}, {
   3.891753061122591*^9, 3.8917530617215977`*^9}, {3.905175216240128*^9, 
   3.905175216822054*^9}, 3.90577143962284*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"24e75f0e-c203-42b9-b7ec-cafef50368ed"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-MIKOL2\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-MIKOL2"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876544442293*^9, 3.90590234143889*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"db2caf44-e9fc-441e-af97-fdae0f1f63c1"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876544442293*^9, 3.905902341447729*^9},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"34f68866-d124-4a9c-b791-f1a80e618141"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "SameQ[\n\t\tWith[{Tools`NiceOutput`localPi = 3.14},\n\t\t\t{\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ 3.14,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`localPi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`\\[CapitalPi],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ N @ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14 * 10 ^ -7],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\
{ReplaceAll[FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[\
Tools`NiceOutput`delta] / 2, \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[{Tools`\
NiceOutput`delta -> 0.99}]]}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t{\n\
\t\t\t\"3.14\", \"3.14`\", \"3.14\", \"3.14\", \"3.14`\", \"3.14\", \
\"\\[CapitalPi]\", \"\\\\[CapitalPi]\", \"3.141592653589793\",\n\t\t\t\
\"3.141592653589793\", \"3.14*^-7\", \"{0.495}\"\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tSameQ[\n\t\tWith[{Tools`NiceOutput`localPi = 3.14},\n\
\t\t\t{\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ 3.14,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`localPi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`\\[CapitalPi],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ N @ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14 * 10 ^ -7],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\
{ReplaceAll[FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[\
Tools`NiceOutput`delta] / 2, \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[{Tools`\
NiceOutput`delta -> 0.99}]]}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t{\n\
\t\t\t\"3.14\", \"3.14`\", \"3.14\", \"3.14\", \"3.14`\", \"3.14\", \
\"\\[CapitalPi]\", \"\\\\[CapitalPi]\", \"3.141592653589793\",\n\t\t\t\
\"3.141592653589793\", \"3.14*^-7\", \"{0.495}\"\n\t\t}\n\t]\n\t,\n\tTrue\n\t\
,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-MIKOL2\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[With[{Tools`NiceOutput`localPi = 3.14}, {
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14, NumberMarks -> True], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14, NumberMarks -> False], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi, NumberMarks -> True], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi, NumberMarks -> False], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`\[CapitalPi]], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
         Tools`NiceOutput`\[CapitalPi], CharacterEncoding -> "ASCII"], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Pi], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
          N[Pi]], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14 10^(-7)], 
         FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
          Flatten[{
            ReplaceAll[
            FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[
              Tools`NiceOutput`delta]/2, 
             
             FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[\
{Tools`NiceOutput`delta -> 0.99}]]}]]}] === {
       "3.14", "3.14`", "3.14", "3.14", "3.14`", "3.14", "\[CapitalPi]", 
        "\\[CapitalPi]", "3.141592653589793", "3.141592653589793", "3.14*^-7",
         "{0.495}"}], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`myModelsInfo = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n\nVerificationTest[\n\tTools`NiceOutput`justBY = <|\"BY\" -> \
Tools`NiceOutput`msp[\"BY\"]|>;\n\tTools`NiceOutput`infoBY = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-2ALCRK\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\t{\n\t\t\tSameQ[Head @ \
Tools`NiceOutput`infoBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1, 1]]], OpenerView],\n\t\t\tApply[And,\n\
\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
SameQ[Head @ Tools`NiceOutput`infoNewBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoNewBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]\n\
\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-WRGBND\"\n]\n\n\n\
VerificationTest[\n\tSameQ[\n\t\tWith[{Tools`NiceOutput`localPi = 3.14},\n\t\t\
\t{\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ 3.14,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`localPi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`\\[CapitalPi],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ N @ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14 * 10 ^ -7],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\
{ReplaceAll[FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[\
Tools`NiceOutput`delta] / 2, \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[{Tools`\
NiceOutput`delta -> 0.99}]]}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t{\n\
\t\t\t\"3.14\", \"3.14`\", \"3.14\", \"3.14\", \"3.14`\", \"3.14\", \
\"\\[CapitalPi]\", \"\\\\[CapitalPi]\", \"3.141592653589793\",\n\t\t\t\
\"3.141592653589793\", \"3.14*^-7\", \"{0.495}\"\n\t\t}\n\t]\n\t,\n\tTrue\n\t\
,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-MIKOL2\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.90587654446091*^9, 3.905902341461297*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"1e136e14-a3ef-4268-a5ae-eccdf622daf9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "True", " ", "if", " ", "string", " ", "has", 
     " ", "linebreaks", " ", "\\n", " ", "and", " ", 
     RowBox[{"tabs", " ", "\\", "t"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Not", "@", 
    RowBox[{"StringFreeQ", "[", 
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stringFormattingTemplate", "[", 
       "\"\<Long-run risk model with stochastic volatility in the original \
2004 paper by Bansal and Yaron\>\"", "]"}], ",", 
      RowBox[{"\"\<\\t\>\"", "|", "\"\<\\n\>\""}]}], "]"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966121134981*^9, 3.889966129513671*^9}, {
   3.8899675430265427`*^9, 3.889967546703742*^9}, {3.889967666639736*^9, 
   3.8899676668939447`*^9}, {3.889967746374608*^9, 3.889967746668034*^9}, {
   3.88996781333914*^9, 3.8899678201195583`*^9}, {3.88996801609513*^9, 
   3.88996801967063*^9}, 3.8900384566452312`*^9, {3.890595704946677*^9, 
   3.890595710909752*^9}, {3.890596059690604*^9, 3.8905960716937237`*^9}, 
   3.891159771328697*^9, {3.891170989672349*^9, 3.8911710051969233`*^9}, 
   3.891171074893589*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"51059a36-3376-434a-afec-57a2920c91f1"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Adding test: \"\>", 
   "\[InvisibleSpace]", "\<\"NiceOutput_20231010-BCSCQH\"\>"}],
  SequenceForm["Adding test: ", "NiceOutput_20231010-BCSCQH"],
  Editable->False]], "Print",
 CellChangeTimes->{3.905876544493993*^9, 3.905902341502442*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"63b9827c-fec8-494a-bb53-273693b4abf0"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>"], "Print",
 CellChangeTimes->{3.905876544493993*^9, 3.9059023415046663`*^9},
 CellLabel->
  "During evaluation of \
In[19]:=",ExpressionUUID->"a6dc643d-437c-42f2-ade5-92d5fdf1ee6e"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "Not[\n\t\tStringFreeQ[\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stringFormattingTemplate \
@ \"Long-run risk model with stochastic volatility in the original 2004 paper \
by Bansal and Yaron\",\n\t\t\t\"\\t\" | \"\\n\"\n\t\t]\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "VerificationTest[\n\tNot[\n\t\tStringFreeQ[\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stringFormattingTemplate \
@ \"Long-run risk model with stochastic volatility in the original 2004 paper \
by Bansal and Yaron\",\n\t\t\t\"\\t\" | \"\\n\"\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-BCSCQH\"\n]\n\n", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> True, "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0.001, "AbsoluteTiming" -> 0.001, 
   "InputString" :> ToString[
     Unevaluated[
      Not[
       StringFreeQ[
        FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stringFormattingTemplate[
        "Long-run risk model with stochastic volatility in the original 2004 \
paper by Bansal and Yaron"], 
        Alternatives["\t", "\n"]]]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
  "BeginTestSection[\"NiceOutput\"]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`longTest = False;\n\tTrue\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-CSDOMC\"\n]\n\n\nVerificationTest[\n\tGet @ Get \
@ FileNameJoin @ {\"FernandoDuarte/LongRunRisk\", \"Models.wl\"};\n\t\
Tools`NiceOutput`msp = If[\n\t\tTools`NiceOutput`longTest, \
FernandoDuarte`LongRunRisk`Models, KeyTake[FernandoDuarte`LongRunRisk`Models, \
{\"BY\", \"BKY\", \"NRC\", \"DES\", \"NRCStochVol\"}]\n\t];\n\t\
Tools`NiceOutput`modBY = Tools`NiceOutput`msp @ \"BY\";\n\t\
Tools`NiceOutput`modBKY = Tools`NiceOutput`msp @ \"BKY\";\n\t\
Tools`NiceOutput`modNRC = Tools`NiceOutput`msp @ \"NRC\";\n\t\
Tools`NiceOutput`modDES = Tools`NiceOutput`msp @ \"DES\";\n\t\
Tools`NiceOutput`modNRCStochVol = Tools`NiceOutput`msp @ \"NRCStochVol\";\n\t\
True\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-SZ1YXW\"\n\
]\n\n\nVerificationTest[\n\tNeeds @ \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\";\n\t$ContextPath = \
DeleteDuplicates @ Prepend[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"];\n\tTrue\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-W3EDPT\"\n]\n\n\n\
VerificationTest[\n\tApply[And, {MemberQ[$ContextPath, \
\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"]}]\n\t,\n\tTrue\n\t,\n\t{}\n\
\t,\n\tTestID->\"NiceOutput_20231010-XBKBUS\"\n]\n\n\nVerificationTest[\n\t\
!SameQ[Names @ \"*info\", {}]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\t\
TestID->\"NiceOutput_20231010-BFL7AF\"\n]\n\n\nVerificationTest[\n\t\
Tools`NiceOutput`myModelsInfo = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`msp;\n\t\
Apply[And,\n\t\t{\n\t\t\tSameQ[Head @ Tools`NiceOutput`myModelsInfo, Column],\
\n\t\t\tSameQ[Head[Tools`NiceOutput`myModelsInfo[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`myModelsInfo[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`myModelsInfo[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t\
]\n\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-08E57N\"\n]\n\
\n\nVerificationTest[\n\tTools`NiceOutput`justBY = <|\"BY\" -> \
Tools`NiceOutput`msp[\"BY\"]|>;\n\tTools`NiceOutput`infoBY = \
PacletizedResourceFunctions`SetSymbolsContext @ \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`justBY;\n\
\tTools`NiceOutput`newBY = <|\"myModel\" -> Tools`NiceOutput`msp[\"BY\"]|>;\n\
\tTools`NiceOutput`infoNewBY = PacletizedResourceFunctions`SetSymbolsContext \
@ FernandoDuarte`LongRunRisk`Tools`NiceOutput`info @ Tools`NiceOutput`newBY;\n\
\tApply[And,\n\t\t{\n\t\t\tEqual[Tools`NiceOutput`infoBY[[1, 1, 1, 1]], \
\"BY\"],\n\t\t\tSameQ[Tools`NiceOutput`infoBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, \
1, 1, 1]],\n\t\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t],\n\t\t\t\
Equal[Tools`NiceOutput`infoNewBY[[1, 1, 1, 1]], \"BY\"],\n\t\t\t\
SameQ[Tools`NiceOutput`infoNewBY[[1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 1, 1]],\n\t\
\t\t\tTools`NiceOutput`x @ Tools`NiceOutput`t\n\t\t\t]\n\t\t}\n\t]\n\t,\n\t\
True\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-2ALCRK\"\n]\n\n\n\
VerificationTest[\n\tApply[And,\n\t\t{\n\t\t\tSameQ[Head @ \
Tools`NiceOutput`infoBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoBY[[1, 1]]], OpenerView],\n\t\t\tApply[And,\n\
\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t],\n\t\t\t\
SameQ[Head @ Tools`NiceOutput`infoNewBY, Column],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1]]], List],\n\t\t\t\
SameQ[Head[Tools`NiceOutput`infoNewBY[[1, 1]]], OpenerView],\n\t\t\t\
Apply[And,\n\t\t\t\tMap[MatchQ[#, Grid]&,\n\t\t\t\t\tMap[Head, \
Tools`NiceOutput`infoNewBY[[1, 1;;, 1, 2]]]\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t]\n\
\t,\n\tTrue\n\t,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-WRGBND\"\n]\n\n\n\
VerificationTest[\n\tSameQ[\n\t\tWith[{Tools`NiceOutput`localPi = 3.14},\n\t\t\
\t{\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ 3.14,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`localPi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> True],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`localPi, NumberMarks -> False],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Tools`NiceOutput`\\[CapitalPi],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
Tools`NiceOutput`\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate \
@ N @ Pi,\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
3.14 * 10 ^ -7],\n\t\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`numberFormattingTemplate[\
\n\t\t\t\t\tFlatten[\n\t\t\t\t\t\t\
{ReplaceAll[FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[\
Tools`NiceOutput`delta] / 2, \
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext[{Tools`\
NiceOutput`delta -> 0.99}]]}\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t\t{\n\
\t\t\t\"3.14\", \"3.14`\", \"3.14\", \"3.14\", \"3.14`\", \"3.14\", \
\"\\[CapitalPi]\", \"\\\\[CapitalPi]\", \"3.141592653589793\",\n\t\t\t\
\"3.141592653589793\", \"3.14*^-7\", \"{0.495}\"\n\t\t}\n\t]\n\t,\n\tTrue\n\t\
,\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-MIKOL2\"\n]\n\n\n\
VerificationTest[\n\tNot[\n\t\tStringFreeQ[\n\t\t\t\
FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stringFormattingTemplate \
@ \"Long-run risk model with stochastic volatility in the original 2004 paper \
by Bansal and Yaron\",\n\t\t\t\"\\t\" | \"\\n\"\n\t\t]\n\t]\n\t,\n\tTrue\n\t,\
\n\t{}\n\t,\n\tTestID->\"NiceOutput_20231010-BCSCQH\"\n]\n\n\n\
EndTestSection[]\n"}, "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>",
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
           "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.9058765445138073`*^9, 3.9059023415133533`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"5db50d26-bd1b-42b7-b3ad-f7daf0eb7eba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],

Cell[BoxData["\<\"Tools`NiceOutput`\"\>"], "Output",
 CellChangeTimes->{3.905876544529119*^9, 3.9059023415392723`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"42fa2513-565c-4d0b-9225-2f18c6316240"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"add", " ", 
    RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
    RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"readStream", "=", 
        RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=", 
          RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Close", "/@", 
       RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
      "n"}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
   3.8911593195689373`*^9, 3.8911593372713346`*^9}, 3.8911596484786263`*^9, 
   3.905155805045021*^9, {3.90577130120051*^9, 3.905771304836565*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceNthRecord", "[", 
   RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"readStream", "=", 
       RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"writeStream", "=", 
       RowBox[{"OpenWrite", "[", 
        RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
      "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteLine", "[", 
      RowBox[{"writeStream", ",", 
       RowBox[{
        RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", "\"\< \\r\\n\>\"",
         "<>", "replaceWith"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"temp", "=", 
         RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"UnsameQ", "[", 
           RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"WriteLine", "[", 
           RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", 
     RowBox[{"Close", "/@", 
      RowBox[{"{", 
       RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
   3.8911593195689373`*^9, 3.8911593372713346`*^9}, 3.8911596484786263`*^9, 
   3.905155805045021*^9, {3.90577130120051*^9, 3.9057713083452044`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"39040be4-d00b-4950-835c-895457c013a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", 
     "\"\<Begin[\\\"Tools`NiceOutput`\\\"]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
   3.8911593195689373`*^9, 3.8911593372713346`*^9}, 3.8911596484786263`*^9, 
   3.905155805045021*^9, {3.90577130120051*^9, 3.9057713083452044`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"a687239e-d3c8-4e10-b6b9-c91a3e1da4ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905876544552919*^9, 3.905902341568277*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"d9e95040-8dd5-413f-976c-f1396f96f943"],

Cell[BoxData["183"], "Output",
 CellChangeTimes->{3.905876544552919*^9, 3.9059023415692673`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"6074b3b8-759c-4b98-b59f-f6f9aa5d8bdd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt\"\>", 
   ",", "\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlttemp\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905876544552919*^9, 3.905902341577634*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"250aaa93-30d6-4190-9aad-accaaf0d2cf0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"ab382fa0-c0d9-4cc8-8ad6-26c3aab6ba85"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestReportObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: NiceOutput.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], TraditionalForm]]]}, 
             PlotRange -> {{0, 1}, {0, 1}}, Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Title: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Test Report: NiceOutput.wlt\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Success rate: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"100%\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], PercentForm], "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Tests count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Succeeded: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Time elapsed: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "1.9678460000000000001`5.44450610617165", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestReportObject[<|
   "Title" -> "Test Report: NiceOutput.wlt", "Aborted" -> False, 
    "TestResults" -> <|
     6727891768694585852 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902341657248*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "59659955-4ffe-4774-931f-7749dbea3aba", "TestID" -> 
         "NiceOutput_20231010-CSDOMC", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "f333cae0-ed16-4f10-bd39-7fa23e4334b5", "Input" -> 
         HoldForm[Tools`NiceOutput`longTest = False; True], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000029`1.6129129957309458, "CPUTimeUsed" -> 
         0.000029999999999752447`, "MemoryUsed" -> 2760, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 2484844224753538675 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902341657593*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "9a80fb36-062c-42eb-a4cf-fb6445b9f9c7", "TestID" -> 
         "NiceOutput_20231010-SZ1YXW", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "2a682cc9-5da5-472a-a41a-596248bf3f28", "Input" -> HoldForm[Get[
             Get[
              FileNameJoin[{"FernandoDuarte/LongRunRisk", "Models.wl"}]]]; 
           Tools`NiceOutput`msp = 
            If[Tools`NiceOutput`longTest, FernandoDuarte`LongRunRisk`Models, 
              KeyTake[
              FernandoDuarte`LongRunRisk`Models, {
               "BY", "BKY", "NRC", "DES", "NRCStochVol"}]]; 
           Tools`NiceOutput`modBY = Tools`NiceOutput`msp["BY"]; 
           Tools`NiceOutput`modBKY = Tools`NiceOutput`msp["BKY"]; 
           Tools`NiceOutput`modNRC = Tools`NiceOutput`msp["NRC"]; 
           Tools`NiceOutput`modDES = Tools`NiceOutput`msp["DES"]; 
           Tools`NiceOutput`modNRCStochVol = 
            Tools`NiceOutput`msp["NRCStochVol"]; True], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         1.035324`6.165591279404965, "CPUTimeUsed" -> 1.0481959999999981`, 
         "MemoryUsed" -> 561944, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 8189704113964965765 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902342701316*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "df569a5b-372b-412c-8060-0cc8553ebad3", "TestID" -> 
         "NiceOutput_20231010-W3EDPT", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "aa960723-4182-4e92-8dde-8d831c0057e3", "Input" -> 
         HoldForm[
          Needs["FernandoDuarte`LongRunRisk`Tools`NiceOutput`"]; $ContextPath = 
            DeleteDuplicates[
              
              Prepend[$ContextPath, 
               "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`"]]; 
           True], "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> 
         HoldForm[True], "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000039`1.7415796048584933, "CPUTimeUsed" -> 0.00003900000000101045,
          "MemoryUsed" -> 2640, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 1505950437041380357 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902342701639*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "dfa272d2-c1c1-444d-9ed8-1fa2954bfe58", "TestID" -> 
         "NiceOutput_20231010-XBKBUS", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "7fb53a1d-2aa6-4726-b0c7-6c60713aa014", "Input" -> HoldForm[
           Apply[And, {
             
             MemberQ[$ContextPath, 
              "FernandoDuarte`LongRunRisk`Tools`NiceOutput`"]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000025`1.5484550065040283, "CPUTimeUsed" -> 
         0.000023999999999801958`, "MemoryUsed" -> 2760, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 4177829514430240306 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902342701892*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "16765325-8767-46b8-b65a-5a30466145d3", "TestID" -> 
         "NiceOutput_20231010-BFL7AF", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "9c64b5ed-5055-4815-a177-01ec670fac5f", "Input" -> HoldForm[
           Not[Names["*info"] === {}]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.037912`4.7292916935233364, "CPUTimeUsed" -> 
         0.037567000000001016`, "MemoryUsed" -> 7288, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 7140550042153882451 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902342740239*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "1c392aa9-7c99-4520-bef1-d7b6d1ca0247", "TestID" -> 
         "NiceOutput_20231010-08E57N", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "69a9a377-bbb9-4272-af90-c4608f3877c0", "Input" -> 
         HoldForm[
          Tools`NiceOutput`myModelsInfo = 
            PacletizedResourceFunctions`SetSymbolsContext[
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
              Tools`NiceOutput`msp]]; 
           Apply[And, {Head[Tools`NiceOutput`myModelsInfo] === Column, Head[
                Part[Tools`NiceOutput`myModelsInfo, 1]] === List, Head[
                Part[Tools`NiceOutput`myModelsInfo, 1, 1]] === OpenerView, 
              Apply[And, 
               Map[MatchQ[#, Grid]& , 
                Map[Head, 
                 Part[Tools`NiceOutput`myModelsInfo, 1, 
                  Span[1, All], 1, 2]]]]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.660518`5.970399655049996, "CPUTimeUsed" -> 0.6601689999999998, 
         "MemoryUsed" -> -82744, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 5318461723444139424 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902343401252*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "aef03313-fdb9-4ca7-80ae-5f943c443abe", "TestID" -> 
         "NiceOutput_20231010-2ALCRK", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "bc92be30-db64-4bd1-b721-e1338c429533", "Input" -> 
         HoldForm[
          Tools`NiceOutput`justBY = <|"BY" -> Tools`NiceOutput`msp["BY"]|>; 
           Tools`NiceOutput`infoBY = 
            PacletizedResourceFunctions`SetSymbolsContext[
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
              Tools`NiceOutput`justBY]]; 
           Tools`NiceOutput`newBY = <|
             "myModel" -> Tools`NiceOutput`msp["BY"]|>; 
           Tools`NiceOutput`infoNewBY = 
            PacletizedResourceFunctions`SetSymbolsContext[
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`info[
              Tools`NiceOutput`newBY]]; 
           Apply[And, {
             Part[Tools`NiceOutput`infoBY, 1, 1, 1, 1] == "BY", 
              Part[Tools`NiceOutput`infoBY, 1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 1, 
                1, 1] === Tools`NiceOutput`x[Tools`NiceOutput`t], 
              Part[Tools`NiceOutput`infoNewBY, 1, 1, 1, 1] == "BY", 
              Part[Tools`NiceOutput`infoNewBY, 1, 1, 1, 2, 1, 4, 1, 1, 2, 1, 
                1, 1, 1] === Tools`NiceOutput`x[Tools`NiceOutput`t]}]], 
         "ExpectedMessages" -> HoldForm[{}], "ActualOutput" -> HoldForm[True],
          "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.233674`5.519125390649141, "CPUTimeUsed" -> 0.23359499999999933`, 
         "MemoryUsed" -> -586456, "ExpectedOutput" -> HoldForm[True], 
         "Outcome" -> "Success"|>], 8652759150335746504 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902343635379*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "9bf57775-b773-44f7-b14d-aac1c7c3c0e8", "TestID" -> 
         "NiceOutput_20231010-WRGBND", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "5c93f6c7-9f8f-467c-94aa-369e7f871209", "Input" -> HoldForm[
           Apply[And, {Head[Tools`NiceOutput`infoBY] === Column, Head[
               Part[Tools`NiceOutput`infoBY, 1]] === List, Head[
               Part[Tools`NiceOutput`infoBY, 1, 1]] === OpenerView, 
             Apply[And, 
              Map[MatchQ[#, Grid]& , 
               Map[Head, 
                Part[Tools`NiceOutput`infoBY, 1, 
                 Span[1, All], 1, 2]]]], Head[Tools`NiceOutput`infoNewBY] === 
             Column, Head[
               Part[Tools`NiceOutput`infoNewBY, 1]] === List, Head[
               Part[Tools`NiceOutput`infoNewBY, 1, 1]] === OpenerView, 
             Apply[And, 
              Map[MatchQ[#, Grid]& , 
               Map[Head, 
                Part[Tools`NiceOutput`infoNewBY, 1, 
                 Span[1, All], 1, 2]]]]}]], "ExpectedMessages" -> 
         HoldForm[{}], "ActualOutput" -> HoldForm[True], 
         "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
         0.000093`2.1189979463859268, "CPUTimeUsed" -> 0.00009300000000145303,
          "MemoryUsed" -> 8096, "ExpectedOutput" -> HoldForm[True], "Outcome" -> 
         "Success"|>], 887383512641192511 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902343635821*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "49555b75-1f59-4137-ae9f-39cbb3c66a11", "TestID" -> 
         "NiceOutput_20231010-MIKOL2", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "dc93a8be-d6cb-4641-ab28-d810a0e60721", "Input" -> 
         HoldForm[With[{Tools`NiceOutput`localPi = 3.14}, {
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14, NumberMarks -> True], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14, NumberMarks -> False], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi, NumberMarks -> True], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`localPi, NumberMarks -> False], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Tools`NiceOutput`\[CapitalPi]], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
              Tools`NiceOutput`\[CapitalPi], CharacterEncoding -> "ASCII"], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[Pi], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
               N[Pi]], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[3.14 10^(-7)], 
              
              FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate[
               Flatten[{
                 ReplaceAll[
                 FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stripContext[Tools`NiceOutput`delta]/2, 
                  
                  FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stripContext[{Tools`NiceOutput`delta -> 0.99}]]}]]}] === {
            "3.14", "3.14`", "3.14", "3.14", "3.14`", "3.14", "\[CapitalPi]", 
             "\\[CapitalPi]", "3.141592653589793", "3.141592653589793", 
             "3.14*^-7", "{0.495}"}], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000148`2.3207767132269512, "CPUTimeUsed" -> 
         0.0001490000000003988, "MemoryUsed" -> 2920, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>], 8846166875662623570 -> 
      TestObject[<|
        "MetaInformation" -> None, "AbsoluteTime" -> 3.905902343636212*^9, 
         "SameTest" -> SameQ, "SameMessages" -> Testing`MessageMatchQ, 
         "MemoryConstraint" -> DirectedInfinity[1], "TimeConstraint" -> 
         DirectedInfinity[1], "CreationID" -> 
         "dd63af7b-4ea2-4480-a10a-a571b773dc96", "TestID" -> 
         "NiceOutput_20231010-BCSCQH", "TestFileName" -> 
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/NiceOutput.wlt", "EvaluationID" -> 
         "3a57aff2-6ea6-4d9b-bb2d-57d0e388422d", "Input" -> HoldForm[
           Not[
            StringFreeQ[
             
             FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stringFormattingTemplate[
             "Long-run risk model with stochastic volatility in the original \
2004 paper by Bansal and Yaron"], 
             Alternatives["\t", "\n"]]]], "ExpectedMessages" -> HoldForm[{}], 
         "ActualOutput" -> HoldForm[True], "ActualMessages" -> {}, 
         "AbsoluteTimeUsed" -> 0.000084`2.074794283893873, "CPUTimeUsed" -> 
         0.00008399999999930685, "MemoryUsed" -> 2664, "ExpectedOutput" -> 
         HoldForm[True], "Outcome" -> "Success"|>]|>, 
    "FailureResults" -> <||>, "TestsNotEvaluatedKeys" -> {}, 
    "TestsFailedWrongResultsKeys" -> {}, "TestsFailedWithMessagesKeys" -> {}, 
    "TestsFailedWithErrorsKeys" -> {}, 
    "TestsSucceededKeys" -> {6727891768694585852, 2484844224753538675, 
     8189704113964965765, 1505950437041380357, 4177829514430240306, 
     7140550042153882451, 5318461723444139424, 8652759150335746504, 
     887383512641192511, 8846166875662623570}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9058765465725107`*^9, 3.9059023436534348`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"64c940cd-5dbb-46c6-b9d5-f87b337121af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"actual", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", 
      RowBox[{"{", 
       RowBox[{"(", 
        RowBox[{"ReleaseHold", "@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
           RowBox[{"[", "\"\<ActualOutput\>\"", "]"}], "]"}], ")"}]}], ")"}], 
       "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"jj", ",", "1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"expected", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Flatten", "@", 
       RowBox[{"{", 
        RowBox[{"(", 
         RowBox[{"ReleaseHold", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"jj", ",", "1"}], "]"}], "]"}], "[", 
            RowBox[{"[", "\"\<ExpectedOutput\>\"", "]"}], "]"}], ")"}]}], 
         ")"}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"jj", ",", "1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"tr", "[", "\"\<Results\>\"", "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "value", " ", "of", " ", "next", " ", "two", " ", "lines", " ", "should", 
    " ", "be", " ", "true"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "actual"}]}], "\[IndentingNewLine]", 
 RowBox[{"And", "@@", 
  RowBox[{"Flatten", "@", "expected"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"numEntries", "=", 
     RowBox[{
      RowBox[{"Dimensions", "[", "actual", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"numCol", "=", "5"}], ";", "\[IndentingNewLine]", 
    RowBox[{"numRows", "=", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"numEntries", "/", "numCol"}], "]"}], "+", "1"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ArrayReshape", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"TableForm", "[", 
              RowBox[{"{", 
               RowBox[{"#1", ",", "#2"}], "}"}], "]"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"actual", ",", "\[IndentingNewLine]", "expected"}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "}"}], "\[Transpose]"}], ",", 
        RowBox[{"{", 
         RowBox[{"numRows", ",", "numCol"}], "}"}], ",", "\"\<--\>\""}], 
       "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"TableDepth", "\[Rule]", "1"}]}], " ", "]"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.905694462163437*^9, 3.905694478942039*^9}, {
   3.905697309999281*^9, 3.905697352099519*^9}, {3.905698637086853*^9, 
   3.905698637247707*^9}, {3.9056993097841167`*^9, 3.905699372508963*^9}, {
   3.905701884187395*^9, 3.905701885054824*^9}, {3.905767492744175*^9, 
   3.9057674935249777`*^9}, 3.9057678324661016`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"6b95acc6-d4b4-4124-a58e-667c15c5744a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9058765466792107`*^9, 3.9059023437146597`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"d0105400-c38f-4ca4-8117-2d230db5d1ad"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9058765466792107`*^9, 3.9059023437155857`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"92ca3cfb-fd42-4198-aaf8-61ddaf7404d1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"48305ff8-83b9-4d5a-8570-\
85b25d4a4a26"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Tools\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Tools`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"$ContextPath", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "@", 
   RowBox[{"Prepend", "[", 
    RowBox[{
    "$ContextPath", ",", 
     "\"\<FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\>\""}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.890825576987958*^9, {
   3.890987450098063*^9, 3.8909874502616673`*^9}, {3.891159388110983*^9, 
   3.891159388420541*^9}, {3.891159688056053*^9, 3.891159704172017*^9}, {
   3.891748927421254*^9, 3.8917489278823643`*^9}, {3.891749223961915*^9, 
   3.891749231277231*^9}, {3.891749519456523*^9, 3.891749519771348*^9}, {
   3.90515611186259*^9, 3.905156112130745*^9}, {3.90517426920163*^9, 
   3.905174278720889*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Kernel/Tools/NiceOutput.wl\"\>"], "Output",
 CellChangeTimes->{3.905771674158085*^9, 3.9059013861507807`*^9, 
  3.905901465913529*^9, 3.905901539402006*^9, 3.905901585805469*^9, 
  3.905901658793456*^9, 3.905901941569633*^9, 3.905902290854824*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"1dee32aa-cb36-486d-95ff-87645c65daec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\"\>", 
   ",", "\<\"FernandoDuarte`LongRunRisk`Tools`NiceOutput`\"\>", 
   ",", "\<\"Wolfram`Chatbook`\"\>", ",", "\<\"System`\"\>", 
   ",", "\<\"Global`\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905771674158085*^9, 3.9059013861507807`*^9, 
  3.905901465913529*^9, 3.905901539402006*^9, 3.905901585805469*^9, 
  3.905901658793456*^9, 3.905901941569633*^9, 3.9059022940936213`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"187cad3a-f541-4915-a9db-f627ac9ee346"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Get", "@", 
   RowBox[{"Get", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<FernandoDuarte/LongRunRisk\>\"", ",", "\"\<Models.wl\>\""}], "}"}],
      "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"msp", "=", "FernandoDuarte`LongRunRisk`Models"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBY", "=", 
   RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modBKY", "=", 
   RowBox[{"msp", "[", "\"\<BKY\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRC", "=", 
   RowBox[{"msp", "[", "\"\<NRC\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modDES", "=", 
   RowBox[{"msp", "[", "\"\<DES\>\"", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modNRCStochVol", "=", 
   RowBox[{"msp", "[", "\"\<NRCStochVol\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"myModels", "=", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<BY\>\"", "->", "modBY"}], ",", 
       RowBox[{"\"\<BKY\>\"", "->", "modBKY"}], ",", 
       RowBox[{"\"\<NRC\>\"", "->", "modNRC"}], ",", 
       RowBox[{"\"\<DES\>\"", "->", "modDES"}], ",", 
       RowBox[{"\"\<NRCStochVol\>\"", "->", "modNRCStochVol"}]}], " ", 
      "|>"}]}], ";"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.905156041870823*^9, 3.905156053614505*^9}, {
   3.905156126678938*^9, 3.90515613250208*^9}, 3.9051568191108217`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"71bc6bd0-682a-416d-a9b9-326354ff7381"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"inspect", " ", "visually"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "symbols", " ", "should", " ", "not", " ", "display", " ", "their", " ", 
    "context"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"myModelsInfo", "=", 
   RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
    RowBox[{"info", "[", "msp", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8917495538778677`*^9, 3.8917495775508204`*^9}, 
   3.891749774892411*^9, {3.891750469682312*^9, 3.891750518135106*^9}, {
   3.891750560646047*^9, 3.8917505628539457`*^9}, {3.891750796319543*^9, 
   3.89175079921373*^9}, {3.891750865678462*^9, 3.891750869123267*^9}, {
   3.905156554989571*^9, 3.905156561743312*^9}, {3.905162519874879*^9, 
   3.90516252701362*^9}, {3.905174323221078*^9, 3.905174326319228*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"fa66d102-52e8-47ef-a717-4581b18664c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Head", "[", "myModelsInfo", "]"}], "===", "Column"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"myModelsInfo", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Head", "[", 
      RowBox[{"myModelsInfo", "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"And", "@@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Head", "/@", 
         RowBox[{"myModelsInfo", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
        ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}]], "Input",
 CellChangeTimes->{{3.891751937937875*^9, 3.891751940577396*^9}, {
  3.905157042557342*^9, 3.9051570514361677`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"de4d8b00-e488-4f08-9a8c-39ba3fa2970e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905771680028235*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"0e794e4f-5a93-46ce-9ba9-bfd67fc976d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "check", " ", "that", " ", "Info", " ", "is", " ", "correct", " ", "when", 
    " ", "model", " ", "key", " ", "does", " ", "not", " ", "match", " ", 
    "shortname"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"justBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<BY\>\"", "->", 
       RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"infoBY", "=", 
     RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
      RowBox[{"info", "[", "justBY", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"newBY", "=", 
     RowBox[{"<|", 
      RowBox[{"\"\<myModel\>\"", "->", 
       RowBox[{"msp", "[", "\"\<BY\>\"", "]"}]}], "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"infoNewBY", "=", 
     RowBox[{"PacletizedResourceFunctions`SetSymbolsContext", "@", 
      RowBox[{"info", "[", "newBY", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"infoBY", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
       "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"infoBY", "[", 
        RowBox[{"[", 
         RowBox[{
         "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",",
           "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
        "]"}], "===", 
       RowBox[{"x", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"infoNewBY", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], "]"}], "==", 
       "\"\<BY\>\""}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"infoNewBY", "[", 
        RowBox[{"[", 
         RowBox[{
         "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "4", ",", "1", ",",
           "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
        "]"}], "===", 
       RowBox[{"x", "[", "t", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.890140021630383*^9, 3.890140040264176*^9}, {
   3.8911598232359867`*^9, 3.891159824939945*^9}, 3.891159870680977*^9, {
   3.8911649478485518`*^9, 3.891164969623293*^9}, 3.8911651835823393`*^9, 
   3.89116566169151*^9, {3.891170529265967*^9, 3.891170540528756*^9}, 
   3.891172091915544*^9, 3.891751026146418*^9, {3.891751212056683*^9, 
   3.8917512180969152`*^9}, {3.89175130841641*^9, 3.8917513106188173`*^9}, {
   3.9051566553259*^9, 3.905156674635653*^9}, {3.905156794657361*^9, 
   3.905156797851418*^9}, {3.9051568677703733`*^9, 3.9051568805673037`*^9}, {
   3.905156947197817*^9, 3.905157038104455*^9}, {3.9051745700694113`*^9, 
   3.9051745829817963`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"edb52da4-30c0-4d74-9e45-a6904b3356f4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905771680262774*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"7efb3722-9333-4c1b-99df-c76d4b07dd01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "all", " ", "be", " ", "True", " ", "if", " ", "formatting",
     " ", "is", " ", "correct"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Head", "[", "infoBY", "]"}], "===", "Column"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"infoBY", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"infoBY", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Head", "/@", 
          RowBox[{"infoBY", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
         ")"}]}], ")"}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"Head", "[", "infoNewBY", "]"}], "===", "Column"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"infoNewBY", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "===", "List"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"infoNewBY", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "===", "OpenerView"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"And", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", "Grid"}], "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Head", "/@", 
          RowBox[{"infoNewBY", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", ";;", ",", "1", ",", "2"}], "]"}], "]"}]}], 
         ")"}]}], ")"}]}]}], "\[IndentingNewLine]", "}"}]}]}]], "Input",
 CellChangeTimes->{{3.891752016529977*^9, 3.8917520312748423`*^9}, {
  3.905157071597375*^9, 3.905157098838859*^9}, {3.905162589279602*^9, 
  3.905162601134802*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"109cf052-9257-409b-9a7a-09066bdd590e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905771680266498*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"bc07579d-e9b8-4d4d-b195-d2c3af8609b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"localPi", "=", "3.14"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "3.14", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"3.14", ",", 
        RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"3.14", ",", 
        RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "localPi", "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"localPi", ",", 
        RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"localPi", ",", 
        RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "\[CapitalPi]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"\[CapitalPi]", ",", 
        RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", "Pi", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"N", "[", "Pi", "]"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"3.14", "*", 
        RowBox[{"10", "^", 
         RowBox[{"(", 
          RowBox[{"-", "7"}], ")"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
numberFormattingTemplate", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
           "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext",
             "[", "delta", "]"}], "/", "2"}], "/.", 
          RowBox[{
          "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`stripContext", 
           "[", 
           RowBox[{"{", 
            RowBox[{"delta", "->", "0.99"}], "}"}], "]"}]}], "}"}], "]"}], 
       "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}], "===", 
  RowBox[{"{", 
   RowBox[{
   "\"\<3.14\>\"", ",", "\"\<3.14`\>\"", ",", "\"\<3.14\>\"", ",", 
    "\"\<3.14\>\"", ",", "\"\<3.14`\>\"", ",", "\"\<3.14\>\"", ",", 
    "\"\<\[CapitalPi]\>\"", ",", "\"\<\\\\[CapitalPi]\>\"", ",", 
    "\"\<3.141592653589793\>\"", ",", "\"\<3.141592653589793\>\"", ",", 
    "\"\<3.14*^-7\>\"", ",", "\"\<{0.495}\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.905175192106395*^9, 3.905175202058524*^9}, 
   3.90577160897528*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"ddd0a12f-6c8b-43f7-b520-acdc598da555"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.905771680273609*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"e9a18db5-56a0-4163-ab47-175178600eb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "should", " ", "be", " ", "True", " ", "if", " ", "string", " ", "has", 
    " ", "linebreaks", " ", "\\n", " ", "and", " ", 
    RowBox[{"tabs", " ", "\\", "t"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Not", "@", 
   RowBox[{"StringFreeQ", "[", 
    RowBox[{
     RowBox[{
     "FernandoDuarte`LongRunRisk`Tools`NiceOutput`Private`\
stringFormattingTemplate", "[", 
      "\"\<Long-run risk model with stochastic volatility in the original \
2004 paper by Bansal and Yaron\>\"", "]"}], ",", 
     RowBox[{"\"\<\\t\>\"", "|", "\"\<\\n\>\""}]}], "]"}]}]}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"4cf153e5-011d-4984-8223-9fd6d39018ea"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.9057716802774363`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"a02645ea-a3e5-4a5b-ba93-726e3a908a55"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"check", " ", "re"}], "-", 
    RowBox[{
    "creating", " ", "formatting", " ", "of", " ", "model", " ", 
     "definitions", " ", "in", " ", "Catalog"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Catalog`\>\"", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nb", "=", 
     RowBox[{"CreateNotebook", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rawModels", "=", 
     RowBox[{"toCatalog", "[", 
      RowBox[{"msp", ",", 
       RowBox[{"Keys", "@", 
        RowBox[{"First", "@", "models"}]}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"content", "=", 
     RowBox[{"formatModels", "[", "rawModels", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"NotebookWrite", "[", 
     RowBox[{"nb", ",", "content"}], "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"opens", " ", "new", " ", "notebook"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SelectionMove", "[", 
     RowBox[{"nb", ",", "All", ",", "Notebook"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FrontEndTokenExecute", "[", 
     RowBox[{"nb", ",", "\"\<ClearCellOptions\>\""}], "]"}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.890015347069269*^9, 3.8900153891524878`*^9}, {
   3.890015708961783*^9, 3.890015758379883*^9}, {3.905157155789332*^9, 
   3.905157156198612*^9}, {3.9051580203248167`*^9, 3.905158034265682*^9}, {
   3.9051580945476522`*^9, 3.9051580949519587`*^9}, {3.9051581597959547`*^9, 
   3.905158193174815*^9}, {3.905162434055037*^9, 3.9051624547227917`*^9}, {
   3.90516643520125*^9, 3.905166435486589*^9}, {3.905166517901642*^9, 
   3.905166518608368*^9}, {3.9051669180156803`*^9, 3.9051669185400267`*^9}, 
   3.90517395713421*^9, {3.9057715547125893`*^9, 3.905771561273679*^9}, {
   3.905771625545314*^9, 3.9057716304048147`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"acd3cbc9-69ea-418c-b887-28d34b1d6cb4"]
}, Closed]]
},
WindowSize->{1529, 867},
WindowMargins->{{-1685, Automatic}, {-38, Automatic}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
AutoStyleOptions->{"SymbolContextStyles"->{
 "System`" -> {}, "Global`" -> {}, Automatic -> {}, 
  "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`" -> {{Automatic}}}},
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"70b4b93a-a1f6-40e6-903f-48381b8b25a9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 241, 5, 37, "Input",ExpressionUUID->"57a3a6b7-5ed1-4642-9045-f2f5b9fe3ba7"],
Cell[CellGroupData[{
Cell[824, 29, 1930, 41, 142, "Input",ExpressionUUID->"146e60d1-374f-4bd7-9d1b-a786a21a5c6c"],
Cell[2757, 72, 463, 8, 42, "Output",ExpressionUUID->"f644f909-e830-46b4-8c32-760d7e3526d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3257, 85, 255, 4, 67, "Subsection",ExpressionUUID->"6b6a8cf6-4a55-4c0b-835d-5f3e6c853d88"],
Cell[3515, 91, 341, 9, 37, "Input",ExpressionUUID->"c5649f08-7498-4fc9-9c42-3f33698c0a72"],
Cell[CellGroupData[{
Cell[3881, 104, 966, 16, 64, "Input",ExpressionUUID->"d1369107-4139-4dd1-97c7-29279f71e417"],
Cell[4850, 122, 223, 2, 42, "Output",ExpressionUUID->"77100aa6-1068-4c85-a235-f73685ae7409"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5110, 129, 328, 5, 37, "Input",ExpressionUUID->"f503f936-1917-49c3-9e41-605f2ccd4426"],
Cell[5441, 136, 196, 2, 42, "Output",ExpressionUUID->"1fc5850d-7387-4f00-a039-ed47ad0815c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5674, 143, 700, 14, 116, "Input",ExpressionUUID->"ef31a243-f4a9-4065-97c9-93852360dfdf"],
Cell[CellGroupData[{
Cell[6399, 161, 395, 9, 29, "Print",ExpressionUUID->"ff31a9a1-28dd-4472-ade6-883f29167e8b"],
Cell[6797, 172, 291, 5, 29, "Print",ExpressionUUID->"12471470-5780-4eb9-bc9a-d8481a0e481d"]
}, Open  ]],
Cell[7103, 180, 4815, 87, 42, "Output",ExpressionUUID->"744e9162-a01c-48dc-9a2a-b4ddef431787"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11955, 272, 1969, 41, 350, "Input",ExpressionUUID->"cb235074-df95-44d7-a0ca-7e5ab21c0383"],
Cell[CellGroupData[{
Cell[13949, 317, 393, 9, 29, "Print",ExpressionUUID->"13a4838c-f03a-457e-bebe-de0d88d7f7c7"],
Cell[14345, 328, 287, 5, 29, "Print",ExpressionUUID->"966a161f-056b-4d89-adc9-e1f396284c9c"]
}, Open  ]],
Cell[14647, 336, 7295, 127, 42, "Output",ExpressionUUID->"271a00cc-b9c4-45f5-a3db-b4b1ff2f22fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21979, 468, 1458, 28, 142, "Input",ExpressionUUID->"d6de8f4f-599d-4b42-a087-537080fe3553"],
Cell[CellGroupData[{
Cell[23462, 500, 399, 9, 29, "Print",ExpressionUUID->"8fa02a13-47e7-42b2-84ce-74a23a8acd57"],
Cell[23864, 511, 291, 5, 29, "Print",ExpressionUUID->"535c3c35-c31f-420c-8dfe-659d6592af74"]
}, Open  ]],
Cell[24170, 519, 6310, 112, 42, "Output",ExpressionUUID->"55211160-17a3-45e5-8fe0-43b130245fb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30517, 636, 900, 18, 142, "Input",ExpressionUUID->"f6fe5571-8f1b-4149-81a8-2903abb09f6a"],
Cell[CellGroupData[{
Cell[31442, 658, 394, 9, 29, "Print",ExpressionUUID->"94b77442-6ff0-441f-9ba3-1c24b6e37d0b"],
Cell[31839, 669, 288, 5, 29, "Print",ExpressionUUID->"5408ae7f-f157-4cfd-8845-164782a0f3a1"]
}, Open  ]],
Cell[32142, 677, 6186, 111, 42, "Output",ExpressionUUID->"3133eccf-ad20-4ec4-afd2-fa8ddae47910"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38365, 793, 905, 18, 116, "Input",ExpressionUUID->"729fb818-89ae-4dc4-96fd-b3db7ca4ec6b"],
Cell[CellGroupData[{
Cell[39295, 815, 395, 9, 29, "Print",ExpressionUUID->"87936915-9893-4279-9cf6-b5aeb3982871"],
Cell[39693, 826, 289, 5, 29, "Print",ExpressionUUID->"3ccef2a6-d922-4cc3-a1f8-fc2001ea0200"]
}, Open  ]],
Cell[39997, 834, 6127, 108, 42, "Output",ExpressionUUID->"a72caf48-c31c-4bcc-894f-d04d3235fedd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46161, 947, 1967, 47, 272, "Input",ExpressionUUID->"f1399781-59ac-4844-856a-2b42e20a062f"],
Cell[CellGroupData[{
Cell[48153, 998, 395, 9, 29, "Print",ExpressionUUID->"30a854a3-8521-4750-9bfe-26eab38760ba"],
Cell[48551, 1009, 289, 5, 29, "Print",ExpressionUUID->"afe88438-98b7-4d71-aea3-1f492209d2d7"]
}, Open  ]],
Cell[48855, 1017, 8288, 141, 42, "Output",ExpressionUUID->"90672775-5d9f-4676-a334-543c0a44c594"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57180, 1163, 3186, 68, 350, "Input",ExpressionUUID->"eeebd2b0-bfe9-4792-9fd6-98614b1bc6b9"],
Cell[CellGroupData[{
Cell[60391, 1235, 399, 9, 29, "Print",ExpressionUUID->"9f365288-b901-425d-a6ad-e3b37a7228ab"],
Cell[60793, 1246, 293, 5, 29, "Print",ExpressionUUID->"1b665346-fe40-486c-b89d-ac29f8952fae"]
}, Open  ]],
Cell[61101, 1254, 10471, 169, 42, "Output",ExpressionUUID->"3a960a57-5438-443d-b7ef-92900c285d83"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71609, 1428, 2676, 69, 376, "Input",ExpressionUUID->"af41c96d-a57c-4a73-b8bc-431ba8de9158"],
Cell[CellGroupData[{
Cell[74310, 1501, 395, 9, 29, "Print",ExpressionUUID->"661d2632-2ad5-4a8e-93f1-19703314e6f0"],
Cell[74708, 1512, 289, 5, 29, "Print",ExpressionUUID->"e08ce31b-c1ac-4064-abab-39177863deef"]
}, Open  ]],
Cell[75012, 1520, 10498, 176, 42, "Output",ExpressionUUID->"70c99110-d0a9-40d9-83fc-cb661f6821a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85547, 1701, 5334, 113, 558, "Input",ExpressionUUID->"24e75f0e-c203-42b9-b7ec-cafef50368ed"],
Cell[CellGroupData[{
Cell[90906, 1818, 394, 9, 29, "Print",ExpressionUUID->"db2caf44-e9fc-441e-af97-fdae0f1f63c1"],
Cell[91303, 1829, 289, 5, 29, "Print",ExpressionUUID->"34f68866-d124-4a9c-b791-f1a80e618141"]
}, Open  ]],
Cell[91607, 1837, 16378, 274, 42, "Output",ExpressionUUID->"1e136e14-a3ef-4268-a5ae-eccdf622daf9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108022, 2116, 1486, 29, 143, "Input",ExpressionUUID->"51059a36-3376-434a-afec-57a2920c91f1"],
Cell[CellGroupData[{
Cell[109533, 2149, 395, 9, 29, "Print",ExpressionUUID->"63b9827c-fec8-494a-bb53-273693b4abf0"],
Cell[109931, 2160, 291, 5, 29, "Print",ExpressionUUID->"a6dc643d-437c-42f2-ade5-92d5fdf1ee6e"]
}, Open  ]],
Cell[110237, 2168, 11658, 193, 42, "Output",ExpressionUUID->"5db50d26-bd1b-42b7-b3ad-f7daf0eb7eba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121932, 2366, 195, 3, 37, "Input",ExpressionUUID->"4df9fc3e-cf2d-4170-a830-f3a2f16ad1e2"],
Cell[122130, 2371, 197, 2, 42, "Output",ExpressionUUID->"42fa2513-565c-4d0b-9225-2f18c6316240"]
}, Open  ]],
Cell[122342, 2376, 1657, 37, 428, "Input",ExpressionUUID->"7cb55225-35b3-473e-8878-a5e3dda406d2"],
Cell[124002, 2415, 2308, 53, 532, "Input",ExpressionUUID->"39040be4-d00b-4950-835c-895457c013a2"],
Cell[CellGroupData[{
Cell[126335, 2472, 1573, 37, 246, "Input",ExpressionUUID->"a687239e-d3c8-4e10-b6b9-c91a3e1da4ba"],
Cell[127911, 2511, 413, 8, 69, "Output",ExpressionUUID->"d9e95040-8dd5-413f-976c-f1396f96f943"],
Cell[128327, 2521, 175, 2, 42, "Output",ExpressionUUID->"6074b3b8-759c-4b98-b59f-f6f9aa5d8bdd"],
Cell[128505, 2525, 413, 8, 69, "Output",ExpressionUUID->"250aaa93-30d6-4190-9aad-accaaf0d2cf0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128955, 2538, 177, 3, 37, "Input",ExpressionUUID->"ab382fa0-c0d9-4cc8-8ad6-26c3aab6ba85"],
Cell[129135, 2543, 23367, 445, 76, "Output",ExpressionUUID->"64c940cd-5dbb-46c6-b9d5-f87b337121af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152539, 2993, 3577, 92, 480, "Input",ExpressionUUID->"6b95acc6-d4b4-4124-a58e-667c15c5744a"],
Cell[156119, 3087, 178, 2, 42, "Output",ExpressionUUID->"d0105400-c38f-4ca4-8117-2d230db5d1ad"],
Cell[156300, 3091, 178, 2, 42, "Output",ExpressionUUID->"92ca3cfb-fd42-4198-aaf8-61ddaf7404d1"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[156527, 3099, 214, 4, 46, "Subsection",ExpressionUUID->"48305ff8-83b9-4d5a-8570-85b25d4a4a26"],
Cell[CellGroupData[{
Cell[156766, 3107, 1579, 34, 90, "Input",ExpressionUUID->"762e418e-ce0c-4b3f-bc5c-39e5a850b017"],
Cell[158348, 3143, 409, 5, 42, "Output",ExpressionUUID->"1dee32aa-cb36-486d-95ff-87645c65daec"],
Cell[158760, 3150, 561, 9, 42, "Output",ExpressionUUID->"187cad3a-f541-4915-a9db-f627ac9ee346"]
}, Open  ]],
Cell[159336, 3162, 1619, 42, 220, "Input",ExpressionUUID->"71bc6bd0-682a-416d-a9b9-326354ff7381"],
Cell[160958, 3206, 934, 17, 90, "Input",ExpressionUUID->"fa66d102-52e8-47ef-a717-4581b18664c3"],
Cell[CellGroupData[{
Cell[161917, 3227, 1204, 32, 168, "Input",ExpressionUUID->"de4d8b00-e488-4f08-9a8c-39ba3fa2970e"],
Cell[163124, 3261, 152, 2, 42, "Output",ExpressionUUID->"0e794e4f-5a93-46ce-9ba9-bfd67fc976d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163313, 3268, 2964, 67, 350, "Input",ExpressionUUID->"edb52da4-30c0-4d74-9e45-a6904b3356f4"],
Cell[166280, 3337, 152, 2, 42, "Output",ExpressionUUID->"7efb3722-9333-4c1b-99df-c76d4b07dd01"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166469, 3344, 2393, 65, 324, "Input",ExpressionUUID->"109cf052-9257-409b-9a7a-09066bdd590e"],
Cell[168865, 3411, 152, 2, 42, "Output",ExpressionUUID->"bc07579d-e9b8-4d4d-b195-d2c3af8609b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169054, 3418, 3647, 88, 480, "Input",ExpressionUUID->"ddd0a12f-6c8b-43f7-b520-acdc598da555"],
Cell[172704, 3508, 152, 2, 42, "Output",ExpressionUUID->"e9a18db5-56a0-4163-ab47-175178600eb2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172893, 3515, 706, 16, 90, "Input",ExpressionUUID->"4cf153e5-011d-4984-8223-9fd6d39018ea"],
Cell[173602, 3533, 154, 2, 42, "Output",ExpressionUUID->"a02645ea-a3e5-4a5b-ba93-726e3a908a55"]
}, Open  ]],
Cell[173771, 3538, 2130, 52, 301, "Input",ExpressionUUID->"acd3cbc9-69ea-418c-b887-28d34b1d6cb4"]
}, Closed]]
}
]
*)

