(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     94420,       2071]
NotebookOptionsPosition[     45739,       1190]
NotebookOutlinePosition[     92099,       2045]
CellTagsIndexPosition[     92056,       2042]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"8a4e8bf4-2087-4d52-acf6-fdfb8e9b2b73"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DirectoryName", "[", 
       RowBox[{
        RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testContextBase", "=", 
   RowBox[{"FileBaseName", "[", "testFileName", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$ContextPath", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"$ContextPath", ",", 
     RowBox[{"Except", "[", "\"\<PacletizedResourceFunctions`\>\"", "]"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9, {
   3.889998928469849*^9, 3.889998928670561*^9}, {3.890676553021196*^9, 
   3.890676564028514*^9}, 3.890676636594749*^9, {3.890679618620262*^9, 
   3.89067961902995*^9}, {3.8908254134370813`*^9, 3.890825413876319*^9}, {
   3.890825459205497*^9, 3.890825473041605*^9}, {3.890825503118348*^9, 
   3.8908255374530487`*^9}, {3.891021675325671*^9, 3.891021675545487*^9}, {
   3.8911588731924877`*^9, 3.891158877904397*^9}, {3.8911592499395514`*^9, 
   3.8911592502376633`*^9}, 3.891705186596882*^9, 3.901503325517468*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"84fc2a40-eb5d-491b-b37f-a5740e843968"],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 
  3.8899056207707977`*^9}},ExpressionUUID->"5216b0c6-0b30-4607-beca-\
83054aa122f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], ";"}]], "Input",\

 CellLabel->"In[6]:=",ExpressionUUID->"e6735427-3487-4d80-a7a0-a170d3f1ed17"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"confirm", "=", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"testContext", "=", 
  RowBox[{
  "\"\<FernandoDuarte`LongRunRisk`Model`\>\"", "<>", "testContextBase", "<>", 
   "\"\<`\>\""}]}]}], "Input",
 CellChangeTimes->{{3.8906795325443907`*^9, 3.8906795357982817`*^9}, 
   3.890679566064293*^9, {3.8906796081672497`*^9, 3.8906796258061447`*^9}, {
   3.890679757679096*^9, 3.890679766260743*^9}, 3.890679874010334*^9, {
   3.89115778716877*^9, 3.8911577875972347`*^9}, {3.891158046655726*^9, 
   3.8911580470847473`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"f27d60aa-814a-4945-813b-9477df02af2b"],

Cell[BoxData[
 RowBox[{"Begin", "[", "\"\<ExogenousEq`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.890680288696157*^9, 3.8906802887021513`*^9}, 
   3.891157128406151*^9, 3.891215702607926*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"66b8ef49-f567-46e6-a1ff-1449d26ea1ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
   "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`\>\"", 
    "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{3.889972291549716*^9, 3.889972376407036*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"6011cbec-7521-493c-b009-40fef28d9959"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "xeq", " ", "can", " ", 
     "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*xeq\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{3.889972308684311*^9, 3.890119108672573*^9, 
  3.890603271134169*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"e2633f79-ec85-4da8-b3f8-1dfe9c81f85e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "symbols", " ", "all", " ", "in", " ", "context", " ", 
     "FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "all", " ", "exogenous", " ", "variables", " ", "are", " ", "in", " ", 
     "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"xeq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<x\>\""}],
                    "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
             ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"pieq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<pi\>\""}], "]"}], "&"}], ")"}]}], "[", "___", "]"}], 
              ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"pibareq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<pibar\>\""}], "]"}], "&"}], ")"}]}], "[", "___", 
               "]"}], ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], 
        ",", "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}]\
, "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"sgeq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<sg\>\""}], "]"}], "&"}], ")"}]}], "[", "___", "]"}], 
              ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"sxeq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<sx\>\""}], "]"}], "&"}], ")"}]}], "[", "___", "]"}], 
              ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"sceq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<sc\>\""}], "]"}], "&"}], ")"}]}], "[", "___", "]"}], 
              ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"speq", "[", "t", "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"var_Symbol", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"MatchQ", "[", 
                   RowBox[{
                    RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                    "\"\<sp\>\""}], "]"}], "&"}], ")"}]}], "[", "___", "]"}], 
              ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Not", "[", 
       RowBox[{
        RowBox[{"{", "}"}], "===", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Symbol", "/@", 
           RowBox[{
           "Names", "[", 
            "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"", 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"var_Symbol", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dc\>\""}], 
               "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
         "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Not", "[", 
       RowBox[{
        RowBox[{"{", "}"}], "===", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{"Symbol", "/@", 
           RowBox[{
           "Names", "[", 
            "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"", 
            "]"}]}], ",", 
          RowBox[{
           RowBox[{"var_Symbol", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MatchQ", "[", 
               RowBox[{
                RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dd\>\""}], 
               "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
         "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Symbol", "/@", 
              RowBox[{
              "Names", "[", 
               "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"\
", "]"}]}], ",", 
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dc\>\""}],
                   "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
            "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"(", 
          RowBox[{"Context", "/@", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"Symbol", "/@", 
              RowBox[{
              "Names", "[", 
               "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"\
", "]"}]}], ",", 
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dd\>\""}],
                   "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
            "]"}]}], ")"}]}], ",", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.890119101180563*^9, 3.890119149584676*^9}, 
   3.890603272283004*^9, 3.8929940462721663`*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"6e1e508c-8f45-46ae-a7ed-d27ac704690b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "all", " ", "exogenous", " ", "variables", " ", "are", " ", "in", " ", 
     "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "#", "===", 
         "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
        ")"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Context", "/@", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"var_Symbol", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringDrop", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"-", "2"}]}], "]"}], "&"}], "/@", 
                  "$exogenousVars"}], ",", 
                 RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], 
              ")"}]}], "[", "__", "]"}], ":>", "var"}], ",", "Infinity"}], 
         "]"}]}], ")"}]}], ")"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.8929940981311893`*^9, {3.892994198736478*^9, 3.89299420304391*^9}, 
   3.892994276159781*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"fd7fa869-0128-42bc-8639-2af2a7c4dfae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "all", " ", "shocks", " ", "are", " ", "in", " ", "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`Shocks`\>\""}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "#", "===", "\"\<FernandoDuarte`LongRunRisk`Model`Shocks`\>\""}], 
        ")"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Context", "/@", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"var_Symbol", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MatchQ", "[", 
                 RowBox[{
                  RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<eps\>\""}],
                  "]"}], "&"}], ")"}]}], "[", "__", "]"}], "[", "__", "]"}], ":>",
            "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{
  3.892994100367319*^9, {3.892994206839141*^9, 3.89299420809296*^9}, 
   3.892994270863389*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"be0a7c4a-2cd6-4e5b-a50b-43fac34edc53"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "all", " ", "parameters", " ", "are", " ", "in", " ", "context", " ", 
     "\"\<FernandoDuarte`LongRunRisk`Model`Parameters`\>\""}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "#", "===", "\"\<FernandoDuarte`LongRunRisk`Model`Parameters`\>\""}], 
        ")"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Context", "/@", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"var_Symbol", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
               "FernandoDuarte`LongRunRisk`Model`Parameters`$parameters", ",", 
                RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], 
             ")"}]}], ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], 
     ")"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.891314488000304*^9, 3.891314607661008*^9}, 
   3.8929940825332403`*^9, 3.89299411513941*^9, {3.892994214512212*^9, 
   3.8929942148301773`*^9}, 3.892994263820116*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"201e9bc5-ec95-46b1-8d0a-353f625179fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "different", " ", "contexts", " ", "for", " ", "t", " ", "and", " ", "eq",
      " ", "vars"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"xeq", "[", "t", "]"}], ",", "foo`t"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"xeq", "[", "t", "]"}], ",", "t"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"xeq", "[", "foo`t", "]"}], ",", "t"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"xeq", "[", "foo`t", "]"}], ",", "foo`t"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"foo`xeq", "[", "t", "]"}], "===", 
         RowBox[{"xeq", "[", "t", "]"}]}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Not", "@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"xeq", "[", "t", "]"}], "===", 
         RowBox[{"xeq", "[", "foo`t", "]"}]}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.892994254365101*^9, 3.8929942556561117`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"29d7abeb-2bec-400d-9b00-a1037d3e0f15"],

Cell[BoxData[
 RowBox[{"End", "[", "]"}]], "Input",
 CellChangeTimes->{{3.890680295645965*^9, 3.89068029650622*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"c41c42a2-951a-447c-b89b-568a75956628"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"add", " ", 
    RowBox[{"Begin", "[", "\"\<Context`\>\"", "]"}], " ", "and", " ", 
    RowBox[{"End", "[", "]"}], " ", "to", " ", "wlt", " ", "file"}], "*)"}], 
  "\n", 
  RowBox[{"(*", 
   RowBox[{"helper", " ", "functions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "countLines", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"countLines", "[", "file_String", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"n", "=", "1"}], ",", "\[IndentingNewLine]", "temp"}], 
       "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"n", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", "readStream", "}"}]}], ";", "\[IndentingNewLine]", 
       "n"}]}], "\[IndentingNewLine]", "]"}]}], "\n", 
   RowBox[{"ClearAll", "[", "replaceNthRecord", "]"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"replaceNthRecord", "[", 
     RowBox[{"file_String", ",", "n_Integer", ",", "replaceWith_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"readStream", "=", 
         RowBox[{"OpenRead", "[", "file", "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"writeStream", "=", 
         RowBox[{"OpenWrite", "[", 
          RowBox[{"file", "<>", "\"\<temp\>\""}], "]"}]}], ",", 
        "\[IndentingNewLine]", "temp"}], "\[IndentingNewLine]", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"WriteLine", "[", 
          RowBox[{"writeStream", ",", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"n", "-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"WriteLine", "[", 
        RowBox[{"writeStream", ",", 
         RowBox[{
          RowBox[{"ReadLine", "[", "readStream", "]"}], "<>", 
          "\"\< \\r\\n\>\"", "<>", "replaceWith"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"temp", "=!=", "EndOfFile"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"temp", "=", 
           RowBox[{"ReadLine", "[", "readStream", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"UnsameQ", "[", 
             RowBox[{"temp", ",", "EndOfFile"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"WriteLine", "[", 
             RowBox[{"writeStream", ",", "temp"}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", 
       RowBox[{"Close", "/@", 
        RowBox[{"{", 
         RowBox[{"readStream", ",", "writeStream"}], "}"}]}]}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"insert", " ", "into", " ", "wlt", " ", "file"}], "*)"}], "\n", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{
    "testFileName", ",", "1", ",", "\"\<Begin[\\\"ExogenousEq`\\\"]\>\""}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"numLines", "=", 
    RowBox[{"countLines", "[", "testFileName", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"replaceNthRecord", "[", 
    RowBox[{"testFileName", ",", 
     RowBox[{"numLines", "-", "3"}], ",", " ", "\"\<End[]\>\""}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CopyFile", "[", 
     RowBox[{
      RowBox[{"testFileName", "<>", "\"\<temp\>\""}], ",", "testFileName", 
      ",", 
      RowBox[{"OverwriteTarget", "->", "True"}]}], "]"}], ";"}], "\n", 
   RowBox[{"DeleteFile", "[", 
    RowBox[{"testFileName", "<>", "\"\<temp\>\""}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.890686194230386*^9, 3.890686228283702*^9}, {
  3.8911593195689373`*^9, 3.8911593372713346`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"f523e5c9-2339-432b-9534-80f01bcc74e5"],

Cell[BoxData[
 RowBox[{"tr", "=", 
  RowBox[{"TestReport", "[", "testFileName", "]"}]}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"8c2b6fe3-3800-4ad1-8b5d-4bd25ea4f9ce"]
}, Closed]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 
  3.889905629759961*^9}},ExpressionUUID->"110fa690-a939-4013-acf2-\
a07d9942e533"],

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "2"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Model\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Model`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, {
   3.889998753242611*^9, 3.8899987613556004`*^9}, 3.890825576987958*^9, {
   3.890987450098063*^9, 3.8909874502616673`*^9}, {3.891159388110983*^9, 
   3.891159388420541*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"513b8a79-3a1e-48f6-acce-3c3c4f23a5ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"allShocks", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ResourceFunction", "[", "\"\<SetSymbolsContext\>\"", "]"}], 
      "[", 
      RowBox[{"ToExpression", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", "<>", "\"\<[t]\>\""}], ")"}], "&"}], "/@", 
         "$exogenousVars"}], ")"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"eps", "[", "var_", "]"}], "[", "t_", "]"}], ":>", 
      RowBox[{
       RowBox[{"ToString", "[", "var", "]"}], "<>", "\"\<eq\>\""}]}], ",", 
     "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"SubsetQ", "[", 
  RowBox[{"$exogenousVars", ",", 
   RowBox[{"DeleteDuplicates", "@", "allShocks"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8913142070537786`*^9, 3.891314434192008*^9}, {
  3.891314466313642*^9, 3.891314472490741*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"a0007a04-6d3f-492b-a035-ffb8afbd0d59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "all", " ", "exogenous", " ", "variables", " ", "are", " ", "in", " ", 
    "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"xeq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<x\>\""}], 
                  "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"pieq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<pi\>\""}],
                   "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"pibareq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", 
                   "\"\<pibar\>\""}], "]"}], "&"}], ")"}]}], "[", "___", 
              "]"}], ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"sgeq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<sg\>\""}],
                   "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"sxeq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<sx\>\""}],
                   "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"sceq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<sc\>\""}],
                   "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"speq", "[", "t", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"var_Symbol", "?", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"MatchQ", "[", 
                  RowBox[{
                   RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<sp\>\""}],
                   "]"}], "&"}], ")"}]}], "[", "___", "]"}], ":>", "var"}], 
            ",", "Infinity"}], "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Not", "[", 
      RowBox[{
       RowBox[{"{", "}"}], "===", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Symbol", "/@", 
          RowBox[{
          "Names", "[", 
           "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"", 
           "]"}]}], ",", 
         RowBox[{
          RowBox[{"var_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dc\>\""}], 
              "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
        "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Not", "[", 
      RowBox[{
       RowBox[{"{", "}"}], "===", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"Symbol", "/@", 
          RowBox[{
          "Names", "[", 
           "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"", 
           "]"}]}], ",", 
         RowBox[{
          RowBox[{"var_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MatchQ", "[", 
              RowBox[{
               RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dd\>\""}], 
              "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
        "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Symbol", "/@", 
             RowBox[{
             "Names", "[", 
              "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"\
", "]"}]}], ",", 
            RowBox[{
             RowBox[{"var_Symbol", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MatchQ", "[", 
                 RowBox[{
                  RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dc\>\""}], 
                 "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
           "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "@", 
        RowBox[{"(", 
         RowBox[{"Context", "/@", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"Symbol", "/@", 
             RowBox[{
             "Names", "[", 
              "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`*\>\"\
", "]"}]}], ",", 
            RowBox[{
             RowBox[{"var_Symbol", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MatchQ", "[", 
                 RowBox[{
                  RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<dd\>\""}], 
                 "]"}], "&"}], ")"}]}], ":>", "var"}], ",", "Infinity"}], 
           "]"}]}], ")"}]}], ",", 
       "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
      "]"}]}], "\[IndentingNewLine]", "}"}]}]}]], "Input",
 CellChangeTimes->{{3.892991381424305*^9, 3.8929916518802958`*^9}, {
  3.8929916861199837`*^9, 3.892991779484473*^9}, {3.892992066667197*^9, 
  3.892992102299266*^9}, {3.892992774657414*^9, 3.892992841499052*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"0383a0fb-27ae-4412-a3cf-b2cc6cd91322"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "all", " ", "exogenous", " ", "variables", " ", "are", " ", "in", " ", 
    "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
       "#", "===", 
        "\"\<FernandoDuarte`LongRunRisk`Model`ExogenousEq`Private`\>\""}], 
       ")"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{"Context", "/@", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"var_Symbol", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"StringDrop", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"-", "2"}]}], "]"}], "&"}], "/@", 
                 "$exogenousVars"}], ",", 
                RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], 
             ")"}]}], "[", "__", "]"}], ":>", "var"}], ",", "Infinity"}], 
        "]"}]}], ")"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.892993737772028*^9, 3.892993762389083*^9}, 
   3.892993820231213*^9, {3.892993909876807*^9, 3.892993921321001*^9}, {
   3.892993957942197*^9, 3.892993975404036*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"3393b5bc-c8b5-4710-8c3f-db19168bfa47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "all", " ", "shocks", " ", "are", " ", "in", " ", "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`Shocks`\>\""}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
        "#", "===", "\"\<FernandoDuarte`LongRunRisk`Model`Shocks`\>\""}], 
        ")"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{"Context", "/@", 
        RowBox[{"Cases", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"var_Symbol", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"MatchQ", "[", 
                 RowBox[{
                  RowBox[{"SymbolName", "[", "#", "]"}], ",", "\"\<eps\>\""}],
                  "]"}], "&"}], ")"}]}], "[", "__", "]"}], "[", "__", "]"}], ":>",
            "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], ")"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.89299304534096*^9, 3.892993331708364*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"1580b28e-03bd-4899-86a8-ed8b7c407bce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "all", " ", "parameters", " ", "are", " ", "in", " ", "context", " ", 
    "\"\<FernandoDuarte`LongRunRisk`Model`Parameters`\>\""}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
       "#", "===", "\"\<FernandoDuarte`LongRunRisk`Model`Parameters`\>\""}], 
       ")"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{"Context", "/@", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"#", "[", "t", "]"}], ")"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"Symbol", "/@", "$exogenousVars"}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"var_Symbol", "?", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
              "FernandoDuarte`LongRunRisk`Model`Parameters`$parameters", ",", 
               
               RowBox[{"SymbolName", "[", "#", "]"}]}], "]"}], "&"}], ")"}]}],
           ":>", "var"}], ",", "Infinity"}], "]"}]}], ")"}]}], 
    ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8929930628202457`*^9, 3.892993074086934*^9}, {
  3.8929933403959827`*^9, 3.892993340674637*^9}, {3.892993382056836*^9, 
  3.892993388417315*^9}, {3.892993430422512*^9, 3.8929934561734447`*^9}, {
  3.8929936732366657`*^9, 3.8929936803494873`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"69d54a51-7303-419f-8f52-382c28dd177e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "different", " ", "contexts", " ", "for", " ", "t", " ", "and", " ", "eq", 
    " ", "vars"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"xeq", "[", "t", "]"}], ",", "foo`t"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Not", "@", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"xeq", "[", "t", "]"}], ",", "t"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"xeq", "[", "foo`t", "]"}], ",", "t"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Not", "@", 
      RowBox[{"FreeQ", "[", 
       RowBox[{
        RowBox[{"xeq", "[", "foo`t", "]"}], ",", "foo`t"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Not", "@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"foo`xeq", "[", "t", "]"}], "===", 
        RowBox[{"xeq", "[", "t", "]"}]}], ")"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"Not", "@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"xeq", "[", "t", "]"}], "===", 
        RowBox[{"xeq", "[", "foo`t", "]"}]}], ")"}]}]}], 
    "\[IndentingNewLine]", "}"}]}]}]], "Input",
 CellChangeTimes->{{3.8899726167879753`*^9, 3.8899726421861687`*^9}, 
   3.889973060122468*^9, {3.890118946451016*^9, 3.890118971417235*^9}, {
   3.890119016281435*^9, 3.89011902196559*^9}, {3.892992860119802*^9, 
   3.892993001999461*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"6319490e-81e1-4afe-918f-752922bd248a"],

Cell[BoxData[{
 RowBox[{"pieq", "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<SetSymbolsContext\>\"", "]"}], "[", 
  RowBox[{"Evaluate", "@", 
   RowBox[{"pieq", "[", "t", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.890119031682557*^9, 3.8901190331633*^9}, 
   3.891196491092162*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"8b12e9ea-8d8e-4d6d-a67c-8f34d0a76726"]
}, Closed]]
},
WindowSize->{1413, 821},
WindowMargins->{{Automatic, -8}, {Automatic, 25}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"93f9d7d3-cf0b-4b4b-a685-d081c83a537a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 149, 3, 37, "Input",ExpressionUUID->"8a4e8bf4-2087-4d52-acf6-fdfb8e9b2b73"],
Cell[710, 25, 1922, 41, 142, "Input",ExpressionUUID->"84fc2a40-eb5d-491b-b37f-a5740e843968"],
Cell[CellGroupData[{
Cell[2657, 70, 209, 4, 67, "Subsection",ExpressionUUID->"5216b0c6-0b30-4607-beca-83054aa122f9"],
Cell[2869, 76, 341, 9, 37, "Input",ExpressionUUID->"e6735427-3487-4d80-a7a0-a170d3f1ed17"],
Cell[3213, 87, 642, 12, 64, "Input",ExpressionUUID->"f27d60aa-814a-4945-813b-9477df02af2b"],
Cell[3858, 101, 271, 4, 37, "Input",ExpressionUUID->"66b8ef49-f567-46e6-a1ff-1449d26ea1ec"],
Cell[4132, 107, 505, 9, 90, "Input",ExpressionUUID->"6011cbec-7521-493c-b009-40fef28d9959"],
Cell[4640, 118, 734, 16, 116, "Input",ExpressionUUID->"e2633f79-ec85-4da8-b3f8-1dfe9c81f85e"],
Cell[5377, 136, 9769, 246, 870, "Input",ExpressionUUID->"6e1e508c-8f45-46ae-a7ed-d27ac704690b"],
Cell[15149, 384, 1913, 51, 194, "Input",ExpressionUUID->"fd7fa869-0128-42bc-8639-2af2a7c4dfae"],
Cell[17065, 437, 1670, 44, 194, "Input",ExpressionUUID->"be0a7c4a-2cd6-4e5b-a50b-43fac34edc53"],
Cell[18738, 483, 1713, 42, 220, "Input",ExpressionUUID->"201e9bc5-ec95-46b1-8d0a-353f625179fb"],
Cell[20454, 527, 1708, 44, 298, "Input",ExpressionUUID->"29d7abeb-2bec-400d-9b00-a1037d3e0f15"],
Cell[22165, 573, 195, 3, 37, "Input",ExpressionUUID->"c41c42a2-951a-447c-b89b-568a75956628"],
Cell[22363, 578, 5072, 118, 1208, "Input",ExpressionUUID->"f523e5c9-2339-432b-9534-80f01bcc74e5"],
Cell[27438, 698, 177, 3, 37, "Input",ExpressionUUID->"8c2b6fe3-3800-4ad1-8b5d-4bd25ea4f9ce"]
}, Closed]],
Cell[CellGroupData[{
Cell[27652, 706, 165, 3, 46, "Subsection",ExpressionUUID->"110fa690-a939-4013-acf2-a07d9942e533"],
Cell[27820, 711, 1032, 23, 90, "Input",ExpressionUUID->"513b8a79-3a1e-48f6-acce-3c3c4f23a5ff"],
Cell[28855, 736, 1002, 26, 90, "Input",ExpressionUUID->"a0007a04-6d3f-492b-a035-ffb8afbd0d59"],
Cell[29860, 764, 9213, 238, 792, "Input",ExpressionUUID->"0383a0fb-27ae-4412-a3cf-b2cc6cd91322"],
Cell[39076, 1004, 1688, 46, 142, "Input",ExpressionUUID->"3393b5bc-c8b5-4710-8c3f-db19168bfa47"],
Cell[40767, 1052, 1400, 39, 142, "Input",ExpressionUUID->"1580b28e-03bd-4899-86a8-ed8b7c407bce"],
Cell[42170, 1093, 1524, 40, 142, "Input",ExpressionUUID->"69d54a51-7303-419f-8f52-382c28dd177e"],
Cell[43697, 1135, 1611, 42, 246, "Input",ExpressionUUID->"6319490e-81e1-4afe-918f-752922bd248a"],
Cell[45311, 1179, 412, 8, 64, "Input",ExpressionUUID->"8b12e9ea-8d8e-4d6d-a67c-8f34d0a76726"]
}, Closed]]
}
]
*)

