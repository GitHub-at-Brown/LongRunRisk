(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    122190,       2707]
NotebookOptionsPosition[     69701,       1765]
NotebookOutlinePosition[    116067,       2620]
CellTagsIndexPosition[    116024,       2617]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Quit", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.889964198656839*^9, 3.889964203363894*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"a227072b-1f2d-4469-b2c1-fcf282ed3ffc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"946b8633-fd90-4e81-9c93-3393a5b979a7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.88906761833503*^9, 3.8890676243126307`*^9}, {
   3.889067742143757*^9, 3.889067744399685*^9}, {3.889107439654277*^9, 
   3.889107463569742*^9}, 3.889431432947994*^9, {3.889964576682868*^9, 
   3.889964585331657*^9}, 3.889965093683486*^9, 3.889965459406158*^9, {
   3.889969067970613*^9, 3.889969102044859*^9}, {3.8899697215420027`*^9, 
   3.8899697217711897`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"51d6328f-d8cd-48b3-bef0-42a0f01b0d77"],

Cell[CellGroupData[{

Cell["CI Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 3.889579196409403*^9}, {
  3.889905620469079*^9, 3.8899056207707977`*^9}, {3.889967624152501*^9, 
  3.889967626012704*^9}},ExpressionUUID->"5216b0c6-0b30-4607-beca-\
83054aa122f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"confirm", "=", "True"}], ";"}]], "Input",
 CellChangeTimes->{{3.8899677184366713`*^9, 3.88996772700289*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"ac10c172-9293-4212-b37e-54d105c25460"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"Needs", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8899652151465197`*^9, 3.889965235350771*^9}, 
   3.8899652808817787`*^9, {3.889967731242805*^9, 3.8899677356636972`*^9}, {
   3.889967971867523*^9, 3.889967975146998*^9}, {3.889968339451161*^9, 
   3.88996834001075*^9}, 3.889968619774049*^9, {3.8899688826075077`*^9, 
   3.88996888992594*^9}, {3.88996899475625*^9, 3.8899690018858624`*^9}, {
   3.8899691256166267`*^9, 3.8899691257757883`*^9}, {3.889969207667478*^9, 
   3.8899692141700287`*^9}, {3.8899692798779783`*^9, 3.889969288274632*^9}, 
   3.889969387087708*^9, 3.889969585993528*^9, {3.8899702972149563`*^9, 
   3.889970314454108*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"27b72c9c-3767-4dd9-883c-12b885785f0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"$ContextPath", ",", "\"\<FernandoDuarte`LongRunRisk`\>\""}], 
    "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.889901579125684*^9, {3.889965035911569*^9, 3.889965039550325*^9}, {
   3.889965296152458*^9, 3.889965305191854*^9}, 3.8899653858152437`*^9, 
   3.889967740469187*^9, {3.889968345370779*^9, 3.889968347169169*^9}, {
   3.889968526692542*^9, 3.8899685355316963`*^9}, {3.889968649261517*^9, 
   3.889968660343141*^9}, 3.889969395693264*^9, {3.88996958684683*^9, 
   3.8899695947482367`*^9}, {3.889970300225127*^9, 3.889970329366473*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"565bb1f7-e9c6-4ed3-b28a-a5d567ae3826"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", "\t", 
   RowBox[{
   "Needs", "[", "\"\<FernandoDuarte`LongRunRisk`Model`Shocks`\>\"", "]"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889970444788332*^9, 3.889970460485238*^9}, 
   3.889972027468637*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"7aafa53e-d10d-4d3c-9f7d-b5af4e7685d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "should", " ", "be", " ", "true", " ", "if", " ", "rulesE", " ", "can", 
     " ", "be", " ", "found"}], "*)"}], "\[IndentingNewLine]", "\t", 
   RowBox[{"Not", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<*rulesE\>\"", "]"}], "===", 
     RowBox[{"{", "}"}]}], "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8899706175264597`*^9, 3.889970628972746*^9}, 
   3.889972029349813*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"3ca54cb5-c283-4f3b-8e12-834ba756dc26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
         RowBox[{"t", ",", "ii"}], "]"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
   3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
   3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
   3.88996754071059*^9}, {3.8899676626847277`*^9, 3.889967663326408*^9}, {
   3.889967743694665*^9, 3.889967744059184*^9}, {3.8899677859095707`*^9, 
   3.8899678081741953`*^9}, {3.8899679955631647`*^9, 3.889968003395926*^9}, {
   3.889969462764024*^9, 3.8899694656136417`*^9}, {3.889969517081333*^9, 
   3.8899695670076637`*^9}, {3.889970354531378*^9, 3.889970361426557*^9}, 
   3.889970446358612*^9, 3.889971586268968*^9, 3.8899720413397284`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"59480a4b-bd79-4729-a954-787da9c6bd4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "one"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "2"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", "\t", ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "^", "2"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966121134981*^9, 3.889966129513671*^9}, {
  3.8899675430265427`*^9, 3.889967546703742*^9}, {3.889967666639736*^9, 
  3.8899676668939447`*^9}, {3.889967746374608*^9, 3.889967746668034*^9}, {
  3.88996781333914*^9, 3.8899678201195583`*^9}, {3.88996801609513*^9, 
  3.88996801967063*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"47f4c0e3-a3cf-4b90-9890-6fdd8e20e5d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "3"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "^", "3"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966137593294*^9, 3.889966157676291*^9}, {
  3.8899675483847713`*^9, 3.889967551583518*^9}, {3.8899676691600733`*^9, 
  3.889967669364262*^9}, {3.889967748725914*^9, 3.889967749007223*^9}, {
  3.889967825028019*^9, 3.8899678304574842`*^9}, {3.889968028194545*^9, 
  3.889968031839179*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"8f45a60c-12d1-47b3-95b3-29eeef517d37"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "three"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "4"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", "\t", ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "^", "4"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899661404752703`*^9, 3.889966162544742*^9}, {
  3.88996755330625*^9, 3.8899675539045153`*^9}, {3.8899676717688217`*^9, 
  3.889967672005005*^9}, {3.88996775093589*^9, 3.8899677512290583`*^9}, {
  3.889967834057867*^9, 3.88996783977798*^9}, {3.889968042239496*^9, 
  3.889968052278575*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"34c5906b-b701-4e99-ac6d-68e658cecc0f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"f", "===", "g"}], ",", "0", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "*", 
           RowBox[{
            RowBox[{"eps", "[", "g", "]"}], "[", "t", "]"}]}], "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}]}], "]"}], "\[IndentingNewLine]",
        "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", "\t", ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "*", 
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}]}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<pi\>\"", ",", "\"\<pibar\>\"", ",", 
           "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", "\"\<sc\>\"", ",", 
           "\"\<sp\>\""}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "\t", 
      "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966171785048*^9, 3.889966259267709*^9}, {
  3.88996755849631*^9, 3.889967559615136*^9}, {3.8899676744105577`*^9, 
  3.8899676746563673`*^9}, {3.889967753296865*^9, 3.8899677536392727`*^9}, {
  3.889967845814172*^9, 3.889967850648691*^9}, {3.8899680615384283`*^9, 
  3.889968069633069*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"ac65904e-36a9-4c48-8329-9424b41234c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", 
     RowBox[{"taugd", "[", "ii", "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StringDelete", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{"\"\<FernandoDuarte\>\"", "|", "\"\<`\>\""}], "~~", "__", 
        "~~", "\"\<`\>\""}]}], "]"}], "&"}], "/@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ToString", "@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "*", 
          RowBox[{
           RowBox[{"eps", "[", "\"\<dc\>\"", "]"}], "[", "t", "]"}]}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966276655841*^9, 3.889966329628468*^9}, 
   3.889966470569511*^9, {3.8899666206897087`*^9, 3.889966642167533*^9}, {
   3.8899666930281763`*^9, 3.889966714268526*^9}, {3.889966746437366*^9, 
   3.8899668192799807`*^9}, 3.889966968372637*^9, {3.8899676779101973`*^9, 
   3.889967678143958*^9}, {3.8899677558359327`*^9, 3.889967756159708*^9}, {
   3.8899678548486967`*^9, 3.88996786321723*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"8425dca0-fd15-42a1-8e6b-e6fb544a45b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "three"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "4"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", "\t", ",", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "^", "4"}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889966177455817*^9, 3.889966177853951*^9}, {
  3.889966992360574*^9, 3.889966992849523*^9}, {3.8899675664876623`*^9, 
  3.889967570401917*^9}, {3.889967680488591*^9, 3.88996768073554*^9}, {
  3.889967758125637*^9, 3.889967758450981*^9}, {3.88996786680688*^9, 
  3.889967871147208*^9}, {3.8899681073226833`*^9, 3.889968110849965*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"c7178cc4-faa6-4799-b297-497d10856f43"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"f", "===", "g"}], ",", "0", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "2"}], "*", 
           RowBox[{
            RowBox[{"eps", "[", "g", "]"}], "[", "t", "]"}]}], "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}]}], "]"}], "\[IndentingNewLine]",
        "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
           "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
           "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}], ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "^", "2"}], "*", 
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}]}], "/.", 
        RowBox[{"rulesE", "[", "t", "]"}]}], "\[IndentingNewLine]", "\t\t", 
       ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"f", ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<x\>\"", ",", "\"\<pi\>\"", ",", "\"\<pibar\>\"", ",", 
           "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", "\"\<sc\>\"", ",", 
           "\"\<sp\>\""}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "\t", 
      "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.8899675877972183`*^9, 3.889967602226403*^9}, {
  3.889967682858871*^9, 3.8899676830660887`*^9}, {3.889967760636098*^9, 
  3.889967760939219*^9}, {3.889967873898391*^9, 3.8899678791078978`*^9}, {
  3.8899681168408318`*^9, 3.8899681204301453`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"6c9f977c-c7f8-4829-9121-f90a2c87c257"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
     RowBox[{
     "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
      " ", "expression", " ", "unevaluated"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"expr", "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"expr", ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"eps", "[", "f", "]"}], "[", 
            RowBox[{"t", "+", "1"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"f", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
               "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
               "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
        "}"}]}], "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", 
     "\t", ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"expr", "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"expr", ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"eps", "[", 
             RowBox[{"ToExpression", "@", "f"}], "]"}], "[", "t", "]"}], ",", 
           
           RowBox[{"{", 
            RowBox[{"f", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
               "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
               "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
        "}"}]}], "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", 
     "\t", ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"expr", "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"expr", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
            RowBox[{
             RowBox[{"t", "+", "1"}], ",", "i"}], "]"}], ",", 
           RowBox[{
            RowBox[{"eps", "[", "dd", "]"}], "[", 
            RowBox[{"t", ",", "i"}], "]"}]}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
  3.889965687921562*^9, 3.889965748623394*^9}, {3.889965898517263*^9, 
  3.889965927180188*^9}, {3.8899670123313913`*^9, 3.889967110342752*^9}, {
  3.889967191054615*^9, 3.889967303783434*^9}, {3.8899676854688587`*^9, 
  3.88996768572717*^9}, {3.889967763265728*^9, 3.889967763628764*^9}, {
  3.889967883379265*^9, 3.889967894944208*^9}, {3.889968130363205*^9, 
  3.889968136461113*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e65fd894-d9b6-444c-a52d-afb666f1e5bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
     RowBox[{
     "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
      " ", "expression", " ", "unevaluated"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"expr", "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
       "\[IndentingNewLine]", "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"expr", ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"f", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
               "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
               "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
        "}"}]}], "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", 
     "\t", ",", "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "/.", 
          RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", 
        RowBox[{"eps", "[", "\"\<dd\>\"", "]"}]}], "\[IndentingNewLine]", 
       "\t\t", ",", 
       RowBox[{"{", 
        RowBox[{"ii", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.889965945368053*^9, 3.889965955550915*^9}, 
   3.889967308405003*^9, {3.889967351208173*^9, 3.889967389985118*^9}, {
   3.8899676882980556`*^9, 3.889967688505946*^9}, {3.889967766805999*^9, 
   3.889967767119522*^9}, {3.889967900939595*^9, 3.8899679066172323`*^9}, {
   3.8899681466423407`*^9, 3.889968150087781*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"f6a47068-4ccb-4fea-9136-2dc604d17939"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
      RowBox[{
      "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
       " ", "expression", " ", "unevaluated"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
        "\[IndentingNewLine]", "\t\t", ",", 
        RowBox[{"{", 
         RowBox[{"expr", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"eps", "[", "f", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"f", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<xx\>\"", ",", "\"\<adc\>\"", ",", "\"\<p\>\"", ",", 
                "\"\<rhobar\>\"", ",", "\"\<ssg\>\"", ",", "\"\<ssx\>\"", 
                ",", "\"\<sdc\>\"", ",", "\"\<spi\>\""}], "}"}]}], "}"}]}], 
           "]"}]}], "}"}]}], "\[IndentingNewLine]", "\t", "]"}], 
      "\[IndentingNewLine]", "\t", ",", "\[IndentingNewLine]", "\t", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"eps", "[", "\"\<ddd\>\"", "]"}], "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", 
         RowBox[{"eps", "[", "\"\<ddd\>\"", "]"}]}], "\[IndentingNewLine]", 
        "\t\t", ",", 
        RowBox[{"{", 
         RowBox[{"ii", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
       "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.889966053895102*^9, 3.8899660943950768`*^9}, 
   3.88996731051445*^9, {3.889967405843053*^9, 3.88996742813382*^9}, {
   3.889967691817891*^9, 3.889967692066221*^9}, {3.88996776934571*^9, 
   3.889967769680554*^9}, {3.88996790988997*^9, 3.8899679148886423`*^9}, {
   3.8899681574763317`*^9, 3.889968162961051*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"914981bf-41ce-4fda-9d3a-e450b0107da7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
   RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
      RowBox[{
      "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
       " ", "expression", " ", "unevaluated"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
        "\[IndentingNewLine]", "\t\t", ",", 
        RowBox[{"{", 
         RowBox[{"expr", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"eps", "[", "f", "]"}], "[", "tt", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"f", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<xx\>\"", ",", "\"\<adc\>\"", ",", "\"\<p\>\"", ",", 
                "\"\<rhobar\>\"", ",", "\"\<ssg\>\"", ",", "\"\<ssx\>\"", 
                ",", "\"\<sdc\>\"", ",", "\"\<spi\>\""}], "}"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"tt", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"t", "+", "1"}], ",", 
                RowBox[{"t", "-", "1"}], ",", "s", ",", 
                RowBox[{"t", "+", "h"}]}], "}"}]}], "}"}]}], "]"}]}], "}"}]}],
        "\[IndentingNewLine]", "\t", "]"}], "\[IndentingNewLine]", "\t", ",", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"expr", "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
        "\[IndentingNewLine]", "\t\t", ",", 
        RowBox[{"{", 
         RowBox[{"expr", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
             RowBox[{"tt", ",", "ii"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"ii", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"tt", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"t", "+", "1"}], ",", 
                RowBox[{"t", "-", "1"}], ",", "s", ",", 
                RowBox[{"t", "+", "h"}]}], "}"}]}], "}"}]}], "]"}]}], "}"}]}],
        "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "confirm"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.889965962245503*^9, 3.889966019800927*^9}, 
   3.889967313667658*^9, {3.889967436454067*^9, 3.889967519755422*^9}, {
   3.889967695147917*^9, 3.889967695356472*^9}, {3.889967773026466*^9, 
   3.8899677733587008`*^9}, {3.88996791844978*^9, 3.8899679231592207`*^9}, {
   3.8899681691524878`*^9, 3.889968173601953*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"06d2e2ec-ced8-46ed-a22e-1d614e760ba6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Tests", "Subsection",
 CellChangeTimes->{{3.889905622471089*^9, 3.889905629759961*^9}, {
  3.889972063478182*^9, 
  3.889972065236586*^9}},ExpressionUUID->"110fa690-a939-4013-acf2-\
a07d9942e533"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"packageFileName", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DirectoryName", "[", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", "1"}], "]"}], ",", 
     "\"\<Kernel\>\"", ",", "\"\<Model\>\"", ",", 
     RowBox[{
      RowBox[{"FileBaseName", "[", 
       RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<.wl\>\""}]}],
     "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", 
  RowBox[{
   RowBox[{"\"\<FernandoDuarte`LongRunRisk`Model`\>\"", "<>", 
    RowBox[{"FileBaseName", "[", 
     RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", "\"\<`\>\""}], ",", 
   "packageFileName"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889968360919714*^9, 3.889968361169221*^9}, 
   3.89001596275924*^9},
 CellLabel->"In[55]:=",ExpressionUUID->"7c745d6c-f8d5-490b-9a4e-eab39840f4de"],

Cell[BoxData["\<\"/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Kernel/Model/Shocks.wl\"\>"], "Output",
 CellChangeTimes->{3.890016789138297*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"6e695d83-8f0e-464d-8640-7c7b14f091a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"0", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
          "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
          "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"0", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
          RowBox[{"t", ",", "ii"}], "]"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
  3.889965687921562*^9, 3.889965719041513*^9}, {3.8899657564745703`*^9, 
  3.8899657868805656`*^9}, {3.889965818275572*^9, 3.88996587402346*^9}, {
  3.8899660417909737`*^9, 3.889966042024665*^9}, {3.889967536877624*^9, 
  3.88996754071059*^9}, {3.8900165538878927`*^9, 3.89001658162351*^9}, {
  3.890016737000123*^9, 3.890016738407667*^9}, {3.890016800216386*^9, 
  3.890016807685783*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"2dfc73dc-9874-44f6-99c5-c5e524d0d887"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8900167891612473`*^9, 3.890016808434188*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"e6759a8d-059a-44cc-a751-de996e45246f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8900167891612473`*^9, 3.890016808436466*^9}},
 CellLabel->"Out[82]=",ExpressionUUID->"d2ba4be3-7761-424a-b83b-bbb8e51fc0fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "one"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"1", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "2"}], "/.", 
         
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
          "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
          "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"1", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "^", "2"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889966121134981*^9, 3.889966129513671*^9}, {
  3.8899675430265427`*^9, 3.889967546703742*^9}, {3.890016583815317*^9, 
  3.890016592774984*^9}, {3.890016733215493*^9, 3.890016734665518*^9}, {
  3.890016813177075*^9, 3.890016818682664*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"71c0d248-cf19-479f-94a0-7aad059cee6f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789166027*^9, 3.890016819323408*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"cf79c2b9-3dbf-43b0-8c63-1bb81916861d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789166027*^9, 3.890016819325478*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"e523404c-2580-4f1c-ba02-6309e7bfe372"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"0", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "3"}], "/.", 
         
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
          "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
          "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"0", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "^", "3"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889966137593294*^9, 3.889966157676291*^9}, {
  3.8899675483847713`*^9, 3.889967551583518*^9}, {3.890016598169224*^9, 
  3.890016599024119*^9}, {3.8900166398231497`*^9, 3.8900166447507772`*^9}, {
  3.890016728032583*^9, 3.8900167295430813`*^9}, {3.890016823054276*^9, 
  3.890016828517232*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"94047c1a-8725-44f4-ac9f-feb42bcb9445"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789179722*^9, 3.890016829140142*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"a0b8c20c-57a0-427a-8d5f-a3a0f4dfabd7"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789179722*^9, 3.8900168291422987`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"461f93ad-e685-4406-8dfb-acd87a955e7b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "three"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "4"}], "/.", 
         
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
          "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
          "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "^", "4"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8899661404752703`*^9, 3.889966162544742*^9}, {
  3.88996755330625*^9, 3.8899675539045153`*^9}, {3.890016601009963*^9, 
  3.890016602175623*^9}, {3.890016647031019*^9, 3.890016654765329*^9}, {
  3.890016724631262*^9, 3.890016725648046*^9}, {3.890016832581925*^9, 
  3.8900168622944813`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"d3d28ca6-8af9-4491-966a-9f486632a1b2"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.890016789184627*^9, {3.890016851717654*^9, 3.890016862955864*^9}},
 CellLabel->"Out[91]=",ExpressionUUID->"d4356ca6-6031-4ab8-9cd0-036d9f6b62df"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.890016789184627*^9, {3.890016851717654*^9, 3.8900168629579268`*^9}},
 CellLabel->"Out[92]=",ExpressionUUID->"64d14e93-f71f-4581-ac36-bedf4edd70fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"0", "===", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"f", "===", "g"}], ",", "0", ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "*", 
             RowBox[{
              RowBox[{"eps", "[", "g", "]"}], "[", "t", "]"}]}], "/.", 
            RowBox[{"rulesE", "[", "t", "]"}]}]}], "]"}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
            "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
            "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"g", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
            "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
            "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"0", "===", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
             RowBox[{"t", ",", "ii"}], "]"}], "*", 
            RowBox[{
             RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}]}], "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"ii", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<pi\>\"", ",", "\"\<pibar\>\"", ",", 
            "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", "\"\<sc\>\"", ",", 
            "\"\<sp\>\""}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], 
     ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889966171785048*^9, 3.889966259267709*^9}, {
   3.88996755849631*^9, 3.889967559615136*^9}, {3.890016604049556*^9, 
   3.890016605279772*^9}, {3.890016664063781*^9, 3.890016667093809*^9}, 
   3.890016719343944*^9, {3.89001688967313*^9, 3.890016972670947*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"a7d66a75-eb75-4db5-8559-b86f3e46ec2c"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.8900167891975813`*^9, {3.890016899290382*^9, 3.8900169733909893`*^9}},
 CellLabel->
  "Out[107]=",ExpressionUUID->"f298261f-889e-4088-a7c5-9b255ec063b5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.8900167891975813`*^9, {3.890016899290382*^9, 3.890016973393179*^9}},
 CellLabel->
  "Out[108]=",ExpressionUUID->"7f5fe9c6-b162-429c-b7a3-98caddf0c879"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", 
    RowBox[{"taugd", "[", "ii", "]"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"And", "@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<taugd[1]\>\"", ",", "\"\<taugd[i]\>\"", ",", "\"\<taugd[j]\>\""}], 
      "}"}], "===", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"StringDelete", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{"\"\<FernandoDuarte\>\"", "|", "\"\<`\>\""}], "~~", "__", 
           "~~", "\"\<`\>\""}]}], "]"}], "&"}], "/@", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ToString", "@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
              RowBox[{"t", ",", "ii"}], "]"}], "*", 
             RowBox[{
              RowBox[{"eps", "[", "\"\<dc\>\"", "]"}], "[", "t", "]"}]}], "/.", 
            RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"ii", ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], ")"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.889966276655841*^9, 3.889966329628468*^9}, 
   3.889966470569511*^9, {3.8899666206897087`*^9, 3.889966642167533*^9}, {
   3.8899666930281763`*^9, 3.889966714268526*^9}, {3.889966746437366*^9, 
   3.8899668192799807`*^9}, 3.889966968372637*^9, {3.890016685103952*^9, 
   3.890016706173997*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"77f48b1e-39a4-4398-8e14-b61e1b5bb4b2"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789202276*^9, 3.890016974820422*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"b2fdc703-536b-40c5-98c8-301071088014"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "three"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "4"}], "/.", 
         
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{"{", 
         RowBox[{
         "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
          "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
          "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"3", "===", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"t", ",", "ii"}], "]"}], "^", "4"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889966177455817*^9, 3.889966177853951*^9}, {
  3.889966992360574*^9, 3.889966992849523*^9}, {3.8899675664876623`*^9, 
  3.889967570401917*^9}, {3.890016610865726*^9, 3.890016612256692*^9}, {
  3.890016748169524*^9, 3.890016753197629*^9}, {3.890016979912045*^9, 
  3.890016985910692*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"41addf54-ea48-4c50-bf60-96c814dcbe5e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.890016789213999*^9, {3.89001697602673*^9, 3.890016986625469*^9}},
 CellLabel->
  "Out[112]=",ExpressionUUID->"b2b2a58a-c593-4204-b25e-479268b00ec3"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.890016789213999*^9, {3.89001697602673*^9, 3.89001698662774*^9}},
 CellLabel->
  "Out[113]=",ExpressionUUID->"5f0221a0-9739-441f-92dd-a3f0f432a6f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"should", " ", "all", " ", "give", " ", "zero"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"0", "===", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"f", "===", "g"}], ",", "0", ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}], "^", "2"}], 
             "*", 
             RowBox[{
              RowBox[{"eps", "[", "g", "]"}], "[", "t", "]"}]}], "/.", 
            RowBox[{"rulesE", "[", "t", "]"}]}]}], "]"}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
            "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
            "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"g", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
            "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
            "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"(", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"0", "===", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
              RowBox[{"t", ",", "ii"}], "]"}], "^", "2"}], "*", 
            RowBox[{
             RowBox[{"eps", "[", "f", "]"}], "[", "t", "]"}]}], "/.", 
           RowBox[{"rulesE", "[", "t", "]"}]}], ")"}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"ii", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"f", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x\>\"", ",", "\"\<pi\>\"", ",", "\"\<pibar\>\"", ",", 
            "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", "\"\<sc\>\"", ",", 
            "\"\<sp\>\""}], "}"}]}], "}"}]}], "\[IndentingNewLine]", "]"}]}], 
     ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8899675877972183`*^9, 3.889967602226403*^9}, {
  3.8900166143143044`*^9, 3.890016615313992*^9}, {3.8900167583453693`*^9, 
  3.8900167602455273`*^9}, {3.89001699365699*^9, 3.890017007454585*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"26f91dcc-6134-4ff7-ad9c-74f7ed4468e0"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789234332*^9, 3.8900170079465446`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"d4149ee3-cb5d-4670-90bf-93f37addcee4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789234332*^9, 3.8900170079506903`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"04377168-ea53-4c35-ba17-51f24e4e5329"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
    RowBox[{
    "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
     " ", "expression", " ", "unevaluated"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", 
           RowBox[{"t", "+", "1"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"f", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
              "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
              "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", 
            RowBox[{"ToExpression", "@", "f"}], "]"}], "[", "t", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"f", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
              "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
              "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{
            RowBox[{"t", "+", "1"}], ",", "i"}], "]"}], ",", 
          RowBox[{
           RowBox[{"eps", "[", "dd", "]"}], "[", 
           RowBox[{"t", ",", "i"}], "]"}]}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889965468632722*^9, 3.889965535681717*^9}, {
   3.889965687921562*^9, 3.889965748623394*^9}, {3.889965898517263*^9, 
   3.889965927180188*^9}, {3.8899670123313913`*^9, 3.889967110342752*^9}, {
   3.889967191054615*^9, 3.889967303783434*^9}, {3.89001661779342*^9, 
   3.890016621056472*^9}, 3.8900167671909723`*^9},
 CellLabel->
  "In[116]:=",ExpressionUUID->"9e829da2-205b-44fa-9e15-21f48d820e5f"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789250474*^9, 3.890017012432478*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"07428554-37b5-4147-85ad-dbb1295b8282"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789250474*^9, 3.890017012434808*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"7c269c06-0feb-4f7f-969d-755f533bdd38"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789250474*^9, 3.890017012436491*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"5f34e9e1-3e14-4272-8465-188cfa65fe8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
    RowBox[{
    "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
     " ", "expression", " ", "unevaluated"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"f", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<x\>\"", ",", "\"\<dc\>\"", ",", "\"\<pi\>\"", ",", 
              "\"\<pibar\>\"", ",", "\"\<sg\>\"", ",", "\"\<sx\>\"", ",", 
              "\"\<sc\>\"", ",", "\"\<sp\>\""}], "}"}]}], "}"}]}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", 
       RowBox[{"eps", "[", "\"\<dd\>\"", "]"}]}], "\[IndentingNewLine]", ",", 
      
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.889965945368053*^9, 3.889965955550915*^9}, 
   3.889967308405003*^9, {3.889967351208173*^9, 3.889967389985118*^9}, 
   3.890016622216301*^9, {3.8900167738332148`*^9, 3.890016774829447*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"4c16b666-deb6-4987-8dcc-8aab6d8299ab"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8900167892570744`*^9, 3.890017013569397*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"f826e75d-465b-4dc1-8c5f-276f90cc85a9"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8900167892570744`*^9, 3.890017013570744*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"03f3fef2-37ac-4030-893a-8d7386e1c30a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
    RowBox[{
    "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
     " ", "expression", " ", "unevaluated"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"eps", "[", "f", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"f", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<xx\>\"", ",", "\"\<adc\>\"", ",", "\"\<p\>\"", ",", 
              "\"\<rhobar\>\"", ",", "\"\<ssg\>\"", ",", "\"\<ssx\>\"", ",", 
              "\"\<sdc\>\"", ",", "\"\<spi\>\""}], "}"}]}], "}"}]}], "]"}]}], 
       "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"eps", "[", "\"\<ddd\>\"", "]"}], "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", 
       RowBox[{"eps", "[", "\"\<ddd\>\"", "]"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"ii", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.889966053895102*^9, 3.8899660943950768`*^9}, 
   3.88996731051445*^9, {3.889967405843053*^9, 3.88996742813382*^9}, {
   3.8900166244167767`*^9, 3.890016625279937*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"02b5060b-5840-4cc6-a0d0-f444ab39ba3e"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789269291*^9, 3.890017014872884*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"f088f27b-bf8a-40bc-b224-3237493f45f4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789269291*^9, 3.890017014875514*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"0fd29c8e-a643-41c2-a6a9-325f814dbe54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"should", " ", "all", " ", "return", " ", "true"}], ",", " ", 
    RowBox[{
    "confirming", " ", "that", " ", "rulesE", " ", "returns", " ", "same", 
     " ", "expression", " ", "unevaluated"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "f", "]"}], "[", "tt", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"f", ",", 
            RowBox[{"{", 
             RowBox[{
             "\"\<xx\>\"", ",", "\"\<adc\>\"", ",", "\"\<p\>\"", ",", 
              "\"\<rhobar\>\"", ",", "\"\<ssg\>\"", ",", "\"\<ssx\>\"", ",", 
              "\"\<sdc\>\"", ",", "\"\<spi\>\""}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"tt", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", 
              RowBox[{"t", "-", "1"}], ",", "s", ",", 
              RowBox[{"t", "+", "h"}]}], "}"}]}], "}"}]}], "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"And", "@@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"expr", "/.", 
         RowBox[{"rulesE", "[", "t", "]"}]}], ")"}], "===", "expr"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"expr", ",", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"eps", "[", "\"\<dd\>\"", "]"}], "[", 
           RowBox[{"tt", ",", "ii"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"ii", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "i", ",", "j"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"tt", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"t", "+", "1"}], ",", 
              RowBox[{"t", "-", "1"}], ",", "s", ",", 
              RowBox[{"t", "+", "h"}]}], "}"}]}], "}"}]}], "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.889965962245503*^9, 3.889966019800927*^9}, 
   3.889967313667658*^9, {3.889967436454067*^9, 3.889967519755422*^9}, {
   3.890016627163189*^9, 3.890016628977816*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"fd59bfd6-0526-4d91-8edf-d3cef9d6ee95"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789274589*^9, 3.890017016018764*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"e26f21cb-6e62-495d-b54c-a8799261f861"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.890016789274589*^9, 3.890017016021626*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"8bd3cd77-8a54-4470-a537-7815aef1c46f"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1049, 942},
WindowMargins->{{-1336, Automatic}, {Automatic, 83}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"8a2fa114-2632-48cd-95a6-be23d2dae59c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 215, 4, 37, "Input",ExpressionUUID->"a227072b-1f2d-4469-b2c1-fcf282ed3ffc"],
Cell[776, 26, 981, 23, 64, "Input",ExpressionUUID->"946b8633-fd90-4e81-9c93-3393a5b979a7"],
Cell[1760, 51, 718, 13, 64, "Input",ExpressionUUID->"51d6328f-d8cd-48b3-bef0-42a0f01b0d77"],
Cell[CellGroupData[{
Cell[2503, 68, 255, 4, 67, "Subsection",ExpressionUUID->"5216b0c6-0b30-4607-beca-83054aa122f9"],
Cell[2761, 74, 221, 4, 37, "Input",ExpressionUUID->"ac10c172-9293-4212-b37e-54d105c25460"],
Cell[2985, 80, 1034, 16, 90, "Input",ExpressionUUID->"27b72c9c-3767-4dd9-883c-12b885785f0a"],
Cell[4022, 98, 914, 15, 90, "Input",ExpressionUUID->"565bb1f7-e9c6-4ed3-b28a-a5d567ae3826"],
Cell[4939, 115, 526, 10, 90, "Input",ExpressionUUID->"7aafa53e-d10d-4d3c-9f7d-b5af4e7685d0"],
Cell[5468, 127, 740, 15, 116, "Input",ExpressionUUID->"3ca54cb5-c283-4f3b-8e12-834ba756dc26"],
Cell[6211, 144, 2451, 50, 402, "Input",ExpressionUUID->"59480a4b-bd79-4729-a954-787da9c6bd4a"],
Cell[8665, 196, 2073, 48, 376, "Input",ExpressionUUID->"47f4c0e3-a3cf-4b90-9890-6fdd8e20e5d0"],
Cell[10741, 246, 2042, 47, 350, "Input",ExpressionUUID->"8f45a60c-12d1-47b3-95b3-29eeef517d37"],
Cell[12786, 295, 2077, 48, 376, "Input",ExpressionUUID->"34c5906b-b701-4e99-ac6d-68e658cecc0f"],
Cell[14866, 345, 2992, 70, 428, "Input",ExpressionUUID->"ac65904e-36a9-4c48-8329-9424b41234c5"],
Cell[17861, 417, 1767, 40, 195, "Input",ExpressionUUID->"8425dca0-fd15-42a1-8e6b-e6fb544a45b1"],
Cell[19631, 459, 2120, 48, 376, "Input",ExpressionUUID->"c7178cc4-faa6-4799-b297-497d10856f43"],
Cell[21754, 509, 2978, 70, 402, "Input",ExpressionUUID->"6c9f977c-c7f8-4829-9121-f90a2c87c257"],
Cell[24735, 581, 3764, 89, 584, "Input",ExpressionUUID->"e65fd894-d9b6-444c-a52d-afb666f1e5bc"],
Cell[28502, 672, 2448, 56, 376, "Input",ExpressionUUID->"f6a47068-4ccb-4fea-9136-2dc604d17939"],
Cell[30953, 730, 2539, 57, 428, "Input",ExpressionUUID->"914981bf-41ce-4fda-9d3a-e450b0107da7"],
Cell[33495, 789, 3322, 77, 454, "Input",ExpressionUUID->"06d2e2ec-ced8-46ed-a22e-1d614e760ba6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36854, 871, 214, 4, 67, "Subsection",ExpressionUUID->"110fa690-a939-4013-acf2-a07d9942e533"],
Cell[CellGroupData[{
Cell[37093, 879, 882, 21, 142, "Input",ExpressionUUID->"7c745d6c-f8d5-490b-9a4e-eab39840f4de"],
Cell[37978, 902, 244, 3, 42, "Output",ExpressionUUID->"6e695d83-8f0e-464d-8640-7c7b14f091a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38259, 910, 1913, 47, 246, "Input",ExpressionUUID->"2dfc73dc-9874-44f6-99c5-c5e524d0d887"],
Cell[40175, 959, 178, 2, 42, "Output",ExpressionUUID->"e6759a8d-059a-44cc-a751-de996e45246f"],
Cell[40356, 963, 178, 2, 42, "Output",ExpressionUUID->"d2ba4be3-7761-424a-b83b-bbb8e51fc0fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40571, 970, 1791, 47, 246, "Input",ExpressionUUID->"71c0d248-cf19-479f-94a0-7aad059cee6f"],
Cell[42365, 1019, 174, 2, 42, "Output",ExpressionUUID->"cf79c2b9-3dbf-43b0-8c63-1bb81916861d"],
Cell[42542, 1023, 174, 2, 42, "Output",ExpressionUUID->"e523404c-2580-4f1c-ba02-6309e7bfe372"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42753, 1030, 1847, 48, 246, "Input",ExpressionUUID->"94047c1a-8725-44f4-ac9f-feb42bcb9445"],
Cell[44603, 1080, 174, 2, 42, "Output",ExpressionUUID->"a0b8c20c-57a0-427a-8d5f-a3a0f4dfabd7"],
Cell[44780, 1084, 176, 2, 42, "Output",ExpressionUUID->"461f93ad-e685-4406-8dfb-acd87a955e7b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44993, 1091, 1845, 48, 246, "Input",ExpressionUUID->"d3d28ca6-8af9-4491-966a-9f486632a1b2"],
Cell[46841, 1141, 201, 3, 42, "Output",ExpressionUUID->"d4356ca6-6031-4ab8-9cd0-036d9f6b62df"],
Cell[47045, 1146, 203, 3, 42, "Output",ExpressionUUID->"64d14e93-f71f-4581-ac36-bedf4edd70fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47285, 1154, 2886, 73, 298, "Input",ExpressionUUID->"a7d66a75-eb75-4db5-8559-b86f3e46ec2c"],
Cell[50174, 1229, 209, 4, 42, "Output",ExpressionUUID->"f298261f-889e-4088-a7c5-9b255ec063b5"],
Cell[50386, 1235, 207, 4, 42, "Output",ExpressionUUID->"7f5fe9c6-b162-429c-b7a3-98caddf0c879"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50630, 1244, 1740, 44, 195, "Input",ExpressionUUID->"77f48b1e-39a4-4398-8e14-b61e1b5bb4b2"],
Cell[52373, 1290, 178, 3, 42, "Output",ExpressionUUID->"b2fdc703-536b-40c5-98c8-301071088014"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52588, 1298, 1846, 49, 246, "Input",ExpressionUUID->"41addf54-ea48-4c50-bf60-96c814dcbe5e"],
Cell[54437, 1349, 204, 4, 42, "Output",ExpressionUUID->"b2b2a58a-c593-4204-b25e-479268b00ec3"],
Cell[54644, 1355, 203, 4, 42, "Output",ExpressionUUID->"5f0221a0-9739-441f-92dd-a3f0f432a6f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54884, 1364, 2907, 75, 298, "Input",ExpressionUUID->"26f91dcc-6134-4ff7-ad9c-74f7ed4468e0"],
Cell[57794, 1441, 180, 3, 42, "Output",ExpressionUUID->"d4149ee3-cb5d-4670-90bf-93f37addcee4"],
Cell[57977, 1446, 180, 3, 42, "Output",ExpressionUUID->"04377168-ea53-4c35-ba17-51f24e4e5329"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58194, 1454, 3179, 81, 402, "Input",ExpressionUUID->"9e829da2-205b-44fa-9e15-21f48d820e5f"],
Cell[61376, 1537, 178, 3, 42, "Output",ExpressionUUID->"07428554-37b5-4147-85ad-dbb1295b8282"],
Cell[61557, 1542, 178, 3, 42, "Output",ExpressionUUID->"7c269c06-0feb-4f7f-969d-755f533bdd38"],
Cell[61738, 1547, 178, 3, 42, "Output",ExpressionUUID->"5f34e9e1-3e14-4272-8465-188cfa65fe8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61953, 1555, 1935, 49, 246, "Input",ExpressionUUID->"4c16b666-deb6-4987-8dcc-8aab6d8299ab"],
Cell[63891, 1606, 180, 3, 42, "Output",ExpressionUUID->"f826e75d-465b-4dc1-8c5f-276f90cc85a9"],
Cell[64074, 1611, 180, 3, 42, "Output",ExpressionUUID->"03f3fef2-37ac-4030-893a-8d7386e1c30a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64291, 1619, 1937, 48, 272, "Input",ExpressionUUID->"02b5060b-5840-4cc6-a0d0-f444ab39ba3e"],
Cell[66231, 1669, 178, 3, 42, "Output",ExpressionUUID->"f088f27b-bf8a-40bc-b224-3237493f45f4"],
Cell[66412, 1674, 178, 3, 42, "Output",ExpressionUUID->"0fd29c8e-a643-41c2-a6a9-325f814dbe54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66627, 1682, 2684, 69, 298, "Input",ExpressionUUID->"fd59bfd6-0526-4d91-8edf-d3cef9d6ee95"],
Cell[69314, 1753, 178, 3, 42, "Output",ExpressionUUID->"e26f21cb-6e62-495d-b54c-a8799261f861"],
Cell[69495, 1758, 178, 3, 62, "Output",ExpressionUUID->"8bd3cd77-8a54-4470-a537-7815aef1c46f"]
}, Open  ]]
}, Open  ]]
}
]
*)

