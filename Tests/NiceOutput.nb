(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     94924,       1944]
NotebookOptionsPosition[     46811,       1064]
NotebookOutlinePosition[     93177,       1919]
CellTagsIndexPosition[     93134,       1916]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"testFileName", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      RowBox[{
       RowBox[{"FileBaseName", "[", 
        RowBox[{"NotebookFileName", "[", "]"}], "]"}], "<>", 
       "\"\<.wlt\>\""}]}], "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FileNames", "[", "testFileName", "]"}], "===", 
     RowBox[{"{", "}"}]}], ",", "Nothing", ",", 
    RowBox[{"DeleteFile", "[", "testFileName", "]"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8890661685133457`*^9, 3.889066220685074*^9}, {
   3.8890662555512333`*^9, 3.889066299901951*^9}, {3.889066581166473*^9, 
   3.8890665847967653`*^9}, {3.889066731765956*^9, 3.889066745674687*^9}, {
   3.889431410824514*^9, 3.88943144002302*^9}, 3.889502968269744*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"946b8633-fd90-4e81-9c93-3393a5b979a7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pacletDir", "=", 
   RowBox[{"DirectoryName", "[", 
    RowBox[{"testFileName", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", "pacletDir", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.88906761833503*^9, 3.8890676243126307`*^9}, {
   3.889067742143757*^9, 3.889067744399685*^9}, {3.889107439654277*^9, 
   3.889107463569742*^9}, 3.889431432947994*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"51d6328f-d8cd-48b3-bef0-42a0f01b0d77"],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<FernandoDuarte`LongRunRisk`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"<<", "FernandoDuarte`LongRunRisk`"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.889431746063068*^9, 3.889431752653256*^9}, {
  3.889498746279821*^9, 3.88949874835758*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"8ca679c3-2d1e-4627-911a-271e99f7202f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"models", "[", "BKYinf", "]"}]], "Input",
 CellChangeTimes->{{3.889584415197834*^9, 3.8895844290018673`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"260a597d-edf2-4bfb-974c-7ffbfab67b25"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
   "name", "\[Rule]", "\<\"Similar to Bansal-Kiku-Yaron but with \
inflation\"\>"}], ",", 
   RowBox[{"shortname", "\[Rule]", "\<\"BKYinf\"\>"}], ",", 
   RowBox[{"bibRef", "\[Rule]", "\<\"None\"\>"}], ",", 
   RowBox[{
   "desc", "\[Rule]", "\<\"Inflation is persistent and predicts consumption \
growth (without time-variation, without NRC)\"\>"}], ",", 
   RowBox[{"stateVars", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"sx", "[", "t", "]"}], ",", 
      RowBox[{
       RowBox[{"-", "mup"}], "+", 
       RowBox[{"pi", "[", "t", "]"}]}]}], "}"}]}], ",", 
   RowBox[{"parameters", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
      RowBox[{"psi", "\[Rule]", "0.108086466108274`"}], ",", 
      RowBox[{"gamma", "\[Rule]", 
       RowBox[{"1", "-", "theta", "+", 
        FractionBox["theta", "psi"]}]}], ",", 
      RowBox[{"theta", "\[Rule]", 
       RowBox[{"-", "0.0319364382914013`"}]}], ",", 
      RowBox[{
       RowBox[{"taugd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{"rhox", "\[Rule]", "0.95`"}], ",", 
      RowBox[{"rhoxpbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phix", "\[Rule]", 
       RowBox[{"-", "0.0100455931054077`"}]}], ",", 
      RowBox[{"phixc", "\[Rule]", "0"}], ",", 
      RowBox[{"mup", "\[Rule]", "0.0028955730909963`"}], ",", 
      RowBox[{"rhoppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhop", "\[Rule]", "0.985`"}], ",", 
      RowBox[{"phip", "\[Rule]", 
       RowBox[{"-", "0.00043247571691955`"}]}], ",", 
      RowBox[{"xip", "\[Rule]", "0"}], ",", 
      RowBox[{"phipc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipxp", "\[Rule]", "0"}], ",", 
      RowBox[{"mupbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarpb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxp", "\[Rule]", "0"}], ",", 
      RowBox[{"muc", "\[Rule]", "0.00157399080415904`"}], ",", 
      RowBox[{"rhocx", "\[Rule]", "1"}], ",", 
      RowBox[{"rhocp", "\[Rule]", 
       RowBox[{"-", "0.292835401816459`"}]}], ",", 
      RowBox[{"phics", "\[Rule]", "0"}], ",", 
      RowBox[{"phicx", "\[Rule]", "1"}], ",", 
      RowBox[{"phicc", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpp", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpc", "\[Rule]", "0"}], ",", 
      RowBox[{"phic", "\[Rule]", "0"}], ",", 
      RowBox[{"phicsp", "\[Rule]", "0"}], ",", 
      RowBox[{"xic", "\[Rule]", "0"}], ",", 
      RowBox[{"phicp", "\[Rule]", 
       RowBox[{"-", "0.00822757941067304`"}]}], ",", 
      RowBox[{"Esg", "\[Rule]", "0"}], ",", 
      RowBox[{"rhog", "\[Rule]", "0"}], ",", 
      RowBox[{"phig", "\[Rule]", "0"}], ",", 
      RowBox[{"Esx", "\[Rule]", "7.83587415060296`*^-23"}], ",", 
      RowBox[{"vx", "\[Rule]", "0.979`"}], ",", 
      RowBox[{"phisxs", "\[Rule]", "0.00530944692661557`"}], ",", 
      RowBox[{"Esc", "\[Rule]", "0"}], ",", 
      RowBox[{"vc", "\[Rule]", "0"}], ",", 
      RowBox[{"phiscv", "\[Rule]", "0"}], ",", 
      RowBox[{"Esp", "\[Rule]", "0"}], ",", 
      RowBox[{"vp", "\[Rule]", "0"}], ",", 
      RowBox[{"vpp", "\[Rule]", "0"}], ",", 
      RowBox[{"vppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phispw", "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.00107967475744456`"}], 
      ",", 
      RowBox[{
       RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "7.44835878922388`"}], 
      ",", 
      RowBox[{
       RowBox[{"rhodp", "[", "1", "]"}], "\[Rule]", "0.0347877157464962`"}], 
      ",", 
      RowBox[{
       RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", 
       RowBox[{"-", "0.794376370651053`"}]}], ",", 
      RowBox[{
       RowBox[{"phids", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidxc", "[", "1", "]"}], "\[Rule]", "1.`*^-8"}], ",", 
      RowBox[{
       RowBox[{"phidpp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidsp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"xid", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidp", "[", "1", "]"}], "\[Rule]", "0.0375725143683261`"}], 
      ",", 
      RowBox[{
       RowBox[{"phidc", "[", "1", "]"}], "\[Rule]", "0"}]}], "}"}]}], ",", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Catalog`Private`numStocks", "\[Rule]", 
    "1"}], ",", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Catalog`Private`assignParam", "\[Rule]", 
    
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"taugd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{"rhoxpbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phixc", "\[Rule]", "0"}], ",", 
      RowBox[{"rhoppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"xip", "\[Rule]", "0"}], ",", 
      RowBox[{"phipc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipxp", "\[Rule]", "0"}], ",", 
      RowBox[{"mupbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarpb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxp", "\[Rule]", "0"}], ",", 
      RowBox[{"rhocx", "\[Rule]", "1"}], ",", 
      RowBox[{"phics", "\[Rule]", "0"}], ",", 
      RowBox[{"phicx", "\[Rule]", "1"}], ",", 
      RowBox[{"phicc", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpp", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpc", "\[Rule]", "0"}], ",", 
      RowBox[{"phic", "\[Rule]", "0"}], ",", 
      RowBox[{"phicsp", "\[Rule]", "0"}], ",", 
      RowBox[{"xic", "\[Rule]", "0"}], ",", 
      RowBox[{"Esg", "\[Rule]", "0"}], ",", 
      RowBox[{"rhog", "\[Rule]", "0"}], ",", 
      RowBox[{"phig", "\[Rule]", "0"}], ",", 
      RowBox[{"Esc", "\[Rule]", "0"}], ",", 
      RowBox[{"vc", "\[Rule]", "0"}], ",", 
      RowBox[{"phiscv", "\[Rule]", "0"}], ",", 
      RowBox[{"Esp", "\[Rule]", "0"}], ",", 
      RowBox[{"vp", "\[Rule]", "0"}], ",", 
      RowBox[{"vpp", "\[Rule]", "0"}], ",", 
      RowBox[{"vppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phispw", "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phids", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidsp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"xid", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidc", "[", "1", "]"}], "\[Rule]", "0"}]}], "}"}]}], ",", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Catalog`Private`assignParamStocks", 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
       "taugd", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phids", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidpp", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidpc", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidpd", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidcc", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidcd", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidsp", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "xid", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{
       "phidc", "[", "FernandoDuarte`LongRunRisk`Model`Catalog`Private`i_", 
        "]"}], "\[Rule]", "0"}]}], "}"}]}], ",", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Catalog`Private`exogenous", "\[Rule]", 
    RowBox[{"{", "\<\"ddeq\"\>", "}"}]}], ",", 
   RowBox[{
   "FernandoDuarte`LongRunRisk`Model`Catalog`Private`modelEq", "\[Rule]", 
    TagBox[
     DynamicModuleBox[{Typeset`var$$ = True}, 
      InterpretationBox[
       StyleBox[
        PaneSelectorBox[{False->GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], "\<\"Equations\"\>"}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}], True->
         GridBox[{
           {
            OpenerBox[Dynamic[Typeset`var$$],
             Appearance->Automatic,
             AutoAction->False,
             ContinuousAction->False,
             Enabled->Automatic], "\<\"Equations\"\>"},
           {"", 
            PaneBox[
             TagBox[GridBox[{
                {
                 RowBox[{
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`Model`Catalog`Private`dd", "[", 
                   
                   RowBox[{"t", ",", "1"}], "]"}], "\[Equal]", 
                  RowBox[{
                  "FernandoDuarte`LongRunRisk`Model`Catalog`Private`ddeq", 
                   "[", 
                   RowBox[{"t", ",", "1"}], "]"}]}]}
               },
               AutoDelete->False,
               FrameStyle->Directive[
                 Thickness[Tiny]],
               GridBoxAlignment->{"Columns" -> {{Left}}},
               GridBoxFrame->{"Columns" -> False, "Rows" -> {{True}}},
               GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{2}}}],
              "Grid"],
             ImageMargins->0]}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}]}, 
         Dynamic[Typeset`var$$],
         Alignment->Automatic,
         BaseStyle->{},
         BaselinePosition->Baseline,
         DefaultBaseStyle->"OpenerView",
         ImageMargins->0,
         ImageSize->Automatic],
        Deployed->False,
        StripOnInput->False],
       OpenerView[{"Equations", 
         Grid[{{
           FernandoDuarte`LongRunRisk`Model`Catalog`Private`dd[
             FernandoDuarte`LongRunRisk`Model`Catalog`t, 1] == 
            FernandoDuarte`LongRunRisk`Model`Catalog`Private`ddeq[
             FernandoDuarte`LongRunRisk`Model`Catalog`t, 1]}}, Alignment -> 
          Left, ItemSize -> {Automatic, 2}, Frame -> {False, All}, FrameStyle -> 
          Directive[
            Thickness[Tiny]]]}, True]],
      DynamicModuleValues:>{}],
     Setting[#, {0}]& ]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8895906864852123`*^9, 3.8895908008029737`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"fcc2d3ef-db89-4638-b012-dd1ee8b46f17"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nb", "=", 
    RowBox[{"CreateNotebook", "[", "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"EvaluationNotebook", "[", "]"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.889522972812972*^9, 3.889522979518414*^9}, {
  3.889523016760015*^9, 3.8895230284966097`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"2e02f01b-2ef2-4c87-b5e6-a211518fb3a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"model", "=", 
  RowBox[{"KeyTake", "[", 
   RowBox[{
    RowBox[{"models", "[", "BKYinf", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "name", ",", "shortname", ",", "bibRef", ",", "desc", ",", "stateVars", 
      ",", "parameters"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8895025195721483`*^9, 3.889502527536544*^9}, {
   3.889502617060133*^9, 3.889502649291317*^9}, 3.889503280421523*^9, {
   3.889519163988133*^9, 3.889519183097261*^9}, {3.8895192505430307`*^9, 
   3.8895192509007797`*^9}, 3.88951958275963*^9, 3.8895205898294373`*^9, {
   3.889521385566202*^9, 3.889521427739089*^9}, 3.88952148765103*^9, {
   3.889521717237623*^9, 3.8895217270730553`*^9}, 3.889522023410536*^9, 
   3.8895227971336184`*^9, {3.889523044083989*^9, 3.889523058102641*^9}, 
   3.889523175219767*^9, {3.8895233038151407`*^9, 3.889523311838176*^9}, 
   3.889523408669209*^9, 3.88952457766611*^9, 3.889526427757784*^9, 
   3.889578988920977*^9, 3.889584556944222*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"3c794a3b-9a6d-425d-94c5-c596fb517e9a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
   "name", "\[Rule]", "\<\"Similar to Bansal-Kiku-Yaron but with \
inflation\"\>"}], ",", 
   RowBox[{"shortname", "\[Rule]", "\<\"BKYinf\"\>"}], ",", 
   RowBox[{"bibRef", "\[Rule]", "\<\"None\"\>"}], ",", 
   RowBox[{
   "desc", "\[Rule]", "\<\"Inflation is persistent and predicts consumption \
growth (without time-variation, without NRC)\"\>"}], ",", 
   RowBox[{"stateVars", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"sx", "[", "t", "]"}], ",", 
      RowBox[{
       RowBox[{"-", "mup"}], "+", 
       RowBox[{"pi", "[", "t", "]"}]}]}], "}"}]}], ",", 
   RowBox[{"parameters", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"delta", "\[Rule]", "0.998`"}], ",", 
      RowBox[{"psi", "\[Rule]", "0.108086466108274`"}], ",", 
      RowBox[{"gamma", "\[Rule]", 
       RowBox[{"1", "-", "theta", "+", 
        FractionBox["theta", "psi"]}]}], ",", 
      RowBox[{"theta", "\[Rule]", 
       RowBox[{"-", "0.0319364382914013`"}]}], ",", 
      RowBox[{
       RowBox[{"taugd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{"rhox", "\[Rule]", "0.95`"}], ",", 
      RowBox[{"rhoxpbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phix", "\[Rule]", 
       RowBox[{"-", "0.0100455931054077`"}]}], ",", 
      RowBox[{"phixc", "\[Rule]", "0"}], ",", 
      RowBox[{"mup", "\[Rule]", "0.0028955730909963`"}], ",", 
      RowBox[{"rhoppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhop", "\[Rule]", "0.985`"}], ",", 
      RowBox[{"phip", "\[Rule]", 
       RowBox[{"-", "0.00043247571691955`"}]}], ",", 
      RowBox[{"xip", "\[Rule]", "0"}], ",", 
      RowBox[{"phipc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipxp", "\[Rule]", "0"}], ",", 
      RowBox[{"mupbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbar", "\[Rule]", "0"}], ",", 
      RowBox[{"rhopbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarc", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarcx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarx", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarp", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarpb", "\[Rule]", "0"}], ",", 
      RowBox[{"phipbarxp", "\[Rule]", "0"}], ",", 
      RowBox[{"muc", "\[Rule]", "0.00157399080415904`"}], ",", 
      RowBox[{"rhocx", "\[Rule]", "1"}], ",", 
      RowBox[{"rhocp", "\[Rule]", 
       RowBox[{"-", "0.292835401816459`"}]}], ",", 
      RowBox[{"phics", "\[Rule]", "0"}], ",", 
      RowBox[{"phicx", "\[Rule]", "1"}], ",", 
      RowBox[{"phicc", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpp", "\[Rule]", "0"}], ",", 
      RowBox[{"phicpc", "\[Rule]", "0"}], ",", 
      RowBox[{"phic", "\[Rule]", "0"}], ",", 
      RowBox[{"phicsp", "\[Rule]", "0"}], ",", 
      RowBox[{"xic", "\[Rule]", "0"}], ",", 
      RowBox[{"phicp", "\[Rule]", 
       RowBox[{"-", "0.00822757941067304`"}]}], ",", 
      RowBox[{"Esg", "\[Rule]", "0"}], ",", 
      RowBox[{"rhog", "\[Rule]", "0"}], ",", 
      RowBox[{"phig", "\[Rule]", "0"}], ",", 
      RowBox[{"Esx", "\[Rule]", "7.83587415060296`*^-23"}], ",", 
      RowBox[{"vx", "\[Rule]", "0.979`"}], ",", 
      RowBox[{"phisxs", "\[Rule]", "0.00530944692661557`"}], ",", 
      RowBox[{"Esc", "\[Rule]", "0"}], ",", 
      RowBox[{"vc", "\[Rule]", "0"}], ",", 
      RowBox[{"phiscv", "\[Rule]", "0"}], ",", 
      RowBox[{"Esp", "\[Rule]", "0"}], ",", 
      RowBox[{"vp", "\[Rule]", "0"}], ",", 
      RowBox[{"vpp", "\[Rule]", "0"}], ",", 
      RowBox[{"vppbar", "\[Rule]", "0"}], ",", 
      RowBox[{"phispw", "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"mud", "[", "1", "]"}], "\[Rule]", "0.00107967475744456`"}], 
      ",", 
      RowBox[{
       RowBox[{"rhodx", "[", "1", "]"}], "\[Rule]", "7.44835878922388`"}], 
      ",", 
      RowBox[{
       RowBox[{"rhodp", "[", "1", "]"}], "\[Rule]", "0.0347877157464962`"}], 
      ",", 
      RowBox[{
       RowBox[{"phidxd", "[", "1", "]"}], "\[Rule]", 
       RowBox[{"-", "0.794376370651053`"}]}], ",", 
      RowBox[{
       RowBox[{"phids", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidxc", "[", "1", "]"}], "\[Rule]", "1.`*^-8"}], ",", 
      RowBox[{
       RowBox[{"phidpp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidpd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcc", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidcd", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidsp", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"xid", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
      RowBox[{
       RowBox[{"phidp", "[", "1", "]"}], "\[Rule]", "0.0375725143683261`"}], 
      ",", 
      RowBox[{
       RowBox[{"phidc", "[", "1", "]"}], "\[Rule]", "0"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.889590686755361*^9, 3.889590801015822*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"c61fa1d9-cc20-42f6-9301-84738fd2bc71"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formatted1", "=", 
   RowBox[{"modelFormattingTemplate", "[", "model", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookWrite", "[", 
   RowBox[{"nb", ",", "formatted1"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8895025195721483`*^9, 3.889502527536544*^9}, {
   3.889502617060133*^9, 3.889502649291317*^9}, 3.889503280421523*^9, {
   3.889519163988133*^9, 3.889519183097261*^9}, {3.8895192505430307`*^9, 
   3.8895192509007797`*^9}, 3.88951958275963*^9, 3.8895205898294373`*^9, {
   3.889521385566202*^9, 3.889521427739089*^9}, 3.88952148765103*^9, {
   3.889521717237623*^9, 3.8895217270730553`*^9}, 3.889522023410536*^9, 
   3.8895227971336184`*^9, {3.889523044083989*^9, 3.889523058102641*^9}, 
   3.889523175219767*^9, {3.8895233038151407`*^9, 3.889523311838176*^9}, {
   3.889523881245844*^9, 3.88952388558988*^9}, 3.889524024489562*^9, 
   3.8895243434002113`*^9, 3.88952648360085*^9, {3.889526789378293*^9, 
   3.8895268071380253`*^9}, 3.88952686892837*^9, 3.889526918208033*^9, 
   3.889538657672538*^9, 3.8895719178588333`*^9, 3.889572602552044*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"b8f5e17a-4f31-4771-a4cf-44606b0a2a63"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formatted2", "=", 
   RowBox[{"modelFormattingTemplate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"model", "[", "name", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"model", "[", "shortname", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"model", "[", "bibRef", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"model", "[", "desc", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"model", "[", "stateVars", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"model", "[", "parameters", "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookWrite", "[", 
   RowBox[{"nb", ",", "formatted2"}], "]"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8895025195721483`*^9, 3.889502527536544*^9}, {
   3.889502617060133*^9, 3.889502649291317*^9}, 3.889503280421523*^9, {
   3.889519163988133*^9, 3.889519183097261*^9}, {3.8895192505430307`*^9, 
   3.8895192509007797`*^9}, 3.88951958275963*^9, 3.8895205898294373`*^9, {
   3.889521385566202*^9, 3.889521427739089*^9}, {3.88952148765103*^9, 
   3.8895215139093037`*^9}, 3.889522019990877*^9, {3.889523044085559*^9, 
   3.889523058103464*^9}, 3.8895774171431837`*^9, {3.889579131982417*^9, 
   3.889579132110105*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"5a51138a-0b7f-4bef-98cf-75a1aa01c60a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"formatted3", "=", 
   RowBox[{"modelFormattingTemplate", "[", 
    RowBox[{"models", "[", "BY", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NotebookWrite", "[", 
   RowBox[{"nb", ",", "formatted3"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8895219035756483`*^9, 3.889521929511641*^9}, {
  3.889521990970478*^9, 3.889522017791257*^9}, {3.889523044086913*^9, 
  3.889523058104178*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6ee911ae-223b-4dae-9a9f-3d876b33d5e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NotebookWrite", "[", 
   RowBox[{"nb", ",", 
    RowBox[{"modelFormattingTemplate", "[", 
     RowBox[{"models", "[", "BY", "]"}], "]"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.8895219415324383`*^9, 3.889521968759942*^9}, 
   3.889522015570706*^9, {3.889523044088252*^9, 3.8895230581049*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"229467f5-894c-4b77-a951-7231c64016e0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nb2", "=", 
   RowBox[{"CreateNotebook", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NotebookWrite", "[", 
     RowBox[{"nb2", ",", 
      RowBox[{"modelFormattingTemplate", "[", 
       RowBox[{"models", "[", "#", "]"}], "]"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Keys", "[", "models", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.889579201004313*^9, 3.889579205528034*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"6a05784e-8521-485c-b9fe-dff9482cd113"],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.8895791922306013`*^9, 
  3.889579196409403*^9}},ExpressionUUID->"5216b0c6-0b30-4607-beca-\
83054aa122f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{
   "stringFormattingTemplate", "[", 
    "\"\<Long-run risk model with stochastic volatility in the original 2004 \
paper by Bansal and Yaron\>\"", "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "*)"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.889497154816502*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"6ac224c0-9cb0-40f1-931c-960ca520e8a1"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "stringFormattingTemplate @ \"Long-run risk model with stochastic \
volatility in the original 2004 paper by Bansal and Yaron\"", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = \
$CellContext`stringFormattingTemplate[
  "Long-run risk model with stochastic volatility in the original 2004 paper \
by Bansal and Yaron"], 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "stringFormattingTemplate @ \"Long-run risk model with stochastic \
volatility in the original 2004 paper by Bansal and Yaron\"", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> $CellContext`stringFormattingTemplate[
    "Long-run risk model with stochastic volatility in the original 2004 \
paper by Bansal and Yaron"], "Success" -> True, "FailureType" -> None, 
   "OutputLog" -> {}, "Messages" -> {}, "MessagesText" -> {}, 
   "MessagesExpressions" -> {}, "Timing" -> 0., "AbsoluteTiming" -> 0., 
   "InputString" :> ToString[
     Unevaluated[
      $CellContext`stringFormattingTemplate[
      "Long-run risk model with stochastic volatility in the original 2004 \
paper by Bansal and Yaron"]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"stringFormattingTemplate @ \\\"Long-run risk model with stochastic \
volatility in the original 2004 paper by Bansal and Yaron\\\"\""},
       "RowDefault"]},
     {
      TemplateBox[{
       "\"Result: \"", 
        "\"stringFormattingTemplate @ \\\"Long-run risk model with stochastic \
volatility in the original 2004 paper by Bansal and Yaron\\\"\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print["Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.8895906878341703`*^9, 3.889590802018249*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"4087d450-f6bb-4ad3-a575-c1cb108d463b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<WriteUnitTest\>\"", "]"}], "[", 
  RowBox[{"testFileName", ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"localPi", "=", "3.14"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"numberFormattingTemplate", "[", "3.14", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"3.14", ",", 
         RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"3.14", ",", 
         RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", "localPi", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"localPi", ",", 
         RowBox[{"NumberMarks", "->", "True"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"localPi", ",", 
         RowBox[{"NumberMarks", "->", "False"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", "\[CapitalPi]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"\[CapitalPi]", ",", 
         RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ASCII\>\""}]}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"numberFormattingTemplate", "[", 
        RowBox[{"N", "[", "Pi", "]"}], "]"}]}], "\[IndentingNewLine]", 
      "}"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{",", 
    RowBox[{"\"\<ConfirmResults\>\"", "\[Rule]", "False"}]}], "*)"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.889497238316308*^9, 3.8894972782111683`*^9}, {
  3.889497378794739*^9, 3.889497484690709*^9}, {3.8894976245389767`*^9, 
  3.889497629059166*^9}, {3.889498203547433*^9, 3.8894984283506927`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"2d666041-996e-40c0-bfda-774a1c5d1728"],

Cell[BoxData[
 DynamicModuleBox[{
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$ = 
  "With[{localPi = 3.14},\n\t\t{\n\t\t\tnumberFormattingTemplate @ 3.14,\n\t\t\
\tnumberFormattingTemplate[3.14, NumberMarks -> True],\n\t\t\t\
numberFormattingTemplate[3.14, NumberMarks -> False],\n\t\t\t\
numberFormattingTemplate @ localPi,\n\t\t\tnumberFormattingTemplate[localPi, \
NumberMarks -> True],\n\t\t\tnumberFormattingTemplate[localPi, NumberMarks -> \
False],\n\t\t\tnumberFormattingTemplate @ \\[CapitalPi],\n\t\t\t\
numberFormattingTemplate[\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\
\tnumberFormattingTemplate @ N @ Pi\n\t\t}\n\t]", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`output$$ = {
   $CellContext`numberFormattingTemplate[3.14], 
   $CellContext`numberFormattingTemplate[3.14, NumberMarks -> True], 
   $CellContext`numberFormattingTemplate[3.14, NumberMarks -> False], 
   $CellContext`numberFormattingTemplate[3.14], 
   $CellContext`numberFormattingTemplate[3.14, NumberMarks -> True], 
   $CellContext`numberFormattingTemplate[3.14, NumberMarks -> False], 
   $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi]], 
   $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi], 
    CharacterEncoding -> "ASCII"], 
   $CellContext`numberFormattingTemplate[3.141592653589793]}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
  "{\n\t\tnumberFormattingTemplate @ 3.14,\n\t\t\
numberFormattingTemplate[3.14, NumberMarks -> True],\n\t\t\
numberFormattingTemplate[3.14, NumberMarks -> False],\n\t\t\
numberFormattingTemplate @ 3.14,\n\t\tnumberFormattingTemplate[3.14, \
NumberMarks -> True],\n\t\tnumberFormattingTemplate[3.14, NumberMarks -> \
False],\n\t\tnumberFormattingTemplate @ \\[CapitalPi],\n\t\t\
numberFormattingTemplate[\\[CapitalPi], CharacterEncoding -> \"ASCII\"],\n\t\t\
numberFormattingTemplate @ 3.141592653589793\n\t}", 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$ = True, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`evaluationData$$ = <|
  "Result" :> {
     $CellContext`numberFormattingTemplate[3.14], 
     $CellContext`numberFormattingTemplate[3.14, NumberMarks -> True], 
     $CellContext`numberFormattingTemplate[3.14, NumberMarks -> False], 
     $CellContext`numberFormattingTemplate[3.14], 
     $CellContext`numberFormattingTemplate[3.14, NumberMarks -> True], 
     $CellContext`numberFormattingTemplate[3.14, NumberMarks -> False], 
     $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi]], 
     $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi], 
      CharacterEncoding -> "ASCII"], 
     $CellContext`numberFormattingTemplate[3.141592653589793]}, "Success" -> 
   True, "FailureType" -> None, "OutputLog" -> {}, "Messages" -> {}, 
   "MessagesText" -> {}, "MessagesExpressions" -> {}, "Timing" -> 0., 
   "AbsoluteTiming" -> 0., "InputString" :> ToString[
     Unevaluated[
      With[{$CellContext`localPi = 3.14}, {
        $CellContext`numberFormattingTemplate[3.14], 
        $CellContext`numberFormattingTemplate[3.14, NumberMarks -> True], 
        $CellContext`numberFormattingTemplate[3.14, NumberMarks -> False], 
        $CellContext`numberFormattingTemplate[$CellContext`localPi], 
        $CellContext`numberFormattingTemplate[$CellContext`localPi, 
         NumberMarks -> True], 
        $CellContext`numberFormattingTemplate[$CellContext`localPi, 
         NumberMarks -> False], 
        $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi]], 
        $CellContext`numberFormattingTemplate[$CellContext`\[CapitalPi], 
         CharacterEncoding -> "ASCII"], 
        $CellContext`numberFormattingTemplate[
         N[Pi]]}]], InputForm]|>, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messages$$ = {}, 
  FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`messageString$$ = "{}",
   FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$}, 
  TagBox[GridBox[{
     {
      TemplateBox[{
       "\"Input: \"", 
        "\"With[{localPi = \
3.14},\\n\\t\\t{\\n\\t\\t\\tnumberFormattingTemplate @ \
3.14,\\n\\t\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> \
True],\\n\\t\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> False],\\n\\t\
\\t\\tnumberFormattingTemplate @ \
localPi,\\n\\t\\t\\tnumberFormattingTemplate[localPi, NumberMarks -> \
True],\\n\\t\\t\\tnumberFormattingTemplate[localPi, NumberMarks -> False],\\n\
\\t\\t\\tnumberFormattingTemplate @ \
\\\\[CapitalPi],\\n\\t\\t\\tnumberFormattingTemplate[\\\\[CapitalPi], \
CharacterEncoding -> \\\"ASCII\\\"],\\n\\t\\t\\tnumberFormattingTemplate @ N \
@ Pi\\n\\t\\t}\\n\\t]\""},
       "RowDefault"]},
     {
      TemplateBox[{
       "\"Result: \"", 
        "\"{\\n\\t\\tnumberFormattingTemplate @ \
3.14,\\n\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> \
True],\\n\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> \
False],\\n\\t\\tnumberFormattingTemplate @ \
3.14,\\n\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> \
True],\\n\\t\\tnumberFormattingTemplate[3.14, NumberMarks -> \
False],\\n\\t\\tnumberFormattingTemplate @ \
\\\\[CapitalPi],\\n\\t\\tnumberFormattingTemplate[\\\\[CapitalPi], \
CharacterEncoding -> \\\"ASCII\\\"],\\n\\t\\tnumberFormattingTemplate @ \
3.141592653589793\\n\\t}\""},
       "RowDefault"]},
     {
      TemplateBox[{"\"Messages: \"", "\"{}\""},
       "RowDefault"]},
     {
      TemplateBox[{"  ", "\"  \"", 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"Yes\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["Yes"]]], 
         ButtonFunction :> (
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]\
; Null), "BaseStyle" -> RGBColor[0, 
           Rational[2, 3], 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"], 
        ButtonBox[
         InterpretationBox[
          Cell[
           BoxData[
            FormBox[
             StyleBox["\"No\"", StripOnInput -> False], TextForm]], 
           "InlineText"], 
          Text[
           Style["No"]]], 
         ButtonFunction :> (
          Print["Aborting without writing to ", 
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
            ButtonNotebook[], All, ButtonCell]; NotebookDelete[
            ButtonNotebook[]]; Null), "BaseStyle" -> RGBColor[
           Rational[2, 3], 0, 0], Appearance -> Automatic, Evaluator -> 
         Automatic, Method -> "Preemptive"]},
       "RowWithSeparators"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{{
    DownValues[
      FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$] = {
      HoldPattern[
         FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`writeToFile$$[]]\
 :> (If[FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`newFile$$, 
          Export[
          "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "BeginTestSection[\"" <> 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"] <> 
           "\"]\n\n\nEndTestSection[]\n", "Text"]]; 
        Block[{FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FileBaseName[
            "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]}, 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id = 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> "_" <> 
            StringJoin[
              Map[If[# > 9, "", "0"] <> ToString[#]& , 
               Part[
                Date[], 
                Span[1, 3]]]] <> "-" <> ToUpperCase[
              IntegerString[
               RandomInteger[{0, 2176782336}], 36, 6]] <> ""; 
          Print[
           "Adding test: ", 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id]; 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$$ = 
           "VerificationTest[\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`inputString$$\
 <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\n\t,\n\t" <> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
messageString$$ <> ("\n\t,\n\tTestID->\"" <> 
             FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`id <> 
             "\"\n]\n\n"); Null]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = 
         Import["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", "Text"]; 
        FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ = If[
           StringContainsQ[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]"], 
           StringReplace[
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
            "EndTestSection[]" :> 
            FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`outputString$\
$ <> "\nEndTestSection[]\n"], 
           FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$ <> 
           "\n" <> FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`\
outputString$$]; 
        Export["/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt", 
          FunctionRepository`$87c594a82e7747e7937a43b61bd90d72`fileText$$, 
          "Text"]; Print[
         "/Users/fernandoduarte/Dropbox \
(Personal)/MyPackages/LongRunRisk/Tests/Catalog.wlt"]; SelectionMove[
          ButtonNotebook[], All, ButtonCell]; NotebookDelete[
          ButtonNotebook[]]; Null)}}}]], "Output",
 CellChangeTimes->{3.889590687880478*^9, 3.889590802066452*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"d53e4281-a085-402d-a600-24c46b8a1a3a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1062},
WindowMargins->{{-1920, Automatic}, {Automatic, 0}},
WindowStatusArea->"",
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"70b4b93a-a1f6-40e6-903f-48381b8b25a9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 982, 23, 64, "Input",ExpressionUUID->"946b8633-fd90-4e81-9c93-3393a5b979a7"],
Cell[1543, 45, 521, 10, 64, "Input",ExpressionUUID->"51d6328f-d8cd-48b3-bef0-42a0f01b0d77"],
Cell[2067, 57, 401, 8, 64, "Input",ExpressionUUID->"8ca679c3-2d1e-4627-911a-271e99f7202f"],
Cell[CellGroupData[{
Cell[2493, 69, 210, 3, 37, "Input",ExpressionUUID->"260a597d-edf2-4bfb-974c-7ffbfab67b25"],
Cell[2706, 74, 13076, 315, 641, "Output",ExpressionUUID->"fcc2d3ef-db89-4638-b012-dd1ee8b46f17"]
}, Open  ]],
Cell[15797, 392, 386, 9, 37, "Input",ExpressionUUID->"2e02f01b-2ef2-4c87-b5e6-a211518fb3a2"],
Cell[CellGroupData[{
Cell[16208, 405, 1068, 19, 37, "Input",ExpressionUUID->"3c794a3b-9a6d-425d-94c5-c596fb517e9a"],
Cell[17279, 426, 5313, 122, 275, "Output",ExpressionUUID->"c61fa1d9-cc20-42f6-9301-84738fd2bc71"]
}, Open  ]],
Cell[22607, 551, 1202, 20, 64, "Input",ExpressionUUID->"b8f5e17a-4f31-4771-a4cf-44606b0a2a63"],
Cell[23812, 573, 1366, 24, 272, "Input",ExpressionUUID->"5a51138a-0b7f-4bef-98cf-75a1aa01c60a"],
Cell[25181, 599, 529, 11, 64, "Input",ExpressionUUID->"6ee911ae-223b-4dae-9a9f-3d876b33d5e3"],
Cell[25713, 612, 415, 8, 37, "Input",ExpressionUUID->"229467f5-894c-4b77-a951-7231c64016e0"],
Cell[26131, 622, 523, 13, 64, "Input",ExpressionUUID->"6a05784e-8521-485c-b9fe-dff9482cd113"],
Cell[CellGroupData[{
Cell[26679, 639, 155, 3, 67, "Subsection",ExpressionUUID->"5216b0c6-0b30-4607-beca-83054aa122f9"],
Cell[CellGroupData[{
Cell[26859, 646, 589, 13, 90, "Input",ExpressionUUID->"6ac224c0-9cb0-40f1-931c-960ca520e8a1"],
Cell[27451, 661, 6905, 145, 127, "Output",ExpressionUUID->"4087d450-f6bb-4ad3-a575-c1cb108d463b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34393, 811, 2164, 46, 402, "Input",ExpressionUUID->"2d666041-996e-40c0-bfda-774a1c5d1728"],
Cell[36560, 859, 10223, 201, 709, "Output",ExpressionUUID->"d53e4281-a085-402d-a600-24c46b8a1a3a"]
}, Open  ]]
}, Open  ]]
}
]
*)

